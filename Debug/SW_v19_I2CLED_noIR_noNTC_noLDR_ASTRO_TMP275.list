
SW_v19_I2CLED_noIR_noNTC_noLDR_ASTRO_TMP275.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e67c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  0801e810  0801e810  0002e810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f478  0801f478  00030398  2**0
                  CONTENTS
  4 .ARM          00000008  0801f478  0801f478  0002f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f480  0801f480  00030398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f480  0801f480  0002f480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f484  0801f484  0002f484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0801f488  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004018  20000398  0801f820  00030398  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  200043b0  0801f820  000343b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a646  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000768d  00000000  00000000  0006aa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002280  00000000  00000000  000720a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  00074320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d88a  00000000  00000000  00076248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000290b3  00000000  00000000  000a3ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e37ce  00000000  00000000  000ccb85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b0353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b8c  00000000  00000000  001b03d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000398 	.word	0x20000398
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e7f4 	.word	0x0801e7f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000039c 	.word	0x2000039c
 80001cc:	0801e7f4 	.word	0x0801e7f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	; (800105c <MX_ADC1_Init+0xd4>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fc8:	4a25      	ldr	r2, [pc, #148]	; (8001060 <MX_ADC1_Init+0xd8>)
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe6:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_ADC1_Init+0xd0>)
 8000fe8:	f00a fe32 	bl	800bc50 <HAL_ADC_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f008 fec1 	bl	8009d78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ffe:	2307      	movs	r3, #7
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_ADC1_Init+0xd0>)
 8001008:	f00a ff6c 	bl	800bee4 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001012:	f008 feb1 	bl	8009d78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001016:	2303      	movs	r3, #3
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0xd0>)
 8001024:	f00a ff5e 	bl	800bee4 <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102e:	f008 fea3 	bl	8009d78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001032:	2310      	movs	r3, #16
 8001034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001036:	2303      	movs	r3, #3
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_ADC1_Init+0xd0>)
 8001040:	f00a ff50 	bl	800bee4 <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800104a:	f008 fe95 	bl	8009d78 <Error_Handler>
  }

}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000063c 	.word	0x2000063c
 800105c:	40012000 	.word	0x40012000
 8001060:	0f000001 	.word	0x0f000001

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_ADC_MspInit+0xdc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d157      	bne.n	8001136 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a2d      	ldr	r2, [pc, #180]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_ADC_MspInit+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|ADC123_IN3_Pin;
 80010be:	2309      	movs	r3, #9
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	2303      	movs	r3, #3
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <HAL_ADC_MspInit+0xe4>)
 80010d2:	f00c f9a9 	bl	800d428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_ADC_MspInit+0xec>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_ADC_MspInit+0xe8>)
 80010f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001104:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800111c:	f00b fac4 	bl	800c6a8 <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001126:	f008 fe27 	bl	8009d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_ADC_MspInit+0xe8>)
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_ADC_MspInit+0xe8>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	; 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40012000 	.word	0x40012000
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	20000684 	.word	0x20000684
 8001150:	40026410 	.word	0x40026410

08001154 <Astro_daylighsaving>:
 */
#include "astro.h"
#include "rtc.h"

uint8_t Astro_daylighsaving(Date_t date)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t r=0;
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
	if(date.month>RTC_MONTH_MARCH && date.month<RTC_MONTH_SEPTEMBER) r=1;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b03      	cmp	r3, #3
 8001168:	dd05      	ble.n	8001176 <Astro_daylighsaving+0x22>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b08      	cmp	r3, #8
 800116e:	dc02      	bgt.n	8001176 <Astro_daylighsaving+0x22>
 8001170:	2301      	movs	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	e010      	b.n	8001198 <Astro_daylighsaving+0x44>
	else if(date.month==RTC_MONTH_MARCH && date.day>=22)	r=1;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d105      	bne.n	8001188 <Astro_daylighsaving+0x34>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b15      	cmp	r3, #21
 8001180:	dd02      	ble.n	8001188 <Astro_daylighsaving+0x34>
 8001182:	2301      	movs	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
 8001186:	e007      	b.n	8001198 <Astro_daylighsaving+0x44>
	else if(date.month==RTC_MONTH_SEPTEMBER && date.day<=22)	r=1;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b09      	cmp	r3, #9
 800118c:	d104      	bne.n	8001198 <Astro_daylighsaving+0x44>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b16      	cmp	r3, #22
 8001192:	dc01      	bgt.n	8001198 <Astro_daylighsaving+0x44>
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
	return r;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
}
 800119a:	4618      	mov	r0, r3
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <Astro_CheckDayNight>:
//////////////////////////////////////////
uint8_t Astro_CheckDayNight(RTC_TimeTypeDef cur_time, Time_t sunrise_t,Time_t sunset_t)
{
 80011a6:	b084      	sub	sp, #16
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	f107 0c10 	add.w	ip, r7, #16
 80011b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t r=ASTRO_NIGHT;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
	if(cur_time.Hours>sunrise_t.hr && cur_time.Hours<sunset_t.hr) r=ASTRO_DAY;
 80011ba:	7c3b      	ldrb	r3, [r7, #16]
 80011bc:	461a      	mov	r2, r3
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dd07      	ble.n	80011d4 <Astro_CheckDayNight+0x2e>
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	461a      	mov	r2, r3
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	429a      	cmp	r2, r3
 80011cc:	da02      	bge.n	80011d4 <Astro_CheckDayNight+0x2e>
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e018      	b.n	8001206 <Astro_CheckDayNight+0x60>
	else if(cur_time.Hours==sunrise_t.hr && cur_time.Minutes>=sunrise_t.min) r=ASTRO_DAY;
 80011d4:	7c3b      	ldrb	r3, [r7, #16]
 80011d6:	461a      	mov	r2, r3
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	429a      	cmp	r2, r3
 80011dc:	d107      	bne.n	80011ee <Astro_CheckDayNight+0x48>
 80011de:	7c7b      	ldrb	r3, [r7, #17]
 80011e0:	461a      	mov	r2, r3
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	429a      	cmp	r2, r3
 80011e6:	db02      	blt.n	80011ee <Astro_CheckDayNight+0x48>
 80011e8:	2300      	movs	r3, #0
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	e00b      	b.n	8001206 <Astro_CheckDayNight+0x60>
	else if(cur_time.Hours==sunset_t.hr && cur_time.Minutes<=sunset_t.min) r=ASTRO_DAY;
 80011ee:	7c3b      	ldrb	r3, [r7, #16]
 80011f0:	461a      	mov	r2, r3
 80011f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d106      	bne.n	8001206 <Astro_CheckDayNight+0x60>
 80011f8:	7c7b      	ldrb	r3, [r7, #17]
 80011fa:	461a      	mov	r2, r3
 80011fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fe:	429a      	cmp	r2, r3
 8001200:	dc01      	bgt.n	8001206 <Astro_CheckDayNight+0x60>
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]
	return r;
 8001206:	79fb      	ldrb	r3, [r7, #7]
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	b004      	add	sp, #16
 8001214:	4770      	bx	lr
	...

08001218 <wrap>:
//////////////////////////////////////////
double wrap(double x)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0b00 	vstr	d0, [r7]
	while(x>360.0) x=x-360.0;
 8001222:	e00a      	b.n	800123a <wrap+0x22>
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <wrap+0x4c>)
 800122a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800122e:	f7ff f82b 	bl	8000288 <__aeabi_dsub>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	e9c7 3400 	strd	r3, r4, [r7]
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <wrap+0x4c>)
 8001240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001244:	f7ff fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ea      	bne.n	8001224 <wrap+0xc>
	return x;
 800124e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001252:	ec44 3b17 	vmov	d7, r3, r4
}
 8001256:	eeb0 0a47 	vmov.f32	s0, s14
 800125a:	eef0 0a67 	vmov.f32	s1, s15
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	40768000 	.word	0x40768000

08001268 <seconds2Time_t>:
Time_t seconds2Time_t(int seconds)
{
 8001268:	b490      	push	{r4, r7}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	Time_t cur_time;
	cur_time.hr=(int)seconds/3600;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <seconds2Time_t+0x6c>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	441a      	add	r2, r3
 800127c:	12d2      	asrs	r2, r2, #11
 800127e:	17db      	asrs	r3, r3, #31
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	60fb      	str	r3, [r7, #12]
	cur_time.min=((int)seconds-(cur_time.hr*3600))/60;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <seconds2Time_t+0x70>)
 8001288:	fb02 f203 	mul.w	r2, r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <seconds2Time_t+0x74>)
 8001292:	fb82 1203 	smull	r1, r2, r2, r3
 8001296:	441a      	add	r2, r3
 8001298:	1152      	asrs	r2, r2, #5
 800129a:	17db      	asrs	r3, r3, #31
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	613b      	str	r3, [r7, #16]
	cur_time.sec=(int)seconds-cur_time.hr*3600-cur_time.min*60;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <seconds2Time_t+0x70>)
 80012a4:	fb02 f203 	mul.w	r2, r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	18d1      	adds	r1, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4613      	mov	r3, r2
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	617b      	str	r3, [r7, #20]
	return cur_time;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	461c      	mov	r4, r3
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc90      	pop	{r4, r7}
 80012d2:	4770      	bx	lr
 80012d4:	91a2b3c5 	.word	0x91a2b3c5
 80012d8:	fffff1f0 	.word	0xfffff1f0
 80012dc:	88888889 	.word	0x88888889

080012e0 <leap>:
unsigned char  gDaysInMonth[12]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,31};
unsigned char  gDaysInMonthLeap[12]={31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,31};
uint8_t leap(int year)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return (year %4 == 0 && ((year %100 != 0) || (year % 400 == 0))) ? 1 : 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11c      	bne.n	800132c <leap+0x4c>
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <leap+0x5c>)
 80012f6:	fb83 1302 	smull	r1, r3, r3, r2
 80012fa:	1159      	asrs	r1, r3, #5
 80012fc:	17d3      	asrs	r3, r2, #31
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	2164      	movs	r1, #100	; 0x64
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10d      	bne.n	8001328 <leap+0x48>
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <leap+0x5c>)
 8001310:	fb83 1302 	smull	r1, r3, r3, r2
 8001314:	11d9      	asrs	r1, r3, #7
 8001316:	17d3      	asrs	r3, r2, #31
 8001318:	1acb      	subs	r3, r1, r3
 800131a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <leap+0x4c>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <leap+0x4e>
 800132c:	2300      	movs	r3, #0
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	51eb851f 	.word	0x51eb851f

08001340 <datenum>:
///////////////////////////////////////////////////////////////////////////////////////////
double datenum(Date_t date)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b08d      	sub	sp, #52	; 0x34
 8001344:	af00      	add	r7, sp, #0
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int yg=date.year;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	61fb      	str	r3, [r7, #28]
	int mg=date.month;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	61bb      	str	r3, [r7, #24]
	int dg=date.day;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	617b      	str	r3, [r7, #20]
	double days=0.0;
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	f04f 0400 	mov.w	r4, #0
 8001360:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	for( int i=0;i<yg;i++)
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	e01f      	b.n	80013aa <datenum+0x6a>
		if(leap(i))
 800136a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800136c:	f7ff ffb8 	bl	80012e0 <leap>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <datenum+0x4e>
			days += (double)366;
 8001376:	a33a      	add	r3, pc, #232	; (adr r3, 8001460 <datenum+0x120>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001380:	f7fe ff84 	bl	800028c <__adddf3>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800138c:	e00a      	b.n	80013a4 <datenum+0x64>
		else
			days += (double)365;
 800138e:	a336      	add	r3, pc, #216	; (adr r3, 8001468 <datenum+0x128>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001398:	f7fe ff78 	bl	800028c <__adddf3>
 800139c:	4603      	mov	r3, r0
 800139e:	460c      	mov	r4, r1
 80013a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	for( int i=0;i<yg;i++)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3301      	adds	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbdb      	blt.n	800136a <datenum+0x2a>
 	 for(int i=0;i<(mg-1);i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	e02f      	b.n	8001418 <datenum+0xd8>
		if(leap(yg))
 80013b8:	69f8      	ldr	r0, [r7, #28]
 80013ba:	f7ff ff91 	bl	80012e0 <leap>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <datenum+0xac>
			days+=(double)gDaysInMonthLeap[i];
 80013c4:	4a24      	ldr	r2, [pc, #144]	; (8001458 <datenum+0x118>)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f899 	bl	8000504 <__aeabi_ui2d>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	461a      	mov	r2, r3
 80013d8:	4623      	mov	r3, r4
 80013da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013de:	f7fe ff55 	bl	800028c <__adddf3>
 80013e2:	4603      	mov	r3, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80013ea:	e012      	b.n	8001412 <datenum+0xd2>
		else
			days+=(double)gDaysInMonth[i];
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <datenum+0x11c>)
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f885 	bl	8000504 <__aeabi_ui2d>
 80013fa:	4603      	mov	r3, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	461a      	mov	r2, r3
 8001400:	4623      	mov	r3, r4
 8001402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001406:	f7fe ff41 	bl	800028c <__adddf3>
 800140a:	4603      	mov	r3, r0
 800140c:	460c      	mov	r4, r1
 800140e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 	 for(int i=0;i<(mg-1);i++)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	3301      	adds	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	3b01      	subs	r3, #1
 800141c:	6a3a      	ldr	r2, [r7, #32]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbca      	blt.n	80013b8 <datenum+0x78>
	 days+=(double)dg;
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff f87e 	bl	8000524 <__aeabi_i2d>
 8001428:	4603      	mov	r3, r0
 800142a:	460c      	mov	r4, r1
 800142c:	461a      	mov	r2, r3
 800142e:	4623      	mov	r3, r4
 8001430:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001434:	f7fe ff2a 	bl	800028c <__adddf3>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	return (double)days;
 8001440:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001444:	ec44 3b17 	vmov	d7, r3, r4
}
 8001448:	eeb0 0a47 	vmov.f32	s0, s14
 800144c:	eef0 0a67 	vmov.f32	s1, s15
 8001450:	3734      	adds	r7, #52	; 0x34
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000000 	.word	0x20000000
 8001460:	00000000 	.word	0x00000000
 8001464:	4076e000 	.word	0x4076e000
 8001468:	00000000 	.word	0x00000000
 800146c:	4076d000 	.word	0x4076d000

08001470 <daysact>:

double daysact(Date_t startdate,Date_t enddate)
{
 8001470:	b082      	sub	sp, #8
 8001472:	b590      	push	{r4, r7, lr}
 8001474:	b089      	sub	sp, #36	; 0x24
 8001476:	af00      	add	r7, sp, #0
 8001478:	1d3c      	adds	r4, r7, #4
 800147a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
	double BB=datenum(startdate);//cout<<B<<endl;
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001486:	f7ff ff5b 	bl	8001340 <datenum>
 800148a:	ed87 0b06 	vstr	d0, [r7, #24]
	double AA=datenum(enddate);//cout<<A<<endl;
 800148e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001496:	f7ff ff53 	bl	8001340 <datenum>
 800149a:	ed87 0b04 	vstr	d0, [r7, #16]
	return (double)AA-(double)BB;
 800149e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014a6:	f7fe feef 	bl	8000288 <__aeabi_dsub>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	ec44 3b17 	vmov	d7, r3, r4
}
 80014b2:	eeb0 0a47 	vmov.f32	s0, s14
 80014b6:	eef0 0a67 	vmov.f32	s1, s15
 80014ba:	3724      	adds	r7, #36	; 0x24
 80014bc:	46bd      	mov	sp, r7
 80014be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014c2:	b002      	add	sp, #8
 80014c4:	4770      	bx	lr
	...

080014c8 <sind>:
///////////////////////////////////////////////////////////////////////////////////////////
double  sind(double degree)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	ed87 0b00 	vstr	d0, [r7]
	return (double)sin(DEG2RAD*degree);
 80014d2:	a30f      	add	r3, pc, #60	; (adr r3, 8001510 <sind+0x48>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014dc:	f7ff f88c 	bl	80005f8 <__aeabi_dmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	460c      	mov	r4, r1
 80014e4:	ec44 3b17 	vmov	d7, r3, r4
 80014e8:	eeb0 0a47 	vmov.f32	s0, s14
 80014ec:	eef0 0a67 	vmov.f32	s1, s15
 80014f0:	f01a ff6e 	bl	801c3d0 <sin>
 80014f4:	eeb0 7a40 	vmov.f32	s14, s0
 80014f8:	eef0 7a60 	vmov.f32	s15, s1
}
 80014fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001500:	eef0 0a67 	vmov.f32	s1, s15
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	a2529d39 	.word	0xa2529d39
 8001514:	3f91df46 	.word	0x3f91df46

08001518 <tand>:
double  tand(double degree)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0b00 	vstr	d0, [r7]
	return (double)tan(DEG2RAD*degree);
 8001522:	a30f      	add	r3, pc, #60	; (adr r3, 8001560 <tand+0x48>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152c:	f7ff f864 	bl	80005f8 <__aeabi_dmul>
 8001530:	4603      	mov	r3, r0
 8001532:	460c      	mov	r4, r1
 8001534:	ec44 3b17 	vmov	d7, r3, r4
 8001538:	eeb0 0a47 	vmov.f32	s0, s14
 800153c:	eef0 0a67 	vmov.f32	s1, s15
 8001540:	f01a ff8e 	bl	801c460 <tan>
 8001544:	eeb0 7a40 	vmov.f32	s14, s0
 8001548:	eef0 7a60 	vmov.f32	s15, s1
}
 800154c:	eeb0 0a47 	vmov.f32	s0, s14
 8001550:	eef0 0a67 	vmov.f32	s1, s15
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	a2529d39 	.word	0xa2529d39
 8001564:	3f91df46 	.word	0x3f91df46

08001568 <cosd>:
double  cosd(double degree)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0b00 	vstr	d0, [r7]
	return (double)cos(DEG2RAD*degree);
 8001572:	a30f      	add	r3, pc, #60	; (adr r3, 80015b0 <cosd+0x48>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	ec44 3b17 	vmov	d7, r3, r4
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	eef0 0a67 	vmov.f32	s1, s15
 8001590:	f01a fe86 	bl	801c2a0 <cos>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	eef0 7a60 	vmov.f32	s15, s1
}
 800159c:	eeb0 0a47 	vmov.f32	s0, s14
 80015a0:	eef0 0a67 	vmov.f32	s1, s15
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	a2529d39 	.word	0xa2529d39
 80015b4:	3f91df46 	.word	0x3f91df46

080015b8 <asind>:
double  asind(double num)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	ed87 0b00 	vstr	d0, [r7]
	return (double)asin(num)/DEG2RAD;
 80015c2:	ed97 0b00 	vldr	d0, [r7]
 80015c6:	f01a ffd3 	bl	801c570 <asin>
 80015ca:	ec51 0b10 	vmov	r0, r1, d0
 80015ce:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <asind+0x38>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f93a 	bl	800084c <__aeabi_ddiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	ec44 3b17 	vmov	d7, r3, r4
}
 80015e0:	eeb0 0a47 	vmov.f32	s0, s14
 80015e4:	eef0 0a67 	vmov.f32	s1, s15
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	a2529d39 	.word	0xa2529d39
 80015f4:	3f91df46 	.word	0x3f91df46

080015f8 <acosd>:
double  acosd(double num)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0b00 	vstr	d0, [r7]
	return (double)acos(num)/DEG2RAD;
 8001602:	ed97 0b00 	vldr	d0, [r7]
 8001606:	f01a ff5b 	bl	801c4c0 <acos>
 800160a:	ec51 0b10 	vmov	r0, r1, d0
 800160e:	a308      	add	r3, pc, #32	; (adr r3, 8001630 <acosd+0x38>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f91a 	bl	800084c <__aeabi_ddiv>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001620:	eeb0 0a47 	vmov.f32	s0, s14
 8001624:	eef0 0a67 	vmov.f32	s1, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	a2529d39 	.word	0xa2529d39
 8001634:	3f91df46 	.word	0x3f91df46

08001638 <rad2deg>:
double  atand(double num)
{
	return (double)atan(num)/DEG2RAD;
}
double rad2deg(double rad)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	ed87 0b00 	vstr	d0, [r7]
	return (double)rad/DEG2RAD;
 8001642:	a309      	add	r3, pc, #36	; (adr r3, 8001668 <rad2deg+0x30>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164c:	f7ff f8fe 	bl	800084c <__aeabi_ddiv>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	ec44 3b17 	vmov	d7, r3, r4
}
 8001658:	eeb0 0a47 	vmov.f32	s0, s14
 800165c:	eef0 0a67 	vmov.f32	s1, s15
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	a2529d39 	.word	0xa2529d39
 800166c:	3f91df46 	.word	0x3f91df46

08001670 <Astro_sunRiseSet>:
///////////////////////////////////////////////////////////////////////////////////////////
///lat:arz
///lng:tol
void  Astro_sunRiseSet( double lat, double lng, double UTCoff, Date_t date,Time_t *sunrise_t,Time_t *noon_t,Time_t *sunset_t,uint8_t daylightsave)
{
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	b0d3      	sub	sp, #332	; 0x14c
 8001676:	af02      	add	r7, sp, #8
 8001678:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800167c:	ed84 0b00 	vstr	d0, [r4]
 8001680:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001684:	ed84 1b00 	vstr	d1, [r4]
 8001688:	f107 0420 	add.w	r4, r7, #32
 800168c:	ed84 2b00 	vstr	d2, [r4]
 8001690:	f107 0414 	add.w	r4, r7, #20
 8001694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001698:	f107 0210 	add.w	r2, r7, #16
 800169c:	6013      	str	r3, [r2, #0]
%
% The formulas are from:
% Meeus, Jean H. Astronomical algorithms. Willmann-Bell, Incorporated, 1991.
% Process input
*/
	Date_t startdate;startdate.year=1899;startdate.month=12;startdate.day=30;
 800169e:	f240 736b 	movw	r3, #1899	; 0x76b
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016a4:	230c      	movs	r3, #12
 80016a6:	653b      	str	r3, [r7, #80]	; 0x50
 80016a8:	231e      	movs	r3, #30
 80016aa:	657b      	str	r3, [r7, #84]	; 0x54

	double nDays=(double)daysact(startdate,  date);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	466c      	mov	r4, sp
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80016c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c4:	f7ff fed4 	bl	8001470 <daysact>
 80016c8:	ed87 0b40 	vstr	d0, [r7, #256]	; 0x100

	double nTime_ts = 86400.0;                      // % Number of seconds in the day
 80016cc:	a424      	add	r4, pc, #144	; (adr r4, 8001760 <Astro_sunRiseSet+0xf0>)
 80016ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016d2:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
	double steps=60.0/(nTime_ts-1);
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <Astro_sunRiseSet+0xe8>)
 80016dc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80016e0:	f7fe fdd2 	bl	8000288 <__aeabi_dsub>
 80016e4:	4603      	mov	r3, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	461a      	mov	r2, r3
 80016ea:	4623      	mov	r3, r4
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	491a      	ldr	r1, [pc, #104]	; (800175c <Astro_sunRiseSet+0xec>)
 80016f2:	f7ff f8ab 	bl	800084c <__aeabi_ddiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	double min_noon=0.0,min_sunset=0.0,min_sunrise=0.0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	f04f 0400 	mov.w	r4, #0
 8001706:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f04f 0400 	mov.w	r4, #0
 8001712:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f04f 0400 	mov.w	r4, #0
 800171e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	double temp=0.0;
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
	int index=0,min_index_noon=0,min_index_sunrise=0,min_index_sunset=0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	double E,F,G,I,J,K,L,M,P,Q,R,T,U,V,W,X,KSin_J;
	char tmp_str[20];
	//double AD,AB,AC;
	for(double tArray=0.0;tArray<=1;tArray+=((double)steps),index+=60)
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f04f 0400 	mov.w	r4, #0
 800174e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8001752:	f000 bd1b 	b.w	800218c <Astro_sunRiseSet+0xb1c>
 8001756:	bf00      	nop
 8001758:	3ff00000 	.word	0x3ff00000
 800175c:	404e0000 	.word	0x404e0000
 8001760:	00000000 	.word	0x00000000
 8001764:	40f51800 	.word	0x40f51800
	{
		//% Compute
		//% Letters correspond to colums in the NOAA Excel
		 E=tArray;
 8001768:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800176c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		double F = (double)nDays+(double)2415018.5+(double)E-(double)UTCoff/24.0;
 8001770:	a3e7      	add	r3, pc, #924	; (adr r3, 8001b10 <Astro_sunRiseSet+0x4a0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800177a:	f7fe fd87 	bl	800028c <__adddf3>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	4618      	mov	r0, r3
 8001784:	4621      	mov	r1, r4
 8001786:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800178a:	f7fe fd7f 	bl	800028c <__adddf3>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	4625      	mov	r5, r4
 8001794:	461c      	mov	r4, r3
 8001796:	f107 0120 	add.w	r1, r7, #32
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4bda      	ldr	r3, [pc, #872]	; (8001b08 <Astro_sunRiseSet+0x498>)
 80017a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017a4:	f7ff f852 	bl	800084c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd6a 	bl	8000288 <__aeabi_dsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 //F = (double)nDays+(double)2415018.3541666666666666666666667+(double)E;
		 G = (double)(F-2451545.0)/36525.0;
 80017bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a60 <Astro_sunRiseSet+0x3f0>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80017c6:	f7fe fd5f 	bl	8000288 <__aeabi_dsub>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	4618      	mov	r0, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	a3a5      	add	r3, pc, #660	; (adr r3, 8001a68 <Astro_sunRiseSet+0x3f8>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7ff f838 	bl	800084c <__aeabi_ddiv>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		 I = wrap(280.46646+(double)G*(36000.76983+(double)G*0.0003032));
 80017e4:	a3a2      	add	r3, pc, #648	; (adr r3, 8001a70 <Astro_sunRiseSet+0x400>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80017ee:	f7fe ff03 	bl	80005f8 <__aeabi_dmul>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4618      	mov	r0, r3
 80017f8:	4621      	mov	r1, r4
 80017fa:	a39f      	add	r3, pc, #636	; (adr r3, 8001a78 <Astro_sunRiseSet+0x408>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fd44 	bl	800028c <__adddf3>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	4618      	mov	r0, r3
 800180a:	4621      	mov	r1, r4
 800180c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001810:	f7fe fef2 	bl	80005f8 <__aeabi_dmul>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	a398      	add	r3, pc, #608	; (adr r3, 8001a80 <Astro_sunRiseSet+0x410>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fd33 	bl	800028c <__adddf3>
 8001826:	4603      	mov	r3, r0
 8001828:	460c      	mov	r4, r1
 800182a:	ec44 3b17 	vmov	d7, r3, r4
 800182e:	eeb0 0a47 	vmov.f32	s0, s14
 8001832:	eef0 0a67 	vmov.f32	s1, s15
 8001836:	f7ff fcef 	bl	8001218 <wrap>
 800183a:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
		 J = 357.52911+G*(35999.05029-0.0001537*G);
 800183e:	a392      	add	r3, pc, #584	; (adr r3, 8001a88 <Astro_sunRiseSet+0x418>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001848:	f7fe fed6 	bl	80005f8 <__aeabi_dmul>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	a18e      	add	r1, pc, #568	; (adr r1, 8001a90 <Astro_sunRiseSet+0x420>)
 8001856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800185a:	f7fe fd15 	bl	8000288 <__aeabi_dsub>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	4618      	mov	r0, r3
 8001864:	4621      	mov	r1, r4
 8001866:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	4618      	mov	r0, r3
 8001874:	4621      	mov	r1, r4
 8001876:	a388      	add	r3, pc, #544	; (adr r3, 8001a98 <Astro_sunRiseSet+0x428>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fd06 	bl	800028c <__adddf3>
 8001880:	4603      	mov	r3, r0
 8001882:	460c      	mov	r4, r1
 8001884:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 K = 0.016708634-G*(0.000042037+0.0000001267*G);
 8001888:	a385      	add	r3, pc, #532	; (adr r3, 8001aa0 <Astro_sunRiseSet+0x430>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001892:	f7fe feb1 	bl	80005f8 <__aeabi_dmul>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	4618      	mov	r0, r3
 800189c:	4621      	mov	r1, r4
 800189e:	a382      	add	r3, pc, #520	; (adr r3, 8001aa8 <Astro_sunRiseSet+0x438>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fcf2 	bl	800028c <__adddf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	4618      	mov	r0, r3
 80018ae:	4621      	mov	r1, r4
 80018b0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80018b4:	f7fe fea0 	bl	80005f8 <__aeabi_dmul>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	a17b      	add	r1, pc, #492	; (adr r1, 8001ab0 <Astro_sunRiseSet+0x440>)
 80018c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018c6:	f7fe fcdf 	bl	8000288 <__aeabi_dsub>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 L = sind(J)*(1.914602-G*(0.004817+0.000014*G))+sind(2.0*J)*(0.019993-0.000101*G)+sind(3.0*J)*0.000289;
 80018d2:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 80018d6:	f7ff fdf7 	bl	80014c8 <sind>
 80018da:	ec56 5b10 	vmov	r5, r6, d0
 80018de:	a376      	add	r3, pc, #472	; (adr r3, 8001ab8 <Astro_sunRiseSet+0x448>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80018e8:	f7fe fe86 	bl	80005f8 <__aeabi_dmul>
 80018ec:	4603      	mov	r3, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4618      	mov	r0, r3
 80018f2:	4621      	mov	r1, r4
 80018f4:	a372      	add	r3, pc, #456	; (adr r3, 8001ac0 <Astro_sunRiseSet+0x450>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fcc7 	bl	800028c <__adddf3>
 80018fe:	4603      	mov	r3, r0
 8001900:	460c      	mov	r4, r1
 8001902:	4618      	mov	r0, r3
 8001904:	4621      	mov	r1, r4
 8001906:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800190a:	f7fe fe75 	bl	80005f8 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	a16c      	add	r1, pc, #432	; (adr r1, 8001ac8 <Astro_sunRiseSet+0x458>)
 8001918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800191c:	f7fe fcb4 	bl	8000288 <__aeabi_dsub>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	4628      	mov	r0, r5
 800192a:	4631      	mov	r1, r6
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	4625      	mov	r5, r4
 8001936:	461c      	mov	r4, r3
 8001938:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	f7fe fca4 	bl	800028c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	ec43 2b17 	vmov	d7, r2, r3
 800194c:	eeb0 0a47 	vmov.f32	s0, s14
 8001950:	eef0 0a67 	vmov.f32	s1, s15
 8001954:	f7ff fdb8 	bl	80014c8 <sind>
 8001958:	ec59 8b10 	vmov	r8, r9, d0
 800195c:	a35c      	add	r3, pc, #368	; (adr r3, 8001ad0 <Astro_sunRiseSet+0x460>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001966:	f7fe fe47 	bl	80005f8 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	a15a      	add	r1, pc, #360	; (adr r1, 8001ad8 <Astro_sunRiseSet+0x468>)
 8001970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001974:	f7fe fc88 	bl	8000288 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4640      	mov	r0, r8
 800197e:	4649      	mov	r1, r9
 8001980:	f7fe fe3a 	bl	80005f8 <__aeabi_dmul>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc7e 	bl	800028c <__adddf3>
 8001990:	4603      	mov	r3, r0
 8001992:	460c      	mov	r4, r1
 8001994:	4625      	mov	r5, r4
 8001996:	461c      	mov	r4, r3
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <Astro_sunRiseSet+0x49c>)
 800199e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ec43 2b17 	vmov	d7, r2, r3
 80019ae:	eeb0 0a47 	vmov.f32	s0, s14
 80019b2:	eef0 0a67 	vmov.f32	s1, s15
 80019b6:	f7ff fd87 	bl	80014c8 <sind>
 80019ba:	ec51 0b10 	vmov	r0, r1, d0
 80019be:	a348      	add	r3, pc, #288	; (adr r3, 8001ae0 <Astro_sunRiseSet+0x470>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fe18 	bl	80005f8 <__aeabi_dmul>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fc5c 	bl	800028c <__adddf3>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 M = I+L;
 80019dc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80019e0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80019e4:	f7fe fc52 	bl	800028c <__adddf3>
 80019e8:	4603      	mov	r3, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 P = M-0.00569-0.00478*sind(125.04-1934.136*G);
 80019f0:	a33d      	add	r3, pc, #244	; (adr r3, 8001ae8 <Astro_sunRiseSet+0x478>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80019fa:	f7fe fc45 	bl	8000288 <__aeabi_dsub>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4625      	mov	r5, r4
 8001a04:	461c      	mov	r4, r3
 8001a06:	a33a      	add	r3, pc, #232	; (adr r3, 8001af0 <Astro_sunRiseSet+0x480>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001a10:	f7fe fdf2 	bl	80005f8 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	a137      	add	r1, pc, #220	; (adr r1, 8001af8 <Astro_sunRiseSet+0x488>)
 8001a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a1e:	f7fe fc33 	bl	8000288 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	ec43 2b17 	vmov	d7, r2, r3
 8001a2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2e:	eef0 0a67 	vmov.f32	s1, s15
 8001a32:	f7ff fd49 	bl	80014c8 <sind>
 8001a36:	ec51 0b10 	vmov	r0, r1, d0
 8001a3a:	a331      	add	r3, pc, #196	; (adr r3, 8001b00 <Astro_sunRiseSet+0x490>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdda 	bl	80005f8 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fc1c 	bl	8000288 <__aeabi_dsub>
 8001a50:	4603      	mov	r3, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8001a58:	e05e      	b.n	8001b18 <Astro_sunRiseSet+0x4a8>
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	80000000 	.word	0x80000000
 8001a64:	4142b42c 	.word	0x4142b42c
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40e1d5a0 	.word	0x40e1d5a0
 8001a70:	158aabc0 	.word	0x158aabc0
 8001a74:	3f33deda 	.word	0x3f33deda
 8001a78:	a272862f 	.word	0xa272862f
 8001a7c:	40e19418 	.word	0x40e19418
 8001a80:	9ec2ce46 	.word	0x9ec2ce46
 8001a84:	40718776 	.word	0x40718776
 8001a88:	f260db0c 	.word	0xf260db0c
 8001a8c:	3f242550 	.word	0x3f242550
 8001a90:	9bf9c62a 	.word	0x9bf9c62a
 8001a94:	40e193e1 	.word	0x40e193e1
 8001a98:	3c0c1fc9 	.word	0x3c0c1fc9
 8001a9c:	40765877 	.word	0x40765877
 8001aa0:	fc64d800 	.word	0xfc64d800
 8001aa4:	3e810160 	.word	0x3e810160
 8001aa8:	525fe303 	.word	0x525fe303
 8001aac:	3f060a1c 	.word	0x3f060a1c
 8001ab0:	725d0380 	.word	0x725d0380
 8001ab4:	3f911c11 	.word	0x3f911c11
 8001ab8:	593e5fb7 	.word	0x593e5fb7
 8001abc:	3eed5c31 	.word	0x3eed5c31
 8001ac0:	976ff3ae 	.word	0x976ff3ae
 8001ac4:	3f73bafd 	.word	0x3f73bafd
 8001ac8:	b4edb2f6 	.word	0xb4edb2f6
 8001acc:	3ffea235 	.word	0x3ffea235
 8001ad0:	c99f1ae3 	.word	0xc99f1ae3
 8001ad4:	3f1a79fe 	.word	0x3f1a79fe
 8001ad8:	84988095 	.word	0x84988095
 8001adc:	3f94790b 	.word	0x3f94790b
 8001ae0:	8c6d612c 	.word	0x8c6d612c
 8001ae4:	3f32f09d 	.word	0x3f32f09d
 8001ae8:	bea0ba1f 	.word	0xbea0ba1f
 8001aec:	3f774e65 	.word	0x3f774e65
 8001af0:	43958106 	.word	0x43958106
 8001af4:	409e388b 	.word	0x409e388b
 8001af8:	5c28f5c3 	.word	0x5c28f5c3
 8001afc:	405f428f 	.word	0x405f428f
 8001b00:	7acc4ef9 	.word	0x7acc4ef9
 8001b04:	3f739431 	.word	0x3f739431
 8001b08:	40380000 	.word	0x40380000
 8001b0c:	40080000 	.word	0x40080000
 8001b10:	40000000 	.word	0x40000000
 8001b14:	41426cd5 	.word	0x41426cd5
		 Q = 23.0+(26+((21.448-G*(46.815+G*(0.00059-G*0.001813))))/60.0)/60.0;
 8001b18:	f20f 430c 	addw	r3, pc, #1036	; 0x40c
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001b24:	f7fe fd68 	bl	80005f8 <__aeabi_dmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	a1ff      	add	r1, pc, #1020	; (adr r1, 8001f30 <Astro_sunRiseSet+0x8c0>)
 8001b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b36:	f7fe fba7 	bl	8000288 <__aeabi_dsub>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001b46:	f7fe fd57 	bl	80005f8 <__aeabi_dmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	a3f9      	add	r3, pc, #996	; (adr r3, 8001f38 <Astro_sunRiseSet+0x8c8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fb98 	bl	800028c <__adddf3>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001b68:	f7fe fd46 	bl	80005f8 <__aeabi_dmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460c      	mov	r4, r1
 8001b70:	461a      	mov	r2, r3
 8001b72:	4623      	mov	r3, r4
 8001b74:	a1f2      	add	r1, pc, #968	; (adr r1, 8001f40 <Astro_sunRiseSet+0x8d0>)
 8001b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b7a:	f7fe fb85 	bl	8000288 <__aeabi_dsub>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460c      	mov	r4, r1
 8001b82:	4618      	mov	r0, r3
 8001b84:	4621      	mov	r1, r4
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4be1      	ldr	r3, [pc, #900]	; (8001f10 <Astro_sunRiseSet+0x8a0>)
 8001b8c:	f7fe fe5e 	bl	800084c <__aeabi_ddiv>
 8001b90:	4603      	mov	r3, r0
 8001b92:	460c      	mov	r4, r1
 8001b94:	4618      	mov	r0, r3
 8001b96:	4621      	mov	r1, r4
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	4bdd      	ldr	r3, [pc, #884]	; (8001f14 <Astro_sunRiseSet+0x8a4>)
 8001b9e:	f7fe fb75 	bl	800028c <__adddf3>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4bd8      	ldr	r3, [pc, #864]	; (8001f10 <Astro_sunRiseSet+0x8a0>)
 8001bb0:	f7fe fe4c 	bl	800084c <__aeabi_ddiv>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4bd5      	ldr	r3, [pc, #852]	; (8001f18 <Astro_sunRiseSet+0x8a8>)
 8001bc2:	f7fe fb63 	bl	800028c <__adddf3>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 R = Q+0.00256*cosd(125.04-1934.136*G);
 8001bce:	a3c8      	add	r3, pc, #800	; (adr r3, 8001ef0 <Astro_sunRiseSet+0x880>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001bd8:	f7fe fd0e 	bl	80005f8 <__aeabi_dmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	461a      	mov	r2, r3
 8001be2:	4623      	mov	r3, r4
 8001be4:	a1c4      	add	r1, pc, #784	; (adr r1, 8001ef8 <Astro_sunRiseSet+0x888>)
 8001be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bea:	f7fe fb4d 	bl	8000288 <__aeabi_dsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	ec44 3b17 	vmov	d7, r3, r4
 8001bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfa:	eef0 0a67 	vmov.f32	s1, s15
 8001bfe:	f7ff fcb3 	bl	8001568 <cosd>
 8001c02:	ec51 0b10 	vmov	r0, r1, d0
 8001c06:	a3be      	add	r3, pc, #760	; (adr r3, 8001f00 <Astro_sunRiseSet+0x890>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fcf4 	bl	80005f8 <__aeabi_dmul>
 8001c10:	4603      	mov	r3, r0
 8001c12:	460c      	mov	r4, r1
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001c1c:	f7fe fb36 	bl	800028c <__adddf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
		 T = asind(sind(R)*sind(P));
 8001c28:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 8001c2c:	f7ff fc4c 	bl	80014c8 <sind>
 8001c30:	ec55 4b10 	vmov	r4, r5, d0
 8001c34:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8001c38:	f7ff fc46 	bl	80014c8 <sind>
 8001c3c:	ec53 2b10 	vmov	r2, r3, d0
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	ec44 3b17 	vmov	d7, r3, r4
 8001c50:	eeb0 0a47 	vmov.f32	s0, s14
 8001c54:	eef0 0a67 	vmov.f32	s1, s15
 8001c58:	f7ff fcae 	bl	80015b8 <asind>
 8001c5c:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
		 U = tand(R/2.0)*tand(R/2.0);
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c68:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c6c:	f7fe fdee 	bl	800084c <__aeabi_ddiv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	ec44 3b17 	vmov	d7, r3, r4
 8001c78:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7c:	eef0 0a67 	vmov.f32	s1, s15
 8001c80:	f7ff fc4a 	bl	8001518 <tand>
 8001c84:	ec56 5b10 	vmov	r5, r6, d0
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c90:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c94:	f7fe fdda 	bl	800084c <__aeabi_ddiv>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	ec44 3b17 	vmov	d7, r3, r4
 8001ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca4:	eef0 0a67 	vmov.f32	s1, s15
 8001ca8:	f7ff fc36 	bl	8001518 <tand>
 8001cac:	ec54 3b10 	vmov	r3, r4, d0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	f7fe fc9e 	bl	80005f8 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
		 KSin_J=K*sind(J);
 8001cc4:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8001cc8:	f7ff fbfe 	bl	80014c8 <sind>
 8001ccc:	ec54 3b10 	vmov	r3, r4, d0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460c      	mov	r4, r1
 8001ce0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 V = 4.0*rad2deg(U*sind(2.0*I)-2.0*KSin_J+4.0*U*KSin_J*cosd(2.0*I)-0.5*U*U*sind(4.0*I)-1.25*K*K*sind(2*J));
 8001ce4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	f7fe face 	bl	800028c <__adddf3>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	ec44 3b17 	vmov	d7, r3, r4
 8001cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cfc:	eef0 0a67 	vmov.f32	s1, s15
 8001d00:	f7ff fbe2 	bl	80014c8 <sind>
 8001d04:	ec51 0b10 	vmov	r0, r1, d0
 8001d08:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001d0c:	f7fe fc74 	bl	80005f8 <__aeabi_dmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	460c      	mov	r4, r1
 8001d14:	4625      	mov	r5, r4
 8001d16:	461c      	mov	r4, r3
 8001d18:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	f7fe fab4 	bl	800028c <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe faac 	bl	8000288 <__aeabi_dsub>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4625      	mov	r5, r4
 8001d36:	461c      	mov	r4, r3
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <Astro_sunRiseSet+0x8ac>)
 8001d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001d42:	f7fe fc59 	bl	80005f8 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d52:	f7fe fc51 	bl	80005f8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4690      	mov	r8, r2
 8001d5c:	4699      	mov	r9, r3
 8001d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	f7fe fa91 	bl	800028c <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	ec43 2b17 	vmov	d7, r2, r3
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	f7ff fbf5 	bl	8001568 <cosd>
 8001d7e:	ec53 2b10 	vmov	r2, r3, d0
 8001d82:	4640      	mov	r0, r8
 8001d84:	4649      	mov	r1, r9
 8001d86:	f7fe fc37 	bl	80005f8 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fa7b 	bl	800028c <__adddf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4625      	mov	r5, r4
 8001d9c:	461c      	mov	r4, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <Astro_sunRiseSet+0x8b0>)
 8001da4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001db8:	f7fe fc1e 	bl	80005f8 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4690      	mov	r8, r2
 8001dc2:	4699      	mov	r9, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b54      	ldr	r3, [pc, #336]	; (8001f1c <Astro_sunRiseSet+0x8ac>)
 8001dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dce:	f7fe fc13 	bl	80005f8 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	ec43 2b17 	vmov	d7, r2, r3
 8001dda:	eeb0 0a47 	vmov.f32	s0, s14
 8001dde:	eef0 0a67 	vmov.f32	s1, s15
 8001de2:	f7ff fb71 	bl	80014c8 <sind>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	4640      	mov	r0, r8
 8001dec:	4649      	mov	r1, r9
 8001dee:	f7fe fc03 	bl	80005f8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4620      	mov	r0, r4
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f7fe fa45 	bl	8000288 <__aeabi_dsub>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4625      	mov	r5, r4
 8001e04:	461c      	mov	r4, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <Astro_sunRiseSet+0x8b4>)
 8001e0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001e10:	f7fe fbf2 	bl	80005f8 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001e20:	f7fe fbea 	bl	80005f8 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	f7fe fa2a 	bl	800028c <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	ec43 2b17 	vmov	d7, r2, r3
 8001e40:	eeb0 0a47 	vmov.f32	s0, s14
 8001e44:	eef0 0a67 	vmov.f32	s1, s15
 8001e48:	f7ff fb3e 	bl	80014c8 <sind>
 8001e4c:	ec53 2b10 	vmov	r2, r3, d0
 8001e50:	4640      	mov	r0, r8
 8001e52:	4649      	mov	r1, r9
 8001e54:	f7fe fbd0 	bl	80005f8 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fa12 	bl	8000288 <__aeabi_dsub>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	ec44 3b17 	vmov	d7, r3, r4
 8001e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e70:	eef0 0a67 	vmov.f32	s1, s15
 8001e74:	f7ff fbe0 	bl	8001638 <rad2deg>
 8001e78:	ec51 0b10 	vmov	r0, r1, d0
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <Astro_sunRiseSet+0x8ac>)
 8001e82:	f7fe fbb9 	bl	80005f8 <__aeabi_dmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


		 W = acosd(cosd(90.833)/(cosd(lat)*cosd(T))-tand(lat)*tand(T));
 8001e8e:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001f08 <Astro_sunRiseSet+0x898>
 8001e92:	f7ff fb69 	bl	8001568 <cosd>
 8001e96:	ec56 5b10 	vmov	r5, r6, d0
 8001e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e9e:	ed93 0b00 	vldr	d0, [r3]
 8001ea2:	f7ff fb61 	bl	8001568 <cosd>
 8001ea6:	ec59 8b10 	vmov	r8, r9, d0
 8001eaa:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8001eae:	f7ff fb5b 	bl	8001568 <cosd>
 8001eb2:	ec54 3b10 	vmov	r3, r4, d0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	4640      	mov	r0, r8
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	f7fe fb9b 	bl	80005f8 <__aeabi_dmul>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4623      	mov	r3, r4
 8001eca:	4628      	mov	r0, r5
 8001ecc:	4631      	mov	r1, r6
 8001ece:	f7fe fcbd 	bl	800084c <__aeabi_ddiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	4625      	mov	r5, r4
 8001ed8:	461c      	mov	r4, r3
 8001eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ede:	ed93 0b00 	vldr	d0, [r3]
 8001ee2:	f7ff fb19 	bl	8001518 <tand>
 8001ee6:	ec59 8b10 	vmov	r8, r9, d0
 8001eea:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8001eee:	e02b      	b.n	8001f48 <Astro_sunRiseSet+0x8d8>
 8001ef0:	43958106 	.word	0x43958106
 8001ef4:	409e388b 	.word	0x409e388b
 8001ef8:	5c28f5c3 	.word	0x5c28f5c3
 8001efc:	405f428f 	.word	0x405f428f
 8001f00:	88e368f1 	.word	0x88e368f1
 8001f04:	3f64f8b5 	.word	0x3f64f8b5
 8001f08:	df3b645a 	.word	0xdf3b645a
 8001f0c:	4056b54f 	.word	0x4056b54f
 8001f10:	404e0000 	.word	0x404e0000
 8001f14:	403a0000 	.word	0x403a0000
 8001f18:	40370000 	.word	0x40370000
 8001f1c:	40100000 	.word	0x40100000
 8001f20:	3fe00000 	.word	0x3fe00000
 8001f24:	3ff40000 	.word	0x3ff40000
 8001f28:	ed4a1ad6 	.word	0xed4a1ad6
 8001f2c:	3f5db445 	.word	0x3f5db445
 8001f30:	5a31a4be 	.word	0x5a31a4be
 8001f34:	3f435547 	.word	0x3f435547
 8001f38:	eb851eb8 	.word	0xeb851eb8
 8001f3c:	40476851 	.word	0x40476851
 8001f40:	20c49ba6 	.word	0x20c49ba6
 8001f44:	403572b0 	.word	0x403572b0
 8001f48:	f7ff fae6 	bl	8001518 <tand>
 8001f4c:	ec53 2b10 	vmov	r2, r3, d0
 8001f50:	4640      	mov	r0, r8
 8001f52:	4649      	mov	r1, r9
 8001f54:	f7fe fb50 	bl	80005f8 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f992 	bl	8000288 <__aeabi_dsub>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	ec44 3b17 	vmov	d7, r3, r4
 8001f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001f70:	eef0 0a67 	vmov.f32	s1, s15
 8001f74:	f7ff fb40 	bl	80015f8 <acosd>
 8001f78:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
		 X = (720.0-4.0*lng-V+UTCoff*60.0)*60.0;
 8001f7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4bb4      	ldr	r3, [pc, #720]	; (8002258 <Astro_sunRiseSet+0xbe8>)
 8001f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460c      	mov	r4, r1
 8001f92:	461a      	mov	r2, r3
 8001f94:	4623      	mov	r3, r4
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	49b0      	ldr	r1, [pc, #704]	; (800225c <Astro_sunRiseSet+0xbec>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fac:	f7fe f96c 	bl	8000288 <__aeabi_dsub>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	4625      	mov	r5, r4
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	f107 0120 	add.w	r1, r7, #32
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4ba7      	ldr	r3, [pc, #668]	; (8002260 <Astro_sunRiseSet+0xbf0>)
 8001fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fc6:	f7fe fb17 	bl	80005f8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe f95b 	bl	800028c <__adddf3>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460c      	mov	r4, r1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	4621      	mov	r1, r4
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b9f      	ldr	r3, [pc, #636]	; (8002260 <Astro_sunRiseSet+0xbf0>)
 8001fe4:	f7fe fb08 	bl	80005f8 <__aeabi_dmul>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	460c      	mov	r4, r1
 8001fec:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		// X = (930.0-4.0*lng-V)*60.0;

		//% Results in seconds
		double nTimes_tArray=(double)nTime_ts*tArray;
 8001ff0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ff4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001ff8:	f7fe fafe 	bl	80005f8 <__aeabi_dmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
		temp= fabs(X - nTimes_tArray);
 8002004:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002008:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800200c:	f7fe f93c 	bl	8000288 <__aeabi_dsub>
 8002010:	4603      	mov	r3, r0
 8002012:	460c      	mov	r4, r1
 8002014:	461a      	mov	r2, r3
 8002016:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800201a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800201e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if((temp<min_noon) || (tArray==0.0))
 8002022:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002026:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800202a:	f7fe fd57 	bl	8000adc <__aeabi_dcmplt>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <Astro_sunRiseSet+0x9da>
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002040:	f7fe fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <Astro_sunRiseSet+0x9ea>
		{
			min_noon=temp;
 800204a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800204e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			min_index_noon=index;
 8002052:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002056:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		}
		temp= fabs(X-round(W*240.0) - nTimes_tArray);
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	4b81      	ldr	r3, [pc, #516]	; (8002264 <Astro_sunRiseSet+0xbf4>)
 8002060:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002064:	f7fe fac8 	bl	80005f8 <__aeabi_dmul>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	ec44 3b17 	vmov	d7, r3, r4
 8002070:	eeb0 0a47 	vmov.f32	s0, s14
 8002074:	eef0 0a67 	vmov.f32	s1, s15
 8002078:	f01a f960 	bl	801c33c <round>
 800207c:	ec54 3b10 	vmov	r3, r4, d0
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002088:	f7fe f8fe 	bl	8000288 <__aeabi_dsub>
 800208c:	4603      	mov	r3, r0
 800208e:	460c      	mov	r4, r1
 8002090:	4618      	mov	r0, r3
 8002092:	4621      	mov	r1, r4
 8002094:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002098:	f7fe f8f6 	bl	8000288 <__aeabi_dsub>
 800209c:	4603      	mov	r3, r0
 800209e:	460c      	mov	r4, r1
 80020a0:	461a      	mov	r2, r3
 80020a2:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80020a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80020aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(temp<min_sunrise|| (tArray==0.0))
 80020ae:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80020b2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80020b6:	f7fe fd11 	bl	8000adc <__aeabi_dcmplt>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <Astro_sunRiseSet+0xa66>
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80020cc:	f7fe fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <Astro_sunRiseSet+0xa76>
		{
			min_sunrise=temp;
 80020d6:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80020da:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			min_index_sunrise=index;
 80020de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		temp= fabs(X+round(W*240.0) - nTimes_tArray);
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <Astro_sunRiseSet+0xbf4>)
 80020ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020f0:	f7fe fa82 	bl	80005f8 <__aeabi_dmul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	ec44 3b17 	vmov	d7, r3, r4
 80020fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002100:	eef0 0a67 	vmov.f32	s1, s15
 8002104:	f01a f91a 	bl	801c33c <round>
 8002108:	ec51 0b10 	vmov	r0, r1, d0
 800210c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002110:	f7fe f8bc 	bl	800028c <__adddf3>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	4618      	mov	r0, r3
 800211a:	4621      	mov	r1, r4
 800211c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002120:	f7fe f8b2 	bl	8000288 <__aeabi_dsub>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	461a      	mov	r2, r3
 800212a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800212e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8002132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		if(temp<min_sunset|| (tArray==0.0))
 8002136:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800213a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800213e:	f7fe fccd 	bl	8000adc <__aeabi_dcmplt>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <Astro_sunRiseSet+0xaee>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002154:	f7fe fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d007      	beq.n	800216e <Astro_sunRiseSet+0xafe>
		{
			min_sunset=temp;
 800215e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8002162:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			min_index_sunset=index;
 8002166:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800216a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for(double tArray=0.0;tArray<=1;tArray+=((double)steps),index+=60)
 800216e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002172:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002176:	f7fe f889 	bl	800028c <__adddf3>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8002182:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002186:	333c      	adds	r3, #60	; 0x3c
 8002188:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <Astro_sunRiseSet+0xbf8>)
 8002192:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002196:	f7fe fcab 	bl	8000af0 <__aeabi_dcmple>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f aae3 	bne.w	8001768 <Astro_sunRiseSet+0xf8>
		}
	}
	uint8_t daylightsaving=0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(daylightsave)
 80021a8:	f897 3168 	ldrb.w	r3, [r7, #360]	; 0x168
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <Astro_sunRiseSet+0xb52>
		daylightsaving=Astro_daylighsaving(date);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021b8:	f7fe ffcc 	bl	8001154 <Astro_daylighsaving>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	*noon_t=seconds2Time_t(min_index_noon); noon_t->hr=noon_t->hr+daylightsaving;
 80021c2:	f8d7 4160 	ldr.w	r4, [r7, #352]	; 0x160
 80021c6:	463b      	mov	r3, r7
 80021c8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f84b 	bl	8001268 <seconds2Time_t>
 80021d2:	463a      	mov	r2, r7
 80021d4:	4623      	mov	r3, r4
 80021d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021e6:	441a      	add	r2, r3
 80021e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021ec:	601a      	str	r2, [r3, #0]
	*sunrise_t=seconds2Time_t(min_index_sunrise); sunrise_t->hr=sunrise_t->hr+daylightsaving;
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	681c      	ldr	r4, [r3, #0]
 80021f4:	463b      	mov	r3, r7
 80021f6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f834 	bl	8001268 <seconds2Time_t>
 8002200:	463a      	mov	r2, r7
 8002202:	4623      	mov	r3, r4
 8002204:	ca07      	ldmia	r2, {r0, r1, r2}
 8002206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002216:	441a      	add	r2, r3
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	601a      	str	r2, [r3, #0]
	*sunset_t=seconds2Time_t(min_index_sunset);		sunset_t->hr=sunset_t->hr+daylightsaving;
 8002220:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8002224:	463b      	mov	r3, r7
 8002226:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f81c 	bl	8001268 <seconds2Time_t>
 8002230:	463a      	mov	r2, r7
 8002232:	4623      	mov	r3, r4
 8002234:	ca07      	ldmia	r2, {r0, r1, r2}
 8002236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800223a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002244:	441a      	add	r2, r3
 8002246:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8002252:	46bd      	mov	sp, r7
 8002254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002258:	40100000 	.word	0x40100000
 800225c:	40868000 	.word	0x40868000
 8002260:	404e0000 	.word	0x404e0000
 8002264:	406e0000 	.word	0x406e0000
 8002268:	3ff00000 	.word	0x3ff00000

0800226c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <MX_DMA_Init+0x5c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <MX_DMA_Init+0x5c>)
 800227c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_DMA_Init+0x5c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2038      	movs	r0, #56	; 0x38
 8002294:	f00a f9c3 	bl	800c61e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002298:	2038      	movs	r0, #56	; 0x38
 800229a:	f00a f9dc 	bl	800c656 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	203b      	movs	r0, #59	; 0x3b
 80022a4:	f00a f9bb 	bl	800c61e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80022a8:	203b      	movs	r0, #59	; 0x3b
 80022aa:	f00a f9d4 	bl	800c656 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2045      	movs	r0, #69	; 0x45
 80022b4:	f00a f9b3 	bl	800c61e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80022b8:	2045      	movs	r0, #69	; 0x45
 80022ba:	f00a f9cc 	bl	800c656 <HAL_NVIC_EnableIRQ>

}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80022d2:	2306      	movs	r3, #6
 80022d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80022d6:	2306      	movs	r3, #6
 80022d8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	83fb      	strh	r3, [r7, #30]
 80022e2:	2300      	movs	r3, #0
 80022e4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80022e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80022f0:	4b9f      	ldr	r3, [pc, #636]	; (8002570 <EE_Init+0x2a4>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80022f6:	4b9f      	ldr	r3, [pc, #636]	; (8002574 <EE_Init+0x2a8>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80022fc:	2300      	movs	r3, #0
 80022fe:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8002300:	230a      	movs	r3, #10
 8002302:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800230c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800230e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002312:	4293      	cmp	r3, r2
 8002314:	d057      	beq.n	80023c6 <EE_Init+0xfa>
 8002316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <EE_Init+0x5a>
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80f4 	beq.w	800250c <EE_Init+0x240>
 8002324:	e18d      	b.n	8002642 <EE_Init+0x376>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8002326:	8c3b      	ldrh	r3, [r7, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d116      	bne.n	800235a <EE_Init+0x8e>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800232c:	4890      	ldr	r0, [pc, #576]	; (8002570 <EE_Init+0x2a4>)
 800232e:	f000 f9a9 	bl	8002684 <EE_VerifyPageFullyErased>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 818e 	bne.w	8002656 <EE_Init+0x38a>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800233a:	f107 0214 	add.w	r2, r7, #20
 800233e:	463b      	mov	r3, r7
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f00a ff4e 	bl	800d1e4 <HAL_FLASHEx_Erase>
 8002348:	4603      	mov	r3, r0
 800234a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800234c:	7efb      	ldrb	r3, [r7, #27]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8181 	beq.w	8002656 <EE_Init+0x38a>
          {
            return FlashStatus;
 8002354:	7efb      	ldrb	r3, [r7, #27]
 8002356:	b29b      	uxth	r3, r3
 8002358:	e185      	b.n	8002666 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800235a:	8c3b      	ldrh	r3, [r7, #32]
 800235c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002360:	4293      	cmp	r3, r2
 8002362:	d125      	bne.n	80023b0 <EE_Init+0xe4>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002364:	4882      	ldr	r0, [pc, #520]	; (8002570 <EE_Init+0x2a4>)
 8002366:	f000 f98d 	bl	8002684 <EE_VerifyPageFullyErased>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10e      	bne.n	800238e <EE_Init+0xc2>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002370:	f107 0214 	add.w	r2, r7, #20
 8002374:	463b      	mov	r3, r7
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f00a ff33 	bl	800d1e4 <HAL_FLASHEx_Erase>
 800237e:	4603      	mov	r3, r0
 8002380:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002382:	7efb      	ldrb	r3, [r7, #27]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <EE_Init+0xc2>
          {
            return FlashStatus;
 8002388:	7efb      	ldrb	r3, [r7, #27]
 800238a:	b29b      	uxth	r3, r3
 800238c:	e16b      	b.n	8002666 <EE_Init+0x39a>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	4977      	ldr	r1, [pc, #476]	; (8002574 <EE_Init+0x2a8>)
 8002398:	2001      	movs	r0, #1
 800239a:	f00a fd7f 	bl	800ce9c <HAL_FLASH_Program>
 800239e:	4603      	mov	r3, r0
 80023a0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80023a2:	7efb      	ldrb	r3, [r7, #27]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8156 	beq.w	8002656 <EE_Init+0x38a>
        {
          return FlashStatus;
 80023aa:	7efb      	ldrb	r3, [r7, #27]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	e15a      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80023b0:	f000 f9f8 	bl	80027a4 <EE_Format>
 80023b4:	4603      	mov	r3, r0
 80023b6:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80023b8:	7efb      	ldrb	r3, [r7, #27]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 814b 	beq.w	8002656 <EE_Init+0x38a>
        {
          return FlashStatus;
 80023c0:	7efb      	ldrb	r3, [r7, #27]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	e14f      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80023c6:	8c3b      	ldrh	r3, [r7, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d163      	bne.n	8002494 <EE_Init+0x1c8>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023d0:	e030      	b.n	8002434 <EE_Init+0x168>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80023d2:	4b69      	ldr	r3, [pc, #420]	; (8002578 <EE_Init+0x2ac>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023da:	4968      	ldr	r1, [pc, #416]	; (800257c <EE_Init+0x2b0>)
 80023dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d101      	bne.n	80023e8 <EE_Init+0x11c>
          {
            x = VarIdx;
 80023e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023e6:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80023e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d01d      	beq.n	800242e <EE_Init+0x162>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80023f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <EE_Init+0x2b0>)
 80023f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023fa:	4961      	ldr	r1, [pc, #388]	; (8002580 <EE_Init+0x2b4>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f967 	bl	80026d0 <EE_ReadVariable>
 8002402:	4603      	mov	r3, r0
 8002404:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8002406:	8bbb      	ldrh	r3, [r7, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d010      	beq.n	800242e <EE_Init+0x162>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800240c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800240e:	4a5b      	ldr	r2, [pc, #364]	; (800257c <EE_Init+0x2b0>)
 8002410:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002414:	4b5a      	ldr	r3, [pc, #360]	; (8002580 <EE_Init+0x2b4>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fa5a 	bl	80028d4 <EE_VerifyPageFullWriteVariable>
 8002420:	4603      	mov	r3, r0
 8002422:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8002424:	8bfb      	ldrh	r3, [r7, #30]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <EE_Init+0x162>
              {
                return EepromStatus;
 800242a:	8bfb      	ldrh	r3, [r7, #30]
 800242c:	e11b      	b.n	8002666 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800242e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002430:	3301      	adds	r3, #1
 8002432:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002436:	2b0a      	cmp	r3, #10
 8002438:	d9cb      	bls.n	80023d2 <EE_Init+0x106>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	494b      	ldr	r1, [pc, #300]	; (8002570 <EE_Init+0x2a4>)
 8002444:	2001      	movs	r0, #1
 8002446:	f00a fd29 	bl	800ce9c <HAL_FLASH_Program>
 800244a:	4603      	mov	r3, r0
 800244c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800244e:	7efb      	ldrb	r3, [r7, #27]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <EE_Init+0x18e>
        {
          return FlashStatus;
 8002454:	7efb      	ldrb	r3, [r7, #27]
 8002456:	b29b      	uxth	r3, r3
 8002458:	e105      	b.n	8002666 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE1_ID;
 800245a:	230b      	movs	r3, #11
 800245c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002462:	2302      	movs	r3, #2
 8002464:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8002466:	4843      	ldr	r0, [pc, #268]	; (8002574 <EE_Init+0x2a8>)
 8002468:	f000 f90c 	bl	8002684 <EE_VerifyPageFullyErased>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80f3 	bne.w	800265a <EE_Init+0x38e>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002474:	f107 0214 	add.w	r2, r7, #20
 8002478:	463b      	mov	r3, r7
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f00a feb1 	bl	800d1e4 <HAL_FLASHEx_Erase>
 8002482:	4603      	mov	r3, r0
 8002484:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002486:	7efb      	ldrb	r3, [r7, #27]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80e6 	beq.w	800265a <EE_Init+0x38e>
          {
            return FlashStatus;
 800248e:	7efb      	ldrb	r3, [r7, #27]
 8002490:	b29b      	uxth	r3, r3
 8002492:	e0e8      	b.n	8002666 <EE_Init+0x39a>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8002494:	8c3b      	ldrh	r3, [r7, #32]
 8002496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249a:	4293      	cmp	r3, r2
 800249c:	d12b      	bne.n	80024f6 <EE_Init+0x22a>
      {
        pEraseInit.Sector = PAGE1_ID;
 800249e:	230b      	movs	r3, #11
 80024a0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80024a6:	2302      	movs	r3, #2
 80024a8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80024aa:	4832      	ldr	r0, [pc, #200]	; (8002574 <EE_Init+0x2a8>)
 80024ac:	f000 f8ea 	bl	8002684 <EE_VerifyPageFullyErased>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10e      	bne.n	80024d4 <EE_Init+0x208>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80024b6:	f107 0214 	add.w	r2, r7, #20
 80024ba:	463b      	mov	r3, r7
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f00a fe90 	bl	800d1e4 <HAL_FLASHEx_Erase>
 80024c4:	4603      	mov	r3, r0
 80024c6:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80024c8:	7efb      	ldrb	r3, [r7, #27]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <EE_Init+0x208>
          {
            return FlashStatus;
 80024ce:	7efb      	ldrb	r3, [r7, #27]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	e0c8      	b.n	8002666 <EE_Init+0x39a>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	4924      	ldr	r1, [pc, #144]	; (8002570 <EE_Init+0x2a4>)
 80024de:	2001      	movs	r0, #1
 80024e0:	f00a fcdc 	bl	800ce9c <HAL_FLASH_Program>
 80024e4:	4603      	mov	r3, r0
 80024e6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80024e8:	7efb      	ldrb	r3, [r7, #27]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80b5 	beq.w	800265a <EE_Init+0x38e>
        {
          return FlashStatus;
 80024f0:	7efb      	ldrb	r3, [r7, #27]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	e0b7      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80024f6:	f000 f955 	bl	80027a4 <EE_Format>
 80024fa:	4603      	mov	r3, r0
 80024fc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80024fe:	7efb      	ldrb	r3, [r7, #27]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80aa 	beq.w	800265a <EE_Init+0x38e>
        {
          return FlashStatus;
 8002506:	7efb      	ldrb	r3, [r7, #27]
 8002508:	b29b      	uxth	r3, r3
 800250a:	e0ac      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800250c:	8c3b      	ldrh	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <EE_Init+0x25c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8002512:	f000 f947 	bl	80027a4 <EE_Format>
 8002516:	4603      	mov	r3, r0
 8002518:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800251a:	7efb      	ldrb	r3, [r7, #27]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 809e 	beq.w	800265e <EE_Init+0x392>
        {
          return FlashStatus;
 8002522:	7efb      	ldrb	r3, [r7, #27]
 8002524:	b29b      	uxth	r3, r3
 8002526:	e09e      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8002528:	8c3b      	ldrh	r3, [r7, #32]
 800252a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252e:	4293      	cmp	r3, r2
 8002530:	d11b      	bne.n	800256a <EE_Init+0x29e>
      {
        pEraseInit.Sector = PAGE1_ID;
 8002532:	230b      	movs	r3, #11
 8002534:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002536:	2301      	movs	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800253a:	2302      	movs	r3, #2
 800253c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <EE_Init+0x2a8>)
 8002540:	f000 f8a0 	bl	8002684 <EE_VerifyPageFullyErased>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 8089 	bne.w	800265e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800254c:	f107 0214 	add.w	r2, r7, #20
 8002550:	463b      	mov	r3, r7
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f00a fe45 	bl	800d1e4 <HAL_FLASHEx_Erase>
 800255a:	4603      	mov	r3, r0
 800255c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800255e:	7efb      	ldrb	r3, [r7, #27]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d07c      	beq.n	800265e <EE_Init+0x392>
          {
            return FlashStatus;
 8002564:	7efb      	ldrb	r3, [r7, #27]
 8002566:	b29b      	uxth	r3, r3
 8002568:	e07d      	b.n	8002666 <EE_Init+0x39a>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800256e:	e03a      	b.n	80025e6 <EE_Init+0x31a>
 8002570:	080c0000 	.word	0x080c0000
 8002574:	080e0000 	.word	0x080e0000
 8002578:	080c0006 	.word	0x080c0006
 800257c:	200006e4 	.word	0x200006e4
 8002580:	200003b4 	.word	0x200003b4
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8002584:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <EE_Init+0x3a4>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800258c:	4939      	ldr	r1, [pc, #228]	; (8002674 <EE_Init+0x3a8>)
 800258e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002592:	429a      	cmp	r2, r3
 8002594:	d101      	bne.n	800259a <EE_Init+0x2ce>
          {
            x = VarIdx;
 8002596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002598:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 800259a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800259c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d01d      	beq.n	80025e0 <EE_Init+0x314>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80025a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025a6:	4a33      	ldr	r2, [pc, #204]	; (8002674 <EE_Init+0x3a8>)
 80025a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ac:	4932      	ldr	r1, [pc, #200]	; (8002678 <EE_Init+0x3ac>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f88e 	bl	80026d0 <EE_ReadVariable>
 80025b4:	4603      	mov	r3, r0
 80025b6:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80025b8:	8bbb      	ldrh	r3, [r7, #28]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d010      	beq.n	80025e0 <EE_Init+0x314>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80025be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025c0:	4a2c      	ldr	r2, [pc, #176]	; (8002674 <EE_Init+0x3a8>)
 80025c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <EE_Init+0x3ac>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 f981 	bl	80028d4 <EE_VerifyPageFullWriteVariable>
 80025d2:	4603      	mov	r3, r0
 80025d4:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80025d6:	8bfb      	ldrh	r3, [r7, #30]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <EE_Init+0x314>
              {
                return EepromStatus;
 80025dc:	8bfb      	ldrh	r3, [r7, #30]
 80025de:	e042      	b.n	8002666 <EE_Init+0x39a>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80025e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025e2:	3301      	adds	r3, #1
 80025e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025e8:	2b0a      	cmp	r3, #10
 80025ea:	d9cb      	bls.n	8002584 <EE_Init+0x2b8>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	4921      	ldr	r1, [pc, #132]	; (800267c <EE_Init+0x3b0>)
 80025f6:	2001      	movs	r0, #1
 80025f8:	f00a fc50 	bl	800ce9c <HAL_FLASH_Program>
 80025fc:	4603      	mov	r3, r0
 80025fe:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8002600:	7efb      	ldrb	r3, [r7, #27]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <EE_Init+0x340>
        {
          return FlashStatus;
 8002606:	7efb      	ldrb	r3, [r7, #27]
 8002608:	b29b      	uxth	r3, r3
 800260a:	e02c      	b.n	8002666 <EE_Init+0x39a>
        }
        pEraseInit.Sector = PAGE0_ID;
 800260c:	230a      	movs	r3, #10
 800260e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8002610:	2301      	movs	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002614:	2302      	movs	r3, #2
 8002616:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8002618:	4819      	ldr	r0, [pc, #100]	; (8002680 <EE_Init+0x3b4>)
 800261a:	f000 f833 	bl	8002684 <EE_VerifyPageFullyErased>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d11c      	bne.n	800265e <EE_Init+0x392>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8002624:	f107 0214 	add.w	r2, r7, #20
 8002628:	463b      	mov	r3, r7
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f00a fdd9 	bl	800d1e4 <HAL_FLASHEx_Erase>
 8002632:	4603      	mov	r3, r0
 8002634:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8002636:	7efb      	ldrb	r3, [r7, #27]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <EE_Init+0x392>
          {
            return FlashStatus;
 800263c:	7efb      	ldrb	r3, [r7, #27]
 800263e:	b29b      	uxth	r3, r3
 8002640:	e011      	b.n	8002666 <EE_Init+0x39a>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8002642:	f000 f8af 	bl	80027a4 <EE_Format>
 8002646:	4603      	mov	r3, r0
 8002648:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800264a:	7efb      	ldrb	r3, [r7, #27]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <EE_Init+0x396>
      {
        return FlashStatus;
 8002650:	7efb      	ldrb	r3, [r7, #27]
 8002652:	b29b      	uxth	r3, r3
 8002654:	e007      	b.n	8002666 <EE_Init+0x39a>
      break;
 8002656:	bf00      	nop
 8002658:	e004      	b.n	8002664 <EE_Init+0x398>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <EE_Init+0x398>
      break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <EE_Init+0x398>
      }
      break;
 8002662:	bf00      	nop
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3728      	adds	r7, #40	; 0x28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	080e0006 	.word	0x080e0006
 8002674:	200006e4 	.word	0x200006e4
 8002678:	200003b4 	.word	0x200003b4
 800267c:	080e0000 	.word	0x080e0000
 8002680:	080c0000 	.word	0x080c0000

08002684 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8002690:	f245 5355 	movw	r3, #21845	; 0x5555
 8002694:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8002696:	e00d      	b.n	80026b4 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d002      	beq.n	80026ae <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

      break;
 80026ac:	e006      	b.n	80026bc <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <EE_VerifyPageFullyErased+0x48>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d9ed      	bls.n	8002698 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	b29b      	uxth	r3, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	080dffff 	.word	0x080dffff

080026d0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80026dc:	2300      	movs	r3, #0
 80026de:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80026e0:	f245 5355 	movw	r3, #21845	; 0x5555
 80026e4:	81bb      	strh	r3, [r7, #12]
 80026e6:	2301      	movs	r3, #1
 80026e8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <EE_ReadVariable+0x88>)
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <EE_ReadVariable+0x88>)
 80026f0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f000 f8a8 	bl	8002848 <EE_FindValidPage>
 80026f8:	4603      	mov	r3, r0
 80026fa:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80026fc:	89fb      	ldrh	r3, [r7, #14]
 80026fe:	2bab      	cmp	r3, #171	; 0xab
 8002700:	d101      	bne.n	8002706 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8002702:	23ab      	movs	r3, #171	; 0xab
 8002704:	e024      	b.n	8002750 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800270c:	045b      	lsls	r3, r3, #17
 800270e:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	3301      	adds	r3, #1
 8002714:	045a      	lsls	r2, r3, #17
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <EE_ReadVariable+0x8c>)
 8002718:	4413      	add	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800271c:	e012      	b.n	8002744 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8002724:	89ba      	ldrh	r2, [r7, #12]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	429a      	cmp	r2, r3
 800272a:	d108      	bne.n	800273e <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3b02      	subs	r3, #2
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29a      	uxth	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	82fb      	strh	r3, [r7, #22]

      break;
 800273c:	e007      	b.n	800274e <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	3b04      	subs	r3, #4
 8002742:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3302      	adds	r3, #2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	429a      	cmp	r2, r3
 800274c:	d8e7      	bhi.n	800271e <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800274e:	8afb      	ldrh	r3, [r7, #22]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	080c0000 	.word	0x080c0000
 800275c:	080bfffe 	.word	0x080bfffe

08002760 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	80fb      	strh	r3, [r7, #6]
 800276c:	4613      	mov	r3, r2
 800276e:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002774:	88ba      	ldrh	r2, [r7, #4]
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f8aa 	bl	80028d4 <EE_VerifyPageFullWriteVariable>
 8002780:	4603      	mov	r3, r0
 8002782:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d107      	bne.n	800279a <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800278a:	88ba      	ldrh	r2, [r7, #4]
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f8fd 	bl	8002990 <EE_PageTransfer>
 8002796:	4603      	mov	r3, r0
 8002798:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800279a:	89fb      	ldrh	r3, [r7, #14]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80027b6:	230a      	movs	r3, #10
 80027b8:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80027be:	2302      	movs	r3, #2
 80027c0:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80027c2:	481f      	ldr	r0, [pc, #124]	; (8002840 <EE_Format+0x9c>)
 80027c4:	f7ff ff5e 	bl	8002684 <EE_VerifyPageFullyErased>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80027ce:	f107 0218 	add.w	r2, r7, #24
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a fd04 	bl	800d1e4 <HAL_FLASHEx_Erase>
 80027dc:	4603      	mov	r3, r0
 80027de:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <EE_Format+0x46>
    {
      return FlashStatus;
 80027e6:	7ffb      	ldrb	r3, [r7, #31]
 80027e8:	e025      	b.n	8002836 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	4913      	ldr	r1, [pc, #76]	; (8002840 <EE_Format+0x9c>)
 80027f4:	2001      	movs	r0, #1
 80027f6:	f00a fb51 	bl	800ce9c <HAL_FLASH_Program>
 80027fa:	4603      	mov	r3, r0
 80027fc:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <EE_Format+0x64>
  {
    return FlashStatus;
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	e016      	b.n	8002836 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8002808:	230b      	movs	r3, #11
 800280a:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <EE_Format+0xa0>)
 800280e:	f7ff ff39 	bl	8002684 <EE_VerifyPageFullyErased>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10d      	bne.n	8002834 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8002818:	f107 0218 	add.w	r2, r7, #24
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f00a fcdf 	bl	800d1e4 <HAL_FLASHEx_Erase>
 8002826:	4603      	mov	r3, r0
 8002828:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <EE_Format+0x90>
    {
      return FlashStatus;
 8002830:	7ffb      	ldrb	r3, [r7, #31]
 8002832:	e000      	b.n	8002836 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	080c0000 	.word	0x080c0000
 8002844:	080e0000 	.word	0x080e0000

08002848 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8002852:	2306      	movs	r3, #6
 8002854:	81fb      	strh	r3, [r7, #14]
 8002856:	2306      	movs	r3, #6
 8002858:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <EE_FindValidPage+0x84>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <EE_FindValidPage+0x88>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <EE_FindValidPage+0x5c>
 800286c:	2b01      	cmp	r3, #1
 800286e:	d125      	bne.n	80028bc <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8002880:	2300      	movs	r3, #0
 8002882:	e01c      	b.n	80028be <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8002884:	2301      	movs	r3, #1
 8002886:	e01a      	b.n	80028be <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800288e:	89bb      	ldrh	r3, [r7, #12]
 8002890:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8002898:	2301      	movs	r3, #1
 800289a:	e010      	b.n	80028be <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800289c:	2300      	movs	r3, #0
 800289e:	e00e      	b.n	80028be <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80028a0:	23ab      	movs	r3, #171	; 0xab
 80028a2:	e00c      	b.n	80028be <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 80028aa:	2300      	movs	r3, #0
 80028ac:	e007      	b.n	80028be <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 80028ae:	89bb      	ldrh	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 80028b4:	2301      	movs	r3, #1
 80028b6:	e002      	b.n	80028be <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 80028b8:	23ab      	movs	r3, #171	; 0xab
 80028ba:	e000      	b.n	80028be <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 80028bc:	2300      	movs	r3, #0
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	080c0000 	.word	0x080c0000
 80028d0:	080e0000 	.word	0x080e0000

080028d4 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	460a      	mov	r2, r1
 80028de:	80fb      	strh	r3, [r7, #6]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80028ec:	4b25      	ldr	r3, [pc, #148]	; (8002984 <EE_VerifyPageFullWriteVariable+0xb0>)
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <EE_VerifyPageFullWriteVariable+0xb4>)
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7ff ffa7 	bl	8002848 <EE_FindValidPage>
 80028fa:	4603      	mov	r3, r0
 80028fc:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80028fe:	8a3b      	ldrh	r3, [r7, #16]
 8002900:	2bab      	cmp	r3, #171	; 0xab
 8002902:	d101      	bne.n	8002908 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8002904:	23ab      	movs	r3, #171	; 0xab
 8002906:	e038      	b.n	800297a <EE_VerifyPageFullWriteVariable+0xa6>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8002908:	8a3b      	ldrh	r3, [r7, #16]
 800290a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800290e:	045b      	lsls	r3, r3, #17
 8002910:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8002912:	8a3b      	ldrh	r3, [r7, #16]
 8002914:	3301      	adds	r3, #1
 8002916:	045a      	lsls	r2, r3, #17
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <EE_VerifyPageFullWriteVariable+0xb8>)
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800291e:	e027      	b.n	8002970 <EE_VerifyPageFullWriteVariable+0x9c>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d11f      	bne.n	800296a <EE_VerifyPageFullWriteVariable+0x96>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	461a      	mov	r2, r3
 8002932:	4623      	mov	r3, r4
 8002934:	6979      	ldr	r1, [r7, #20]
 8002936:	2001      	movs	r0, #1
 8002938:	f00a fab0 	bl	800ce9c <HAL_FLASH_Program>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <EE_VerifyPageFullWriteVariable+0x78>
      {
        return FlashStatus;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	b29b      	uxth	r3, r3
 800294a:	e016      	b.n	800297a <EE_VerifyPageFullWriteVariable+0xa6>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1c99      	adds	r1, r3, #2
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	2001      	movs	r0, #1
 800295c:	f00a fa9e 	bl	800ce9c <HAL_FLASH_Program>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	b29b      	uxth	r3, r3
 8002968:	e007      	b.n	800297a <EE_VerifyPageFullWriteVariable+0xa6>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d3d3      	bcc.n	8002920 <EE_VerifyPageFullWriteVariable+0x4c>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8002978:	2380      	movs	r3, #128	; 0x80
}
 800297a:	4618      	mov	r0, r3
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	080c0000 	.word	0x080c0000
 8002988:	080e0000 	.word	0x080e0000
 800298c:	080bffff 	.word	0x080bffff

08002990 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	460a      	mov	r2, r1
 800299a:	80fb      	strh	r3, [r7, #6]
 800299c:	4613      	mov	r3, r2
 800299e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <EE_PageTransfer+0x168>)
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80029b2:	2300      	movs	r3, #0
 80029b4:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80029ba:	2300      	movs	r3, #0
 80029bc:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff ff40 	bl	8002848 <EE_FindValidPage>
 80029c8:	4603      	mov	r3, r0
 80029ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 80029cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d104      	bne.n	80029dc <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <EE_PageTransfer+0x168>)
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 80029d6:	230b      	movs	r3, #11
 80029d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80029da:	e009      	b.n	80029f0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 80029dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <EE_PageTransfer+0x16c>)
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 80029e6:	230a      	movs	r3, #10
 80029e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80029ea:	e001      	b.n	80029f0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80029ec:	23ab      	movs	r3, #171	; 0xab
 80029ee:	e07e      	b.n	8002aee <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 80029f0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029fa:	2001      	movs	r0, #1
 80029fc:	f00a fa4e 	bl	800ce9c <HAL_FLASH_Program>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8002a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	e06b      	b.n	8002aee <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8002a16:	88ba      	ldrh	r2, [r7, #4]
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff59 	bl	80028d4 <EE_VerifyPageFullWriteVariable>
 8002a22:	4603      	mov	r3, r0
 8002a24:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8002a26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8002a2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a2e:	e05e      	b.n	8002aee <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a34:	e027      	b.n	8002a86 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8002a36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <EE_PageTransfer+0x170>)
 8002a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d01d      	beq.n	8002a80 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8002a44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a46:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <EE_PageTransfer+0x170>)
 8002a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4c:	492d      	ldr	r1, [pc, #180]	; (8002b04 <EE_PageTransfer+0x174>)
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fe3e 	bl	80026d0 <EE_ReadVariable>
 8002a54:	4603      	mov	r3, r0
 8002a56:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8002a58:	8c3b      	ldrh	r3, [r7, #32]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d010      	beq.n	8002a80 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8002a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <EE_PageTransfer+0x170>)
 8002a62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <EE_PageTransfer+0x174>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff ff31 	bl	80028d4 <EE_VerifyPageFullWriteVariable>
 8002a72:	4603      	mov	r3, r0
 8002a74:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8002a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8002a7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a7e:	e036      	b.n	8002aee <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8002a80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a82:	3301      	adds	r3, #1
 8002a84:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a88:	2b0a      	cmp	r3, #10
 8002a8a:	d9d4      	bls.n	8002a36 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8002a90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a92:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8002a9c:	f107 021c 	add.w	r2, r7, #28
 8002aa0:	f107 0308 	add.w	r3, r7, #8
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f00a fb9c 	bl	800d1e4 <HAL_FLASHEx_Erase>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8002aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	e015      	b.n	8002aee <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002acc:	2001      	movs	r0, #1
 8002ace:	f00a f9e5 	bl	800ce9c <HAL_FLASH_Program>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8002ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8002ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	e002      	b.n	8002aee <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8002ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aec:	b29b      	uxth	r3, r3
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3730      	adds	r7, #48	; 0x30
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	080c0000 	.word	0x080c0000
 8002afc:	080e0000 	.word	0x080e0000
 8002b00:	200006e4 	.word	0x200006e4
 8002b04:	200003b4 	.word	0x200003b4

08002b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	f107 031c 	add.w	r3, r7, #28
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	4b69      	ldr	r3, [pc, #420]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b28:	f043 0310 	orr.w	r3, r3, #16
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b66      	ldr	r3, [pc, #408]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	4b62      	ldr	r3, [pc, #392]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a61      	ldr	r2, [pc, #388]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a53      	ldr	r2, [pc, #332]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b51      	ldr	r3, [pc, #324]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a45      	ldr	r2, [pc, #276]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <MX_GPIO_Init+0x1c0>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_2_Pin|GPIO_3_Pin|GPIO_5_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2158      	movs	r1, #88	; 0x58
 8002bca:	4840      	ldr	r0, [pc, #256]	; (8002ccc <MX_GPIO_Init+0x1c4>)
 8002bcc:	f00a fed8 	bl	800d980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_OFF_Pin|CUR_DIR_Pin, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2160      	movs	r1, #96	; 0x60
 8002bd4:	483e      	ldr	r0, [pc, #248]	; (8002cd0 <MX_GPIO_Init+0x1c8>)
 8002bd6:	f00a fed3 	bl	800d980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SEG_DIG4_Pin|SEG_B_Pin|SEG_DIG3_Pin|SEG_DIG2_Pin 
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002be0:	483a      	ldr	r0, [pc, #232]	; (8002ccc <MX_GPIO_Init+0x1c4>)
 8002be2:	f00a fecd 	bl	800d980 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_A_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_DIG1_GPIO_Port, SEG_DIG1_Pin, GPIO_PIN_SET);
 8002be6:	2201      	movs	r2, #1
 8002be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bec:	4839      	ldr	r0, [pc, #228]	; (8002cd4 <MX_GPIO_Init+0x1cc>)
 8002bee:	f00a fec7 	bl	800d980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SEG_G_Pin|SEG_C_Pin|SEG_DP_Pin|SEG_D_Pin 
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002bf8:	4837      	ldr	r0, [pc, #220]	; (8002cd8 <MX_GPIO_Init+0x1d0>)
 8002bfa:	f00a fec1 	bl	800d980 <HAL_GPIO_WritePin>
                          |SEG_E_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DoorOpen_Pin|BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8002bfe:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	482e      	ldr	r0, [pc, #184]	; (8002ccc <MX_GPIO_Init+0x1c4>)
 8002c14:	f00a fc08 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_3_Pin|GPIO_5_Pin|SEG_DIG4_Pin 
 8002c18:	f64f 4358 	movw	r3, #64600	; 0xfc58
 8002c1c:	61fb      	str	r3, [r7, #28]
                          |SEG_B_Pin|SEG_DIG3_Pin|SEG_DIG2_Pin|SEG_F_Pin 
                          |SEG_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c2a:	f107 031c 	add.w	r3, r7, #28
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4826      	ldr	r0, [pc, #152]	; (8002ccc <MX_GPIO_Init+0x1c4>)
 8002c32:	f00a fbf9 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ON_OFF_Pin|CUR_DIR_Pin;
 8002c36:	2360      	movs	r3, #96	; 0x60
 8002c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4820      	ldr	r0, [pc, #128]	; (8002cd0 <MX_GPIO_Init+0x1c8>)
 8002c4e:	f00a fbeb 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_4_Pin;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_4_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	481b      	ldr	r0, [pc, #108]	; (8002cd4 <MX_GPIO_Init+0x1cc>)
 8002c66:	f00a fbdf 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEG_DIG1_Pin;
 8002c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c70:	2301      	movs	r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SEG_DIG1_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4619      	mov	r1, r3
 8002c82:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <MX_GPIO_Init+0x1cc>)
 8002c84:	f00a fbd0 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = SEG_G_Pin|SEG_C_Pin|SEG_DP_Pin|SEG_D_Pin 
 8002c88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002c8c:	61fb      	str	r3, [r7, #28]
                          |SEG_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_GPIO_Init+0x1d0>)
 8002ca2:	f00a fbc1 	bl	800d428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin|VCNL4200_INT_Pin;
 8002ca6:	2388      	movs	r3, #136	; 0x88
 8002ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <MX_GPIO_Init+0x1d0>)
 8002cba:	f00a fbb5 	bl	800d428 <HAL_GPIO_Init>

}
 8002cbe:	bf00      	nop
 8002cc0:	3730      	adds	r7, #48	; 0x30
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40020c00 	.word	0x40020c00

08002cdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <MX_I2C1_Init+0x58>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002ce8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002cec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002cfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d1a:	4805      	ldr	r0, [pc, #20]	; (8002d30 <MX_I2C1_Init+0x54>)
 8002d1c:	f00a fe4a 	bl	800d9b4 <HAL_I2C_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002d26:	f007 f827 	bl	8009d78 <Error_Handler>
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200006fc 	.word	0x200006fc
 8002d34:	40005400 	.word	0x40005400

08002d38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <HAL_I2C_MspInit+0xb4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d144      	bne.n	8002de4 <HAL_I2C_MspInit+0xac>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
		HAL_I2C_MspDeInit(&hi2c1);
 8002d5a:	4825      	ldr	r0, [pc, #148]	; (8002df0 <HAL_I2C_MspInit+0xb8>)
 8002d5c:	f000 f84e 	bl	8002dfc <HAL_I2C_MspDeInit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	21c0      	movs	r1, #192	; 0xc0
 8002d64:	4823      	ldr	r0, [pc, #140]	; (8002df4 <HAL_I2C_MspInit+0xbc>)
 8002d66:	f00a fe0b 	bl	800d980 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002d76:	2301      	movs	r3, #1
 8002d78:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	481c      	ldr	r0, [pc, #112]	; (8002df4 <HAL_I2C_MspInit+0xbc>)
 8002d82:	f00a fb51 	bl	800d428 <HAL_GPIO_Init>
		HAL_Delay(200);
 8002d86:	20c8      	movs	r0, #200	; 0xc8
 8002d88:	f008 ff40 	bl	800bc0c <HAL_Delay>
  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da8:	23c0      	movs	r3, #192	; 0xc0
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dac:	2312      	movs	r3, #18
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db8:	2304      	movs	r3, #4
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_I2C_MspInit+0xbc>)
 8002dc4:	f00a fb30 	bl	800d428 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_I2C_MspInit+0xc0>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40005400 	.word	0x40005400
 8002df0:	200006fc 	.word	0x200006fc
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40023800 	.word	0x40023800

08002dfc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_I2C_MspDeInit+0x30>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d109      	bne.n	8002e22 <HAL_I2C_MspDeInit+0x26>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_I2C_MspDeInit+0x34>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <HAL_I2C_MspDeInit+0x34>)
 8002e14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8002e1a:	21c0      	movs	r1, #192	; 0xc0
 8002e1c:	4805      	ldr	r0, [pc, #20]	; (8002e34 <HAL_I2C_MspDeInit+0x38>)
 8002e1e:	f00a fc9d 	bl	800d75c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
} 
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020400 	.word	0x40020400

08002e38 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_IWDG_Init+0x2c>)
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <MX_IWDG_Init+0x30>)
 8002e40:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_IWDG_Init+0x2c>)
 8002e44:	2206      	movs	r2, #6
 8002e46:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_IWDG_Init+0x2c>)
 8002e4a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002e4e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002e50:	4804      	ldr	r0, [pc, #16]	; (8002e64 <MX_IWDG_Init+0x2c>)
 8002e52:	f00b fd36 	bl	800e8c2 <HAL_IWDG_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002e5c:	f006 ff8c 	bl	8009d78 <Error_Handler>
  }

}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000750 	.word	0x20000750
 8002e68:	40003000 	.word	0x40003000

08002e6c <setpwm_value>:
*/
///////////////////////////////////////////////////////////
#define MAX_PULSE	576

void setpwm_value(uint16_t value)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;
		uint32_t current_period=htim9.Init.Period;
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <setpwm_value+0x54>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
		
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e7c:	2360      	movs	r3, #96	; 0x60
 8002e7e:	60bb      	str	r3, [r7, #8]
    sConfigOC.Pulse = (uint16_t)((uint32_t)value*current_period)/100;//(uint16_t)((uint32_t)value*MAX_PULSE)/100;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	fb12 f303 	smulbb	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <setpwm_value+0x58>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1);
 8002ea0:	f107 0308 	add.w	r3, r7, #8
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <setpwm_value+0x54>)
 8002eaa:	f00f fb39 	bl	8012520 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4803      	ldr	r0, [pc, #12]	; (8002ec0 <setpwm_value+0x54>)
 8002eb2:	f00f f9ef 	bl	8012294 <HAL_TIM_PWM_Start>
}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000a00 	.word	0x20000a00
 8002ec4:	51eb851f 	.word	0x51eb851f

08002ec8 <update_values>:
	}
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////////
void update_values(void)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
		uint16_t read_eeprom;
	
		if((EE_ReadVariable(TL_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002ece:	1dbb      	adds	r3, r7, #6
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f7ff fbfc 	bl	80026d0 <EE_ReadVariable>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <update_values+0x1c>
    {
			print_segment("E1-R");
 8002ede:	489b      	ldr	r0, [pc, #620]	; (800314c <update_values+0x284>)
 8002ee0:	f008 fa60 	bl	800b3a4 <print_segment>
    }		
		TL_Value=(float)read_eeprom/10.0;
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef6:	4b96      	ldr	r3, [pc, #600]	; (8003150 <update_values+0x288>)
 8002ef8:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 8002efc:	2032      	movs	r0, #50	; 0x32
 8002efe:	f008 fe85 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(TH_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	4619      	mov	r1, r3
 8002f06:	2004      	movs	r0, #4
 8002f08:	f7ff fbe2 	bl	80026d0 <EE_ReadVariable>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <update_values+0x50>
    {
			print_segment("E2-R");
 8002f12:	4890      	ldr	r0, [pc, #576]	; (8003154 <update_values+0x28c>)
 8002f14:	f008 fa46 	bl	800b3a4 <print_segment>
    }		
		TH_Value=(float)read_eeprom/10.0;		
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f22:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <update_values+0x290>)
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 8002f30:	2032      	movs	r0, #50	; 0x32
 8002f32:	f008 fe6b 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(HL_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002f36:	1dbb      	adds	r3, r7, #6
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2008      	movs	r0, #8
 8002f3c:	f7ff fbc8 	bl	80026d0 <EE_ReadVariable>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <update_values+0x84>
    {
			print_segment("E3-R");
 8002f46:	4885      	ldr	r0, [pc, #532]	; (800315c <update_values+0x294>)
 8002f48:	f008 fa2c 	bl	800b3a4 <print_segment>
    }		
		HL_Value=(float)read_eeprom/10.0;		
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f56:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5e:	4b80      	ldr	r3, [pc, #512]	; (8003160 <update_values+0x298>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 8002f64:	2032      	movs	r0, #50	; 0x32
 8002f66:	f008 fe51 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(HH_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002f6a:	1dbb      	adds	r3, r7, #6
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7ff fbae 	bl	80026d0 <EE_ReadVariable>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <update_values+0xb8>
    {
			print_segment("E4-R");
 8002f7a:	487a      	ldr	r0, [pc, #488]	; (8003164 <update_values+0x29c>)
 8002f7c:	f008 fa12 	bl	800b3a4 <print_segment>
    }		
		HH_Value=(float)read_eeprom/10.0;		
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f8a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <update_values+0x2a0>)
 8002f94:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 8002f98:	2032      	movs	r0, #50	; 0x32
 8002f9a:	f008 fe37 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(DELTATEMP_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	2006      	movs	r0, #6
 8002fa4:	f7ff fb94 	bl	80026d0 <EE_ReadVariable>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <update_values+0xec>
    {
			print_segment("E7-R");
 8002fae:	486f      	ldr	r0, [pc, #444]	; (800316c <update_values+0x2a4>)
 8002fb0:	f008 f9f8 	bl	800b3a4 <print_segment>
    }		
		DELTAT_Value=(float)read_eeprom/10.0;			
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc6:	4b6a      	ldr	r3, [pc, #424]	; (8003170 <update_values+0x2a8>)
 8002fc8:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);	
 8002fcc:	2032      	movs	r0, #50	; 0x32
 8002fce:	f008 fe1d 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(BRIGHTW_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002fd2:	1dbb      	adds	r3, r7, #6
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	200c      	movs	r0, #12
 8002fd8:	f7ff fb7a 	bl	80026d0 <EE_ReadVariable>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <update_values+0x120>
    {
			print_segment("E5-R");
 8002fe2:	4864      	ldr	r0, [pc, #400]	; (8003174 <update_values+0x2ac>)
 8002fe4:	f008 f9de 	bl	800b3a4 <print_segment>
    }		
		BrightW_Value=read_eeprom;	
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <update_values+0x2b0>)
 8002fec:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8002fee:	2032      	movs	r0, #50	; 0x32
 8002ff0:	f008 fe0c 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(BLINKW_ADDRESS,  &read_eeprom)) != HAL_OK)
 8002ff4:	1dbb      	adds	r3, r7, #6
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	200e      	movs	r0, #14
 8002ffa:	f7ff fb69 	bl	80026d0 <EE_ReadVariable>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <update_values+0x142>
    {
			print_segment("E8-R");
 8003004:	485d      	ldr	r0, [pc, #372]	; (800317c <update_values+0x2b4>)
 8003006:	f008 f9cd 	bl	800b3a4 <print_segment>
    }		
		BlinkW_Value=(float)read_eeprom/10.0;			
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003014:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <update_values+0x2b8>)
 800301e:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);	
 8003022:	2032      	movs	r0, #50	; 0x32
 8003024:	f008 fdf2 	bl	800bc0c <HAL_Delay>
		
    if((EE_ReadVariable(BRIGHTIR_ADDRESS,  &read_eeprom)) != HAL_OK)
 8003028:	1dbb      	adds	r3, r7, #6
 800302a:	4619      	mov	r1, r3
 800302c:	2010      	movs	r0, #16
 800302e:	f7ff fb4f 	bl	80026d0 <EE_ReadVariable>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <update_values+0x176>
    {
			print_segment("E5-R");
 8003038:	484e      	ldr	r0, [pc, #312]	; (8003174 <update_values+0x2ac>)
 800303a:	f008 f9b3 	bl	800b3a4 <print_segment>
    }		
		BrightIR_Value=read_eeprom;	
 800303e:	88fa      	ldrh	r2, [r7, #6]
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <update_values+0x2bc>)
 8003042:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8003044:	2032      	movs	r0, #50	; 0x32
 8003046:	f008 fde1 	bl	800bc0c <HAL_Delay>

    if((EE_ReadVariable(PASSWORD_ADDRESS,  &read_eeprom)) != HAL_OK)
 800304a:	1dbb      	adds	r3, r7, #6
 800304c:	4619      	mov	r1, r3
 800304e:	2012      	movs	r0, #18
 8003050:	f7ff fb3e 	bl	80026d0 <EE_ReadVariable>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <update_values+0x198>
    {
			print_segment("E6-R");
 800305a:	484b      	ldr	r0, [pc, #300]	; (8003188 <update_values+0x2c0>)
 800305c:	f008 f9a2 	bl	800b3a4 <print_segment>
    }		
		Password_Value=read_eeprom;			
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	4b4a      	ldr	r3, [pc, #296]	; (800318c <update_values+0x2c4>)
 8003064:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8003066:	2032      	movs	r0, #50	; 0x32
 8003068:	f008 fdd0 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(NTCTL_ADDRESS,  &read_eeprom)) != HAL_OK)
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	4619      	mov	r1, r3
 8003070:	2016      	movs	r0, #22
 8003072:	f7ff fb2d 	bl	80026d0 <EE_ReadVariable>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <update_values+0x1ba>
    {
			print_segment("E7-R");
 800307c:	483b      	ldr	r0, [pc, #236]	; (800316c <update_values+0x2a4>)
 800307e:	f008 f991 	bl	800b3a4 <print_segment>
    }		
		NTCTL_Value=(float)read_eeprom/10.0;
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	ee07 3a90 	vmov	s15, r3
 8003088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800308c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003094:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <update_values+0x2c8>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 800309a:	2032      	movs	r0, #50	; 0x32
 800309c:	f008 fdb6 	bl	800bc0c <HAL_Delay>
    if((EE_ReadVariable(NTCTH_ADDRESS,  &read_eeprom)) != HAL_OK)
 80030a0:	1dbb      	adds	r3, r7, #6
 80030a2:	4619      	mov	r1, r3
 80030a4:	2018      	movs	r0, #24
 80030a6:	f7ff fb13 	bl	80026d0 <EE_ReadVariable>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <update_values+0x1ee>
    {
			print_segment("E8-R");
 80030b0:	4832      	ldr	r0, [pc, #200]	; (800317c <update_values+0x2b4>)
 80030b2:	f008 f977 	bl	800b3a4 <print_segment>
    }		
		NTCTH_Value=(float)read_eeprom/10.0;
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <update_values+0x2cc>)
 80030ca:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 80030ce:	2032      	movs	r0, #50	; 0x32
 80030d0:	f008 fd9c 	bl	800bc0c <HAL_Delay>

	if((EE_ReadVariable(LAT_ADDRESS,  &read_eeprom)) != HAL_OK)
 80030d4:	1dbb      	adds	r3, r7, #6
 80030d6:	4619      	mov	r1, r3
 80030d8:	201a      	movs	r0, #26
 80030da:	f7ff faf9 	bl	80026d0 <EE_ReadVariable>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <update_values+0x222>
	{
			print_segment("E9-R");
 80030e4:	482c      	ldr	r0, [pc, #176]	; (8003198 <update_values+0x2d0>)
 80030e6:	f008 f95d 	bl	800b3a4 <print_segment>
	}
		LAT_Value=(double)read_eeprom/10.0;
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa09 	bl	8000504 <__aeabi_ui2d>
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <update_values+0x2d4>)
 80030f8:	f7fd fba8 	bl	800084c <__aeabi_ddiv>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <update_values+0x2d8>)
 8003102:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(50);
 8003106:	2032      	movs	r0, #50	; 0x32
 8003108:	f008 fd80 	bl	800bc0c <HAL_Delay>
	if((EE_ReadVariable(LONG_ADDRESS,  &read_eeprom)) != HAL_OK)
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	4619      	mov	r1, r3
 8003110:	201c      	movs	r0, #28
 8003112:	f7ff fadd 	bl	80026d0 <EE_ReadVariable>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <update_values+0x25a>
	{
			print_segment("E10-R");
 800311c:	4821      	ldr	r0, [pc, #132]	; (80031a4 <update_values+0x2dc>)
 800311e:	f008 f941 	bl	800b3a4 <print_segment>
	}
		LONG_Value=(double)read_eeprom/10.0;
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9ed 	bl	8000504 <__aeabi_ui2d>
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <update_values+0x2d4>)
 8003130:	f7fd fb8c 	bl	800084c <__aeabi_ddiv>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <update_values+0x2e0>)
 800313a:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(50);
 800313e:	2032      	movs	r0, #50	; 0x32
 8003140:	f008 fd64 	bl	800bc0c <HAL_Delay>
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	0801e810 	.word	0x0801e810
 8003150:	20000808 	.word	0x20000808
 8003154:	0801e818 	.word	0x0801e818
 8003158:	20000810 	.word	0x20000810
 800315c:	0801e820 	.word	0x0801e820
 8003160:	20000760 	.word	0x20000760
 8003164:	0801e828 	.word	0x0801e828
 8003168:	200007f8 	.word	0x200007f8
 800316c:	0801e830 	.word	0x0801e830
 8003170:	20000778 	.word	0x20000778
 8003174:	0801e838 	.word	0x0801e838
 8003178:	200007f4 	.word	0x200007f4
 800317c:	0801e840 	.word	0x0801e840
 8003180:	20000814 	.word	0x20000814
 8003184:	200007cc 	.word	0x200007cc
 8003188:	0801e848 	.word	0x0801e848
 800318c:	20000770 	.word	0x20000770
 8003190:	20000774 	.word	0x20000774
 8003194:	200007c8 	.word	0x200007c8
 8003198:	0801e850 	.word	0x0801e850
 800319c:	40240000 	.word	0x40240000
 80031a0:	20000790 	.word	0x20000790
 80031a4:	0801e858 	.word	0x0801e858
 80031a8:	20000788 	.word	0x20000788

080031ac <reset_keys>:
/////////////////////////////////////////////////////////////////////////////////////
void reset_keys()
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
				if(KEYSW1_longpressed)
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <reset_keys+0x38>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <reset_keys+0x12>
				{
					KEYSW1_longpressed=0;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <reset_keys+0x38>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
				}
				if(KEYSW4_shortpressed)
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <reset_keys+0x3c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <reset_keys+0x20>
				{
					KEYSW4_shortpressed=0;
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <reset_keys+0x3c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
				}
				if(KEYSW4_longpressed)
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <reset_keys+0x40>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <reset_keys+0x2e>
				{
					KEYSW4_longpressed=0;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <reset_keys+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
				}			
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	2000003c 	.word	0x2000003c
 80031e8:	200003c7 	.word	0x200003c7
 80031ec:	200003c8 	.word	0x200003c8

080031f0 <print_pass>:
///////////////////////////////////////////////////////////////////////////////////
void print_pass(char *str,uint8_t index,uint8_t dot)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
 80031fc:	4613      	mov	r3, r2
 80031fe:	70bb      	strb	r3, [r7, #2]
	char str_disp[10];
	uint8_t i,j;
	for( i=0;i<=index;i++)
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
 8003204:	e00c      	b.n	8003220 <print_pass+0x30>
	{
		str_disp[i]=str[i];
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	441a      	add	r2, r3
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	7812      	ldrb	r2, [r2, #0]
 8003210:	f107 0118 	add.w	r1, r7, #24
 8003214:	440b      	add	r3, r1
 8003216:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for( i=0;i<=index;i++)
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	3301      	adds	r3, #1
 800321e:	75fb      	strb	r3, [r7, #23]
 8003220:	7dfa      	ldrb	r2, [r7, #23]
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	429a      	cmp	r2, r3
 8003226:	d9ee      	bls.n	8003206 <print_pass+0x16>
	}
	if(dot)
 8003228:	78bb      	ldrb	r3, [r7, #2]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01e      	beq.n	800326c <print_pass+0x7c>
	{
		str_disp[i]='.';
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	f107 0218 	add.w	r2, r7, #24
 8003234:	4413      	add	r3, r2
 8003236:	222e      	movs	r2, #46	; 0x2e
 8003238:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for( j=i+1;j<=4;j++)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	3301      	adds	r3, #1
 8003240:	75bb      	strb	r3, [r7, #22]
 8003242:	e00f      	b.n	8003264 <print_pass+0x74>
		{
			str_disp[j]=str[i];i++;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	441a      	add	r2, r3
 800324a:	7dbb      	ldrb	r3, [r7, #22]
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	f107 0118 	add.w	r1, r7, #24
 8003252:	440b      	add	r3, r1
 8003254:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	3301      	adds	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
		for( j=i+1;j<=4;j++)
 800325e:	7dbb      	ldrb	r3, [r7, #22]
 8003260:	3301      	adds	r3, #1
 8003262:	75bb      	strb	r3, [r7, #22]
 8003264:	7dbb      	ldrb	r3, [r7, #22]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d9ec      	bls.n	8003244 <print_pass+0x54>
 800326a:	e012      	b.n	8003292 <print_pass+0xa2>
		}
	}
	else
	{
		for( j=i;j<=3;j++)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
 8003270:	e00c      	b.n	800328c <print_pass+0x9c>
		{
			str_disp[j]=str[j];
 8003272:	7dbb      	ldrb	r3, [r7, #22]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	441a      	add	r2, r3
 8003278:	7dbb      	ldrb	r3, [r7, #22]
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	f107 0118 	add.w	r1, r7, #24
 8003280:	440b      	add	r3, r1
 8003282:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for( j=i;j<=3;j++)
 8003286:	7dbb      	ldrb	r3, [r7, #22]
 8003288:	3301      	adds	r3, #1
 800328a:	75bb      	strb	r3, [r7, #22]
 800328c:	7dbb      	ldrb	r3, [r7, #22]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d9ef      	bls.n	8003272 <print_pass+0x82>
		}
	}
	str_disp[j]=0;
 8003292:	7dbb      	ldrb	r3, [r7, #22]
 8003294:	f107 0218 	add.w	r2, r7, #24
 8003298:	4413      	add	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	print_segment(str_disp);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4618      	mov	r0, r3
 80032a6:	f008 f87d 	bl	800b3a4 <print_segment>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
uint8_t flag_rtc_1s=0;
uint8_t flag_rtc_showtemp=1;
uint8_t flag_rtc_blink=0;
uint8_t counter_rtc_showtemp=0;
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	flag_rtc_1s=1;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RTCEx_WakeUpTimerEventCallback+0x48>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
	flag_rtc_blink=1-flag_rtc_blink;
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f1c3 0301 	rsb	r3, r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c>)
 80032ce:	701a      	strb	r2, [r3, #0]
	counter_rtc_showtemp++;
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80032da:	701a      	strb	r2, [r3, #0]
	if(counter_rtc_showtemp>=5)
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d905      	bls.n	80032f0 <HAL_RTCEx_WakeUpTimerEventCallback+0x3c>
	{
		flag_rtc_showtemp=1;
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RTCEx_WakeUpTimerEventCallback+0x54>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
		counter_rtc_showtemp=0;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RTCEx_WakeUpTimerEventCallback+0x50>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
	}
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	200003b6 	.word	0x200003b6
 8003300:	200003b7 	.word	0x200003b7
 8003304:	200003b8 	.word	0x200003b8
 8003308:	20000018 	.word	0x20000018

0800330c <File_log>:
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FRESULT File_log(char* path,char *wstr) 
{
 800330c:	b580      	push	{r7, lr}
 800330e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8003312:	af00      	add	r7, sp, #0
 8003314:	f107 0320 	add.w	r3, r7, #32
 8003318:	3b1c      	subs	r3, #28
 800331a:	6018      	str	r0, [r3, #0]
 800331c:	463b      	mov	r3, r7
 800331e:	6019      	str	r1, [r3, #0]
	uint32_t  byteswritten;
	FIL MyFile;
	FRESULT fr;
	if((fr=f_mount(&SDFatFS, (TCHAR const*)SDPath, 1)) != FR_OK)
 8003320:	2201      	movs	r2, #1
 8003322:	4946      	ldr	r1, [pc, #280]	; (800343c <File_log+0x130>)
 8003324:	4846      	ldr	r0, [pc, #280]	; (8003440 <File_log+0x134>)
 8003326:	f015 fcd9 	bl	8018cdc <f_mount>
 800332a:	4603      	mov	r3, r0
 800332c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003330:	f102 021f 	add.w	r2, r2, #31
 8003334:	7013      	strb	r3, [r2, #0]
 8003336:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800333a:	f103 031f 	add.w	r3, r3, #31
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <File_log+0x52>
	{
		print_segment("E101");
 8003344:	483f      	ldr	r0, [pc, #252]	; (8003444 <File_log+0x138>)
 8003346:	f008 f82d 	bl	800b3a4 <print_segment>
		HAL_Delay(1000);
 800334a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800334e:	f008 fc5d 	bl	800bc0c <HAL_Delay>
		return fr;
 8003352:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003356:	f103 031f 	add.w	r3, r3, #31
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	e069      	b.n	8003432 <File_log+0x126>
	}	
	HAL_Delay(10);
 800335e:	200a      	movs	r0, #10
 8003360:	f008 fc54 	bl	800bc0c <HAL_Delay>
	fr=f_open(&MyFile, (const TCHAR*)path,  FA_OPEN_APPEND|FA_WRITE);
 8003364:	f107 0320 	add.w	r3, r7, #32
 8003368:	3b1c      	subs	r3, #28
 800336a:	f107 0020 	add.w	r0, r7, #32
 800336e:	3818      	subs	r0, #24
 8003370:	2232      	movs	r2, #50	; 0x32
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	f015 fcf8 	bl	8018d68 <f_open>
 8003378:	4603      	mov	r3, r0
 800337a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800337e:	f102 021f 	add.w	r2, r2, #31
 8003382:	7013      	strb	r3, [r2, #0]
	if(fr!=FR_OK)
 8003384:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003388:	f103 031f 	add.w	r3, r3, #31
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <File_log+0xa0>
	{
		print_segment("E102");
 8003392:	482d      	ldr	r0, [pc, #180]	; (8003448 <File_log+0x13c>)
 8003394:	f008 f806 	bl	800b3a4 <print_segment>
		HAL_Delay(1000);
 8003398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339c:	f008 fc36 	bl	800bc0c <HAL_Delay>
		return fr;		
 80033a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033a4:	f103 031f 	add.w	r3, r3, #31
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	e042      	b.n	8003432 <File_log+0x126>
	}
	HAL_Delay(10);
 80033ac:	200a      	movs	r0, #10
 80033ae:	f008 fc2d 	bl	800bc0c <HAL_Delay>
	fr = f_write(&MyFile, wstr, strlen(wstr), (void *)&byteswritten);	
 80033b2:	463b      	mov	r3, r7
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	f7fc ff0b 	bl	80001d0 <strlen>
 80033ba:	4602      	mov	r2, r0
 80033bc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033c0:	f103 0318 	add.w	r3, r3, #24
 80033c4:	4639      	mov	r1, r7
 80033c6:	f107 0020 	add.w	r0, r7, #32
 80033ca:	3818      	subs	r0, #24
 80033cc:	6809      	ldr	r1, [r1, #0]
 80033ce:	f015 fe97 	bl	8019100 <f_write>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80033d8:	f102 021f 	add.w	r2, r2, #31
 80033dc:	7013      	strb	r3, [r2, #0]
	if(fr!=FR_OK)
 80033de:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033e2:	f103 031f 	add.w	r3, r3, #31
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00c      	beq.n	8003406 <File_log+0xfa>
	{
		print_segment("E103");
 80033ec:	4817      	ldr	r0, [pc, #92]	; (800344c <File_log+0x140>)
 80033ee:	f007 ffd9 	bl	800b3a4 <print_segment>
		HAL_Delay(1000);
 80033f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033f6:	f008 fc09 	bl	800bc0c <HAL_Delay>
		return fr;		
 80033fa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80033fe:	f103 031f 	add.w	r3, r3, #31
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	e015      	b.n	8003432 <File_log+0x126>
	}	
	HAL_Delay(10);
 8003406:	200a      	movs	r0, #10
 8003408:	f008 fc00 	bl	800bc0c <HAL_Delay>
	f_close(&MyFile);	
 800340c:	f107 0320 	add.w	r3, r7, #32
 8003410:	3b18      	subs	r3, #24
 8003412:	4618      	mov	r0, r3
 8003414:	f016 f886 	bl	8019524 <f_close>
	HAL_Delay(10);
 8003418:	200a      	movs	r0, #10
 800341a:	f008 fbf7 	bl	800bc0c <HAL_Delay>
	f_mount(0, "", 1);
 800341e:	2201      	movs	r2, #1
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <File_log+0x144>)
 8003422:	2000      	movs	r0, #0
 8003424:	f015 fc5a 	bl	8018cdc <f_mount>
	return fr;
 8003428:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800342c:	f103 031f 	add.w	r3, r3, #31
 8003430:	781b      	ldrb	r3, [r3, #0]
}
 8003432:	4618      	mov	r0, r3
 8003434:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000a68 	.word	0x20000a68
 8003440:	20001a9c 	.word	0x20001a9c
 8003444:	0801e860 	.word	0x0801e860
 8003448:	0801e868 	.word	0x0801e868
 800344c:	0801e870 	.word	0x0801e870
 8003450:	0801e878 	.word	0x0801e878

08003454 <generate_filename>:
/////////////////////////////////////////////////////////////////////////////////////////////
void generate_filename(RTC_DateTypeDef date,RTC_TimeTypeDef time,uint32_t *counter,char *filename)
{
 8003454:	b084      	sub	sp, #16
 8003456:	b5b0      	push	{r4, r5, r7, lr}
 8003458:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800345c:	af04      	add	r7, sp, #16
 800345e:	1d3c      	adds	r4, r7, #4
 8003460:	6020      	str	r0, [r4, #0]
 8003462:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8003466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	char file_str[500];
	FRESULT fr;
	
	*counter=(uint32_t)*counter+1;
 800346a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003476:	601a      	str	r2, [r3, #0]
	if(*counter>LIMIT_RECORDS_COUNTER)
 8003478:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f64e 4240 	movw	r2, #60480	; 0xec40
 8003482:	4293      	cmp	r3, r2
 8003484:	d903      	bls.n	800348e <generate_filename+0x3a>
	{
		*counter=1;
 8003486:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
	}

	if(*counter==1)
 800348e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d139      	bne.n	800350c <generate_filename+0xb8>
	{
			sprintf(filename,"LOG %04d-%02d-%02d %02d-%02d-%02d.CSV",date.Year+1980,date.Month,date.Date,time.Hours,time.Minutes,time.Seconds);
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	78db      	ldrb	r3, [r3, #3]
 800349c:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	785b      	ldrb	r3, [r3, #1]
 80034a4:	461d      	mov	r5, r3
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	789b      	ldrb	r3, [r3, #2]
 80034aa:	f897 1214 	ldrb.w	r1, [r7, #532]	; 0x214
 80034ae:	f897 0215 	ldrb.w	r0, [r7, #533]	; 0x215
 80034b2:	f897 4216 	ldrb.w	r4, [r7, #534]	; 0x216
 80034b6:	9403      	str	r4, [sp, #12]
 80034b8:	9002      	str	r0, [sp, #8]
 80034ba:	9101      	str	r1, [sp, #4]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	462b      	mov	r3, r5
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <generate_filename+0xc8>)
 80034c2:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80034c6:	f017 fbe3 	bl	801ac90 <siprintf>
			sprintf(file_str,"counter,DATE,TIME,Env_temperature,Env_humidity,Bright LED,Blink time,Bright IR,LDR,DOOR,TEC,FAN,NTC\n");
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4a14      	ldr	r2, [pc, #80]	; (8003520 <generate_filename+0xcc>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	4611      	mov	r1, r2
 80034d4:	2365      	movs	r3, #101	; 0x65
 80034d6:	461a      	mov	r2, r3
 80034d8:	f016 feb2 	bl	801a240 <memcpy>
			if((fr=File_log(filename,file_str))!=FR_OK)
 80034dc:	f107 0308 	add.w	r3, r7, #8
 80034e0:	4619      	mov	r1, r3
 80034e2:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80034e6:	f7ff ff11 	bl	800330c <File_log>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80034f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <generate_filename+0xb2>
			{
				print_segment("E104");
 80034f8:	480a      	ldr	r0, [pc, #40]	; (8003524 <generate_filename+0xd0>)
 80034fa:	f007 ff53 	bl	800b3a4 <print_segment>
				HAL_Delay(1000);
 80034fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003502:	f008 fb83 	bl	800bc0c <HAL_Delay>
			}	
			HAL_Delay(10);
 8003506:	200a      	movs	r0, #10
 8003508:	f008 fb80 	bl	800bc0c <HAL_Delay>
	}
}
 800350c:	bf00      	nop
 800350e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003512:	46bd      	mov	sp, r7
 8003514:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003518:	b004      	add	sp, #16
 800351a:	4770      	bx	lr
 800351c:	0801e87c 	.word	0x0801e87c
 8003520:	0801e8a4 	.word	0x0801e8a4
 8003524:	0801e90c 	.word	0x0801e90c

08003528 <HAL_ADC_ConvCpltCallback>:
#define NUM2_adcDMA	8
uint16_t rawadcValues[NUM_adcDMA];
uint16_t valid_adc[3];
uint8_t convCompleted=0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
		}
		valid_adc[0]=(uint32_t)valid_adc[0]/NUM2_adcDMA;
		valid_adc[1]=(uint32_t)valid_adc[1]/NUM2_adcDMA;				
		valid_adc[2]=(uint32_t)valid_adc[2]/NUM2_adcDMA;
*/		
		valid_adc[0]=rawadcValues[0];
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_ADC_ConvCpltCallback+0x34>)
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_ADC_ConvCpltCallback+0x38>)
 8003536:	801a      	strh	r2, [r3, #0]
		valid_adc[1]=rawadcValues[1];
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <HAL_ADC_ConvCpltCallback+0x34>)
 800353a:	885a      	ldrh	r2, [r3, #2]
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_ADC_ConvCpltCallback+0x38>)
 800353e:	805a      	strh	r2, [r3, #2]
		valid_adc[2]=rawadcValues[2];		
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_ADC_ConvCpltCallback+0x34>)
 8003542:	889a      	ldrh	r2, [r3, #4]
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_ADC_ConvCpltCallback+0x38>)
 8003546:	809a      	strh	r2, [r3, #4]
	
	convCompleted=1;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_ADC_ConvCpltCallback+0x3c>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	200007b8 	.word	0x200007b8
 8003560:	20000798 	.word	0x20000798
 8003564:	200003b9 	.word	0x200003b9

08003568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356c:	f5ad 5d55 	sub.w	sp, sp, #13632	; 0x3540
 8003570:	b081      	sub	sp, #4
 8003572:	af18      	add	r7, sp, #96	; 0x60
	float prev_float;
	double prev_double;
	uint16_t prev_uint16t;
	uint16_t tmp_eeprom;
	uint16_t tmp_uint16t;
	uint8_t blink=0,index_disp=0,passsegment_value=0;
 8003574:	2300      	movs	r3, #0
 8003576:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800357a:	f102 020d 	add.w	r2, r2, #13
 800357e:	7013      	strb	r3, [r2, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8003586:	f102 020c 	add.w	r2, r2, #12
 800358a:	7013      	strb	r3, [r2, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8003592:	f102 020b 	add.w	r2, r2, #11
 8003596:	7013      	strb	r3, [r2, #0]
	uint16_t counter=0;
 8003598:	2300      	movs	r3, #0
 800359a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800359e:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 80035a2:	8013      	strh	r3, [r2, #0]
	char str_disp[10];
	char disp_pass[4]={'-','-','-','-'};
 80035a4:	4bd9      	ldr	r3, [pc, #868]	; (800390c <main+0x3a4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035ac:	6013      	str	r3, [r2, #0]
	uint16_t pwm_percent=0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035b4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80035b8:	8013      	strh	r3, [r2, #0]
	float avg_Env_temperature=0.0,avg_Env_humidity=0.0;
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80035c2:	f102 0204 	add.w	r2, r2, #4
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80035d0:	6013      	str	r3, [r2, #0]
	uint16_t avg_counter=0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035d8:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80035dc:	8013      	strh	r3, [r2, #0]
	float prev_Env_temperature=0.0,prev_Env_humidity,Delta_T;
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035e6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80035ea:	6013      	str	r3, [r2, #0]
	enum {MAIN_MENU=0,PASS_MENU,TEMPL_MENU,TEMPH_MENU,DELTAT_MENU,NTCTL_MENU,NTCTH_MENU,HUML_MENU,HUMH_MENU,BLINKW_MENU,BRIGHTW_MENU,BRIGHTIR_MENU,SETYEAR_MENU,SETMONTH_MENU,SETDAY_MENU,SETHOUR_MENU,SETMIN_MENU,SETSEC_MENU,SETLAT_MENU,SETLONG_MENU,SETPASS_MENU} Menu_choice=MAIN_MENU;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035f2:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80035f6:	7013      	strb	r3, [r2, #0]
	enum {DISP_TEMP=0,DISP_HUM,DISP_BRIGHTW,DISP_BLINKW,DISP_BRIGHTIR,DISP_ERROR,DISP_NTC,DISP_SUNRISE,DISP_SUNSET} cur_Disp=DISP_TEMP,last_disp;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80035fe:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003602:	7013      	strb	r3, [r2, #0]
  //uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
  //uint8_t rtext[100];                                   /* File read buffer */
	char usb_str[80];
	char file_str[500];
	char filelog_name[255];
	uint8_t is_sddetected=0;
 8003604:	2300      	movs	r3, #0
 8003606:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800360a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800360e:	7013      	strb	r3, [r2, #0]
	uint32_t counterlog_file=0;
 8003610:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003614:	3b38      	subs	r3, #56	; 0x38
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
	uint8_t door_state=0,pre_door_state=0;//0=close ,1=open
 800361a:	2300      	movs	r3, #0
 800361c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003620:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8003624:	7013      	strb	r3, [r2, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800362c:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8003630:	7013      	strb	r3, [r2, #0]
	uint32_t weeklog_counter=1;
 8003632:	2301      	movs	r3, #1
 8003634:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003638:	f102 0220 	add.w	r2, r2, #32
 800363c:	6013      	str	r3, [r2, #0]
	uint8_t tmp_err;
	RTC_TimeTypeDef cur_time,tmp_time;
	RTC_DateTypeDef	cur_date={0},tmp_date,prev_date={0};
 800363e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003642:	3b24      	subs	r3, #36	; 0x24
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800364c:	3b2c      	subs	r3, #44	; 0x2c
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
	uint16_t raw_LDR,raw_Env_temperature,NTC_Centigrade_uint16;
	enum {LDR_NONE=0,LDR_BROKE, LDR_NIGHT,LDR_DAY} LDR_State=LDR_NONE;
 8003652:	2300      	movs	r3, #0
 8003654:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003658:	f102 0232 	add.w	r2, r2, #50	; 0x32
 800365c:	7013      	strb	r3, [r2, #0]

	uint8_t NTC_valid=0;
 800365e:	2300      	movs	r3, #0
 8003660:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003664:	f102 0231 	add.w	r2, r2, #49	; 0x31
 8003668:	7013      	strb	r3, [r2, #0]
	uint8_t set_pwm_state=1;
 800366a:	2301      	movs	r3, #1
 800366c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003670:	f102 021f 	add.w	r2, r2, #31
 8003674:	7013      	strb	r3, [r2, #0]
	uint16_t counter_LDR=0;
 8003676:	2300      	movs	r3, #0
 8003678:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800367c:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8003680:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003682:	f008 fa51 	bl	800bb28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003686:	f006 faf5 	bl	8009c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800368a:	f7ff fa3d 	bl	8002b08 <MX_GPIO_Init>
  MX_DMA_Init();
 800368e:	f7fe fded 	bl	800226c <MX_DMA_Init>
  MX_ADC1_Init();
 8003692:	f7fd fc79 	bl	8000f88 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003696:	f7ff fb21 	bl	8002cdc <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800369a:	f006 fd43 	bl	800a124 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800369e:	f011 fafb 	bl	8014c98 <MX_FATFS_Init>
  MX_TIM10_Init();
 80036a2:	f007 fff3 	bl	800b68c <MX_TIM10_Init>
  MX_TIM9_Init();
 80036a6:	f007 ffab 	bl	800b600 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 80036aa:	f016 f887 	bl	80197bc <MX_USB_DEVICE_Init>
  MX_IWDG_Init();
 80036ae:	f7ff fbc3 	bl	8002e38 <MX_IWDG_Init>
  MX_TIM11_Init();
 80036b2:	f008 f80f 	bl	800b6d4 <MX_TIM11_Init>
  MX_RTC_Init();
 80036b6:	f006 fca7 	bl	800a008 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim10);
 80036ba:	4895      	ldr	r0, [pc, #596]	; (8003910 <main+0x3a8>)
 80036bc:	f00e fd9a 	bl	80121f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
 80036c0:	2100      	movs	r1, #0
 80036c2:	4894      	ldr	r0, [pc, #592]	; (8003914 <main+0x3ac>)
 80036c4:	f00e fde6 	bl	8012294 <HAL_TIM_PWM_Start>
	init_sevenseg();
 80036c8:	f006 fe8e 	bl	800a3e8 <init_sevenseg>
	FAN_ON();
	HAL_Delay(5000);
}
*/
//////////////////////////////////////////////////
	if(vcnl4200_init()!=VCNL4200_OK)
 80036cc:	f008 f980 	bl	800b9d0 <vcnl4200_init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <main+0x180>
	{
		print_segment("E701");
 80036d6:	4890      	ldr	r0, [pc, #576]	; (8003918 <main+0x3b0>)
 80036d8:	f007 fe64 	bl	800b3a4 <print_segment>
		HAL_Delay(3000);
 80036dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80036e0:	f008 fa94 	bl	800bc0c <HAL_Delay>
		vcnl4200_init();
 80036e4:	f008 f974 	bl	800b9d0 <vcnl4200_init>
	}
	HAL_Delay(200);
 80036e8:	20c8      	movs	r0, #200	; 0xc8
 80036ea:	f008 fa8f 	bl	800bc0c <HAL_Delay>
	////////////////////////////////////////////////////////////////
	if((tmp_err=pca9632_init())!=PCA9632_OK)
 80036ee:	f006 fb4b 	bl	8009d88 <pca9632_init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80036f8:	f102 021e 	add.w	r2, r2, #30
 80036fc:	7013      	strb	r3, [r2, #0]
 80036fe:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003702:	f103 031e 	add.w	r3, r3, #30
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <main+0x1b6>
	{
		print_segment("E501");
 800370c:	4883      	ldr	r0, [pc, #524]	; (800391c <main+0x3b4>)
 800370e:	f007 fe49 	bl	800b3a4 <print_segment>
		HAL_Delay(1000);
 8003712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003716:	f008 fa79 	bl	800bc0c <HAL_Delay>
		pca9632_init();
 800371a:	f006 fb35 	bl	8009d88 <pca9632_init>
	}	
	/////////////////////////////////////////////////////////////////
	if((tmp_err=tmp275_init())!=TMP275_OK)
 800371e:	f008 f89f 	bl	800b860 <tmp275_init>
 8003722:	4603      	mov	r3, r0
 8003724:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003728:	f102 021e 	add.w	r2, r2, #30
 800372c:	7013      	strb	r3, [r2, #0]
 800372e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003732:	f103 031e 	add.w	r3, r3, #30
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <main+0x1e0>
	{
		cur_Disp=DISP_ERROR;
 800373c:	2305      	movs	r3, #5
 800373e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003742:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003746:	7013      	strb	r3, [r2, #0]
	}
	////////////////////////////////////////////////////////////
	sprintf(SDPath,"");
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <main+0x3b8>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
	print_segment("----");
 800374e:	4875      	ldr	r0, [pc, #468]	; (8003924 <main+0x3bc>)
 8003750:	f007 fe28 	bl	800b3a4 <print_segment>
	HAL_Delay(1000);
 8003754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003758:	f008 fa58 	bl	800bc0c <HAL_Delay>
	print_segment("EEEE");
 800375c:	4872      	ldr	r0, [pc, #456]	; (8003928 <main+0x3c0>)
 800375e:	f007 fe21 	bl	800b3a4 <print_segment>
	
	HAL_FLASH_Unlock();
 8003762:	f009 fbef 	bl	800cf44 <HAL_FLASH_Unlock>
	HAL_Delay(50);
 8003766:	2032      	movs	r0, #50	; 0x32
 8003768:	f008 fa50 	bl	800bc0c <HAL_Delay>
  if( EE_Init() != EE_OK)
 800376c:	f7fe fdae 	bl	80022cc <EE_Init>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <main+0x216>
  {
    print_segment("ER00");
 8003776:	486d      	ldr	r0, [pc, #436]	; (800392c <main+0x3c4>)
 8003778:	f007 fe14 	bl	800b3a4 <print_segment>
		while(1);
 800377c:	e7fe      	b.n	800377c <main+0x214>
  }	
	if(EE_WriteVariable(DUMMY_ADDRESS,9567)!=HAL_OK)
 800377e:	f242 515f 	movw	r1, #9567	; 0x255f
 8003782:	2014      	movs	r0, #20
 8003784:	f7fe ffec 	bl	8002760 <EE_WriteVariable>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <main+0x22e>
  {
		print_segment("ER01");
 800378e:	4868      	ldr	r0, [pc, #416]	; (8003930 <main+0x3c8>)
 8003790:	f007 fe08 	bl	800b3a4 <print_segment>
		while(1);
 8003794:	e7fe      	b.n	8003794 <main+0x22c>
  }	
  if((EE_ReadVariable(DUMMY_ADDRESS,  &tmp_eeprom)) != HAL_OK)
 8003796:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800379a:	f103 030e 	add.w	r3, r3, #14
 800379e:	4619      	mov	r1, r3
 80037a0:	2014      	movs	r0, #20
 80037a2:	f7fe ff95 	bl	80026d0 <EE_ReadVariable>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <main+0x24c>
  {
		print_segment("ER02");
 80037ac:	4861      	ldr	r0, [pc, #388]	; (8003934 <main+0x3cc>)
 80037ae:	f007 fdf9 	bl	800b3a4 <print_segment>
		while(1);
 80037b2:	e7fe      	b.n	80037b2 <main+0x24a>
  }		
	sprintf(str_disp,"%04d",tmp_eeprom);
 80037b4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80037b8:	f103 030e 	add.w	r3, r3, #14
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80037c4:	f103 0304 	add.w	r3, r3, #4
 80037c8:	495b      	ldr	r1, [pc, #364]	; (8003938 <main+0x3d0>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f017 fa60 	bl	801ac90 <siprintf>
	print_segment(str_disp);
 80037d0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80037d4:	f103 0304 	add.w	r3, r3, #4
 80037d8:	4618      	mov	r0, r3
 80037da:	f007 fde3 	bl	800b3a4 <print_segment>
	
	HAL_IWDG_Refresh(&hiwdg);
 80037de:	4857      	ldr	r0, [pc, #348]	; (800393c <main+0x3d4>)
 80037e0:	f00b f8a8 	bl	800e934 <HAL_IWDG_Refresh>
	HAL_Delay(100);
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	f008 fa11 	bl	800bc0c <HAL_Delay>


	//HAL_RTCEx_DeactivateTamper(&hrtc, RTC_TAMPER_1);
	//__HAL_RTC_TAMPER_CLEAR_FLAG(&hrtc, RTC_FLAG_TAMP1F);

	if((HAL_RTCEx_BKUPRead (&hrtc,RTC_BKP_DR1) !=0x0001)||(!KEYSW1_GET()&&!KEYSW2_GET()))
 80037ea:	2101      	movs	r1, #1
 80037ec:	4854      	ldr	r0, [pc, #336]	; (8003940 <main+0x3d8>)
 80037ee:	f00d fb6f 	bl	8010ed0 <HAL_RTCEx_BKUPRead>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d111      	bne.n	800381c <main+0x2b4>
 80037f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037fc:	4851      	ldr	r0, [pc, #324]	; (8003944 <main+0x3dc>)
 80037fe:	f00a f8a7 	bl	800d950 <HAL_GPIO_ReadPin>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 80fa 	bne.w	80039fe <main+0x496>
 800380a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380e:	484d      	ldr	r0, [pc, #308]	; (8003944 <main+0x3dc>)
 8003810:	f00a f89e 	bl	800d950 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 80f1 	bne.w	80039fe <main+0x496>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800381c:	4847      	ldr	r0, [pc, #284]	; (800393c <main+0x3d4>)
 800381e:	f00b f889 	bl	800e934 <HAL_IWDG_Refresh>
		 HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0001);
 8003822:	2201      	movs	r2, #1
 8003824:	2101      	movs	r1, #1
 8003826:	4846      	ldr	r0, [pc, #280]	; (8003940 <main+0x3d8>)
 8003828:	f00d fb38 	bl	8010e9c <HAL_RTCEx_BKUPWrite>

		
		if(EE_WriteVariable(TL_ADDRESS,TL_DEFAULT)!=HAL_OK)
 800382c:	2164      	movs	r1, #100	; 0x64
 800382e:	2002      	movs	r0, #2
 8003830:	f7fe ff96 	bl	8002760 <EE_WriteVariable>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <main+0x2da>
		{
			print_segment("ER04");
 800383a:	4843      	ldr	r0, [pc, #268]	; (8003948 <main+0x3e0>)
 800383c:	f007 fdb2 	bl	800b3a4 <print_segment>
			while(1);
 8003840:	e7fe      	b.n	8003840 <main+0x2d8>
		}
		HAL_Delay(50);
 8003842:	2032      	movs	r0, #50	; 0x32
 8003844:	f008 f9e2 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(TH_ADDRESS,TH_DEFAULT)!=HAL_OK)
 8003848:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800384c:	2004      	movs	r0, #4
 800384e:	f7fe ff87 	bl	8002760 <EE_WriteVariable>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <main+0x2f8>
		{
			print_segment("ER05");
 8003858:	483c      	ldr	r0, [pc, #240]	; (800394c <main+0x3e4>)
 800385a:	f007 fda3 	bl	800b3a4 <print_segment>
			while(1);
 800385e:	e7fe      	b.n	800385e <main+0x2f6>
		}
		HAL_Delay(50);
 8003860:	2032      	movs	r0, #50	; 0x32
 8003862:	f008 f9d3 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(DELTATEMP_ADDRESS,DELTATEMP_DEFAULT)!=HAL_OK)
 8003866:	2114      	movs	r1, #20
 8003868:	2006      	movs	r0, #6
 800386a:	f7fe ff79 	bl	8002760 <EE_WriteVariable>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <main+0x314>
		{
			print_segment("ER09");
 8003874:	4836      	ldr	r0, [pc, #216]	; (8003950 <main+0x3e8>)
 8003876:	f007 fd95 	bl	800b3a4 <print_segment>
			while(1);
 800387a:	e7fe      	b.n	800387a <main+0x312>
		}
		HAL_Delay(50);
 800387c:	2032      	movs	r0, #50	; 0x32
 800387e:	f008 f9c5 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(HL_ADDRESS,HL_DEFAULT)!=HAL_OK)
 8003882:	2100      	movs	r1, #0
 8003884:	2008      	movs	r0, #8
 8003886:	f7fe ff6b 	bl	8002760 <EE_WriteVariable>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <main+0x330>
		{
			print_segment("ER06");
 8003890:	4830      	ldr	r0, [pc, #192]	; (8003954 <main+0x3ec>)
 8003892:	f007 fd87 	bl	800b3a4 <print_segment>
			while(1);
 8003896:	e7fe      	b.n	8003896 <main+0x32e>
		}
		HAL_Delay(50);
 8003898:	2032      	movs	r0, #50	; 0x32
 800389a:	f008 f9b7 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(HH_ADDRESS,HH_DEFAULT)!=HAL_OK)
 800389e:	f44f 7148 	mov.w	r1, #800	; 0x320
 80038a2:	200a      	movs	r0, #10
 80038a4:	f7fe ff5c 	bl	8002760 <EE_WriteVariable>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <main+0x34e>
		{
			print_segment("ER07");
 80038ae:	482a      	ldr	r0, [pc, #168]	; (8003958 <main+0x3f0>)
 80038b0:	f007 fd78 	bl	800b3a4 <print_segment>
			while(1);
 80038b4:	e7fe      	b.n	80038b4 <main+0x34c>
		}
		HAL_Delay(50);
 80038b6:	2032      	movs	r0, #50	; 0x32
 80038b8:	f008 f9a8 	bl	800bc0c <HAL_Delay>

		if(EE_WriteVariable(BRIGHTW_ADDRESS,BRIGHTW_DEFAULT)!=HAL_OK)
 80038bc:	2105      	movs	r1, #5
 80038be:	200c      	movs	r0, #12
 80038c0:	f7fe ff4e 	bl	8002760 <EE_WriteVariable>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <main+0x36a>
		{
			print_segment("ER08");
 80038ca:	4824      	ldr	r0, [pc, #144]	; (800395c <main+0x3f4>)
 80038cc:	f007 fd6a 	bl	800b3a4 <print_segment>
			while(1);
 80038d0:	e7fe      	b.n	80038d0 <main+0x368>
		}
		HAL_Delay(50);
 80038d2:	2032      	movs	r0, #50	; 0x32
 80038d4:	f008 f99a 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(BLINKW_ADDRESS,BLINKW_DEFAULT)!=HAL_OK)
 80038d8:	210a      	movs	r1, #10
 80038da:	200e      	movs	r0, #14
 80038dc:	f7fe ff40 	bl	8002760 <EE_WriteVariable>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <main+0x386>
		{
			print_segment("ER11");
 80038e6:	481e      	ldr	r0, [pc, #120]	; (8003960 <main+0x3f8>)
 80038e8:	f007 fd5c 	bl	800b3a4 <print_segment>
			while(1);
 80038ec:	e7fe      	b.n	80038ec <main+0x384>
		}
		HAL_Delay(50);
 80038ee:	2032      	movs	r0, #50	; 0x32
 80038f0:	f008 f98c 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(BRIGHTIR_ADDRESS,BRIGHTIR_DEFAULT)!=HAL_OK)
 80038f4:	2100      	movs	r1, #0
 80038f6:	2010      	movs	r0, #16
 80038f8:	f7fe ff32 	bl	8002760 <EE_WriteVariable>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d030      	beq.n	8003964 <main+0x3fc>
		{
			print_segment("ER11");
 8003902:	4817      	ldr	r0, [pc, #92]	; (8003960 <main+0x3f8>)
 8003904:	f007 fd4e 	bl	800b3a4 <print_segment>
			while(1);
 8003908:	e7fe      	b.n	8003908 <main+0x3a0>
 800390a:	bf00      	nop
 800390c:	0801eb2c 	.word	0x0801eb2c
 8003910:	20000980 	.word	0x20000980
 8003914:	20000a00 	.word	0x20000a00
 8003918:	0801e914 	.word	0x0801e914
 800391c:	0801e91c 	.word	0x0801e91c
 8003920:	20000a68 	.word	0x20000a68
 8003924:	0801e924 	.word	0x0801e924
 8003928:	0801e92c 	.word	0x0801e92c
 800392c:	0801e934 	.word	0x0801e934
 8003930:	0801e93c 	.word	0x0801e93c
 8003934:	0801e944 	.word	0x0801e944
 8003938:	0801e94c 	.word	0x0801e94c
 800393c:	20000750 	.word	0x20000750
 8003940:	20000818 	.word	0x20000818
 8003944:	40021000 	.word	0x40021000
 8003948:	0801e954 	.word	0x0801e954
 800394c:	0801e95c 	.word	0x0801e95c
 8003950:	0801e964 	.word	0x0801e964
 8003954:	0801e96c 	.word	0x0801e96c
 8003958:	0801e974 	.word	0x0801e974
 800395c:	0801e97c 	.word	0x0801e97c
 8003960:	0801e984 	.word	0x0801e984
		}
		HAL_Delay(50);		
 8003964:	2032      	movs	r0, #50	; 0x32
 8003966:	f008 f951 	bl	800bc0c <HAL_Delay>
		
		if(EE_WriteVariable(PASSWORD_ADDRESS,PASSWORD_DEFAULT)!=HAL_OK)
 800396a:	2100      	movs	r1, #0
 800396c:	2012      	movs	r0, #18
 800396e:	f7fe fef7 	bl	8002760 <EE_WriteVariable>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <main+0x418>
		{
			print_segment("ER10");
 8003978:	48aa      	ldr	r0, [pc, #680]	; (8003c24 <main+0x6bc>)
 800397a:	f007 fd13 	bl	800b3a4 <print_segment>
			while(1);
 800397e:	e7fe      	b.n	800397e <main+0x416>
		}
		HAL_Delay(50);
 8003980:	2032      	movs	r0, #50	; 0x32
 8003982:	f008 f943 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(NTCTL_ADDRESS,NTCTL_DEFAULT)!=HAL_OK)
 8003986:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800398a:	2016      	movs	r0, #22
 800398c:	f7fe fee8 	bl	8002760 <EE_WriteVariable>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <main+0x436>
		{
			print_segment("ER12");
 8003996:	48a4      	ldr	r0, [pc, #656]	; (8003c28 <main+0x6c0>)
 8003998:	f007 fd04 	bl	800b3a4 <print_segment>
			while(1);
 800399c:	e7fe      	b.n	800399c <main+0x434>
		}
		HAL_Delay(50);
 800399e:	2032      	movs	r0, #50	; 0x32
 80039a0:	f008 f934 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(NTCTH_ADDRESS,NTCTH_DEFAULT)!=HAL_OK)
 80039a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80039a8:	2018      	movs	r0, #24
 80039aa:	f7fe fed9 	bl	8002760 <EE_WriteVariable>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <main+0x454>
		{
			print_segment("ER13");
 80039b4:	489d      	ldr	r0, [pc, #628]	; (8003c2c <main+0x6c4>)
 80039b6:	f007 fcf5 	bl	800b3a4 <print_segment>
			while(1);
 80039ba:	e7fe      	b.n	80039ba <main+0x452>
		}
		HAL_Delay(50);
 80039bc:	2032      	movs	r0, #50	; 0x32
 80039be:	f008 f925 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(LAT_ADDRESS,LAT_DEFAULT)!=HAL_OK)
 80039c2:	f240 1165 	movw	r1, #357	; 0x165
 80039c6:	201a      	movs	r0, #26
 80039c8:	f7fe feca 	bl	8002760 <EE_WriteVariable>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <main+0x472>
		{
			print_segment("ER14");
 80039d2:	4897      	ldr	r0, [pc, #604]	; (8003c30 <main+0x6c8>)
 80039d4:	f007 fce6 	bl	800b3a4 <print_segment>
			while(1);
 80039d8:	e7fe      	b.n	80039d8 <main+0x470>
		}
		HAL_Delay(50);
 80039da:	2032      	movs	r0, #50	; 0x32
 80039dc:	f008 f916 	bl	800bc0c <HAL_Delay>
		if(EE_WriteVariable(LONG_ADDRESS,LONG_DEFAULT)!=HAL_OK)
 80039e0:	f240 2102 	movw	r1, #514	; 0x202
 80039e4:	201c      	movs	r0, #28
 80039e6:	f7fe febb 	bl	8002760 <EE_WriteVariable>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <main+0x490>
		{
			print_segment("ER15");
 80039f0:	4890      	ldr	r0, [pc, #576]	; (8003c34 <main+0x6cc>)
 80039f2:	f007 fcd7 	bl	800b3a4 <print_segment>
			while(1);
 80039f6:	e7fe      	b.n	80039f6 <main+0x48e>
		}
		HAL_Delay(50);
 80039f8:	2032      	movs	r0, #50	; 0x32
 80039fa:	f008 f907 	bl	800bc0c <HAL_Delay>
	}
	//HAL_PWR_DisableBkUpAccess();
	update_values();
 80039fe:	f7ff fa63 	bl	8002ec8 <update_values>
	print_segment("RRRR");
 8003a02:	488d      	ldr	r0, [pc, #564]	; (8003c38 <main+0x6d0>)
 8003a04:	f007 fcce 	bl	800b3a4 <print_segment>
	HAL_Delay(1000);
 8003a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a0c:	f008 f8fe 	bl	800bc0c <HAL_Delay>
	
	//////////////////////////////////////////////////////////////
	if(BSP_SD_IsDetected()==SD_PRESENT && (is_sddetected==0))
 8003a10:	f011 fa0b 	bl	8014e2a <BSP_SD_IsDetected>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d120      	bne.n	8003a5c <main+0x4f4>
 8003a1a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003a1e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d119      	bne.n	8003a5c <main+0x4f4>
	{
		HAL_Delay(500);
 8003a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a2c:	f008 f8ee 	bl	800bc0c <HAL_Delay>
		if(BSP_SD_IsDetected()==SD_PRESENT && (is_sddetected==0))
 8003a30:	f011 f9fb 	bl	8014e2a <BSP_SD_IsDetected>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d110      	bne.n	8003a5c <main+0x4f4>
 8003a3a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003a3e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <main+0x4f4>
		{
				HAL_Delay(500);
 8003a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a4c:	f008 f8de 	bl	800bc0c <HAL_Delay>
				is_sddetected=1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003a56:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8003a5a:	7013      	strb	r3, [r2, #0]
		}
	}
	//////////////////////////////////////////////////////////////////
	FAN_OFF();
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2120      	movs	r1, #32
 8003a60:	4876      	ldr	r0, [pc, #472]	; (8003c3c <main+0x6d4>)
 8003a62:	f009 ff8d 	bl	800d980 <HAL_GPIO_WritePin>
	FAN2_OFF();
 8003a66:	2200      	movs	r2, #0
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	4875      	ldr	r0, [pc, #468]	; (8003c40 <main+0x6d8>)
 8003a6c:	f009 ff88 	bl	800d980 <HAL_GPIO_WritePin>
	sprintf(FAN_chstate,"OFF");	
 8003a70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a74:	3b04      	subs	r3, #4
 8003a76:	4a73      	ldr	r2, [pc, #460]	; (8003c44 <main+0x6dc>)
 8003a78:	601a      	str	r2, [r3, #0]
	sprintf(TEC_chstate,"OFF");
 8003a7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003a7e:	3b38      	subs	r3, #56	; 0x38
 8003a80:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <main+0x6dc>)
 8003a82:	601a      	str	r2, [r3, #0]
	sprintf(DOOR_chstate,"---");
 8003a84:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a88:	3b10      	subs	r3, #16
 8003a8a:	4a6f      	ldr	r2, [pc, #444]	; (8003c48 <main+0x6e0>)
 8003a8c:	601a      	str	r2, [r3, #0]
	

	LDR_resistance=0.0;
 8003a8e:	4a6f      	ldr	r2, [pc, #444]	; (8003c4c <main+0x6e4>)
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	e9c2 3400 	strd	r3, r4, [r2]
	NTC_Resistance=0.0;
 8003a9c:	4a6c      	ldr	r2, [pc, #432]	; (8003c50 <main+0x6e8>)
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	e9c2 3400 	strd	r3, r4, [r2]
	//////////////////////////////////////////////////////////////
	if(tmp275_readTemperature(&Env_temperature)!=TMP275_OK)
 8003aaa:	486a      	ldr	r0, [pc, #424]	; (8003c54 <main+0x6ec>)
 8003aac:	f007 ff0c 	bl	800b8c8 <tmp275_readTemperature>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <main+0x55e>
	{
		tmp275_init();
 8003ab6:	f007 fed3 	bl	800b860 <tmp275_init>
		cur_Disp=DISP_ERROR;
 8003aba:	2305      	movs	r3, #5
 8003abc:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003ac0:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003ac4:	7013      	strb	r3, [r2, #0]
	}
	prev_Env_temperature=Env_temperature;
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <main+0x6ec>)
 8003ac8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003acc:	4618      	mov	r0, r3
 8003ace:	4621      	mov	r1, r4
 8003ad0:	f7fd f88a 	bl	8000be8 <__aeabi_d2f>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003ada:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8003ade:	6013      	str	r3, [r2, #0]
//		cur_Disp=DISP_ERROR;
//	}
//	prev_Env_humidity=Env_humidity;

	/////////////////////////////////////////////////////////////////////////
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawadcValues, NUM_adcDMA);
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	495d      	ldr	r1, [pc, #372]	; (8003c58 <main+0x6f0>)
 8003ae4:	485d      	ldr	r0, [pc, #372]	; (8003c5c <main+0x6f4>)
 8003ae6:	f008 f8f7 	bl	800bcd8 <HAL_ADC_Start_DMA>
	flag_1s=flag_rtc_1s=1;
 8003aea:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <main+0x6f8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <main+0x6f8>)
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <main+0x6fc>)
 8003af6:	701a      	strb	r2, [r3, #0]
	last_disp=cur_Disp=DISP_TEMP;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003afe:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003b02:	7013      	strb	r3, [r2, #0]
 8003b04:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003b08:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003b12:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8003b16:	7013      	strb	r3, [r2, #0]
	uint8_t winter=0; //1=summer 0=winter
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003b1e:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8003b22:	7013      	strb	r3, [r2, #0]
while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			HAL_IWDG_Refresh(&hiwdg);
 8003b24:	4850      	ldr	r0, [pc, #320]	; (8003c68 <main+0x700>)
 8003b26:	f00a ff05 	bl	800e934 <HAL_IWDG_Refresh>
			//////////////////////////Read RTC////////////////////////////////////////
			if(flag_rtc_1s)
 8003b2a:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <main+0x6f8>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 83b3 	beq.w	800429a <main+0xd32>
			{
				flag_rtc_1s=0;
 8003b34:	4b4a      	ldr	r3, [pc, #296]	; (8003c60 <main+0x6f8>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
				////////////////////////Get Set time date & day light saving//////////////////
				HAL_RTC_GetDate(&hrtc,&cur_date,RTC_FORMAT_BIN);
 8003b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b3e:	3b24      	subs	r3, #36	; 0x24
 8003b40:	2200      	movs	r2, #0
 8003b42:	4619      	mov	r1, r3
 8003b44:	4849      	ldr	r0, [pc, #292]	; (8003c6c <main+0x704>)
 8003b46:	f00c ffe6 	bl	8010b16 <HAL_RTC_GetDate>
				date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8003b4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b4e:	3b24      	subs	r3, #36	; 0x24
 8003b50:	789b      	ldrb	r3, [r3, #2]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b58:	3b1c      	subs	r3, #28
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b60:	3b24      	subs	r3, #36	; 0x24
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b6a:	3b1c      	subs	r3, #28
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b72:	3b24      	subs	r3, #36	; 0x24
 8003b74:	78db      	ldrb	r3, [r3, #3]
 8003b76:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8003b7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b7e:	3b1c      	subs	r3, #28
 8003b80:	601a      	str	r2, [r3, #0]
				if(Astro_daylighsaving(date) && date.month==RTC_MONTH_MARCH)
 8003b82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b86:	3b1c      	subs	r3, #28
 8003b88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b8c:	f7fd fae2 	bl	8001154 <Astro_daylighsaving>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <main+0x646>
 8003b96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b9a:	3b1c      	subs	r3, #28
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d105      	bne.n	8003bae <main+0x646>
					winter=0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003ba8:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8003bac:	7013      	strb	r3, [r2, #0]

				if(!winter && Astro_daylighsaving(date) && !(hrtc.Instance->CR & RTC_STOREOPERATION_SET)) //summer time && BKP=0 =>start of summer time
 8003bae:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003bb2:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d159      	bne.n	8003c70 <main+0x708>
 8003bbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003bc0:	3b1c      	subs	r3, #28
 8003bc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bc6:	f7fd fac5 	bl	8001154 <Astro_daylighsaving>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d04f      	beq.n	8003c70 <main+0x708>
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <main+0x704>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d148      	bne.n	8003c70 <main+0x708>
				{
					tmp_time.Hours = 1;
 8003bde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003be2:	3b20      	subs	r3, #32
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
					tmp_time.Minutes = 0;
 8003be8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bec:	3b20      	subs	r3, #32
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
					tmp_time.Seconds = 0;
 8003bf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bf6:	3b20      	subs	r3, #32
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	709a      	strb	r2, [r3, #2]
					tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003bfc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c00:	3b20      	subs	r3, #32
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
					tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 8003c06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c0a:	3b20      	subs	r3, #32
 8003c0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003c10:	611a      	str	r2, [r3, #16]
					HAL_RTC_SetTime(&hrtc, &tmp_time, RTC_FORMAT_BIN);
 8003c12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003c16:	3b20      	subs	r3, #32
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <main+0x704>)
 8003c1e:	f00c fdb8 	bl	8010792 <HAL_RTC_SetTime>
 8003c22:	e077      	b.n	8003d14 <main+0x7ac>
 8003c24:	0801e98c 	.word	0x0801e98c
 8003c28:	0801e994 	.word	0x0801e994
 8003c2c:	0801e99c 	.word	0x0801e99c
 8003c30:	0801e9a4 	.word	0x0801e9a4
 8003c34:	0801e9ac 	.word	0x0801e9ac
 8003c38:	0801e9b4 	.word	0x0801e9b4
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	0046464f 	.word	0x0046464f
 8003c48:	002d2d2d 	.word	0x002d2d2d
 8003c4c:	20000780 	.word	0x20000780
 8003c50:	20000768 	.word	0x20000768
 8003c54:	200007d8 	.word	0x200007d8
 8003c58:	200007b8 	.word	0x200007b8
 8003c5c:	2000063c 	.word	0x2000063c
 8003c60:	200003b6 	.word	0x200003b6
 8003c64:	200003c4 	.word	0x200003c4
 8003c68:	20000750 	.word	0x20000750
 8003c6c:	20000818 	.word	0x20000818
				}
				else if(!Astro_daylighsaving(date) && (hrtc.Instance->CR & RTC_STOREOPERATION_SET)) //winter & BKP=1 =>start of winter
 8003c70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c74:	3b1c      	subs	r3, #28
 8003c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c7a:	f7fd fa6b 	bl	8001154 <Astro_daylighsaving>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d147      	bne.n	8003d14 <main+0x7ac>
 8003c84:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <main+0x8a0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d040      	beq.n	8003d14 <main+0x7ac>
				{
					winter=1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003c98:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8003c9c:	7013      	strb	r3, [r2, #0]
					tmp_time.Hours = 23;
 8003c9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ca2:	3b20      	subs	r3, #32
 8003ca4:	2217      	movs	r2, #23
 8003ca6:	701a      	strb	r2, [r3, #0]
					tmp_time.Minutes = 0;
 8003ca8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cac:	3b20      	subs	r3, #32
 8003cae:	2200      	movs	r2, #0
 8003cb0:	705a      	strb	r2, [r3, #1]
					tmp_time.Seconds = 0;
 8003cb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cb6:	3b20      	subs	r3, #32
 8003cb8:	2200      	movs	r2, #0
 8003cba:	709a      	strb	r2, [r3, #2]
					tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cbc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cc0:	3b20      	subs	r3, #32
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
					tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cca:	3b20      	subs	r3, #32
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]
					HAL_RTC_SetTime(&hrtc, &tmp_time, RTC_FORMAT_BIN);
 8003cd0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cd4:	3b20      	subs	r3, #32
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	484b      	ldr	r0, [pc, #300]	; (8003e08 <main+0x8a0>)
 8003cdc:	f00c fd59 	bl	8010792 <HAL_RTC_SetTime>

					tmp_date.Month = RTC_MONTH_SEPTEMBER;
 8003ce0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ce4:	3b28      	subs	r3, #40	; 0x28
 8003ce6:	2209      	movs	r2, #9
 8003ce8:	705a      	strb	r2, [r3, #1]
					tmp_date.Date = 20;
 8003cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cee:	3b28      	subs	r3, #40	; 0x28
 8003cf0:	2214      	movs	r2, #20
 8003cf2:	709a      	strb	r2, [r3, #2]
					tmp_date.Year = cur_date.Year;
 8003cf4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cf8:	3b24      	subs	r3, #36	; 0x24
 8003cfa:	78da      	ldrb	r2, [r3, #3]
 8003cfc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d00:	3b28      	subs	r3, #40	; 0x28
 8003d02:	70da      	strb	r2, [r3, #3]
					HAL_RTC_SetDate(&hrtc, &tmp_date, RTC_FORMAT_BIN);
 8003d04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d08:	3b28      	subs	r3, #40	; 0x28
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	483e      	ldr	r0, [pc, #248]	; (8003e08 <main+0x8a0>)
 8003d10:	f00c fe5a 	bl	80109c8 <HAL_RTC_SetDate>
				}
				HAL_RTC_GetTime(&hrtc,&cur_time,RTC_FORMAT_BIN);
 8003d14:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d18:	3b0c      	subs	r3, #12
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	483a      	ldr	r0, [pc, #232]	; (8003e08 <main+0x8a0>)
 8003d20:	f00c fdf4 	bl	801090c <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc,&cur_date,RTC_FORMAT_BIN);
 8003d24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d28:	3b24      	subs	r3, #36	; 0x24
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4836      	ldr	r0, [pc, #216]	; (8003e08 <main+0x8a0>)
 8003d30:	f00c fef1 	bl	8010b16 <HAL_RTC_GetDate>
				///////////////////////////////////////////////////////////////

				while(!convCompleted);
 8003d34:	bf00      	nop
 8003d36:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <main+0x8a4>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0fb      	beq.n	8003d36 <main+0x7ce>
				convCompleted=0;
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <main+0x8a4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
				/////////////////////find micro temperature////////////////////
				Micro_temperature=((double)valid_adc[2]*3300.0/4096.0-V_25)/AVG_SLOPE+25;
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <main+0x8a8>)
 8003d46:	889b      	ldrh	r3, [r3, #4]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fbdb 	bl	8000504 <__aeabi_ui2d>
 8003d4e:	a32c      	add	r3, pc, #176	; (adr r3, 8003e00 <main+0x898>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fc50 	bl	80005f8 <__aeabi_dmul>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	4621      	mov	r1, r4
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <main+0x8ac>)
 8003d66:	f7fc fd71 	bl	800084c <__aeabi_ddiv>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	4621      	mov	r1, r4
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <main+0x8b0>)
 8003d78:	f7fc fa86 	bl	8000288 <__aeabi_dsub>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4618      	mov	r0, r3
 8003d82:	4621      	mov	r1, r4
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <main+0x8b4>)
 8003d8a:	f7fc fd5f 	bl	800084c <__aeabi_ddiv>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	4618      	mov	r0, r3
 8003d94:	4621      	mov	r1, r4
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <main+0x8b8>)
 8003d9c:	f7fc fa76 	bl	800028c <__adddf3>
 8003da0:	4603      	mov	r3, r0
 8003da2:	460c      	mov	r4, r1
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <main+0x8bc>)
 8003da6:	e9c2 3400 	strd	r3, r4, [r2]
				/////////////////////Check NTC////////////////////////////////
				raw_Env_temperature=(uint16_t)valid_adc[0];//HAL_ADC_GetValue(&hadc1); //ADC123_IN0
 8003daa:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <main+0x8a8>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003db2:	f102 021c 	add.w	r2, r2, #28
 8003db6:	8013      	strh	r3, [r2, #0]
	
				if(raw_Env_temperature>4000)
 8003db8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003dbc:	f103 031c 	add.w	r3, r3, #28
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003dc6:	d935      	bls.n	8003e34 <main+0x8cc>
				{
					NTC_Centigrade=NTCTL_Value-1.0;
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <main+0x8c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fbbb 	bl	8000548 <__aeabi_f2d>
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <main+0x8c4>)
 8003dd8:	f7fc fa56 	bl	8000288 <__aeabi_dsub>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <main+0x8c8>)
 8003de2:	e9c2 3400 	strd	r3, r4, [r2]
					NTC_Centigrade_uint16=0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003dec:	f102 021a 	add.w	r2, r2, #26
 8003df0:	8013      	strh	r3, [r2, #0]
					NTC_valid=0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003df8:	f102 0231 	add.w	r2, r2, #49	; 0x31
 8003dfc:	7013      	strb	r3, [r2, #0]
 8003dfe:	e08d      	b.n	8003f1c <main+0x9b4>
 8003e00:	00000000 	.word	0x00000000
 8003e04:	40a9c800 	.word	0x40a9c800
 8003e08:	20000818 	.word	0x20000818
 8003e0c:	200003b9 	.word	0x200003b9
 8003e10:	20000798 	.word	0x20000798
 8003e14:	40b00000 	.word	0x40b00000
 8003e18:	4087c000 	.word	0x4087c000
 8003e1c:	40040000 	.word	0x40040000
 8003e20:	40390000 	.word	0x40390000
 8003e24:	200007c0 	.word	0x200007c0
 8003e28:	20000774 	.word	0x20000774
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	200007b0 	.word	0x200007b0
				}
				else
				{
				//raw_Env_temperature=110;//ADC123_IN0
					NTC_valid=1;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003e3a:	f102 0231 	add.w	r2, r2, #49	; 0x31
 8003e3e:	7013      	strb	r3, [r2, #0]
					NTC_Resistance =  (double)raw_Env_temperature/(4095.00-(double)raw_Env_temperature);		
 8003e40:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003e44:	f103 031c 	add.w	r3, r3, #28
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fb5a 	bl	8000504 <__aeabi_ui2d>
 8003e50:	4604      	mov	r4, r0
 8003e52:	460d      	mov	r5, r1
 8003e54:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003e58:	f103 031c 	add.w	r3, r3, #28
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fb50 	bl	8000504 <__aeabi_ui2d>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	a1bb      	add	r1, pc, #748	; (adr r1, 8004158 <main+0xbf0>)
 8003e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e6e:	f7fc fa0b 	bl	8000288 <__aeabi_dsub>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc fce7 	bl	800084c <__aeabi_ddiv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	4ab9      	ldr	r2, [pc, #740]	; (8004168 <main+0xc00>)
 8003e84:	e9c2 3400 	strd	r3, r4, [r2]
					NTC_Env_temperature = (1.0/TEMP_25)+(1.0/(double)B_coefficient)*log((double)NTC_Resistance);
 8003e88:	4bb7      	ldr	r3, [pc, #732]	; (8004168 <main+0xc00>)
 8003e8a:	ed93 7b00 	vldr	d7, [r3]
 8003e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e92:	eef0 0a67 	vmov.f32	s1, s15
 8003e96:	f018 fbc3 	bl	801c620 <log>
 8003e9a:	ec51 0b10 	vmov	r0, r1, d0
 8003e9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004138 <main+0xbd0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc fba8 	bl	80005f8 <__aeabi_dmul>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4618      	mov	r0, r3
 8003eae:	4621      	mov	r1, r4
 8003eb0:	a3a3      	add	r3, pc, #652	; (adr r3, 8004140 <main+0xbd8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f9e9 	bl	800028c <__adddf3>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	4aab      	ldr	r2, [pc, #684]	; (800416c <main+0xc04>)
 8003ec0:	e9c2 3400 	strd	r3, r4, [r2]
					NTC_Centigrade = (1.0/NTC_Env_temperature) - 273.15;	// convert kelvin to �C		
 8003ec4:	4ba9      	ldr	r3, [pc, #676]	; (800416c <main+0xc04>)
 8003ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4623      	mov	r3, r4
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	49a7      	ldr	r1, [pc, #668]	; (8004170 <main+0xc08>)
 8003ed4:	f7fc fcba 	bl	800084c <__aeabi_ddiv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4618      	mov	r0, r3
 8003ede:	4621      	mov	r1, r4
 8003ee0:	a399      	add	r3, pc, #612	; (adr r3, 8004148 <main+0xbe0>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc f9cf 	bl	8000288 <__aeabi_dsub>
 8003eea:	4603      	mov	r3, r0
 8003eec:	460c      	mov	r4, r1
 8003eee:	4aa1      	ldr	r2, [pc, #644]	; (8004174 <main+0xc0c>)
 8003ef0:	e9c2 3400 	strd	r3, r4, [r2]
					NTC_Centigrade_uint16=(uint16_t)((double)NTC_Centigrade*10.0);				
 8003ef4:	4b9f      	ldr	r3, [pc, #636]	; (8004174 <main+0xc0c>)
 8003ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	4b9e      	ldr	r3, [pc, #632]	; (8004178 <main+0xc10>)
 8003f00:	f7fc fb7a 	bl	80005f8 <__aeabi_dmul>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	f7fc fe4c 	bl	8000ba8 <__aeabi_d2uiz>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003f16:	f102 021a 	add.w	r2, r2, #26
 8003f1a:	8013      	strh	r3, [r2, #0]
				}

				/////////////////////Check LDR////////////////////////////////

				raw_LDR=(uint16_t)valid_adc[1];//HAL_ADC_GetValue(&hadc1);//ADC123_IN3
 8003f1c:	4b97      	ldr	r3, [pc, #604]	; (800417c <main+0xc14>)
 8003f1e:	885b      	ldrh	r3, [r3, #2]
 8003f20:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8003f24:	f102 0218 	add.w	r2, r2, #24
 8003f28:	8013      	strh	r3, [r2, #0]
				//raw_LDR=200;//ADC123_IN3
				//HAL_ADC_Stop(&hadc1);
				
				LDR_resistance=(4.7*(float)raw_LDR)/(4095.0-(float)raw_LDR);
 8003f2a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003f2e:	f103 0318 	add.w	r3, r3, #24
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3c:	ee17 0a90 	vmov	r0, s15
 8003f40:	f7fc fb02 	bl	8000548 <__aeabi_f2d>
 8003f44:	a382      	add	r3, pc, #520	; (adr r3, 8004150 <main+0xbe8>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f7fc fb55 	bl	80005f8 <__aeabi_dmul>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	4625      	mov	r5, r4
 8003f54:	461c      	mov	r4, r3
 8003f56:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8003f5a:	f103 0318 	add.w	r3, r3, #24
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f68:	ee17 0a90 	vmov	r0, s15
 8003f6c:	f7fc faec 	bl	8000548 <__aeabi_f2d>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	a178      	add	r1, pc, #480	; (adr r1, 8004158 <main+0xbf0>)
 8003f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f7a:	f7fc f985 	bl	8000288 <__aeabi_dsub>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7fc fc61 	bl	800084c <__aeabi_ddiv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4a7c      	ldr	r2, [pc, #496]	; (8004180 <main+0xc18>)
 8003f90:	e9c2 3400 	strd	r3, r4, [r2]
				////////////////////check Astro clock///////////////////////////
				HAL_IWDG_Refresh(&hiwdg);
 8003f94:	487b      	ldr	r0, [pc, #492]	; (8004184 <main+0xc1c>)
 8003f96:	f00a fccd 	bl	800e934 <HAL_IWDG_Refresh>
				if(cur_date.Date!=prev_date.Date || cur_date.Month != prev_date.Month || cur_date.Year!=prev_date.Year)
 8003f9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f9e:	3b24      	subs	r3, #36	; 0x24
 8003fa0:	789a      	ldrb	r2, [r3, #2]
 8003fa2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fa6:	3b2c      	subs	r3, #44	; 0x2c
 8003fa8:	789b      	ldrb	r3, [r3, #2]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d113      	bne.n	8003fd6 <main+0xa6e>
 8003fae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fb2:	3b24      	subs	r3, #36	; 0x24
 8003fb4:	785a      	ldrb	r2, [r3, #1]
 8003fb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fba:	3b2c      	subs	r3, #44	; 0x2c
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d109      	bne.n	8003fd6 <main+0xa6e>
 8003fc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fc6:	3b24      	subs	r3, #36	; 0x24
 8003fc8:	78da      	ldrb	r2, [r3, #3]
 8003fca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fce:	3b2c      	subs	r3, #44	; 0x2c
 8003fd0:	78db      	ldrb	r3, [r3, #3]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d038      	beq.n	8004048 <main+0xae0>
				{
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8003fd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fda:	3b24      	subs	r3, #36	; 0x24
 8003fdc:	789b      	ldrb	r3, [r3, #2]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003fe4:	3b1c      	subs	r3, #28
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fec:	3b24      	subs	r3, #36	; 0x24
 8003fee:	785b      	ldrb	r3, [r3, #1]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ff6:	3b1c      	subs	r3, #28
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ffe:	3b24      	subs	r3, #36	; 0x24
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8004006:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800400a:	3b1c      	subs	r3, #28
 800400c:	601a      	str	r2, [r3, #0]
					Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
 800400e:	4b5e      	ldr	r3, [pc, #376]	; (8004188 <main+0xc20>)
 8004010:	ed93 7b00 	vldr	d7, [r3]
 8004014:	4b5d      	ldr	r3, [pc, #372]	; (800418c <main+0xc24>)
 8004016:	ed93 6b00 	vldr	d6, [r3]
 800401a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800401e:	3a1c      	subs	r2, #28
 8004020:	2301      	movs	r3, #1
 8004022:	9302      	str	r3, [sp, #8]
 8004024:	4b5a      	ldr	r3, [pc, #360]	; (8004190 <main+0xc28>)
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <main+0xc2c>)
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <main+0xc30>)
 800402e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004030:	ed9f 2b4b 	vldr	d2, [pc, #300]	; 8004160 <main+0xbf8>
 8004034:	eeb0 1a46 	vmov.f32	s2, s12
 8004038:	eef0 1a66 	vmov.f32	s3, s13
 800403c:	eeb0 0a47 	vmov.f32	s0, s14
 8004040:	eef0 0a67 	vmov.f32	s1, s15
 8004044:	f7fd fb14 	bl	8001670 <Astro_sunRiseSet>
				}
				prev_date=cur_date;
 8004048:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800404c:	3b2c      	subs	r3, #44	; 0x2c
 800404e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004052:	3a24      	subs	r2, #36	; 0x24
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	601a      	str	r2, [r3, #0]
				//////////////////////////apply LED parameters////////////////////////////////////////
				if(Astro_CheckDayNight(cur_time,sunrise_t,sunset_t)==ASTRO_DAY) //DAY
 8004058:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800405c:	3b0c      	subs	r3, #12
 800405e:	4a4c      	ldr	r2, [pc, #304]	; (8004190 <main+0xc28>)
 8004060:	ac04      	add	r4, sp, #16
 8004062:	ca07      	ldmia	r2, {r0, r1, r2}
 8004064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004068:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <main+0xc30>)
 800406a:	ac01      	add	r4, sp, #4
 800406c:	ca07      	ldmia	r2, {r0, r1, r2}
 800406e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	9200      	str	r2, [sp, #0]
 8004076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004078:	f7fd f895 	bl	80011a6 <Astro_CheckDayNight>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	f040 8090 	bne.w	80041a4 <main+0xc3c>
				{
					if(LDR_State!=LDR_DAY)
 8004084:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004088:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b03      	cmp	r3, #3
 8004090:	f000 80e0 	beq.w	8004254 <main+0xcec>
					{
						LDR_State=LDR_DAY;
 8004094:	2303      	movs	r3, #3
 8004096:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800409a:	f102 0232 	add.w	r2, r2, #50	; 0x32
 800409e:	7013      	strb	r3, [r2, #0]
						if(pca9632_setonepwm(LEDIR,1)!=PCA9632_OK)
 80040a0:	2101      	movs	r1, #1
 80040a2:	2002      	movs	r0, #2
 80040a4:	f005 fec6 	bl	8009e34 <pca9632_setonepwm>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00f      	beq.n	80040ce <main+0xb66>
						{
							if(Menu_choice==MAIN_MENU)
 80040ae:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80040b2:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <main+0xb66>
							{							
								print_segment("E501");
 80040bc:	4837      	ldr	r0, [pc, #220]	; (800419c <main+0xc34>)
 80040be:	f007 f971 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 80040c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c6:	f007 fda1 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 80040ca:	f005 fe5d 	bl	8009d88 <pca9632_init>
							}
						}						
						if(pca9632_setonepwm(LEDW,1)!=PCA9632_OK)
 80040ce:	2101      	movs	r1, #1
 80040d0:	2001      	movs	r0, #1
 80040d2:	f005 feaf 	bl	8009e34 <pca9632_setonepwm>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <main+0xb94>
						{
							if(Menu_choice==MAIN_MENU)
 80040dc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80040e0:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <main+0xb94>
							{							
								print_segment("E501");
 80040ea:	482c      	ldr	r0, [pc, #176]	; (800419c <main+0xc34>)
 80040ec:	f007 f95a 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 80040f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040f4:	f007 fd8a 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 80040f8:	f005 fe46 	bl	8009d88 <pca9632_init>
							}
						}
						if(pca9632_setblinking(BlinkW_Value)!=PCA9632_OK)
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <main+0xc38>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	eeb0 0a67 	vmov.f32	s0, s15
 8004106:	f005 feed 	bl	8009ee4 <pca9632_setblinking>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80a1 	beq.w	8004254 <main+0xcec>
						{
							if(Menu_choice==MAIN_MENU)
 8004112:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004116:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8099 	bne.w	8004254 <main+0xcec>
							{							
								print_segment("E501");
 8004122:	481e      	ldr	r0, [pc, #120]	; (800419c <main+0xc34>)
 8004124:	f007 f93e 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 8004128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800412c:	f007 fd6e 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 8004130:	f005 fe2a 	bl	8009d88 <pca9632_init>
 8004134:	e08e      	b.n	8004254 <main+0xcec>
 8004136:	bf00      	nop
 8004138:	e78d43b2 	.word	0xe78d43b2
 800413c:	3f330604 	.word	0x3f330604
 8004140:	dcb5db83 	.word	0xdcb5db83
 8004144:	3f6b79e1 	.word	0x3f6b79e1
 8004148:	66666666 	.word	0x66666666
 800414c:	40711266 	.word	0x40711266
 8004150:	cccccccd 	.word	0xcccccccd
 8004154:	4012cccc 	.word	0x4012cccc
 8004158:	00000000 	.word	0x00000000
 800415c:	40affe00 	.word	0x40affe00
 8004160:	00000000 	.word	0x00000000
 8004164:	400c0000 	.word	0x400c0000
 8004168:	20000768 	.word	0x20000768
 800416c:	200007d0 	.word	0x200007d0
 8004170:	3ff00000 	.word	0x3ff00000
 8004174:	200007b0 	.word	0x200007b0
 8004178:	40240000 	.word	0x40240000
 800417c:	20000798 	.word	0x20000798
 8004180:	20000780 	.word	0x20000780
 8004184:	20000750 	.word	0x20000750
 8004188:	20000790 	.word	0x20000790
 800418c:	20000788 	.word	0x20000788
 8004190:	200007e8 	.word	0x200007e8
 8004194:	200007fc 	.word	0x200007fc
 8004198:	200007a0 	.word	0x200007a0
 800419c:	0801e91c 	.word	0x0801e91c
 80041a0:	20000814 	.word	0x20000814

					}
				}
				else //NIGHT
				{
					if(LDR_State!=LDR_NIGHT)
 80041a4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80041a8:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d050      	beq.n	8004254 <main+0xcec>
					{
						LDR_State=LDR_NIGHT;
 80041b2:	2302      	movs	r3, #2
 80041b4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80041b8:	f102 0232 	add.w	r2, r2, #50	; 0x32
 80041bc:	7013      	strb	r3, [r2, #0]
						if(pca9632_setonepwm(LEDIR,BrightW_Value)!=PCA9632_OK)
 80041be:	4bc0      	ldr	r3, [pc, #768]	; (80044c0 <main+0xf58>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	4619      	mov	r1, r3
 80041c6:	2002      	movs	r0, #2
 80041c8:	f005 fe34 	bl	8009e34 <pca9632_setonepwm>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00f      	beq.n	80041f2 <main+0xc8a>
						{
							if(Menu_choice==MAIN_MENU)
 80041d2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80041d6:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <main+0xc8a>
							{
								print_segment("E501");
 80041e0:	48b8      	ldr	r0, [pc, #736]	; (80044c4 <main+0xf5c>)
 80041e2:	f007 f8df 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 80041e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ea:	f007 fd0f 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 80041ee:	f005 fdcb 	bl	8009d88 <pca9632_init>
							}
						}
						if(pca9632_setonepwm(LEDW,BrightW_Value)!=PCA9632_OK)
 80041f2:	4bb3      	ldr	r3, [pc, #716]	; (80044c0 <main+0xf58>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4619      	mov	r1, r3
 80041fa:	2001      	movs	r0, #1
 80041fc:	f005 fe1a 	bl	8009e34 <pca9632_setonepwm>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00f      	beq.n	8004226 <main+0xcbe>
						{
							if(Menu_choice==MAIN_MENU)
 8004206:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800420a:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <main+0xcbe>
							{
								print_segment("E501");
 8004214:	48ab      	ldr	r0, [pc, #684]	; (80044c4 <main+0xf5c>)
 8004216:	f007 f8c5 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 800421a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800421e:	f007 fcf5 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 8004222:	f005 fdb1 	bl	8009d88 <pca9632_init>
							}
						}
						if(pca9632_setblinking(0)!=PCA9632_OK)
 8004226:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80044c8 <main+0xf60>
 800422a:	f005 fe5b 	bl	8009ee4 <pca9632_setblinking>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00f      	beq.n	8004254 <main+0xcec>
						{
							if(Menu_choice==MAIN_MENU)
 8004234:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004238:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <main+0xcec>
							{
								print_segment("E501");
 8004242:	48a0      	ldr	r0, [pc, #640]	; (80044c4 <main+0xf5c>)
 8004244:	f007 f8ae 	bl	800b3a4 <print_segment>
								HAL_Delay(1000);
 8004248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800424c:	f007 fcde 	bl	800bc0c <HAL_Delay>
								pca9632_init();
 8004250:	f005 fd9a 	bl	8009d88 <pca9632_init>

					}

				}

				counter_LDR=(uint16_t)counter_LDR+1;
 8004254:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004258:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004264:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8004268:	8013      	strh	r3, [r2, #0]
				if(counter_LDR>=120)
 800426a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800426e:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	2b77      	cmp	r3, #119	; 0x77
 8004276:	d910      	bls.n	800429a <main+0xd32>
				{
					counter_LDR=0;
 8004278:	2300      	movs	r3, #0
 800427a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800427e:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8004282:	8013      	strh	r3, [r2, #0]
					LDR_State=LDR_NONE;
 8004284:	2300      	movs	r3, #0
 8004286:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800428a:	f102 0232 	add.w	r2, r2, #50	; 0x32
 800428e:	7013      	strb	r3, [r2, #0]
					HAL_I2C_MspInit(&hi2c1);
 8004290:	488e      	ldr	r0, [pc, #568]	; (80044cc <main+0xf64>)
 8004292:	f7fe fd51 	bl	8002d38 <HAL_I2C_MspInit>
					MX_I2C1_Init();
 8004296:	f7fe fd21 	bl	8002cdc <MX_I2C1_Init>
				}	
			}
			/////////////////////////////////uSD trap/////////////////////////////////
			if((BSP_SD_IsDetected()==SD_PRESENT) && (is_sddetected==0))
 800429a:	f010 fdc6 	bl	8014e2a <BSP_SD_IsDetected>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d121      	bne.n	80042e8 <main+0xd80>
 80042a4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80042a8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11a      	bne.n	80042e8 <main+0xd80>
			{
				HAL_Delay(100);
 80042b2:	2064      	movs	r0, #100	; 0x64
 80042b4:	f007 fcaa 	bl	800bc0c <HAL_Delay>
				if((BSP_SD_IsDetected()==SD_PRESENT) && (is_sddetected==0))
 80042b8:	f010 fdb7 	bl	8014e2a <BSP_SD_IsDetected>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d112      	bne.n	80042e8 <main+0xd80>
 80042c2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80042c6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <main+0xd80>
				{
						HAL_Delay(500);
 80042d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042d4:	f007 fc9a 	bl	800bc0c <HAL_Delay>
						BSP_SD_Init();
 80042d8:	f010 fd18 	bl	8014d0c <BSP_SD_Init>
						is_sddetected=1;
 80042dc:	2301      	movs	r3, #1
 80042de:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80042e2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80042e6:	7013      	strb	r3, [r2, #0]
				}
			}
			
			if(BSP_SD_IsDetected()==SD_NOT_PRESENT)
 80042e8:	f010 fd9f 	bl	8014e2a <BSP_SD_IsDetected>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d120      	bne.n	8004334 <main+0xdcc>
			{
				HAL_Delay(100);
 80042f2:	2064      	movs	r0, #100	; 0x64
 80042f4:	f007 fc8a 	bl	800bc0c <HAL_Delay>
				if(BSP_SD_IsDetected()==SD_NOT_PRESENT)
 80042f8:	f010 fd97 	bl	8014e2a <BSP_SD_IsDetected>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <main+0xdcc>
				{
					is_sddetected=0;
 8004302:	2300      	movs	r3, #0
 8004304:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004308:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800430c:	7013      	strb	r3, [r2, #0]
					HAL_SD_DeInit(&hsd);
 800430e:	4870      	ldr	r0, [pc, #448]	; (80044d0 <main+0xf68>)
 8004310:	f00c fe86 	bl	8011020 <HAL_SD_DeInit>
					if(f_mount(0, "", 0) != FR_OK )
 8004314:	2200      	movs	r2, #0
 8004316:	496f      	ldr	r1, [pc, #444]	; (80044d4 <main+0xf6c>)
 8004318:	2000      	movs	r0, #0
 800431a:	f014 fcdf 	bl	8018cdc <f_mount>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <main+0xdc2>
					{
						SDFatFS.fs_type=0;
 8004324:	4b6c      	ldr	r3, [pc, #432]	; (80044d8 <main+0xf70>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]
					}
					counterlog_file=0;
 800432a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800432e:	3b38      	subs	r3, #56	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
				}
			}
			///////////////////////////////////Door open trap////////////////////////////////////
			if((HAL_GPIO_ReadPin(VCNL4200_INT_GPIO_Port,VCNL4200_INT_Pin)==GPIO_PIN_SET) && (door_state==0))// door is openning
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	4869      	ldr	r0, [pc, #420]	; (80044dc <main+0xf74>)
 8004338:	f009 fb0a 	bl	800d950 <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	f040 816f 	bne.w	8004622 <main+0x10ba>
 8004344:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004348:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8167 	bne.w	8004622 <main+0x10ba>
			{
				HAL_Delay(50);
 8004354:	2032      	movs	r0, #50	; 0x32
 8004356:	f007 fc59 	bl	800bc0c <HAL_Delay>
				if((HAL_GPIO_ReadPin(VCNL4200_INT_GPIO_Port,VCNL4200_INT_Pin)==GPIO_PIN_SET) && (door_state==0))//door is opened
 800435a:	2180      	movs	r1, #128	; 0x80
 800435c:	485f      	ldr	r0, [pc, #380]	; (80044dc <main+0xf74>)
 800435e:	f009 faf7 	bl	800d950 <HAL_GPIO_ReadPin>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 815c 	bne.w	8004622 <main+0x10ba>
 800436a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800436e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 8154 	bne.w	8004622 <main+0x10ba>
				{
					door_state=1;
 800437a:	2301      	movs	r3, #1
 800437c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004380:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8004384:	7013      	strb	r3, [r2, #0]
					sprintf(DOOR_chstate,"OPEN");
 8004386:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800438a:	3b10      	subs	r3, #16
 800438c:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <main+0xf78>)
 800438e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004392:	6018      	str	r0, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	7019      	strb	r1, [r3, #0]
					if(is_sddetected)
 8004398:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800439c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 812f 	beq.w	8004606 <main+0x109e>
					{
						generate_filename(cur_date,cur_time,&counterlog_file,filelog_name);
 80043a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043ac:	3b0c      	subs	r3, #12
 80043ae:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80043b2:	3c24      	subs	r4, #36	; 0x24
 80043b4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80043b8:	3a34      	subs	r2, #52	; 0x34
 80043ba:	9203      	str	r2, [sp, #12]
 80043bc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80043c0:	3a38      	subs	r2, #56	; 0x38
 80043c2:	9202      	str	r2, [sp, #8]
 80043c4:	466d      	mov	r5, sp
 80043c6:	f103 020c 	add.w	r2, r3, #12
 80043ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80043d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	f7ff f83d 	bl	8003454 <generate_filename>
						if(NTC_valid)
 80043da:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80043de:	f103 0331 	add.w	r3, r3, #49	; 0x31
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 808b 	beq.w	8004500 <main+0xf98>
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80043ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80043ee:	3b38      	subs	r3, #56	; 0x38
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80043f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043f8:	3b24      	subs	r3, #36	; 0x24
 80043fa:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80043fc:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 8004400:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8004402:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004406:	3b24      	subs	r3, #36	; 0x24
 8004408:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 800440a:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 800440c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004410:	3b24      	subs	r3, #36	; 0x24
 8004412:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004414:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004416:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800441a:	3b0c      	subs	r3, #12
 800441c:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 800441e:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004420:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004424:	3b0c      	subs	r3, #12
 8004426:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004428:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 800442a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800442e:	3b0c      	subs	r3, #12
 8004430:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <main+0xf7c>)
 8004436:	e9d3 5600 	ldrd	r5, r6, [r3]
 800443a:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <main+0xf80>)
 800443c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004440:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <main+0xf58>)
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <main+0xf84>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc f87c 	bl	8000548 <__aeabi_f2d>
 8004450:	4682      	mov	sl, r0
 8004452:	468b      	mov	fp, r1
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <main+0xf88>)
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <main+0xf8c>)
 800445c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <main+0xf90>)
 8004462:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004466:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 800446a:	3834      	subs	r0, #52	; 0x34
 800446c:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8004470:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004474:	3b04      	subs	r3, #4
 8004476:	9314      	str	r3, [sp, #80]	; 0x50
 8004478:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800447c:	3b38      	subs	r3, #56	; 0x38
 800447e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004480:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004484:	3b10      	subs	r3, #16
 8004486:	9312      	str	r3, [sp, #72]	; 0x48
 8004488:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 800448c:	687c      	ldr	r4, [r7, #4]
 800448e:	940e      	str	r4, [sp, #56]	; 0x38
 8004490:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8004494:	68bc      	ldr	r4, [r7, #8]
 8004496:	940a      	str	r4, [sp, #40]	; 0x28
 8004498:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800449c:	e9cd 5606 	strd	r5, r6, [sp, #24]
 80044a0:	68fc      	ldr	r4, [r7, #12]
 80044a2:	9404      	str	r4, [sp, #16]
 80044a4:	693c      	ldr	r4, [r7, #16]
 80044a6:	9403      	str	r4, [sp, #12]
 80044a8:	697c      	ldr	r4, [r7, #20]
 80044aa:	9402      	str	r4, [sp, #8]
 80044ac:	69bc      	ldr	r4, [r7, #24]
 80044ae:	9401      	str	r4, [sp, #4]
 80044b0:	69fc      	ldr	r4, [r7, #28]
 80044b2:	9400      	str	r4, [sp, #0]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	4910      	ldr	r1, [pc, #64]	; (80044fc <main+0xf94>)
 80044ba:	f016 fbe9 	bl	801ac90 <siprintf>
 80044be:	e083      	b.n	80045c8 <main+0x1060>
 80044c0:	200007f4 	.word	0x200007f4
 80044c4:	0801e91c 	.word	0x0801e91c
 80044c8:	00000000 	.word	0x00000000
 80044cc:	200006fc 	.word	0x200006fc
 80044d0:	200008f8 	.word	0x200008f8
 80044d4:	0801e878 	.word	0x0801e878
 80044d8:	20001a9c 	.word	0x20001a9c
 80044dc:	40020c00 	.word	0x40020c00
 80044e0:	0801e9bc 	.word	0x0801e9bc
 80044e4:	200007d8 	.word	0x200007d8
 80044e8:	200007e0 	.word	0x200007e0
 80044ec:	20000814 	.word	0x20000814
 80044f0:	200007cc 	.word	0x200007cc
 80044f4:	20000780 	.word	0x20000780
 80044f8:	200007b0 	.word	0x200007b0
 80044fc:	0801e9c4 	.word	0x0801e9c4
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate,NTC_Centigrade);
						else
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004500:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004504:	3b38      	subs	r3, #56	; 0x38
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 800450a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800450e:	3b24      	subs	r3, #36	; 0x24
 8004510:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004512:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 8004516:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8004518:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800451c:	3b24      	subs	r3, #36	; 0x24
 800451e:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004520:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8004522:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004526:	3b24      	subs	r3, #36	; 0x24
 8004528:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800452a:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 800452c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004530:	3b0c      	subs	r3, #12
 8004532:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004534:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004536:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800453a:	3b0c      	subs	r3, #12
 800453c:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800453e:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004540:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004544:	3b0c      	subs	r3, #12
 8004546:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b99      	ldr	r3, [pc, #612]	; (80047b0 <main+0x1248>)
 800454c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004550:	4b98      	ldr	r3, [pc, #608]	; (80047b4 <main+0x124c>)
 8004552:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004556:	4b98      	ldr	r3, [pc, #608]	; (80047b8 <main+0x1250>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	4b97      	ldr	r3, [pc, #604]	; (80047bc <main+0x1254>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb fff1 	bl	8000548 <__aeabi_f2d>
 8004566:	4682      	mov	sl, r0
 8004568:	468b      	mov	fp, r1
 800456a:	4b95      	ldr	r3, [pc, #596]	; (80047c0 <main+0x1258>)
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461e      	mov	r6, r3
 8004570:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <main+0x125c>)
 8004572:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004576:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 800457a:	3834      	subs	r0, #52	; 0x34
 800457c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004580:	3b04      	subs	r3, #4
 8004582:	9314      	str	r3, [sp, #80]	; 0x50
 8004584:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004588:	3b38      	subs	r3, #56	; 0x38
 800458a:	9313      	str	r3, [sp, #76]	; 0x4c
 800458c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004590:	3b10      	subs	r3, #16
 8004592:	9312      	str	r3, [sp, #72]	; 0x48
 8004594:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8004598:	960e      	str	r6, [sp, #56]	; 0x38
 800459a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800459e:	68be      	ldr	r6, [r7, #8]
 80045a0:	960a      	str	r6, [sp, #40]	; 0x28
 80045a2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80045a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80045aa:	68fc      	ldr	r4, [r7, #12]
 80045ac:	9404      	str	r4, [sp, #16]
 80045ae:	693c      	ldr	r4, [r7, #16]
 80045b0:	9403      	str	r4, [sp, #12]
 80045b2:	697c      	ldr	r4, [r7, #20]
 80045b4:	9402      	str	r4, [sp, #8]
 80045b6:	69bc      	ldr	r4, [r7, #24]
 80045b8:	9401      	str	r4, [sp, #4]
 80045ba:	69fc      	ldr	r4, [r7, #28]
 80045bc:	9400      	str	r4, [sp, #0]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c2:	4981      	ldr	r1, [pc, #516]	; (80047c8 <main+0x1260>)
 80045c4:	f016 fb64 	bl	801ac90 <siprintf>
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate);
						if((fr=File_log(filelog_name,file_str))!=FR_OK)
 80045c8:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80045cc:	3a34      	subs	r2, #52	; 0x34
 80045ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80045d2:	3b34      	subs	r3, #52	; 0x34
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fe98 	bl	800330c <File_log>
 80045dc:	4603      	mov	r3, r0
 80045de:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80045e2:	f102 0217 	add.w	r2, r2, #23
 80045e6:	7013      	strb	r3, [r2, #0]
 80045e8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80045ec:	f103 0317 	add.w	r3, r3, #23
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d015      	beq.n	8004622 <main+0x10ba>
						{
							print_segment("E104");
 80045f6:	4875      	ldr	r0, [pc, #468]	; (80047cc <main+0x1264>)
 80045f8:	f006 fed4 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);
 80045fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004600:	f007 fb04 	bl	800bc0c <HAL_Delay>
 8004604:	e00d      	b.n	8004622 <main+0x10ba>
						}
					}
					else
					{
						if(Menu_choice==MAIN_MENU)
 8004606:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800460a:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <main+0x10ba>
						{
							print_segment("EE.5D");
 8004614:	486e      	ldr	r0, [pc, #440]	; (80047d0 <main+0x1268>)
 8004616:	f006 fec5 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);
 800461a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800461e:	f007 faf5 	bl	800bc0c <HAL_Delay>
						}
					}
				}
			}
			if((HAL_GPIO_ReadPin(VCNL4200_INT_GPIO_Port,VCNL4200_INT_Pin)==GPIO_PIN_RESET) && (door_state==1))// door is closing
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	486b      	ldr	r0, [pc, #428]	; (80047d4 <main+0x126c>)
 8004626:	f009 f993 	bl	800d950 <HAL_GPIO_ReadPin>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 816a 	bne.w	8004906 <main+0x139e>
 8004632:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004636:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 8162 	bne.w	8004906 <main+0x139e>
			{
				HAL_Delay(50);
 8004642:	2032      	movs	r0, #50	; 0x32
 8004644:	f007 fae2 	bl	800bc0c <HAL_Delay>
				if((HAL_GPIO_ReadPin(VCNL4200_INT_GPIO_Port,VCNL4200_INT_Pin)==GPIO_PIN_RESET) && (door_state==1))//door is closed
 8004648:	2180      	movs	r1, #128	; 0x80
 800464a:	4862      	ldr	r0, [pc, #392]	; (80047d4 <main+0x126c>)
 800464c:	f009 f980 	bl	800d950 <HAL_GPIO_ReadPin>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 8157 	bne.w	8004906 <main+0x139e>
 8004658:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800465c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 814f 	bne.w	8004906 <main+0x139e>
				{
					door_state=0;
 8004668:	2300      	movs	r3, #0
 800466a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800466e:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8004672:	7013      	strb	r3, [r2, #0]
					sprintf(DOOR_chstate,"CLOSE");
 8004674:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004678:	3b10      	subs	r3, #16
 800467a:	4a57      	ldr	r2, [pc, #348]	; (80047d8 <main+0x1270>)
 800467c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004680:	6018      	str	r0, [r3, #0]
 8004682:	3304      	adds	r3, #4
 8004684:	8019      	strh	r1, [r3, #0]

					if(is_sddetected)
 8004686:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800468a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 812a 	beq.w	80048ea <main+0x1382>
					{
						generate_filename(cur_date,cur_time,&counterlog_file,filelog_name);
 8004696:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800469a:	3b0c      	subs	r3, #12
 800469c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80046a0:	3c24      	subs	r4, #36	; 0x24
 80046a2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80046a6:	3a34      	subs	r2, #52	; 0x34
 80046a8:	9203      	str	r2, [sp, #12]
 80046aa:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80046ae:	3a38      	subs	r2, #56	; 0x38
 80046b0:	9202      	str	r2, [sp, #8]
 80046b2:	466d      	mov	r5, sp
 80046b4:	f103 020c 	add.w	r2, r3, #12
 80046b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80046c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	f7fe fec6 	bl	8003454 <generate_filename>
						if(NTC_valid)
 80046c8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80046cc:	f103 0331 	add.w	r3, r3, #49	; 0x31
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8086 	beq.w	80047e4 <main+0x127c>
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80046d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80046dc:	3b38      	subs	r3, #56	; 0x38
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80046e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046e6:	3b24      	subs	r3, #36	; 0x24
 80046e8:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80046ea:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 80046ee:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80046f0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046f4:	3b24      	subs	r3, #36	; 0x24
 80046f6:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80046f8:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80046fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046fe:	3b24      	subs	r3, #36	; 0x24
 8004700:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004702:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004704:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004708:	3b0c      	subs	r3, #12
 800470a:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 800470c:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 800470e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004712:	3b0c      	subs	r3, #12
 8004714:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004716:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004718:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800471c:	3b0c      	subs	r3, #12
 800471e:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <main+0x1248>)
 8004724:	e9d3 5600 	ldrd	r5, r6, [r3]
 8004728:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <main+0x124c>)
 800472a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <main+0x1250>)
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	4b21      	ldr	r3, [pc, #132]	; (80047bc <main+0x1254>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb ff05 	bl	8000548 <__aeabi_f2d>
 800473e:	4682      	mov	sl, r0
 8004740:	468b      	mov	fp, r1
 8004742:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <main+0x1258>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <main+0x125c>)
 800474a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <main+0x1274>)
 8004750:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004754:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8004758:	3834      	subs	r0, #52	; 0x34
 800475a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 800475e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004762:	3b04      	subs	r3, #4
 8004764:	9314      	str	r3, [sp, #80]	; 0x50
 8004766:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800476a:	3b38      	subs	r3, #56	; 0x38
 800476c:	9313      	str	r3, [sp, #76]	; 0x4c
 800476e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004772:	3b10      	subs	r3, #16
 8004774:	9312      	str	r3, [sp, #72]	; 0x48
 8004776:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 800477a:	687c      	ldr	r4, [r7, #4]
 800477c:	940e      	str	r4, [sp, #56]	; 0x38
 800477e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8004782:	68bc      	ldr	r4, [r7, #8]
 8004784:	940a      	str	r4, [sp, #40]	; 0x28
 8004786:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800478a:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800478e:	68fc      	ldr	r4, [r7, #12]
 8004790:	9404      	str	r4, [sp, #16]
 8004792:	693c      	ldr	r4, [r7, #16]
 8004794:	9403      	str	r4, [sp, #12]
 8004796:	697c      	ldr	r4, [r7, #20]
 8004798:	9402      	str	r4, [sp, #8]
 800479a:	69bc      	ldr	r4, [r7, #24]
 800479c:	9401      	str	r4, [sp, #4]
 800479e:	69fc      	ldr	r4, [r7, #28]
 80047a0:	9400      	str	r4, [sp, #0]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	490e      	ldr	r1, [pc, #56]	; (80047e0 <main+0x1278>)
 80047a8:	f016 fa72 	bl	801ac90 <siprintf>
 80047ac:	e07e      	b.n	80048ac <main+0x1344>
 80047ae:	bf00      	nop
 80047b0:	200007d8 	.word	0x200007d8
 80047b4:	200007e0 	.word	0x200007e0
 80047b8:	200007f4 	.word	0x200007f4
 80047bc:	20000814 	.word	0x20000814
 80047c0:	200007cc 	.word	0x200007cc
 80047c4:	20000780 	.word	0x20000780
 80047c8:	0801ea1c 	.word	0x0801ea1c
 80047cc:	0801e90c 	.word	0x0801e90c
 80047d0:	0801ea70 	.word	0x0801ea70
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	0801ea78 	.word	0x0801ea78
 80047dc:	200007b0 	.word	0x200007b0
 80047e0:	0801e9c4 	.word	0x0801e9c4
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate,NTC_Centigrade);
						else
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 80047e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80047e8:	3b38      	subs	r3, #56	; 0x38
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80047ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047f2:	3b24      	subs	r3, #36	; 0x24
 80047f4:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 80047f6:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 80047fa:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80047fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004800:	3b24      	subs	r3, #36	; 0x24
 8004802:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004804:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8004806:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800480a:	3b24      	subs	r3, #36	; 0x24
 800480c:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800480e:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004810:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004814:	3b0c      	subs	r3, #12
 8004816:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004818:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 800481a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800481e:	3b0c      	subs	r3, #12
 8004820:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8004822:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,
 8004824:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004828:	3b0c      	subs	r3, #12
 800482a:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	4bc4      	ldr	r3, [pc, #784]	; (8004b40 <main+0x15d8>)
 8004830:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004834:	4bc3      	ldr	r3, [pc, #780]	; (8004b44 <main+0x15dc>)
 8004836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800483a:	4bc3      	ldr	r3, [pc, #780]	; (8004b48 <main+0x15e0>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	4bc2      	ldr	r3, [pc, #776]	; (8004b4c <main+0x15e4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fb fe7f 	bl	8000548 <__aeabi_f2d>
 800484a:	4682      	mov	sl, r0
 800484c:	468b      	mov	fp, r1
 800484e:	4bc0      	ldr	r3, [pc, #768]	; (8004b50 <main+0x15e8>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	461e      	mov	r6, r3
 8004854:	4bbf      	ldr	r3, [pc, #764]	; (8004b54 <main+0x15ec>)
 8004856:	e9d3 1200 	ldrd	r1, r2, [r3]
 800485a:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 800485e:	3834      	subs	r0, #52	; 0x34
 8004860:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004864:	3b04      	subs	r3, #4
 8004866:	9314      	str	r3, [sp, #80]	; 0x50
 8004868:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800486c:	3b38      	subs	r3, #56	; 0x38
 800486e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004870:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004874:	3b10      	subs	r3, #16
 8004876:	9312      	str	r3, [sp, #72]	; 0x48
 8004878:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 800487c:	960e      	str	r6, [sp, #56]	; 0x38
 800487e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8004882:	68be      	ldr	r6, [r7, #8]
 8004884:	960a      	str	r6, [sp, #40]	; 0x28
 8004886:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800488a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800488e:	68fc      	ldr	r4, [r7, #12]
 8004890:	9404      	str	r4, [sp, #16]
 8004892:	693c      	ldr	r4, [r7, #16]
 8004894:	9403      	str	r4, [sp, #12]
 8004896:	697c      	ldr	r4, [r7, #20]
 8004898:	9402      	str	r4, [sp, #8]
 800489a:	69bc      	ldr	r4, [r7, #24]
 800489c:	9401      	str	r4, [sp, #4]
 800489e:	69fc      	ldr	r4, [r7, #28]
 80048a0:	9400      	str	r4, [sp, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	49ac      	ldr	r1, [pc, #688]	; (8004b58 <main+0x15f0>)
 80048a8:	f016 f9f2 	bl	801ac90 <siprintf>
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate);
						if((fr=File_log(filelog_name,file_str))!=FR_OK)
 80048ac:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80048b0:	3a34      	subs	r2, #52	; 0x34
 80048b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80048b6:	3b34      	subs	r3, #52	; 0x34
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fd26 	bl	800330c <File_log>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80048c6:	f102 0217 	add.w	r2, r2, #23
 80048ca:	7013      	strb	r3, [r2, #0]
 80048cc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80048d0:	f103 0317 	add.w	r3, r3, #23
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d015      	beq.n	8004906 <main+0x139e>
						{
							print_segment("E104");
 80048da:	48a0      	ldr	r0, [pc, #640]	; (8004b5c <main+0x15f4>)
 80048dc:	f006 fd62 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);
 80048e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e4:	f007 f992 	bl	800bc0c <HAL_Delay>
 80048e8:	e00d      	b.n	8004906 <main+0x139e>
						}
					}
					else
					{
						if(Menu_choice==MAIN_MENU)
 80048ea:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80048ee:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <main+0x139e>
						{
							print_segment("EE.5D");
 80048f8:	4899      	ldr	r0, [pc, #612]	; (8004b60 <main+0x15f8>)
 80048fa:	f006 fd53 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);
 80048fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004902:	f007 f983 	bl	800bc0c <HAL_Delay>
						}
					}
				}
			}
		////////////////////////////////////////////////////////////////////	
		switch(Menu_choice)
 8004906:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800490a:	f103 0337 	add.w	r3, r3, #55	; 0x37
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b14      	cmp	r3, #20
 8004912:	f63f a907 	bhi.w	8003b24 <main+0x5bc>
 8004916:	a201      	add	r2, pc, #4	; (adr r2, 800491c <main+0x13b4>)
 8004918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491c:	08004971 	.word	0x08004971
 8004920:	08005a25 	.word	0x08005a25
 8004924:	08005e89 	.word	0x08005e89
 8004928:	08006215 	.word	0x08006215
 800492c:	080065b1 	.word	0x080065b1
 8004930:	080068f1 	.word	0x080068f1
 8004934:	08006b17 	.word	0x08006b17
 8004938:	08006d7b 	.word	0x08006d7b
 800493c:	08007101 	.word	0x08007101
 8004940:	08007471 	.word	0x08007471
 8004944:	08007809 	.word	0x08007809
 8004948:	08007b07 	.word	0x08007b07
 800494c:	08007e15 	.word	0x08007e15
 8004950:	080080bd 	.word	0x080080bd
 8004954:	08008361 	.word	0x08008361
 8004958:	080086ad 	.word	0x080086ad
 800495c:	0800897f 	.word	0x0800897f
 8004960:	08008c8f 	.word	0x08008c8f
 8004964:	08008f93 	.word	0x08008f93
 8004968:	080093b9 	.word	0x080093b9
 800496c:	080097dd 	.word	0x080097dd
		{
			/////////////////////////////////////////////////////////CASE MAIN_MENU/////////////////////////////////////////////////////////////////
			case MAIN_MENU:
				if(flag_1s)
 8004970:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <main+0x15fc>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8373 	beq.w	8005060 <main+0x1af8>
				{
					flag_1s=0;
 800497a:	4b7a      	ldr	r3, [pc, #488]	; (8004b64 <main+0x15fc>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
					if(tmp275_readTemperature(&Env_temperature)!=TMP275_OK)
 8004980:	486f      	ldr	r0, [pc, #444]	; (8004b40 <main+0x15d8>)
 8004982:	f006 ffa1 	bl	800b8c8 <tmp275_readTemperature>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <main+0x1436>
					{
						tmp275_init();
 800498c:	f006 ff68 	bl	800b860 <tmp275_init>
						cur_Disp=DISP_ERROR;
 8004990:	2305      	movs	r3, #5
 8004992:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004996:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800499a:	7013      	strb	r3, [r2, #0]
 800499c:	e009      	b.n	80049b2 <main+0x144a>
					}
					else
						cur_Disp=last_disp;
 800499e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80049a2:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80049ac:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80049b0:	7013      	strb	r3, [r2, #0]
//						cur_Disp=DISP_ERROR;
//					}
//					else
//						cur_Disp=last_disp;

					avg_Env_temperature+=(float)Env_temperature;
 80049b2:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <main+0x15d8>)
 80049b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049b8:	4618      	mov	r0, r3
 80049ba:	4621      	mov	r1, r4
 80049bc:	f7fc f914 	bl	8000be8 <__aeabi_d2f>
 80049c0:	ee07 0a10 	vmov	s14, r0
 80049c4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80049c8:	f103 0304 	add.w	r3, r3, #4
 80049cc:	edd3 7a00 	vldr	s15, [r3]
 80049d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049d4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80049d8:	f103 0304 	add.w	r3, r3, #4
 80049dc:	edc3 7a00 	vstr	s15, [r3]
					avg_Env_humidity+=(float)Env_humidity;
 80049e0:	4b58      	ldr	r3, [pc, #352]	; (8004b44 <main+0x15dc>)
 80049e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049e6:	4618      	mov	r0, r3
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7fc f8fd 	bl	8000be8 <__aeabi_d2f>
 80049ee:	ee07 0a10 	vmov	s14, r0
 80049f2:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80049f6:	edd3 7a00 	vldr	s15, [r3]
 80049fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049fe:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8004a02:	edc3 7a00 	vstr	s15, [r3]
					avg_counter++;
 8004a06:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004a0a:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004a16:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8004a1a:	8013      	strh	r3, [r2, #0]
					
					switch(cur_Disp)
 8004a1c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004a20:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	f200 80d5 	bhi.w	8004bd6 <main+0x166e>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <main+0x14cc>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a8f 	.word	0x08004a8f
 8004a38:	08004b03 	.word	0x08004b03
 8004a3c:	08004b91 	.word	0x08004b91
 8004a40:	08004b1d 	.word	0x08004b1d
 8004a44:	08004ba9 	.word	0x08004ba9
 8004a48:	08004bc1 	.word	0x08004bc1
 8004a4c:	08004a51 	.word	0x08004a51
					{
						case DISP_NTC:
							if(NTC_valid)
 8004a50:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004a54:	f103 0331 	add.w	r3, r3, #49	; 0x31
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <main+0x1510>
								sprintf(str_disp,"N%03.0f",NTC_Centigrade);
 8004a5e:	4b42      	ldr	r3, [pc, #264]	; (8004b68 <main+0x1600>)
 8004a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a64:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004a68:	f100 0004 	add.w	r0, r0, #4
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	493e      	ldr	r1, [pc, #248]	; (8004b6c <main+0x1604>)
 8004a72:	f016 f90d 	bl	801ac90 <siprintf>
							else
								sprintf(str_disp,"N---");
						break;
 8004a76:	e0ae      	b.n	8004bd6 <main+0x166e>
								sprintf(str_disp,"N---");
 8004a78:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004a7c:	f103 0304 	add.w	r3, r3, #4
 8004a80:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <main+0x1608>)
 8004a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a86:	6018      	str	r0, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	7019      	strb	r1, [r3, #0]
						break;
 8004a8c:	e0a3      	b.n	8004bd6 <main+0x166e>
						case DISP_TEMP:
							if(flag_rtc_showtemp)
 8004a8e:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <main+0x160c>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00f      	beq.n	8004ab6 <main+0x154e>
							{
								flag_rtc_showtemp=0;
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <main+0x160c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
								sprintf(str_disp,"%5.1f",Env_temperature);
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <main+0x15d8>)
 8004a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aa2:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004aa6:	f100 0004 	add.w	r0, r0, #4
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4623      	mov	r3, r4
 8004aae:	4932      	ldr	r1, [pc, #200]	; (8004b78 <main+0x1610>)
 8004ab0:	f016 f8ee 	bl	801ac90 <siprintf>
								else
								{
									sprintf(str_disp,"%02d%02d",cur_time.Hours,cur_time.Minutes);
								}
							}
						break;
 8004ab4:	e08f      	b.n	8004bd6 <main+0x166e>
								if(flag_rtc_blink)
 8004ab6:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <main+0x1614>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d010      	beq.n	8004ae0 <main+0x1578>
									sprintf(str_disp,"%02d.%02d",cur_time.Hours,cur_time.Minutes);
 8004abe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ac2:	3b0c      	subs	r3, #12
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004acc:	3b0c      	subs	r3, #12
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004ad4:	f100 0004 	add.w	r0, r0, #4
 8004ad8:	4929      	ldr	r1, [pc, #164]	; (8004b80 <main+0x1618>)
 8004ada:	f016 f8d9 	bl	801ac90 <siprintf>
						break;
 8004ade:	e07a      	b.n	8004bd6 <main+0x166e>
									sprintf(str_disp,"%02d%02d",cur_time.Hours,cur_time.Minutes);
 8004ae0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ae4:	3b0c      	subs	r3, #12
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004aee:	3b0c      	subs	r3, #12
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004af6:	f100 0004 	add.w	r0, r0, #4
 8004afa:	4922      	ldr	r1, [pc, #136]	; (8004b84 <main+0x161c>)
 8004afc:	f016 f8c8 	bl	801ac90 <siprintf>
						break;
 8004b00:	e069      	b.n	8004bd6 <main+0x166e>
						case DISP_HUM:
							sprintf(str_disp,"H%4.1f",Env_humidity);
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <main+0x15dc>)
 8004b04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b08:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004b0c:	f100 0004 	add.w	r0, r0, #4
 8004b10:	461a      	mov	r2, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	491c      	ldr	r1, [pc, #112]	; (8004b88 <main+0x1620>)
 8004b16:	f016 f8bb 	bl	801ac90 <siprintf>
						break;
 8004b1a:	e05c      	b.n	8004bd6 <main+0x166e>
						case DISP_BLINKW:
							sprintf(str_disp,"L%4.1f",BlinkW_Value);							
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <main+0x15e4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fd11 	bl	8000548 <__aeabi_f2d>
 8004b26:	4603      	mov	r3, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8004b2e:	f100 0004 	add.w	r0, r0, #4
 8004b32:	461a      	mov	r2, r3
 8004b34:	4623      	mov	r3, r4
 8004b36:	4915      	ldr	r1, [pc, #84]	; (8004b8c <main+0x1624>)
 8004b38:	f016 f8aa 	bl	801ac90 <siprintf>
							break;
 8004b3c:	e04b      	b.n	8004bd6 <main+0x166e>
 8004b3e:	bf00      	nop
 8004b40:	200007d8 	.word	0x200007d8
 8004b44:	200007e0 	.word	0x200007e0
 8004b48:	200007f4 	.word	0x200007f4
 8004b4c:	20000814 	.word	0x20000814
 8004b50:	200007cc 	.word	0x200007cc
 8004b54:	20000780 	.word	0x20000780
 8004b58:	0801ea1c 	.word	0x0801ea1c
 8004b5c:	0801e90c 	.word	0x0801e90c
 8004b60:	0801ea70 	.word	0x0801ea70
 8004b64:	200003c4 	.word	0x200003c4
 8004b68:	200007b0 	.word	0x200007b0
 8004b6c:	0801ea80 	.word	0x0801ea80
 8004b70:	0801ea88 	.word	0x0801ea88
 8004b74:	20000018 	.word	0x20000018
 8004b78:	0801ea90 	.word	0x0801ea90
 8004b7c:	200003b7 	.word	0x200003b7
 8004b80:	0801ea98 	.word	0x0801ea98
 8004b84:	0801eaa4 	.word	0x0801eaa4
 8004b88:	0801eab0 	.word	0x0801eab0
 8004b8c:	0801eab8 	.word	0x0801eab8
						case DISP_BRIGHTW:
							sprintf(str_disp,"T%3d",BrightW_Value);
 8004b90:	4bb1      	ldr	r3, [pc, #708]	; (8004e58 <main+0x18f0>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004b9a:	f103 0304 	add.w	r3, r3, #4
 8004b9e:	49af      	ldr	r1, [pc, #700]	; (8004e5c <main+0x18f4>)
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f016 f875 	bl	801ac90 <siprintf>
							break;						
 8004ba6:	e016      	b.n	8004bd6 <main+0x166e>
						case DISP_BRIGHTIR:
							sprintf(str_disp,"R%3d",BrightIR_Value);
 8004ba8:	4bad      	ldr	r3, [pc, #692]	; (8004e60 <main+0x18f8>)
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004bb2:	f103 0304 	add.w	r3, r3, #4
 8004bb6:	49ab      	ldr	r1, [pc, #684]	; (8004e64 <main+0x18fc>)
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f016 f869 	bl	801ac90 <siprintf>
							break;
 8004bbe:	e00a      	b.n	8004bd6 <main+0x166e>
						case DISP_ERROR:
							sprintf(str_disp,"E207");
 8004bc0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004bc4:	f103 0304 	add.w	r3, r3, #4
 8004bc8:	4aa7      	ldr	r2, [pc, #668]	; (8004e68 <main+0x1900>)
 8004bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bce:	6018      	str	r0, [r3, #0]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	7019      	strb	r1, [r3, #0]
							break;
 8004bd4:	bf00      	nop
					}
					print_segment(str_disp);
 8004bd6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004bda:	f103 0304 	add.w	r3, r3, #4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f006 fbe0 	bl	800b3a4 <print_segment>
						FAN_OFF();
						sprintf(TEC_chstate,"OFF");							
					}
					else //if((NTC_Centigrade<NTCTH_Value &&  TEC_overtemp==0)|| (NTC_Centigrade<NTCTL_Value))
					{
						TEC_overtemp=0;
 8004be4:	4ba1      	ldr	r3, [pc, #644]	; (8004e6c <main+0x1904>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
						if(cur_Disp==DISP_ERROR)
 8004bea:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004bee:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d114      	bne.n	8004c22 <main+0x16ba>
						{
							FAN2_OFF();
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	; 0x40
 8004bfc:	489c      	ldr	r0, [pc, #624]	; (8004e70 <main+0x1908>)
 8004bfe:	f008 febf 	bl	800d980 <HAL_GPIO_WritePin>
							sprintf(FAN_chstate,"OFF");						
 8004c02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c06:	3b04      	subs	r3, #4
 8004c08:	4a9a      	ldr	r2, [pc, #616]	; (8004e74 <main+0x190c>)
 8004c0a:	601a      	str	r2, [r3, #0]
							FAN_OFF();
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2120      	movs	r1, #32
 8004c10:	4899      	ldr	r0, [pc, #612]	; (8004e78 <main+0x1910>)
 8004c12:	f008 feb5 	bl	800d980 <HAL_GPIO_WritePin>
							sprintf(TEC_chstate,"OFF");
 8004c16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004c1a:	3b38      	subs	r3, #56	; 0x38
 8004c1c:	4a95      	ldr	r2, [pc, #596]	; (8004e74 <main+0x190c>)
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e21e      	b.n	8005060 <main+0x1af8>

						}
						else
						{
							Delta_T=Env_temperature-prev_Env_temperature;
 8004c22:	4b96      	ldr	r3, [pc, #600]	; (8004e7c <main+0x1914>)
 8004c24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c28:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004c2c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f7fb fc89 	bl	8000548 <__aeabi_f2d>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f7fb fb23 	bl	8000288 <__aeabi_dsub>
 8004c42:	4603      	mov	r3, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	4618      	mov	r0, r3
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f7fb ffcd 	bl	8000be8 <__aeabi_d2f>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8004c54:	f102 0210 	add.w	r2, r2, #16
 8004c58:	6013      	str	r3, [r2, #0]
							if(Env_temperature>TH_Value) //s1
 8004c5a:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <main+0x1918>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb fc72 	bl	8000548 <__aeabi_f2d>
 8004c64:	4b85      	ldr	r3, [pc, #532]	; (8004e7c <main+0x1914>)
 8004c66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	f7fb ff35 	bl	8000adc <__aeabi_dcmplt>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d022      	beq.n	8004cbe <main+0x1756>
							{
								FAN2_ON();
 8004c78:	2201      	movs	r2, #1
 8004c7a:	2140      	movs	r1, #64	; 0x40
 8004c7c:	487c      	ldr	r0, [pc, #496]	; (8004e70 <main+0x1908>)
 8004c7e:	f008 fe7f 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"ON");
 8004c82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c86:	3b04      	subs	r3, #4
 8004c88:	4a7e      	ldr	r2, [pc, #504]	; (8004e84 <main+0x191c>)
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	3302      	adds	r3, #2
 8004c92:	0c12      	lsrs	r2, r2, #16
 8004c94:	701a      	strb	r2, [r3, #0]
								FAN_ON();
 8004c96:	2201      	movs	r2, #1
 8004c98:	2120      	movs	r1, #32
 8004c9a:	4877      	ldr	r0, [pc, #476]	; (8004e78 <main+0x1910>)
 8004c9c:	f008 fe70 	bl	800d980 <HAL_GPIO_WritePin>
								TEC_COLD();
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2140      	movs	r1, #64	; 0x40
 8004ca4:	4874      	ldr	r0, [pc, #464]	; (8004e78 <main+0x1910>)
 8004ca6:	f008 fe6b 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"COLD");
 8004caa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004cae:	3b38      	subs	r3, #56	; 0x38
 8004cb0:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <main+0x1920>)
 8004cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cb6:	6018      	str	r0, [r3, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	7019      	strb	r1, [r3, #0]
 8004cbc:	e1c3      	b.n	8005046 <main+0x1ade>
							}
							else if(Env_temperature<=(TH_Value-DELTAT_Value) && Env_temperature>(TL_Value+DELTAT_Value))//s4
 8004cbe:	4b70      	ldr	r3, [pc, #448]	; (8004e80 <main+0x1918>)
 8004cc0:	ed93 7a00 	vldr	s14, [r3]
 8004cc4:	4b71      	ldr	r3, [pc, #452]	; (8004e8c <main+0x1924>)
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cce:	ee17 0a90 	vmov	r0, s15
 8004cd2:	f7fb fc39 	bl	8000548 <__aeabi_f2d>
 8004cd6:	4b69      	ldr	r3, [pc, #420]	; (8004e7c <main+0x1914>)
 8004cd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f7fb ff10 	bl	8000b04 <__aeabi_dcmpge>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02a      	beq.n	8004d40 <main+0x17d8>
 8004cea:	4b69      	ldr	r3, [pc, #420]	; (8004e90 <main+0x1928>)
 8004cec:	ed93 7a00 	vldr	s14, [r3]
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <main+0x1924>)
 8004cf2:	edd3 7a00 	vldr	s15, [r3]
 8004cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfa:	ee17 0a90 	vmov	r0, s15
 8004cfe:	f7fb fc23 	bl	8000548 <__aeabi_f2d>
 8004d02:	4b5e      	ldr	r3, [pc, #376]	; (8004e7c <main+0x1914>)
 8004d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	f7fb fee6 	bl	8000adc <__aeabi_dcmplt>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d014      	beq.n	8004d40 <main+0x17d8>
							{
								FAN2_OFF();
 8004d16:	2200      	movs	r2, #0
 8004d18:	2140      	movs	r1, #64	; 0x40
 8004d1a:	4855      	ldr	r0, [pc, #340]	; (8004e70 <main+0x1908>)
 8004d1c:	f008 fe30 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"OFF");						
 8004d20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004d24:	3b04      	subs	r3, #4
 8004d26:	4a53      	ldr	r2, [pc, #332]	; (8004e74 <main+0x190c>)
 8004d28:	601a      	str	r2, [r3, #0]
								FAN_OFF();
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	4852      	ldr	r0, [pc, #328]	; (8004e78 <main+0x1910>)
 8004d30:	f008 fe26 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"OFF");
 8004d34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004d38:	3b38      	subs	r3, #56	; 0x38
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	; (8004e74 <main+0x190c>)
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e182      	b.n	8005046 <main+0x1ade>
							}
							else if((Delta_T>0.2) && (Env_temperature > (TH_Value-DELTAT_Value)))//s3
 8004d40:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004d44:	f103 0310 	add.w	r3, r3, #16
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	f7fb fbfd 	bl	8000548 <__aeabi_f2d>
 8004d4e:	a33e      	add	r3, pc, #248	; (adr r3, 8004e48 <main+0x18e0>)
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f7fb fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02a      	beq.n	8004db4 <main+0x184c>
 8004d5e:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <main+0x1918>)
 8004d60:	ed93 7a00 	vldr	s14, [r3]
 8004d64:	4b49      	ldr	r3, [pc, #292]	; (8004e8c <main+0x1924>)
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6e:	ee17 0a90 	vmov	r0, s15
 8004d72:	f7fb fbe9 	bl	8000548 <__aeabi_f2d>
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <main+0x1914>)
 8004d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	f7fb feac 	bl	8000adc <__aeabi_dcmplt>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d014      	beq.n	8004db4 <main+0x184c>
							{
								FAN2_OFF();
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	4838      	ldr	r0, [pc, #224]	; (8004e70 <main+0x1908>)
 8004d90:	f008 fdf6 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"OFF");						
 8004d94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004d98:	3b04      	subs	r3, #4
 8004d9a:	4a36      	ldr	r2, [pc, #216]	; (8004e74 <main+0x190c>)
 8004d9c:	601a      	str	r2, [r3, #0]
								FAN_OFF();
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2120      	movs	r1, #32
 8004da2:	4835      	ldr	r0, [pc, #212]	; (8004e78 <main+0x1910>)
 8004da4:	f008 fdec 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"OFF");
 8004da8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004dac:	3b38      	subs	r3, #56	; 0x38
 8004dae:	4a31      	ldr	r2, [pc, #196]	; (8004e74 <main+0x190c>)
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e148      	b.n	8005046 <main+0x1ade>
							}
							else if((Delta_T<-0.2) && (Env_temperature > (TH_Value-DELTAT_Value)))//s2
 8004db4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004db8:	f103 0310 	add.w	r3, r3, #16
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	f7fb fbc3 	bl	8000548 <__aeabi_f2d>
 8004dc2:	a323      	add	r3, pc, #140	; (adr r3, 8004e50 <main+0x18e8>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fe88 	bl	8000adc <__aeabi_dcmplt>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d060      	beq.n	8004e94 <main+0x192c>
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <main+0x1918>)
 8004dd4:	ed93 7a00 	vldr	s14, [r3]
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <main+0x1924>)
 8004dda:	edd3 7a00 	vldr	s15, [r3]
 8004dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004de2:	ee17 0a90 	vmov	r0, s15
 8004de6:	f7fb fbaf 	bl	8000548 <__aeabi_f2d>
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <main+0x1914>)
 8004dec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004df0:	461a      	mov	r2, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	f7fb fe72 	bl	8000adc <__aeabi_dcmplt>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04a      	beq.n	8004e94 <main+0x192c>
							{
								FAN2_ON();
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2140      	movs	r1, #64	; 0x40
 8004e02:	481b      	ldr	r0, [pc, #108]	; (8004e70 <main+0x1908>)
 8004e04:	f008 fdbc 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"ON");							
 8004e08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004e0c:	3b04      	subs	r3, #4
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <main+0x191c>)
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	4611      	mov	r1, r2
 8004e14:	8019      	strh	r1, [r3, #0]
 8004e16:	3302      	adds	r3, #2
 8004e18:	0c12      	lsrs	r2, r2, #16
 8004e1a:	701a      	strb	r2, [r3, #0]
								FAN_ON();
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	2120      	movs	r1, #32
 8004e20:	4815      	ldr	r0, [pc, #84]	; (8004e78 <main+0x1910>)
 8004e22:	f008 fdad 	bl	800d980 <HAL_GPIO_WritePin>
								TEC_COLD();
 8004e26:	2200      	movs	r2, #0
 8004e28:	2140      	movs	r1, #64	; 0x40
 8004e2a:	4813      	ldr	r0, [pc, #76]	; (8004e78 <main+0x1910>)
 8004e2c:	f008 fda8 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"COLD");
 8004e30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004e34:	3b38      	subs	r3, #56	; 0x38
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <main+0x1920>)
 8004e38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e3c:	6018      	str	r0, [r3, #0]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	7019      	strb	r1, [r3, #0]
 8004e42:	e100      	b.n	8005046 <main+0x1ade>
 8004e44:	f3af 8000 	nop.w
 8004e48:	9999999a 	.word	0x9999999a
 8004e4c:	3fc99999 	.word	0x3fc99999
 8004e50:	9999999a 	.word	0x9999999a
 8004e54:	bfc99999 	.word	0xbfc99999
 8004e58:	200007f4 	.word	0x200007f4
 8004e5c:	0801eac0 	.word	0x0801eac0
 8004e60:	200007cc 	.word	0x200007cc
 8004e64:	0801eac8 	.word	0x0801eac8
 8004e68:	0801ead0 	.word	0x0801ead0
 8004e6c:	200003ba 	.word	0x200003ba
 8004e70:	40021000 	.word	0x40021000
 8004e74:	0046464f 	.word	0x0046464f
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	200007d8 	.word	0x200007d8
 8004e80:	20000810 	.word	0x20000810
 8004e84:	0801ead8 	.word	0x0801ead8
 8004e88:	0801eadc 	.word	0x0801eadc
 8004e8c:	20000778 	.word	0x20000778
 8004e90:	20000808 	.word	0x20000808
								
							}
							else if(Env_temperature<TL_Value)//s7
 8004e94:	4b8a      	ldr	r3, [pc, #552]	; (80050c0 <main+0x1b58>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fb fb55 	bl	8000548 <__aeabi_f2d>
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <main+0x1b5c>)
 8004ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	f7fb fe36 	bl	8000b18 <__aeabi_dcmpgt>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <main+0x1988>
							{
								FAN2_ON();
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2140      	movs	r1, #64	; 0x40
 8004eb6:	4884      	ldr	r0, [pc, #528]	; (80050c8 <main+0x1b60>)
 8004eb8:	f008 fd62 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"ON");							
 8004ebc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004ec0:	3b04      	subs	r3, #4
 8004ec2:	4a82      	ldr	r2, [pc, #520]	; (80050cc <main+0x1b64>)
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	8019      	strh	r1, [r3, #0]
 8004eca:	3302      	adds	r3, #2
 8004ecc:	0c12      	lsrs	r2, r2, #16
 8004ece:	701a      	strb	r2, [r3, #0]
								FAN_ON();
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	487e      	ldr	r0, [pc, #504]	; (80050d0 <main+0x1b68>)
 8004ed6:	f008 fd53 	bl	800d980 <HAL_GPIO_WritePin>
								TEC_HOT();
 8004eda:	2201      	movs	r2, #1
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	487c      	ldr	r0, [pc, #496]	; (80050d0 <main+0x1b68>)
 8004ee0:	f008 fd4e 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"HOT");
 8004ee4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ee8:	3b38      	subs	r3, #56	; 0x38
 8004eea:	4a7a      	ldr	r2, [pc, #488]	; (80050d4 <main+0x1b6c>)
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e0aa      	b.n	8005046 <main+0x1ade>

							}
							else if((Env_temperature>=(TL_Value+DELTAT_Value))&& (Env_temperature<=(TH_Value-DELTAT_Value)))
 8004ef0:	4b73      	ldr	r3, [pc, #460]	; (80050c0 <main+0x1b58>)
 8004ef2:	ed93 7a00 	vldr	s14, [r3]
 8004ef6:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <main+0x1b70>)
 8004ef8:	edd3 7a00 	vldr	s15, [r3]
 8004efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f00:	ee17 0a90 	vmov	r0, s15
 8004f04:	f7fb fb20 	bl	8000548 <__aeabi_f2d>
 8004f08:	4b6e      	ldr	r3, [pc, #440]	; (80050c4 <main+0x1b5c>)
 8004f0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7fb fded 	bl	8000af0 <__aeabi_dcmple>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02a      	beq.n	8004f72 <main+0x1a0a>
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	; (80050dc <main+0x1b74>)
 8004f1e:	ed93 7a00 	vldr	s14, [r3]
 8004f22:	4b6d      	ldr	r3, [pc, #436]	; (80050d8 <main+0x1b70>)
 8004f24:	edd3 7a00 	vldr	s15, [r3]
 8004f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f2c:	ee17 0a90 	vmov	r0, s15
 8004f30:	f7fb fb0a 	bl	8000548 <__aeabi_f2d>
 8004f34:	4b63      	ldr	r3, [pc, #396]	; (80050c4 <main+0x1b5c>)
 8004f36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4623      	mov	r3, r4
 8004f3e:	f7fb fde1 	bl	8000b04 <__aeabi_dcmpge>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <main+0x1a0a>
							{
								FAN2_OFF();
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	485e      	ldr	r0, [pc, #376]	; (80050c8 <main+0x1b60>)
 8004f4e:	f008 fd17 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"OFF");						
 8004f52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004f56:	3b04      	subs	r3, #4
 8004f58:	4a61      	ldr	r2, [pc, #388]	; (80050e0 <main+0x1b78>)
 8004f5a:	601a      	str	r2, [r3, #0]
								FAN_OFF();
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2120      	movs	r1, #32
 8004f60:	485b      	ldr	r0, [pc, #364]	; (80050d0 <main+0x1b68>)
 8004f62:	f008 fd0d 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"OFF");
 8004f66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004f6a:	3b38      	subs	r3, #56	; 0x38
 8004f6c:	4a5c      	ldr	r2, [pc, #368]	; (80050e0 <main+0x1b78>)
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e069      	b.n	8005046 <main+0x1ade>
								
							}
							else if((Delta_T>0.2) && (Env_temperature >TL_Value))
 8004f72:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004f76:	f103 0310 	add.w	r3, r3, #16
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	f7fb fae4 	bl	8000548 <__aeabi_f2d>
 8004f80:	a34b      	add	r3, pc, #300	; (adr r3, 80050b0 <main+0x1b48>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02d      	beq.n	8004fec <main+0x1a84>
 8004f90:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <main+0x1b58>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fb fad7 	bl	8000548 <__aeabi_f2d>
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	; (80050c4 <main+0x1b5c>)
 8004f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	f7fb fd9a 	bl	8000adc <__aeabi_dcmplt>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01e      	beq.n	8004fec <main+0x1a84>
							{
								FAN2_ON();
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2140      	movs	r1, #64	; 0x40
 8004fb2:	4845      	ldr	r0, [pc, #276]	; (80050c8 <main+0x1b60>)
 8004fb4:	f008 fce4 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"ON");							
 8004fb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	4a43      	ldr	r2, [pc, #268]	; (80050cc <main+0x1b64>)
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	8019      	strh	r1, [r3, #0]
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	0c12      	lsrs	r2, r2, #16
 8004fca:	701a      	strb	r2, [r3, #0]
								FAN_ON();
 8004fcc:	2201      	movs	r2, #1
 8004fce:	2120      	movs	r1, #32
 8004fd0:	483f      	ldr	r0, [pc, #252]	; (80050d0 <main+0x1b68>)
 8004fd2:	f008 fcd5 	bl	800d980 <HAL_GPIO_WritePin>
								TEC_HOT();
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2140      	movs	r1, #64	; 0x40
 8004fda:	483d      	ldr	r0, [pc, #244]	; (80050d0 <main+0x1b68>)
 8004fdc:	f008 fcd0 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(TEC_chstate,"HOT");
 8004fe0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004fe4:	3b38      	subs	r3, #56	; 0x38
 8004fe6:	4a3b      	ldr	r2, [pc, #236]	; (80050d4 <main+0x1b6c>)
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e02c      	b.n	8005046 <main+0x1ade>
								
							}
							else if((Delta_T<-0.2) && (Env_temperature > TL_Value))
 8004fec:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8004ff0:	f103 0310 	add.w	r3, r3, #16
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f7fb faa7 	bl	8000548 <__aeabi_f2d>
 8004ffa:	a32f      	add	r3, pc, #188	; (adr r3, 80050b8 <main+0x1b50>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb fd6c 	bl	8000adc <__aeabi_dcmplt>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01d      	beq.n	8005046 <main+0x1ade>
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <main+0x1b58>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fb fa9a 	bl	8000548 <__aeabi_f2d>
 8005014:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <main+0x1b5c>)
 8005016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800501a:	461a      	mov	r2, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f7fb fd5d 	bl	8000adc <__aeabi_dcmplt>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <main+0x1ade>
							{
								FAN_OFF();
 8005028:	2200      	movs	r2, #0
 800502a:	2120      	movs	r1, #32
 800502c:	4828      	ldr	r0, [pc, #160]	; (80050d0 <main+0x1b68>)
 800502e:	f008 fca7 	bl	800d980 <HAL_GPIO_WritePin>
								FAN2_OFF();
 8005032:	2200      	movs	r2, #0
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	4824      	ldr	r0, [pc, #144]	; (80050c8 <main+0x1b60>)
 8005038:	f008 fca2 	bl	800d980 <HAL_GPIO_WritePin>
								sprintf(FAN_chstate,"OFF");						
 800503c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005040:	3b04      	subs	r3, #4
 8005042:	4a27      	ldr	r2, [pc, #156]	; (80050e0 <main+0x1b78>)
 8005044:	601a      	str	r2, [r3, #0]
								
							}
							prev_Env_temperature=Env_temperature;
 8005046:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <main+0x1b5c>)
 8005048:	e9d3 3400 	ldrd	r3, r4, [r3]
 800504c:	4618      	mov	r0, r3
 800504e:	4621      	mov	r1, r4
 8005050:	f7fb fdca 	bl	8000be8 <__aeabi_d2f>
 8005054:	4603      	mov	r3, r0
 8005056:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800505a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800505e:	6013      	str	r3, [r2, #0]
					}
					////////////////////////////////////////////////////////////////////////////////////
				}
				
				/////////////////////log Env_humidity/Env_temperature/////////////////////////////
				if(flag_10s)
 8005060:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <main+0x1b7c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 81b3 	beq.w	80053d0 <main+0x1e68>
				{
					flag_10s=0;
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <main+0x1b7c>)
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
					if(avg_counter==0)					
 8005070:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005074:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d136      	bne.n	80050ec <main+0x1b84>
					{
						avg_Env_humidity=Env_humidity;
 800507e:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <main+0x1b80>)
 8005080:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005084:	4618      	mov	r0, r3
 8005086:	4621      	mov	r1, r4
 8005088:	f7fb fdae 	bl	8000be8 <__aeabi_d2f>
 800508c:	4603      	mov	r3, r0
 800508e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005092:	6013      	str	r3, [r2, #0]
						avg_Env_temperature=Env_temperature;
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <main+0x1b5c>)
 8005096:	e9d3 3400 	ldrd	r3, r4, [r3]
 800509a:	4618      	mov	r0, r3
 800509c:	4621      	mov	r1, r4
 800509e:	f7fb fda3 	bl	8000be8 <__aeabi_d2f>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80050a8:	f102 0204 	add.w	r2, r2, #4
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e045      	b.n	800513c <main+0x1bd4>
 80050b0:	9999999a 	.word	0x9999999a
 80050b4:	3fc99999 	.word	0x3fc99999
 80050b8:	9999999a 	.word	0x9999999a
 80050bc:	bfc99999 	.word	0xbfc99999
 80050c0:	20000808 	.word	0x20000808
 80050c4:	200007d8 	.word	0x200007d8
 80050c8:	40021000 	.word	0x40021000
 80050cc:	0801ead8 	.word	0x0801ead8
 80050d0:	40020000 	.word	0x40020000
 80050d4:	00544f48 	.word	0x00544f48
 80050d8:	20000778 	.word	0x20000778
 80050dc:	20000810 	.word	0x20000810
 80050e0:	0046464f 	.word	0x0046464f
 80050e4:	200003c5 	.word	0x200003c5
 80050e8:	200007e0 	.word	0x200007e0
					}
					else
					{
						avg_Env_humidity=avg_Env_humidity/(float)avg_counter;
 80050ec:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80050f0:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050fe:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005102:	edd3 6a00 	vldr	s13, [r3]
 8005106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 800510e:	edc3 7a00 	vstr	s15, [r3]
						avg_Env_temperature=avg_Env_humidity/(float)avg_counter;
 8005112:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005116:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005124:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005128:	edd3 6a00 	vldr	s13, [r3]
 800512c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005130:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005134:	f103 0304 	add.w	r3, r3, #4
 8005138:	edc3 7a00 	vstr	s15, [r3]
					}
					avg_counter=0;
 800513c:	2300      	movs	r3, #0
 800513e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005142:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8005146:	8013      	strh	r3, [r2, #0]
					if(is_sddetected)
 8005148:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800514c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8122 	beq.w	800539c <main+0x1e34>
					{
						generate_filename(cur_date,cur_time,&counterlog_file,filelog_name);
 8005158:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800515c:	3b0c      	subs	r3, #12
 800515e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8005162:	3c24      	subs	r4, #36	; 0x24
 8005164:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005168:	3a34      	subs	r2, #52	; 0x34
 800516a:	9203      	str	r2, [sp, #12]
 800516c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8005170:	3a38      	subs	r2, #56	; 0x38
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	466d      	mov	r5, sp
 8005176:	f103 020c 	add.w	r2, r3, #12
 800517a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800517e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005182:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	f7fe f965 	bl	8003454 <generate_filename>
						if(NTC_valid)
 800518a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800518e:	f103 0331 	add.w	r3, r3, #49	; 0x31
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d06a      	beq.n	800526e <main+0x1d06>
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 8005198:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800519c:	3b38      	subs	r3, #56	; 0x38
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80051a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051a6:	3b24      	subs	r3, #36	; 0x24
 80051a8:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051aa:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 80051ae:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80051b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051b4:	3b24      	subs	r3, #36	; 0x24
 80051b6:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051b8:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 80051ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051be:	3b24      	subs	r3, #36	; 0x24
 80051c0:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051c2:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 80051c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051c8:	3b0c      	subs	r3, #12
 80051ca:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051cc:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 80051ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051d2:	3b0c      	subs	r3, #12
 80051d4:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051d6:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 80051d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80051dc:	3b0c      	subs	r3, #12
 80051de:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,%4.1f\n",
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b64      	ldr	r3, [pc, #400]	; (8005374 <main+0x1e0c>)
 80051e4:	e9d3 5600 	ldrd	r5, r6, [r3]
 80051e8:	4b63      	ldr	r3, [pc, #396]	; (8005378 <main+0x1e10>)
 80051ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051ee:	4b63      	ldr	r3, [pc, #396]	; (800537c <main+0x1e14>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	4b62      	ldr	r3, [pc, #392]	; (8005380 <main+0x1e18>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f9a5 	bl	8000548 <__aeabi_f2d>
 80051fe:	4682      	mov	sl, r0
 8005200:	468b      	mov	fp, r1
 8005202:	4b60      	ldr	r3, [pc, #384]	; (8005384 <main+0x1e1c>)
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	4b5f      	ldr	r3, [pc, #380]	; (8005388 <main+0x1e20>)
 800520a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800520e:	4b5f      	ldr	r3, [pc, #380]	; (800538c <main+0x1e24>)
 8005210:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005214:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8005218:	3834      	subs	r0, #52	; 0x34
 800521a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 800521e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005222:	3b04      	subs	r3, #4
 8005224:	9314      	str	r3, [sp, #80]	; 0x50
 8005226:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800522a:	3b38      	subs	r3, #56	; 0x38
 800522c:	9313      	str	r3, [sp, #76]	; 0x4c
 800522e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005232:	3b10      	subs	r3, #16
 8005234:	9312      	str	r3, [sp, #72]	; 0x48
 8005236:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 800523a:	687c      	ldr	r4, [r7, #4]
 800523c:	940e      	str	r4, [sp, #56]	; 0x38
 800523e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8005242:	68bc      	ldr	r4, [r7, #8]
 8005244:	940a      	str	r4, [sp, #40]	; 0x28
 8005246:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800524a:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800524e:	68fc      	ldr	r4, [r7, #12]
 8005250:	9404      	str	r4, [sp, #16]
 8005252:	693c      	ldr	r4, [r7, #16]
 8005254:	9403      	str	r4, [sp, #12]
 8005256:	697c      	ldr	r4, [r7, #20]
 8005258:	9402      	str	r4, [sp, #8]
 800525a:	69bc      	ldr	r4, [r7, #24]
 800525c:	9401      	str	r4, [sp, #4]
 800525e:	69fc      	ldr	r4, [r7, #28]
 8005260:	9400      	str	r4, [sp, #0]
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	494a      	ldr	r1, [pc, #296]	; (8005390 <main+0x1e28>)
 8005268:	f015 fd12 	bl	801ac90 <siprintf>
 800526c:	e063      	b.n	8005336 <main+0x1dce>
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate,NTC_Centigrade);
						else
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800526e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005272:	3b38      	subs	r3, #56	; 0x38
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
														counterlog_file,
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8005278:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800527c:	3b24      	subs	r3, #36	; 0x24
 800527e:	78db      	ldrb	r3, [r3, #3]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8005280:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
 8005284:	6239      	str	r1, [r7, #32]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8005286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800528a:	3b24      	subs	r3, #36	; 0x24
 800528c:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 800528e:	61fb      	str	r3, [r7, #28]
														cur_date.Year+1980,cur_date.Month,cur_date.Date,
 8005290:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005294:	3b24      	subs	r3, #36	; 0x24
 8005296:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 8005298:	61bb      	str	r3, [r7, #24]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 800529a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800529e:	3b0c      	subs	r3, #12
 80052a0:	781b      	ldrb	r3, [r3, #0]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 80052a2:	617b      	str	r3, [r7, #20]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 80052a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80052a8:	3b0c      	subs	r3, #12
 80052aa:	785b      	ldrb	r3, [r3, #1]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 80052ac:	613b      	str	r3, [r7, #16]
														cur_time.Hours,cur_time.Minutes,cur_time.Seconds,						
 80052ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80052b2:	3b0c      	subs	r3, #12
 80052b4:	789b      	ldrb	r3, [r3, #2]
							sprintf(file_str,"%5ld,%04d-%02d-%02d,%02d:%02d:%02d,%5.1f,%4.1f,%03d,%4.1f,%03d,%4.1f,%s,%s,%s,---\n",
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	4b2e      	ldr	r3, [pc, #184]	; (8005374 <main+0x1e0c>)
 80052ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <main+0x1e10>)
 80052c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052c4:	4b2d      	ldr	r3, [pc, #180]	; (800537c <main+0x1e14>)
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <main+0x1e18>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb f93a 	bl	8000548 <__aeabi_f2d>
 80052d4:	4682      	mov	sl, r0
 80052d6:	468b      	mov	fp, r1
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <main+0x1e1c>)
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	461e      	mov	r6, r3
 80052de:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <main+0x1e20>)
 80052e0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052e4:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 80052e8:	3834      	subs	r0, #52	; 0x34
 80052ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80052ee:	3b04      	subs	r3, #4
 80052f0:	9314      	str	r3, [sp, #80]	; 0x50
 80052f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80052f6:	3b38      	subs	r3, #56	; 0x38
 80052f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80052fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80052fe:	3b10      	subs	r3, #16
 8005300:	9312      	str	r3, [sp, #72]	; 0x48
 8005302:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8005306:	960e      	str	r6, [sp, #56]	; 0x38
 8005308:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800530c:	68be      	ldr	r6, [r7, #8]
 800530e:	960a      	str	r6, [sp, #40]	; 0x28
 8005310:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8005314:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005318:	68fc      	ldr	r4, [r7, #12]
 800531a:	9404      	str	r4, [sp, #16]
 800531c:	693c      	ldr	r4, [r7, #16]
 800531e:	9403      	str	r4, [sp, #12]
 8005320:	697c      	ldr	r4, [r7, #20]
 8005322:	9402      	str	r4, [sp, #8]
 8005324:	69bc      	ldr	r4, [r7, #24]
 8005326:	9401      	str	r4, [sp, #4]
 8005328:	69fc      	ldr	r4, [r7, #28]
 800532a:	9400      	str	r4, [sp, #0]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	4918      	ldr	r1, [pc, #96]	; (8005394 <main+0x1e2c>)
 8005332:	f015 fcad 	bl	801ac90 <siprintf>
														Env_temperature,Env_humidity,BrightW_Value,BlinkW_Value,BrightIR_Value,
														LDR_resistance,DOOR_chstate,TEC_chstate,FAN_chstate);						
						
						if((fr=File_log(filelog_name,file_str))!=FR_OK)
 8005336:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800533a:	3a34      	subs	r2, #52	; 0x34
 800533c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005340:	3b34      	subs	r3, #52	; 0x34
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd ffe1 	bl	800330c <File_log>
 800534a:	4603      	mov	r3, r0
 800534c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005350:	f102 0217 	add.w	r2, r2, #23
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800535a:	f103 0317 	add.w	r3, r3, #23
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d029      	beq.n	80053b8 <main+0x1e50>
						{
							print_segment("E104");
 8005364:	480c      	ldr	r0, [pc, #48]	; (8005398 <main+0x1e30>)
 8005366:	f006 f81d 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);
 800536a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800536e:	f006 fc4d 	bl	800bc0c <HAL_Delay>
 8005372:	e021      	b.n	80053b8 <main+0x1e50>
 8005374:	200007d8 	.word	0x200007d8
 8005378:	200007e0 	.word	0x200007e0
 800537c:	200007f4 	.word	0x200007f4
 8005380:	20000814 	.word	0x20000814
 8005384:	200007cc 	.word	0x200007cc
 8005388:	20000780 	.word	0x20000780
 800538c:	200007b0 	.word	0x200007b0
 8005390:	0801e9c4 	.word	0x0801e9c4
 8005394:	0801ea1c 	.word	0x0801ea1c
 8005398:	0801e90c 	.word	0x0801e90c
						}		
					}
					else
					{
						if(Menu_choice==MAIN_MENU)
 800539c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80053a0:	f103 0337 	add.w	r3, r3, #55	; 0x37
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <main+0x1e50>
						{
							print_segment("EE.5D");
 80053aa:	48cc      	ldr	r0, [pc, #816]	; (80056dc <main+0x2174>)
 80053ac:	f005 fffa 	bl	800b3a4 <print_segment>
							HAL_Delay(1000);						
 80053b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80053b4:	f006 fc2a 	bl	800bc0c <HAL_Delay>
						}
					}
					avg_Env_temperature=0.0;
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80053c0:	f102 0204 	add.w	r2, r2, #4
 80053c4:	6013      	str	r3, [r2, #0]
					avg_Env_humidity=0.0;
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80053ce:	6013      	str	r3, [r2, #0]
				}
				/////////////////////////////////////////////////////
				if(KEYSW4_shortpressed)
 80053d0:	4bc3      	ldr	r3, [pc, #780]	; (80056e0 <main+0x2178>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <main+0x1e8e>
				{
					KEYSW4_shortpressed=0;
 80053d8:	4bc1      	ldr	r3, [pc, #772]	; (80056e0 <main+0x2178>)
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
					counterlog_file=0;
 80053de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80053e2:	3b38      	subs	r3, #56	; 0x38
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
					print_segment("5D. .E");
 80053e8:	48be      	ldr	r0, [pc, #760]	; (80056e4 <main+0x217c>)
 80053ea:	f005 ffdb 	bl	800b3a4 <print_segment>
					HAL_Delay(2000);
 80053ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80053f2:	f006 fc0b 	bl	800bc0c <HAL_Delay>
				}
				//////////////////////////////////////////////////
				if(KEYSW1_shortpressed)
 80053f6:	4bbc      	ldr	r3, [pc, #752]	; (80056e8 <main+0x2180>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d047      	beq.n	800548e <main+0x1f26>
				{
					KEYSW1_shortpressed=0;
 80053fe:	4bba      	ldr	r3, [pc, #744]	; (80056e8 <main+0x2180>)
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
					index_disp=0;
 8005404:	2300      	movs	r3, #0
 8005406:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800540a:	f102 020c 	add.w	r2, r2, #12
 800540e:	7013      	strb	r3, [r2, #0]
					disp_pass[0]='-';disp_pass[1]='-';disp_pass[2]='-';disp_pass[3]='-';
 8005410:	232d      	movs	r3, #45	; 0x2d
 8005412:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005416:	7013      	strb	r3, [r2, #0]
 8005418:	232d      	movs	r3, #45	; 0x2d
 800541a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800541e:	f102 0201 	add.w	r2, r2, #1
 8005422:	7013      	strb	r3, [r2, #0]
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800542a:	f102 0202 	add.w	r2, r2, #2
 800542e:	7013      	strb	r3, [r2, #0]
 8005430:	232d      	movs	r3, #45	; 0x2d
 8005432:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005436:	f102 0203 	add.w	r2, r2, #3
 800543a:	7013      	strb	r3, [r2, #0]
					print_pass(disp_pass,index_disp,1);
 800543c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005440:	f103 030c 	add.w	r3, r3, #12
 8005444:	7819      	ldrb	r1, [r3, #0]
 8005446:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800544a:	2201      	movs	r2, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f7fd fecf 	bl	80031f0 <print_pass>
					FAN2_OFF();
 8005452:	2200      	movs	r2, #0
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	48a5      	ldr	r0, [pc, #660]	; (80056ec <main+0x2184>)
 8005458:	f008 fa92 	bl	800d980 <HAL_GPIO_WritePin>
					sprintf(FAN_chstate,"OFF");						
 800545c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005460:	3b04      	subs	r3, #4
 8005462:	4aa3      	ldr	r2, [pc, #652]	; (80056f0 <main+0x2188>)
 8005464:	601a      	str	r2, [r3, #0]
					FAN_OFF();
 8005466:	2200      	movs	r2, #0
 8005468:	2120      	movs	r1, #32
 800546a:	48a2      	ldr	r0, [pc, #648]	; (80056f4 <main+0x218c>)
 800546c:	f008 fa88 	bl	800d980 <HAL_GPIO_WritePin>
					sprintf(TEC_chstate,"OFF");
 8005470:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005474:	3b38      	subs	r3, #56	; 0x38
 8005476:	4a9e      	ldr	r2, [pc, #632]	; (80056f0 <main+0x2188>)
 8005478:	601a      	str	r2, [r3, #0]
					Menu_choice=PASS_MENU;
 800547a:	2301      	movs	r3, #1
 800547c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005480:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8005484:	7013      	strb	r3, [r2, #0]
					
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005486:	4b9c      	ldr	r3, [pc, #624]	; (80056f8 <main+0x2190>)
 8005488:	f241 3288 	movw	r2, #5000	; 0x1388
 800548c:	801a      	strh	r2, [r3, #0]
				}
				if(KEYSW1_longpressed)
 800548e:	4b9b      	ldr	r3, [pc, #620]	; (80056fc <main+0x2194>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <main+0x1f34>
				{
					KEYSW1_longpressed=0;
 8005496:	4b99      	ldr	r3, [pc, #612]	; (80056fc <main+0x2194>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
				}
				if(KEYSW2_shortpressed)
 800549c:	4b98      	ldr	r3, [pc, #608]	; (8005700 <main+0x2198>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8165 	beq.w	8005770 <main+0x2208>
				{
					KEYSW2_shortpressed=0;
 80054a6:	4b96      	ldr	r3, [pc, #600]	; (8005700 <main+0x2198>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
					switch(cur_Disp)
 80054ac:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80054b0:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	f200 814f 	bhi.w	800575a <main+0x21f2>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <main+0x1f5c>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	08005593 	.word	0x08005593
 80054c8:	080055cd 	.word	0x080055cd
 80054cc:	08005647 	.word	0x08005647
 80054d0:	0800560f 	.word	0x0800560f
 80054d4:	0800567f 	.word	0x0800567f
 80054d8:	08005745 	.word	0x08005745
 80054dc:	080054e9 	.word	0x080054e9
 80054e0:	08005521 	.word	0x08005521
 80054e4:	08005559 	.word	0x08005559
					{
						case DISP_NTC:
							cur_Disp=last_disp=DISP_SUNRISE;
 80054e8:	2307      	movs	r3, #7
 80054ea:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80054ee:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80054f2:	7013      	strb	r3, [r2, #0]
 80054f4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80054f8:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005502:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005506:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%02d.%02d",sunrise_t.hr,sunrise_t.min);
 8005508:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <main+0x219c>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b7d      	ldr	r3, [pc, #500]	; (8005704 <main+0x219c>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005514:	f100 0004 	add.w	r0, r0, #4
 8005518:	497b      	ldr	r1, [pc, #492]	; (8005708 <main+0x21a0>)
 800551a:	f015 fbb9 	bl	801ac90 <siprintf>
						break;
 800551e:	e11c      	b.n	800575a <main+0x21f2>
						case DISP_SUNRISE:
							cur_Disp=last_disp=DISP_SUNSET;
 8005520:	2308      	movs	r3, #8
 8005522:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005526:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800552a:	7013      	strb	r3, [r2, #0]
 800552c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005530:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800553a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800553e:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%02d.%02d",sunset_t.hr,sunset_t.min);
 8005540:	4b72      	ldr	r3, [pc, #456]	; (800570c <main+0x21a4>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b71      	ldr	r3, [pc, #452]	; (800570c <main+0x21a4>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800554c:	f100 0004 	add.w	r0, r0, #4
 8005550:	496d      	ldr	r1, [pc, #436]	; (8005708 <main+0x21a0>)
 8005552:	f015 fb9d 	bl	801ac90 <siprintf>
						break;
 8005556:	e100      	b.n	800575a <main+0x21f2>
						case DISP_SUNSET:
							cur_Disp=last_disp=DISP_TEMP;
 8005558:	2300      	movs	r3, #0
 800555a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800555e:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005562:	7013      	strb	r3, [r2, #0]
 8005564:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005568:	f103 0335 	add.w	r3, r3, #53	; 0x35
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005572:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005576:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%5.1f",Env_temperature);
 8005578:	4b65      	ldr	r3, [pc, #404]	; (8005710 <main+0x21a8>)
 800557a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800557e:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005582:	f100 0004 	add.w	r0, r0, #4
 8005586:	461a      	mov	r2, r3
 8005588:	4623      	mov	r3, r4
 800558a:	4962      	ldr	r1, [pc, #392]	; (8005714 <main+0x21ac>)
 800558c:	f015 fb80 	bl	801ac90 <siprintf>
						break;
 8005590:	e0e3      	b.n	800575a <main+0x21f2>
						case DISP_TEMP:
							cur_Disp=last_disp=DISP_HUM;
 8005592:	2301      	movs	r3, #1
 8005594:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005598:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800559c:	7013      	strb	r3, [r2, #0]
 800559e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80055a2:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80055ac:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80055b0:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"H%4.1f",Env_humidity);
 80055b2:	4b59      	ldr	r3, [pc, #356]	; (8005718 <main+0x21b0>)
 80055b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055b8:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80055bc:	f100 0004 	add.w	r0, r0, #4
 80055c0:	461a      	mov	r2, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	4955      	ldr	r1, [pc, #340]	; (800571c <main+0x21b4>)
 80055c6:	f015 fb63 	bl	801ac90 <siprintf>
						break;
 80055ca:	e0c6      	b.n	800575a <main+0x21f2>
						case DISP_HUM:
							cur_Disp=last_disp=DISP_BLINKW;
 80055cc:	2303      	movs	r3, #3
 80055ce:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80055d2:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80055d6:	7013      	strb	r3, [r2, #0]
 80055d8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80055dc:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80055e6:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80055ea:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"L%4.1f",BlinkW_Value);							
 80055ec:	4b4c      	ldr	r3, [pc, #304]	; (8005720 <main+0x21b8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fa ffa9 	bl	8000548 <__aeabi_f2d>
 80055f6:	4603      	mov	r3, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80055fe:	f100 0004 	add.w	r0, r0, #4
 8005602:	461a      	mov	r2, r3
 8005604:	4623      	mov	r3, r4
 8005606:	4947      	ldr	r1, [pc, #284]	; (8005724 <main+0x21bc>)
 8005608:	f015 fb42 	bl	801ac90 <siprintf>
						break;
 800560c:	e0a5      	b.n	800575a <main+0x21f2>
						case DISP_BLINKW:
							cur_Disp=last_disp=DISP_BRIGHTW;
 800560e:	2302      	movs	r3, #2
 8005610:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005614:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005618:	7013      	strb	r3, [r2, #0]
 800561a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800561e:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005628:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800562c:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"T%3d",BrightW_Value);
 800562e:	4b3e      	ldr	r3, [pc, #248]	; (8005728 <main+0x21c0>)
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005638:	f103 0304 	add.w	r3, r3, #4
 800563c:	493b      	ldr	r1, [pc, #236]	; (800572c <main+0x21c4>)
 800563e:	4618      	mov	r0, r3
 8005640:	f015 fb26 	bl	801ac90 <siprintf>
							break;
 8005644:	e089      	b.n	800575a <main+0x21f2>
						case DISP_BRIGHTW:
							cur_Disp=last_disp=DISP_BRIGHTIR;
 8005646:	2304      	movs	r3, #4
 8005648:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800564c:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005650:	7013      	strb	r3, [r2, #0]
 8005652:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005656:	f103 0335 	add.w	r3, r3, #53	; 0x35
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005660:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005664:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"R%3d",BrightIR_Value);
 8005666:	4b32      	ldr	r3, [pc, #200]	; (8005730 <main+0x21c8>)
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005670:	f103 0304 	add.w	r3, r3, #4
 8005674:	492f      	ldr	r1, [pc, #188]	; (8005734 <main+0x21cc>)
 8005676:	4618      	mov	r0, r3
 8005678:	f015 fb0a 	bl	801ac90 <siprintf>
							break;
 800567c:	e06d      	b.n	800575a <main+0x21f2>
						case DISP_BRIGHTIR:
							cur_Disp=last_disp=DISP_NTC;
 800567e:	2306      	movs	r3, #6
 8005680:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005684:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005688:	7013      	strb	r3, [r2, #0]
 800568a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800568e:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005698:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800569c:	7013      	strb	r3, [r2, #0]
							if(NTC_valid)
 800569e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80056a2:	f103 0331 	add.w	r3, r3, #49	; 0x31
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00c      	beq.n	80056c6 <main+0x215e>
								sprintf(str_disp,"N%03.0f",NTC_Centigrade);
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <main+0x21d0>)
 80056ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056b2:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80056b6:	f100 0004 	add.w	r0, r0, #4
 80056ba:	461a      	mov	r2, r3
 80056bc:	4623      	mov	r3, r4
 80056be:	491f      	ldr	r1, [pc, #124]	; (800573c <main+0x21d4>)
 80056c0:	f015 fae6 	bl	801ac90 <siprintf>
							else
								sprintf(str_disp,"N---");
						break;
 80056c4:	e049      	b.n	800575a <main+0x21f2>
								sprintf(str_disp,"N---");
 80056c6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80056ca:	f103 0304 	add.w	r3, r3, #4
 80056ce:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <main+0x21d8>)
 80056d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056d4:	6018      	str	r0, [r3, #0]
 80056d6:	3304      	adds	r3, #4
 80056d8:	7019      	strb	r1, [r3, #0]
						break;
 80056da:	e03e      	b.n	800575a <main+0x21f2>
 80056dc:	0801ea70 	.word	0x0801ea70
 80056e0:	200003c7 	.word	0x200003c7
 80056e4:	0801eae4 	.word	0x0801eae4
 80056e8:	200003e0 	.word	0x200003e0
 80056ec:	40021000 	.word	0x40021000
 80056f0:	0046464f 	.word	0x0046464f
 80056f4:	40020000 	.word	0x40020000
 80056f8:	200003e8 	.word	0x200003e8
 80056fc:	2000003c 	.word	0x2000003c
 8005700:	200003d8 	.word	0x200003d8
 8005704:	200007a0 	.word	0x200007a0
 8005708:	0801ea98 	.word	0x0801ea98
 800570c:	200007e8 	.word	0x200007e8
 8005710:	200007d8 	.word	0x200007d8
 8005714:	0801ea90 	.word	0x0801ea90
 8005718:	200007e0 	.word	0x200007e0
 800571c:	0801eab0 	.word	0x0801eab0
 8005720:	20000814 	.word	0x20000814
 8005724:	0801eab8 	.word	0x0801eab8
 8005728:	200007f4 	.word	0x200007f4
 800572c:	0801eac0 	.word	0x0801eac0
 8005730:	200007cc 	.word	0x200007cc
 8005734:	0801eac8 	.word	0x0801eac8
 8005738:	200007b0 	.word	0x200007b0
 800573c:	0801ea80 	.word	0x0801ea80
 8005740:	0801ea88 	.word	0x0801ea88
						case DISP_ERROR:
							sprintf(str_disp,"E207");	
 8005744:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005748:	f103 0304 	add.w	r3, r3, #4
 800574c:	4ace      	ldr	r2, [pc, #824]	; (8005a88 <main+0x2520>)
 800574e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005752:	6018      	str	r0, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	7019      	strb	r1, [r3, #0]
							break;
 8005758:	bf00      	nop
					}
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 800575a:	4bcc      	ldr	r3, [pc, #816]	; (8005a8c <main+0x2524>)
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	801a      	strh	r2, [r3, #0]
					print_segment(str_disp);					
 8005762:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005766:	f103 0304 	add.w	r3, r3, #4
 800576a:	4618      	mov	r0, r3
 800576c:	f005 fe1a 	bl	800b3a4 <print_segment>
				}
				if(KEYSW2_longpressed)
 8005770:	4bc7      	ldr	r3, [pc, #796]	; (8005a90 <main+0x2528>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <main+0x2216>
				{
					KEYSW2_longpressed=0;
 8005778:	4bc5      	ldr	r3, [pc, #788]	; (8005a90 <main+0x2528>)
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
				}
				if(KEYSW3_shortpressed)
 800577e:	4bc5      	ldr	r3, [pc, #788]	; (8005a94 <main+0x252c>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8130 	beq.w	80059e8 <main+0x2480>
				{
					KEYSW3_shortpressed=0;
 8005788:	4bc2      	ldr	r3, [pc, #776]	; (8005a94 <main+0x252c>)
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
					switch(cur_Disp)
 800578e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005792:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	f200 811a 	bhi.w	80059d2 <main+0x246a>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <main+0x223c>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	08005801 	.word	0x08005801
 80057ac:	08005875 	.word	0x08005875
 80057b0:	0800583b 	.word	0x0800583b
 80057b4:	080058b7 	.word	0x080058b7
 80057b8:	080059bd 	.word	0x080059bd
 80057bc:	080058ef 	.word	0x080058ef
 80057c0:	08005927 	.word	0x08005927
 80057c4:	08005985 	.word	0x08005985
					{

						case DISP_TEMP:
							cur_Disp=last_disp=DISP_SUNSET;
 80057c8:	2308      	movs	r3, #8
 80057ca:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80057ce:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80057d2:	7013      	strb	r3, [r2, #0]
 80057d4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80057d8:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80057e2:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80057e6:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%02d.%02d",sunset_t.hr,sunset_t.min);
 80057e8:	4bab      	ldr	r3, [pc, #684]	; (8005a98 <main+0x2530>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4baa      	ldr	r3, [pc, #680]	; (8005a98 <main+0x2530>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80057f4:	f100 0004 	add.w	r0, r0, #4
 80057f8:	49a8      	ldr	r1, [pc, #672]	; (8005a9c <main+0x2534>)
 80057fa:	f015 fa49 	bl	801ac90 <siprintf>
						break;
 80057fe:	e0e8      	b.n	80059d2 <main+0x246a>
						case DISP_HUM:
							cur_Disp=last_disp=DISP_TEMP;
 8005800:	2300      	movs	r3, #0
 8005802:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005806:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800580a:	7013      	strb	r3, [r2, #0]
 800580c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005810:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800581a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800581e:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%5.1f",Env_temperature);
 8005820:	4b9f      	ldr	r3, [pc, #636]	; (8005aa0 <main+0x2538>)
 8005822:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005826:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800582a:	f100 0004 	add.w	r0, r0, #4
 800582e:	461a      	mov	r2, r3
 8005830:	4623      	mov	r3, r4
 8005832:	499c      	ldr	r1, [pc, #624]	; (8005aa4 <main+0x253c>)
 8005834:	f015 fa2c 	bl	801ac90 <siprintf>
						break;
 8005838:	e0cb      	b.n	80059d2 <main+0x246a>
						case DISP_BLINKW:
							cur_Disp=last_disp=DISP_HUM;
 800583a:	2301      	movs	r3, #1
 800583c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005840:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005844:	7013      	strb	r3, [r2, #0]
 8005846:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800584a:	f103 0335 	add.w	r3, r3, #53	; 0x35
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005854:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005858:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"H%4.1f",Env_humidity);
 800585a:	4b93      	ldr	r3, [pc, #588]	; (8005aa8 <main+0x2540>)
 800585c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005860:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005864:	f100 0004 	add.w	r0, r0, #4
 8005868:	461a      	mov	r2, r3
 800586a:	4623      	mov	r3, r4
 800586c:	498f      	ldr	r1, [pc, #572]	; (8005aac <main+0x2544>)
 800586e:	f015 fa0f 	bl	801ac90 <siprintf>
							break;
 8005872:	e0ae      	b.n	80059d2 <main+0x246a>
						case DISP_BRIGHTW:
							cur_Disp=last_disp=DISP_BLINKW;
 8005874:	2303      	movs	r3, #3
 8005876:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800587a:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800587e:	7013      	strb	r3, [r2, #0]
 8005880:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005884:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800588e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005892:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"L%4.1f",BlinkW_Value);							
 8005894:	4b86      	ldr	r3, [pc, #536]	; (8005ab0 <main+0x2548>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7fa fe55 	bl	8000548 <__aeabi_f2d>
 800589e:	4603      	mov	r3, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80058a6:	f100 0004 	add.w	r0, r0, #4
 80058aa:	461a      	mov	r2, r3
 80058ac:	4623      	mov	r3, r4
 80058ae:	4981      	ldr	r1, [pc, #516]	; (8005ab4 <main+0x254c>)
 80058b0:	f015 f9ee 	bl	801ac90 <siprintf>
							break;						
 80058b4:	e08d      	b.n	80059d2 <main+0x246a>
						case DISP_BRIGHTIR:
							cur_Disp=last_disp=DISP_BRIGHTW;
 80058b6:	2302      	movs	r3, #2
 80058b8:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80058bc:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80058c0:	7013      	strb	r3, [r2, #0]
 80058c2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80058c6:	f103 0335 	add.w	r3, r3, #53	; 0x35
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80058d0:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80058d4:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"T%3d",BrightW_Value);
 80058d6:	4b78      	ldr	r3, [pc, #480]	; (8005ab8 <main+0x2550>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80058e0:	f103 0304 	add.w	r3, r3, #4
 80058e4:	4975      	ldr	r1, [pc, #468]	; (8005abc <main+0x2554>)
 80058e6:	4618      	mov	r0, r3
 80058e8:	f015 f9d2 	bl	801ac90 <siprintf>
						break;
 80058ec:	e071      	b.n	80059d2 <main+0x246a>
						case DISP_NTC:
							cur_Disp=last_disp=DISP_BRIGHTIR;
 80058ee:	2304      	movs	r3, #4
 80058f0:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80058f4:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80058f8:	7013      	strb	r3, [r2, #0]
 80058fa:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80058fe:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005908:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800590c:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"R%3d",BrightIR_Value);
 800590e:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <main+0x2558>)
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005918:	f103 0304 	add.w	r3, r3, #4
 800591c:	4969      	ldr	r1, [pc, #420]	; (8005ac4 <main+0x255c>)
 800591e:	4618      	mov	r0, r3
 8005920:	f015 f9b6 	bl	801ac90 <siprintf>
						break;
 8005924:	e055      	b.n	80059d2 <main+0x246a>
						case DISP_SUNRISE:
							cur_Disp=last_disp=DISP_NTC;
 8005926:	2306      	movs	r3, #6
 8005928:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800592c:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8005930:	7013      	strb	r3, [r2, #0]
 8005932:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005936:	f103 0335 	add.w	r3, r3, #53	; 0x35
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005940:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005944:	7013      	strb	r3, [r2, #0]
							if(NTC_valid)
 8005946:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800594a:	f103 0331 	add.w	r3, r3, #49	; 0x31
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <main+0x2406>
								sprintf(str_disp,"N%03.0f",NTC_Centigrade);
 8005954:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <main+0x2560>)
 8005956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800595a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800595e:	f100 0004 	add.w	r0, r0, #4
 8005962:	461a      	mov	r2, r3
 8005964:	4623      	mov	r3, r4
 8005966:	4959      	ldr	r1, [pc, #356]	; (8005acc <main+0x2564>)
 8005968:	f015 f992 	bl	801ac90 <siprintf>
							else
								sprintf(str_disp,"N---");
						break;
 800596c:	e031      	b.n	80059d2 <main+0x246a>
								sprintf(str_disp,"N---");
 800596e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005972:	f103 0304 	add.w	r3, r3, #4
 8005976:	4a56      	ldr	r2, [pc, #344]	; (8005ad0 <main+0x2568>)
 8005978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800597c:	6018      	str	r0, [r3, #0]
 800597e:	3304      	adds	r3, #4
 8005980:	7019      	strb	r1, [r3, #0]
						break;
 8005982:	e026      	b.n	80059d2 <main+0x246a>
						case DISP_SUNSET:
							cur_Disp=last_disp=DISP_SUNRISE;
 8005984:	2307      	movs	r3, #7
 8005986:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800598a:	f102 0235 	add.w	r2, r2, #53	; 0x35
 800598e:	7013      	strb	r3, [r2, #0]
 8005990:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005994:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800599e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80059a2:	7013      	strb	r3, [r2, #0]
							sprintf(str_disp,"%02d.%02d",sunrise_t.hr,sunrise_t.min);
 80059a4:	4b4b      	ldr	r3, [pc, #300]	; (8005ad4 <main+0x256c>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <main+0x256c>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80059b0:	f100 0004 	add.w	r0, r0, #4
 80059b4:	4939      	ldr	r1, [pc, #228]	; (8005a9c <main+0x2534>)
 80059b6:	f015 f96b 	bl	801ac90 <siprintf>
						break;
 80059ba:	e00a      	b.n	80059d2 <main+0x246a>
						case DISP_ERROR:
							sprintf(str_disp,"E207");			
 80059bc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80059c0:	f103 0304 	add.w	r3, r3, #4
 80059c4:	4a30      	ldr	r2, [pc, #192]	; (8005a88 <main+0x2520>)
 80059c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059ca:	6018      	str	r0, [r3, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	7019      	strb	r1, [r3, #0]
						break;
 80059d0:	bf00      	nop
					}
					print_segment(str_disp);
 80059d2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80059d6:	f103 0304 	add.w	r3, r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f005 fce2 	bl	800b3a4 <print_segment>
					GOMAINMENU_counter=GOMAINMENU_DELAY;					
 80059e0:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <main+0x2524>)
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	801a      	strh	r2, [r3, #0]
				}
				if(KEYSW3_longpressed)
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <main+0x2570>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <main+0x248e>
				{
					KEYSW3_longpressed=0;
 80059f0:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <main+0x2570>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
				}
				if(KEYSW4_longpressed)
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <main+0x2574>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <main+0x249c>
				{
					KEYSW4_longpressed=0;
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <main+0x2574>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
				}
				if(GOMAINMENU_counter<=0)
 8005a04:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <main+0x2524>)
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f044 80e9 	bne.w	8009be0 <main+0x6678>
				{
					GOMAINMENU_counter=0;
 8005a0e:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <main+0x2524>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	801a      	strh	r2, [r3, #0]
					cur_Disp=DISP_TEMP;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005a1a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8005a1e:	7013      	strb	r3, [r2, #0]
				}
				break;
 8005a20:	f004 b8de 	b.w	8009be0 <main+0x6678>
			/////////////////////////////////////////////////////////CASE PASS_MENU/////////////////////////////////////////////////////////////////				
			case PASS_MENU:
				reset_keys();
 8005a24:	f7fd fbc2 	bl	80031ac <reset_keys>
				if(KEYSW2_longpressed)	KEYSW2_longpressed=0;
 8005a28:	4b19      	ldr	r3, [pc, #100]	; (8005a90 <main+0x2528>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <main+0x24ce>
 8005a30:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <main+0x2528>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
				if(KEYSW3_longpressed)	KEYSW3_longpressed=0;
 8005a36:	4b28      	ldr	r3, [pc, #160]	; (8005ad8 <main+0x2570>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <main+0x24dc>
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <main+0x2570>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
				if(KEYSW2_shortpressed)//up
 8005a44:	4b26      	ldr	r3, [pc, #152]	; (8005ae0 <main+0x2578>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8094 	beq.w	8005b76 <main+0x260e>
				{
					KEYSW2_shortpressed=0;
 8005a4e:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <main+0x2578>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <main+0x2524>)
 8005a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5a:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-')
 8005a5c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005a60:	f103 030c 	add.w	r3, r3, #12
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005a6a:	f102 0220 	add.w	r2, r2, #32
 8005a6e:	4413      	add	r3, r2
 8005a70:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8005a74:	2b2d      	cmp	r3, #45	; 0x2d
 8005a76:	d135      	bne.n	8005ae4 <main+0x257c>
					{
						passsegment_value=0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005a7e:	f102 020b 	add.w	r2, r2, #11
 8005a82:	7013      	strb	r3, [r2, #0]
 8005a84:	e046      	b.n	8005b14 <main+0x25ac>
 8005a86:	bf00      	nop
 8005a88:	0801ead0 	.word	0x0801ead0
 8005a8c:	200003e8 	.word	0x200003e8
 8005a90:	200003d9 	.word	0x200003d9
 8005a94:	200003d0 	.word	0x200003d0
 8005a98:	200007e8 	.word	0x200007e8
 8005a9c:	0801ea98 	.word	0x0801ea98
 8005aa0:	200007d8 	.word	0x200007d8
 8005aa4:	0801ea90 	.word	0x0801ea90
 8005aa8:	200007e0 	.word	0x200007e0
 8005aac:	0801eab0 	.word	0x0801eab0
 8005ab0:	20000814 	.word	0x20000814
 8005ab4:	0801eab8 	.word	0x0801eab8
 8005ab8:	200007f4 	.word	0x200007f4
 8005abc:	0801eac0 	.word	0x0801eac0
 8005ac0:	200007cc 	.word	0x200007cc
 8005ac4:	0801eac8 	.word	0x0801eac8
 8005ac8:	200007b0 	.word	0x200007b0
 8005acc:	0801ea80 	.word	0x0801ea80
 8005ad0:	0801ea88 	.word	0x0801ea88
 8005ad4:	200007a0 	.word	0x200007a0
 8005ad8:	200003d1 	.word	0x200003d1
 8005adc:	200003c8 	.word	0x200003c8
 8005ae0:	200003d8 	.word	0x200003d8
					}
					else
					{
						passsegment_value++;
 8005ae4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005ae8:	f103 030b 	add.w	r3, r3, #11
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005af4:	f102 020b 	add.w	r2, r2, #11
 8005af8:	7013      	strb	r3, [r2, #0]
						if(passsegment_value>9) passsegment_value=0;
 8005afa:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005afe:	f103 030b 	add.w	r3, r3, #11
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d905      	bls.n	8005b14 <main+0x25ac>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005b0e:	f102 020b 	add.w	r2, r2, #11
 8005b12:	7013      	strb	r3, [r2, #0]
					}
					disp_pass[index_disp]=passsegment_value+'0';
 8005b14:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005b18:	f103 030c 	add.w	r3, r3, #12
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005b22:	f102 020b 	add.w	r2, r2, #11
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	3230      	adds	r2, #48	; 0x30
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 8005b30:	f101 0120 	add.w	r1, r1, #32
 8005b34:	440b      	add	r3, r1
 8005b36:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 8005b3a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005b3e:	f103 030d 	add.w	r3, r3, #13
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <main+0x25f8>
					{
						print_pass(disp_pass,index_disp,1);
 8005b48:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005b4c:	f103 030c 	add.w	r3, r3, #12
 8005b50:	7819      	ldrb	r1, [r3, #0]
 8005b52:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005b56:	2201      	movs	r2, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fb49 	bl	80031f0 <print_pass>
 8005b5e:	e00a      	b.n	8005b76 <main+0x260e>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8005b60:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005b64:	f103 030c 	add.w	r3, r3, #12
 8005b68:	7819      	ldrb	r1, [r3, #0]
 8005b6a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fd fb3d 	bl	80031f0 <print_pass>
					}					
				}
				if(KEYSW3_shortpressed)//dn
 8005b76:	4bbd      	ldr	r3, [pc, #756]	; (8005e6c <main+0x2904>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d064      	beq.n	8005c48 <main+0x26e0>
				{
					KEYSW3_shortpressed=0;
 8005b7e:	4bbb      	ldr	r3, [pc, #748]	; (8005e6c <main+0x2904>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005b84:	4bba      	ldr	r3, [pc, #744]	; (8005e70 <main+0x2908>)
 8005b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8a:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-')
 8005b8c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005b90:	f103 030c 	add.w	r3, r3, #12
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005b9a:	f102 0220 	add.w	r2, r2, #32
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8005ba4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ba6:	d106      	bne.n	8005bb6 <main+0x264e>
					{
						passsegment_value=9;
 8005ba8:	2309      	movs	r3, #9
 8005baa:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005bae:	f102 020b 	add.w	r2, r2, #11
 8005bb2:	7013      	strb	r3, [r2, #0]
 8005bb4:	e017      	b.n	8005be6 <main+0x267e>
					}
					else
					{
						if(passsegment_value==0) passsegment_value=10;
 8005bb6:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005bba:	f103 030b 	add.w	r3, r3, #11
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <main+0x2668>
 8005bc4:	230a      	movs	r3, #10
 8005bc6:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005bca:	f102 020b 	add.w	r2, r2, #11
 8005bce:	7013      	strb	r3, [r2, #0]
						passsegment_value--;
 8005bd0:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005bd4:	f103 030b 	add.w	r3, r3, #11
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005be0:	f102 020b 	add.w	r2, r2, #11
 8005be4:	7013      	strb	r3, [r2, #0]
						
					}
					disp_pass[index_disp]=passsegment_value+'0';
 8005be6:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005bea:	f103 030c 	add.w	r3, r3, #12
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005bf4:	f102 020b 	add.w	r2, r2, #11
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	3230      	adds	r2, #48	; 0x30
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 8005c02:	f101 0120 	add.w	r1, r1, #32
 8005c06:	440b      	add	r3, r1
 8005c08:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 8005c0c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c10:	f103 030d 	add.w	r3, r3, #13
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <main+0x26ca>
					{
						print_pass(disp_pass,index_disp,1);
 8005c1a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c1e:	f103 030c 	add.w	r3, r3, #12
 8005c22:	7819      	ldrb	r1, [r3, #0]
 8005c24:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005c28:	2201      	movs	r2, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fae0 	bl	80031f0 <print_pass>
 8005c30:	e00a      	b.n	8005c48 <main+0x26e0>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8005c32:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c36:	f103 030c 	add.w	r3, r3, #12
 8005c3a:	7819      	ldrb	r1, [r3, #0]
 8005c3c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005c40:	2200      	movs	r2, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fad4 	bl	80031f0 <print_pass>
					}							
				}
				if(KEYSW1_shortpressed)//set
 8005c48:	4b8a      	ldr	r3, [pc, #552]	; (8005e74 <main+0x290c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80c5 	beq.w	8005ddc <main+0x2874>
				{
					KEYSW1_shortpressed=0;
 8005c52:	4b88      	ldr	r3, [pc, #544]	; (8005e74 <main+0x290c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005c58:	4b85      	ldr	r3, [pc, #532]	; (8005e70 <main+0x2908>)
 8005c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5e:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-') disp_pass[index_disp]='0';
 8005c60:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c64:	f103 030c 	add.w	r3, r3, #12
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005c6e:	f102 0220 	add.w	r2, r2, #32
 8005c72:	4413      	add	r3, r2
 8005c74:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8005c78:	2b2d      	cmp	r3, #45	; 0x2d
 8005c7a:	d10c      	bne.n	8005c96 <main+0x272e>
 8005c7c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c80:	f103 030c 	add.w	r3, r3, #12
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005c8a:	f102 0220 	add.w	r2, r2, #32
 8005c8e:	4413      	add	r3, r2
 8005c90:	2230      	movs	r2, #48	; 0x30
 8005c92:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 8005c96:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005c9a:	f103 030d 	add.w	r3, r3, #13
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <main+0x2754>
					{
						print_pass(disp_pass,index_disp,1);
 8005ca4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005ca8:	f103 030c 	add.w	r3, r3, #12
 8005cac:	7819      	ldrb	r1, [r3, #0]
 8005cae:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fd fa9b 	bl	80031f0 <print_pass>
 8005cba:	e00a      	b.n	8005cd2 <main+0x276a>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8005cbc:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005cc0:	f103 030c 	add.w	r3, r3, #12
 8005cc4:	7819      	ldrb	r1, [r3, #0]
 8005cc6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fd fa8f 	bl	80031f0 <print_pass>
					}						
					
					index_disp++;
 8005cd2:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005cd6:	f103 030c 	add.w	r3, r3, #12
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005ce2:	f102 020c 	add.w	r2, r2, #12
 8005ce6:	7013      	strb	r3, [r2, #0]
					if(index_disp==4)
 8005ce8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005cec:	f103 030c 	add.w	r3, r3, #12
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d172      	bne.n	8005ddc <main+0x2874>
					{
						tmp_uint16t=(disp_pass[0]-'0')*1000+(disp_pass[1]-'0')*100+(disp_pass[2]-'0')*10+(disp_pass[3]-'0');
 8005cf6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	3b30      	subs	r3, #48	; 0x30
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	0152      	lsls	r2, r2, #5
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	0092      	lsls	r2, r2, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005d12:	f103 0301 	add.w	r3, r3, #1
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	3b30      	subs	r3, #48	; 0x30
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	0089      	lsls	r1, r1, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	4619      	mov	r1, r3
 8005d24:	0088      	lsls	r0, r1, #2
 8005d26:	4619      	mov	r1, r3
 8005d28:	4603      	mov	r3, r0
 8005d2a:	440b      	add	r3, r1
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005d38:	f103 0302 	add.w	r3, r3, #2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	3b30      	subs	r3, #48	; 0x30
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4619      	mov	r1, r3
 8005d44:	0089      	lsls	r1, r1, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005d54:	f103 0303 	add.w	r3, r3, #3
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	3b30      	subs	r3, #48	; 0x30
 8005d62:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005d66:	f102 0214 	add.w	r2, r2, #20
 8005d6a:	8013      	strh	r3, [r2, #0]
						if(tmp_uint16t==Password_Value)
 8005d6c:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <main+0x2910>)
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005d74:	f102 0214 	add.w	r2, r2, #20
 8005d78:	8812      	ldrh	r2, [r2, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d12b      	bne.n	8005dd6 <main+0x286e>
						{
							sprintf(str_disp,"%5.1f",TL_Value);prev_float=TL_Value;
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <main+0x2914>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fbe0 	bl	8000548 <__aeabi_f2d>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005d90:	f100 0004 	add.w	r0, r0, #4
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	4939      	ldr	r1, [pc, #228]	; (8005e80 <main+0x2918>)
 8005d9a:	f014 ff79 	bl	801ac90 <siprintf>
 8005d9e:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <main+0x2914>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005da6:	f102 021c 	add.w	r2, r2, #28
 8005daa:	6013      	str	r3, [r2, #0]
							print_segment(str_disp);
 8005dac:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005db0:	f103 0304 	add.w	r3, r3, #4
 8005db4:	4618      	mov	r0, r3
 8005db6:	f005 faf5 	bl	800b3a4 <print_segment>
							Blink_segments(1);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f005 fb28 	bl	800b410 <Blink_segments>
							Menu_choice=TEMPL_MENU;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005dc6:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8005dca:	7013      	strb	r3, [r2, #0]
							GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005dcc:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <main+0x2908>)
 8005dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e002      	b.n	8005ddc <main+0x2874>
						}
						else
							GOMAINMENU_counter=0;
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <main+0x2908>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	801a      	strh	r2, [r3, #0]
					}
				}
				if(flag_1s && Menu_choice!=TEMPL_MENU)
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <main+0x291c>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d033      	beq.n	8005e4c <main+0x28e4>
 8005de4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005de8:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d02c      	beq.n	8005e4c <main+0x28e4>
				{
					flag_1s=0;
 8005df2:	4b24      	ldr	r3, [pc, #144]	; (8005e84 <main+0x291c>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
					if(blink)
 8005df8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005dfc:	f103 030d 	add.w	r3, r3, #13
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <main+0x28b6>
					{
						print_pass(disp_pass,index_disp,1);
 8005e06:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005e0a:	f103 030c 	add.w	r3, r3, #12
 8005e0e:	7819      	ldrb	r1, [r3, #0]
 8005e10:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005e14:	2201      	movs	r2, #1
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd f9ea 	bl	80031f0 <print_pass>
 8005e1c:	e00a      	b.n	8005e34 <main+0x28cc>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8005e1e:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005e22:	f103 030c 	add.w	r3, r3, #12
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd f9de 	bl	80031f0 <print_pass>
					}
					blink=1-blink;
 8005e34:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005e38:	f103 030d 	add.w	r3, r3, #13
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f1c3 0301 	rsb	r3, r3, #1
 8005e42:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005e46:	f102 020d 	add.w	r2, r2, #13
 8005e4a:	7013      	strb	r3, [r2, #0]
				}
				if(GOMAINMENU_counter==0)
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <main+0x2908>)
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f043 86c8 	bne.w	8009be6 <main+0x667e>
				{
					Menu_choice=MAIN_MENU;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005e5c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8005e60:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8005e62:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <main+0x291c>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
				}
			break;				
 8005e68:	f003 bebd 	b.w	8009be6 <main+0x667e>
 8005e6c:	200003d0 	.word	0x200003d0
 8005e70:	200003e8 	.word	0x200003e8
 8005e74:	200003e0 	.word	0x200003e0
 8005e78:	20000770 	.word	0x20000770
 8005e7c:	20000808 	.word	0x20000808
 8005e80:	0801ea90 	.word	0x0801ea90
 8005e84:	200003c4 	.word	0x200003c4
			/////////////////////////////////////////////////////////CASE TEMPL_MENU/////////////////////////////////////////////////////////////////				
			case TEMPL_MENU:
				reset_keys();
 8005e88:	f7fd f990 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <main+0x2988>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d063      	beq.n	8005f5c <main+0x29f4>
			{
				KEYSW1_shortpressed=0;
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <main+0x2988>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
				if(prev_float!=TL_Value)
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <main+0x298c>)
 8005e9c:	edd3 7a00 	vldr	s15, [r3]
 8005ea0:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8005ea4:	f103 031c 	add.w	r3, r3, #28
 8005ea8:	ed93 7a00 	vldr	s14, [r3]
 8005eac:	eeb4 7a67 	vcmp.f32	s14, s15
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	d027      	beq.n	8005f06 <main+0x299e>
				{
					if(EE_WriteVariable(TL_ADDRESS,(uint16_t)(TL_Value*10.0))!=HAL_OK)
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <main+0x298c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa fb44 	bl	8000548 <__aeabi_f2d>
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <main+0x2990>)
 8005ec6:	f7fa fb97 	bl	80005f8 <__aeabi_dmul>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	460c      	mov	r4, r1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f7fa fe69 	bl	8000ba8 <__aeabi_d2uiz>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	4619      	mov	r1, r3
 8005edc:	2002      	movs	r0, #2
 8005ede:	f7fc fc3f 	bl	8002760 <EE_WriteVariable>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <main+0x2998>
					{
						print_segment("ER02");
 8005ee8:	4804      	ldr	r0, [pc, #16]	; (8005efc <main+0x2994>)
 8005eea:	f005 fa5b 	bl	800b3a4 <print_segment>
						while(1);
 8005eee:	e7fe      	b.n	8005eee <main+0x2986>
 8005ef0:	200003e0 	.word	0x200003e0
 8005ef4:	20000808 	.word	0x20000808
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 8005f00:	2032      	movs	r0, #50	; 0x32
 8005f02:	f005 fe83 	bl	800bc0c <HAL_Delay>
				}
				sprintf(str_disp,"%5.1f",TH_Value);prev_float=TH_Value;
 8005f06:	4bb8      	ldr	r3, [pc, #736]	; (80061e8 <main+0x2c80>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fa fb1c 	bl	8000548 <__aeabi_f2d>
 8005f10:	4603      	mov	r3, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005f18:	f100 0004 	add.w	r0, r0, #4
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	49b2      	ldr	r1, [pc, #712]	; (80061ec <main+0x2c84>)
 8005f22:	f014 feb5 	bl	801ac90 <siprintf>
 8005f26:	4bb0      	ldr	r3, [pc, #704]	; (80061e8 <main+0x2c80>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8005f2e:	f102 021c 	add.w	r2, r2, #28
 8005f32:	6013      	str	r3, [r2, #0]
				print_segment(str_disp);
 8005f34:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005f38:	f103 0304 	add.w	r3, r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f005 fa31 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8005f42:	2001      	movs	r0, #1
 8005f44:	f005 fa64 	bl	800b410 <Blink_segments>
				Menu_choice=TEMPH_MENU;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8005f4e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8005f52:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005f54:	4ba6      	ldr	r3, [pc, #664]	; (80061f0 <main+0x2c88>)
 8005f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8005f5c:	4ba5      	ldr	r3, [pc, #660]	; (80061f4 <main+0x2c8c>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d04b      	beq.n	8005ffc <main+0x2a94>
			{
				KEYSW2_shortpressed=0;
 8005f64:	4ba3      	ldr	r3, [pc, #652]	; (80061f4 <main+0x2c8c>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
				TL_Value+=0.1;
 8005f6a:	4ba3      	ldr	r3, [pc, #652]	; (80061f8 <main+0x2c90>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fa faea 	bl	8000548 <__aeabi_f2d>
 8005f74:	a39a      	add	r3, pc, #616	; (adr r3, 80061e0 <main+0x2c78>)
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f7fa f987 	bl	800028c <__adddf3>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	4618      	mov	r0, r3
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7fa fe2f 	bl	8000be8 <__aeabi_d2f>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4b9a      	ldr	r3, [pc, #616]	; (80061f8 <main+0x2c90>)
 8005f8e:	601a      	str	r2, [r3, #0]
				if(TL_Value>=(TH_Value-DELTAT_Value)) TL_Value=TH_Value-DELTAT_Value;
 8005f90:	4b95      	ldr	r3, [pc, #596]	; (80061e8 <main+0x2c80>)
 8005f92:	ed93 7a00 	vldr	s14, [r3]
 8005f96:	4b99      	ldr	r3, [pc, #612]	; (80061fc <main+0x2c94>)
 8005f98:	edd3 7a00 	vldr	s15, [r3]
 8005f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fa0:	4b95      	ldr	r3, [pc, #596]	; (80061f8 <main+0x2c90>)
 8005fa2:	edd3 7a00 	vldr	s15, [r3]
 8005fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fae:	d80a      	bhi.n	8005fc6 <main+0x2a5e>
 8005fb0:	4b8d      	ldr	r3, [pc, #564]	; (80061e8 <main+0x2c80>)
 8005fb2:	ed93 7a00 	vldr	s14, [r3]
 8005fb6:	4b91      	ldr	r3, [pc, #580]	; (80061fc <main+0x2c94>)
 8005fb8:	edd3 7a00 	vldr	s15, [r3]
 8005fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fc0:	4b8d      	ldr	r3, [pc, #564]	; (80061f8 <main+0x2c90>)
 8005fc2:	edc3 7a00 	vstr	s15, [r3]
				sprintf(str_disp,"%5.1f",TL_Value);
 8005fc6:	4b8c      	ldr	r3, [pc, #560]	; (80061f8 <main+0x2c90>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fa fabc 	bl	8000548 <__aeabi_f2d>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8005fd8:	f100 0004 	add.w	r0, r0, #4
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4623      	mov	r3, r4
 8005fe0:	4982      	ldr	r1, [pc, #520]	; (80061ec <main+0x2c84>)
 8005fe2:	f014 fe55 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8005fe6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8005fea:	f103 0304 	add.w	r3, r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f005 f9d8 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8005ff4:	4b7e      	ldr	r3, [pc, #504]	; (80061f0 <main+0x2c88>)
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8005ffc:	4b80      	ldr	r3, [pc, #512]	; (8006200 <main+0x2c98>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d03c      	beq.n	800607e <main+0x2b16>
			{
				KEYSW3_shortpressed=0;
 8006004:	4b7e      	ldr	r3, [pc, #504]	; (8006200 <main+0x2c98>)
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
				TL_Value-=0.1;
 800600a:	4b7b      	ldr	r3, [pc, #492]	; (80061f8 <main+0x2c90>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa fa9a 	bl	8000548 <__aeabi_f2d>
 8006014:	a372      	add	r3, pc, #456	; (adr r3, 80061e0 <main+0x2c78>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f7fa f935 	bl	8000288 <__aeabi_dsub>
 800601e:	4603      	mov	r3, r0
 8006020:	460c      	mov	r4, r1
 8006022:	4618      	mov	r0, r3
 8006024:	4621      	mov	r1, r4
 8006026:	f7fa fddf 	bl	8000be8 <__aeabi_d2f>
 800602a:	4602      	mov	r2, r0
 800602c:	4b72      	ldr	r3, [pc, #456]	; (80061f8 <main+0x2c90>)
 800602e:	601a      	str	r2, [r3, #0]
				if(TL_Value<=((float)TL_MIN/10.0)) TL_Value=(float)TL_MIN/10.0;
 8006030:	4b71      	ldr	r3, [pc, #452]	; (80061f8 <main+0x2c90>)
 8006032:	edd3 7a00 	vldr	s15, [r3]
 8006036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603e:	d803      	bhi.n	8006048 <main+0x2ae0>
 8006040:	4b6d      	ldr	r3, [pc, #436]	; (80061f8 <main+0x2c90>)
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"%5.1f",TL_Value);
 8006048:	4b6b      	ldr	r3, [pc, #428]	; (80061f8 <main+0x2c90>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7fa fa7b 	bl	8000548 <__aeabi_f2d>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800605a:	f100 0004 	add.w	r0, r0, #4
 800605e:	461a      	mov	r2, r3
 8006060:	4623      	mov	r3, r4
 8006062:	4962      	ldr	r1, [pc, #392]	; (80061ec <main+0x2c84>)
 8006064:	f014 fe14 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006068:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800606c:	f103 0304 	add.w	r3, r3, #4
 8006070:	4618      	mov	r0, r3
 8006072:	f005 f997 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8006076:	4b5e      	ldr	r3, [pc, #376]	; (80061f0 <main+0x2c88>)
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 800607e:	4b61      	ldr	r3, [pc, #388]	; (8006204 <main+0x2c9c>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d042      	beq.n	800610c <main+0x2ba4>
			{
				KEYSW2_longpressed=0;
 8006086:	4b5f      	ldr	r3, [pc, #380]	; (8006204 <main+0x2c9c>)
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
				TL_Value++;
 800608c:	4b5a      	ldr	r3, [pc, #360]	; (80061f8 <main+0x2c90>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609a:	4b57      	ldr	r3, [pc, #348]	; (80061f8 <main+0x2c90>)
 800609c:	edc3 7a00 	vstr	s15, [r3]
				if(TL_Value>=(TH_Value-DELTAT_Value)) TL_Value=TH_Value-DELTAT_Value;
 80060a0:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <main+0x2c80>)
 80060a2:	ed93 7a00 	vldr	s14, [r3]
 80060a6:	4b55      	ldr	r3, [pc, #340]	; (80061fc <main+0x2c94>)
 80060a8:	edd3 7a00 	vldr	s15, [r3]
 80060ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060b0:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <main+0x2c90>)
 80060b2:	edd3 7a00 	vldr	s15, [r3]
 80060b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	d80a      	bhi.n	80060d6 <main+0x2b6e>
 80060c0:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <main+0x2c80>)
 80060c2:	ed93 7a00 	vldr	s14, [r3]
 80060c6:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <main+0x2c94>)
 80060c8:	edd3 7a00 	vldr	s15, [r3]
 80060cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d0:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <main+0x2c90>)
 80060d2:	edc3 7a00 	vstr	s15, [r3]
				sprintf(str_disp,"%5.1f",TL_Value);
 80060d6:	4b48      	ldr	r3, [pc, #288]	; (80061f8 <main+0x2c90>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa fa34 	bl	8000548 <__aeabi_f2d>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80060e8:	f100 0004 	add.w	r0, r0, #4
 80060ec:	461a      	mov	r2, r3
 80060ee:	4623      	mov	r3, r4
 80060f0:	493e      	ldr	r1, [pc, #248]	; (80061ec <main+0x2c84>)
 80060f2:	f014 fdcd 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80060f6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80060fa:	f103 0304 	add.w	r3, r3, #4
 80060fe:	4618      	mov	r0, r3
 8006100:	f005 f950 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006104:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <main+0x2c88>)
 8006106:	f241 3288 	movw	r2, #5000	; 0x1388
 800610a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 800610c:	4b3e      	ldr	r3, [pc, #248]	; (8006208 <main+0x2ca0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d033      	beq.n	800617c <main+0x2c14>
			{
				KEYSW3_longpressed=0;
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <main+0x2ca0>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
				TL_Value--;
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <main+0x2c90>)
 800611c:	edd3 7a00 	vldr	s15, [r3]
 8006120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006128:	4b33      	ldr	r3, [pc, #204]	; (80061f8 <main+0x2c90>)
 800612a:	edc3 7a00 	vstr	s15, [r3]
				if(TL_Value<=((float)TL_MIN/10.0)) TL_Value=(float)TL_MIN/10.0;
 800612e:	4b32      	ldr	r3, [pc, #200]	; (80061f8 <main+0x2c90>)
 8006130:	edd3 7a00 	vldr	s15, [r3]
 8006134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	d803      	bhi.n	8006146 <main+0x2bde>
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <main+0x2c90>)
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"%5.1f",TL_Value);
 8006146:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <main+0x2c90>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fa f9fc 	bl	8000548 <__aeabi_f2d>
 8006150:	4603      	mov	r3, r0
 8006152:	460c      	mov	r4, r1
 8006154:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006158:	f100 0004 	add.w	r0, r0, #4
 800615c:	461a      	mov	r2, r3
 800615e:	4623      	mov	r3, r4
 8006160:	4922      	ldr	r1, [pc, #136]	; (80061ec <main+0x2c84>)
 8006162:	f014 fd95 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006166:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800616a:	f103 0304 	add.w	r3, r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f005 f918 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8006174:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <main+0x2c88>)
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 800617c:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <main+0x2c88>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f043 8533 	bne.w	8009bec <main+0x6684>
				{
					Menu_choice=MAIN_MENU;
 8006186:	2300      	movs	r3, #0
 8006188:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800618c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006190:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <main+0x2ca4>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8006198:	2000      	movs	r0, #0
 800619a:	f005 f939 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(TL_ADDRESS,  &read_eeprom)) != HAL_OK)
 800619e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80061a2:	3b1e      	subs	r3, #30
 80061a4:	4619      	mov	r1, r3
 80061a6:	2002      	movs	r0, #2
 80061a8:	f7fc fa92 	bl	80026d0 <EE_ReadVariable>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <main+0x2c50>
					{
						print_segment("E1-R");
 80061b2:	4817      	ldr	r0, [pc, #92]	; (8006210 <main+0x2ca8>)
 80061b4:	f005 f8f6 	bl	800b3a4 <print_segment>
					}		
					TL_Value=(float)read_eeprom/10.0;
 80061b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80061bc:	3b1e      	subs	r3, #30
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80061cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <main+0x2c90>)
 80061d2:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);
 80061d6:	2032      	movs	r0, #50	; 0x32
 80061d8:	f005 fd18 	bl	800bc0c <HAL_Delay>
				}
				break;
 80061dc:	f003 bd06 	b.w	8009bec <main+0x6684>
 80061e0:	9999999a 	.word	0x9999999a
 80061e4:	3fb99999 	.word	0x3fb99999
 80061e8:	20000810 	.word	0x20000810
 80061ec:	0801ea90 	.word	0x0801ea90
 80061f0:	200003e8 	.word	0x200003e8
 80061f4:	200003d8 	.word	0x200003d8
 80061f8:	20000808 	.word	0x20000808
 80061fc:	20000778 	.word	0x20000778
 8006200:	200003d0 	.word	0x200003d0
 8006204:	200003d9 	.word	0x200003d9
 8006208:	200003d1 	.word	0x200003d1
 800620c:	200003c4 	.word	0x200003c4
 8006210:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE TEMPH_MENU/////////////////////////////////////////////////////////////////				
			case TEMPH_MENU:
				reset_keys();
 8006214:	f7fc ffca 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8006218:	4b18      	ldr	r3, [pc, #96]	; (800627c <main+0x2d14>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d063      	beq.n	80062e8 <main+0x2d80>
			{
				KEYSW1_shortpressed=0;
 8006220:	4b16      	ldr	r3, [pc, #88]	; (800627c <main+0x2d14>)
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
				if(prev_float!=TH_Value)
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <main+0x2d18>)
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8006230:	f103 031c 	add.w	r3, r3, #28
 8006234:	ed93 7a00 	vldr	s14, [r3]
 8006238:	eeb4 7a67 	vcmp.f32	s14, s15
 800623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006240:	d027      	beq.n	8006292 <main+0x2d2a>
				{
					if(EE_WriteVariable(TH_ADDRESS,(uint16_t)(TH_Value*10.0))!=HAL_OK)
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <main+0x2d18>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f7fa f97e 	bl	8000548 <__aeabi_f2d>
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <main+0x2d1c>)
 8006252:	f7fa f9d1 	bl	80005f8 <__aeabi_dmul>
 8006256:	4603      	mov	r3, r0
 8006258:	460c      	mov	r4, r1
 800625a:	4618      	mov	r0, r3
 800625c:	4621      	mov	r1, r4
 800625e:	f7fa fca3 	bl	8000ba8 <__aeabi_d2uiz>
 8006262:	4603      	mov	r3, r0
 8006264:	b29b      	uxth	r3, r3
 8006266:	4619      	mov	r1, r3
 8006268:	2004      	movs	r0, #4
 800626a:	f7fc fa79 	bl	8002760 <EE_WriteVariable>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <main+0x2d24>
					{
						print_segment("ER02");
 8006274:	4804      	ldr	r0, [pc, #16]	; (8006288 <main+0x2d20>)
 8006276:	f005 f895 	bl	800b3a4 <print_segment>
						while(1);
 800627a:	e7fe      	b.n	800627a <main+0x2d12>
 800627c:	200003e0 	.word	0x200003e0
 8006280:	20000810 	.word	0x20000810
 8006284:	40240000 	.word	0x40240000
 8006288:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 800628c:	2032      	movs	r0, #50	; 0x32
 800628e:	f005 fcbd 	bl	800bc0c <HAL_Delay>
				}
				sprintf(str_disp,"DT%2.1f",DELTAT_Value);prev_float=DELTAT_Value;
 8006292:	4bb9      	ldr	r3, [pc, #740]	; (8006578 <main+0x3010>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fa f956 	bl	8000548 <__aeabi_f2d>
 800629c:	4603      	mov	r3, r0
 800629e:	460c      	mov	r4, r1
 80062a0:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80062a4:	f100 0004 	add.w	r0, r0, #4
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	49b3      	ldr	r1, [pc, #716]	; (800657c <main+0x3014>)
 80062ae:	f014 fcef 	bl	801ac90 <siprintf>
 80062b2:	4bb1      	ldr	r3, [pc, #708]	; (8006578 <main+0x3010>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80062ba:	f102 021c 	add.w	r2, r2, #28
 80062be:	6013      	str	r3, [r2, #0]
				print_segment(str_disp);
 80062c0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80062c4:	f103 0304 	add.w	r3, r3, #4
 80062c8:	4618      	mov	r0, r3
 80062ca:	f005 f86b 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 80062ce:	2001      	movs	r0, #1
 80062d0:	f005 f89e 	bl	800b410 <Blink_segments>
				Menu_choice=DELTAT_MENU;
 80062d4:	2304      	movs	r3, #4
 80062d6:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80062da:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80062de:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80062e0:	4ba7      	ldr	r3, [pc, #668]	; (8006580 <main+0x3018>)
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 80062e8:	4ba6      	ldr	r3, [pc, #664]	; (8006584 <main+0x301c>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d03d      	beq.n	800636c <main+0x2e04>
			{
				KEYSW2_shortpressed=0;
 80062f0:	4ba4      	ldr	r3, [pc, #656]	; (8006584 <main+0x301c>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]
				TH_Value+=0.1;
 80062f6:	4ba4      	ldr	r3, [pc, #656]	; (8006588 <main+0x3020>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f924 	bl	8000548 <__aeabi_f2d>
 8006300:	a39b      	add	r3, pc, #620	; (adr r3, 8006570 <main+0x3008>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7f9 ffc1 	bl	800028c <__adddf3>
 800630a:	4603      	mov	r3, r0
 800630c:	460c      	mov	r4, r1
 800630e:	4618      	mov	r0, r3
 8006310:	4621      	mov	r1, r4
 8006312:	f7fa fc69 	bl	8000be8 <__aeabi_d2f>
 8006316:	4602      	mov	r2, r0
 8006318:	4b9b      	ldr	r3, [pc, #620]	; (8006588 <main+0x3020>)
 800631a:	601a      	str	r2, [r3, #0]
				if(TH_Value>=(float)TH_MAX/10.0) TH_Value=(float)TH_MAX/10.0;
 800631c:	4b9a      	ldr	r3, [pc, #616]	; (8006588 <main+0x3020>)
 800631e:	edd3 7a00 	vldr	s15, [r3]
 8006322:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800658c <main+0x3024>
 8006326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632e:	db02      	blt.n	8006336 <main+0x2dce>
 8006330:	4b95      	ldr	r3, [pc, #596]	; (8006588 <main+0x3020>)
 8006332:	4a97      	ldr	r2, [pc, #604]	; (8006590 <main+0x3028>)
 8006334:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"%5.1f",TH_Value);
 8006336:	4b94      	ldr	r3, [pc, #592]	; (8006588 <main+0x3020>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f904 	bl	8000548 <__aeabi_f2d>
 8006340:	4603      	mov	r3, r0
 8006342:	460c      	mov	r4, r1
 8006344:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006348:	f100 0004 	add.w	r0, r0, #4
 800634c:	461a      	mov	r2, r3
 800634e:	4623      	mov	r3, r4
 8006350:	4990      	ldr	r1, [pc, #576]	; (8006594 <main+0x302c>)
 8006352:	f014 fc9d 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006356:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800635a:	f103 0304 	add.w	r3, r3, #4
 800635e:	4618      	mov	r0, r3
 8006360:	f005 f820 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006364:	4b86      	ldr	r3, [pc, #536]	; (8006580 <main+0x3018>)
 8006366:	f241 3288 	movw	r2, #5000	; 0x1388
 800636a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 800636c:	4b8a      	ldr	r3, [pc, #552]	; (8006598 <main+0x3030>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d04b      	beq.n	800640c <main+0x2ea4>
			{
				KEYSW3_shortpressed=0;
 8006374:	4b88      	ldr	r3, [pc, #544]	; (8006598 <main+0x3030>)
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
				TH_Value-=0.1;
 800637a:	4b83      	ldr	r3, [pc, #524]	; (8006588 <main+0x3020>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fa f8e2 	bl	8000548 <__aeabi_f2d>
 8006384:	a37a      	add	r3, pc, #488	; (adr r3, 8006570 <main+0x3008>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	f7f9 ff7d 	bl	8000288 <__aeabi_dsub>
 800638e:	4603      	mov	r3, r0
 8006390:	460c      	mov	r4, r1
 8006392:	4618      	mov	r0, r3
 8006394:	4621      	mov	r1, r4
 8006396:	f7fa fc27 	bl	8000be8 <__aeabi_d2f>
 800639a:	4602      	mov	r2, r0
 800639c:	4b7a      	ldr	r3, [pc, #488]	; (8006588 <main+0x3020>)
 800639e:	601a      	str	r2, [r3, #0]
				if(TH_Value<=(TL_Value+DELTAT_Value)) TH_Value=TL_Value+DELTAT_Value;
 80063a0:	4b7e      	ldr	r3, [pc, #504]	; (800659c <main+0x3034>)
 80063a2:	ed93 7a00 	vldr	s14, [r3]
 80063a6:	4b74      	ldr	r3, [pc, #464]	; (8006578 <main+0x3010>)
 80063a8:	edd3 7a00 	vldr	s15, [r3]
 80063ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b0:	4b75      	ldr	r3, [pc, #468]	; (8006588 <main+0x3020>)
 80063b2:	edd3 7a00 	vldr	s15, [r3]
 80063b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063be:	db0a      	blt.n	80063d6 <main+0x2e6e>
 80063c0:	4b76      	ldr	r3, [pc, #472]	; (800659c <main+0x3034>)
 80063c2:	ed93 7a00 	vldr	s14, [r3]
 80063c6:	4b6c      	ldr	r3, [pc, #432]	; (8006578 <main+0x3010>)
 80063c8:	edd3 7a00 	vldr	s15, [r3]
 80063cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d0:	4b6d      	ldr	r3, [pc, #436]	; (8006588 <main+0x3020>)
 80063d2:	edc3 7a00 	vstr	s15, [r3]
				sprintf(str_disp,"%5.1f",TH_Value);
 80063d6:	4b6c      	ldr	r3, [pc, #432]	; (8006588 <main+0x3020>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa f8b4 	bl	8000548 <__aeabi_f2d>
 80063e0:	4603      	mov	r3, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80063e8:	f100 0004 	add.w	r0, r0, #4
 80063ec:	461a      	mov	r2, r3
 80063ee:	4623      	mov	r3, r4
 80063f0:	4968      	ldr	r1, [pc, #416]	; (8006594 <main+0x302c>)
 80063f2:	f014 fc4d 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80063f6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80063fa:	f103 0304 	add.w	r3, r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f004 ffd0 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8006404:	4b5e      	ldr	r3, [pc, #376]	; (8006580 <main+0x3018>)
 8006406:	f241 3288 	movw	r2, #5000	; 0x1388
 800640a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 800640c:	4b64      	ldr	r3, [pc, #400]	; (80065a0 <main+0x3038>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d034      	beq.n	800647e <main+0x2f16>
			{
				KEYSW2_longpressed=0;
 8006414:	4b62      	ldr	r3, [pc, #392]	; (80065a0 <main+0x3038>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
				TH_Value++;
 800641a:	4b5b      	ldr	r3, [pc, #364]	; (8006588 <main+0x3020>)
 800641c:	edd3 7a00 	vldr	s15, [r3]
 8006420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006428:	4b57      	ldr	r3, [pc, #348]	; (8006588 <main+0x3020>)
 800642a:	edc3 7a00 	vstr	s15, [r3]
				if(TH_Value>=(float)TH_MAX/10.0) TH_Value=(float)TH_MAX/10.0;
 800642e:	4b56      	ldr	r3, [pc, #344]	; (8006588 <main+0x3020>)
 8006430:	edd3 7a00 	vldr	s15, [r3]
 8006434:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800658c <main+0x3024>
 8006438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	db02      	blt.n	8006448 <main+0x2ee0>
 8006442:	4b51      	ldr	r3, [pc, #324]	; (8006588 <main+0x3020>)
 8006444:	4a52      	ldr	r2, [pc, #328]	; (8006590 <main+0x3028>)
 8006446:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"%5.1f",TH_Value);
 8006448:	4b4f      	ldr	r3, [pc, #316]	; (8006588 <main+0x3020>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f7fa f87b 	bl	8000548 <__aeabi_f2d>
 8006452:	4603      	mov	r3, r0
 8006454:	460c      	mov	r4, r1
 8006456:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800645a:	f100 0004 	add.w	r0, r0, #4
 800645e:	461a      	mov	r2, r3
 8006460:	4623      	mov	r3, r4
 8006462:	494c      	ldr	r1, [pc, #304]	; (8006594 <main+0x302c>)
 8006464:	f014 fc14 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006468:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800646c:	f103 0304 	add.w	r3, r3, #4
 8006470:	4618      	mov	r0, r3
 8006472:	f004 ff97 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006476:	4b42      	ldr	r3, [pc, #264]	; (8006580 <main+0x3018>)
 8006478:	f241 3288 	movw	r2, #5000	; 0x1388
 800647c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 800647e:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <main+0x303c>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d042      	beq.n	800650c <main+0x2fa4>
			{
				KEYSW3_longpressed=0;
 8006486:	4b47      	ldr	r3, [pc, #284]	; (80065a4 <main+0x303c>)
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
				TH_Value--;
 800648c:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <main+0x3020>)
 800648e:	edd3 7a00 	vldr	s15, [r3]
 8006492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800649a:	4b3b      	ldr	r3, [pc, #236]	; (8006588 <main+0x3020>)
 800649c:	edc3 7a00 	vstr	s15, [r3]
				if(TH_Value<=(TL_Value+DELTAT_Value)) TH_Value=TL_Value+DELTAT_Value;
 80064a0:	4b3e      	ldr	r3, [pc, #248]	; (800659c <main+0x3034>)
 80064a2:	ed93 7a00 	vldr	s14, [r3]
 80064a6:	4b34      	ldr	r3, [pc, #208]	; (8006578 <main+0x3010>)
 80064a8:	edd3 7a00 	vldr	s15, [r3]
 80064ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064b0:	4b35      	ldr	r3, [pc, #212]	; (8006588 <main+0x3020>)
 80064b2:	edd3 7a00 	vldr	s15, [r3]
 80064b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064be:	db0a      	blt.n	80064d6 <main+0x2f6e>
 80064c0:	4b36      	ldr	r3, [pc, #216]	; (800659c <main+0x3034>)
 80064c2:	ed93 7a00 	vldr	s14, [r3]
 80064c6:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <main+0x3010>)
 80064c8:	edd3 7a00 	vldr	s15, [r3]
 80064cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d0:	4b2d      	ldr	r3, [pc, #180]	; (8006588 <main+0x3020>)
 80064d2:	edc3 7a00 	vstr	s15, [r3]
				sprintf(str_disp,"%5.1f",TH_Value);
 80064d6:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <main+0x3020>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fa f834 	bl	8000548 <__aeabi_f2d>
 80064e0:	4603      	mov	r3, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80064e8:	f100 0004 	add.w	r0, r0, #4
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	4928      	ldr	r1, [pc, #160]	; (8006594 <main+0x302c>)
 80064f2:	f014 fbcd 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80064f6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80064fa:	f103 0304 	add.w	r3, r3, #4
 80064fe:	4618      	mov	r0, r3
 8006500:	f004 ff50 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8006504:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <main+0x3018>)
 8006506:	f241 3288 	movw	r2, #5000	; 0x1388
 800650a:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 800650c:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <main+0x3018>)
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f043 836e 	bne.w	8009bf2 <main+0x668a>
				{
					Menu_choice=MAIN_MENU;
 8006516:	2300      	movs	r3, #0
 8006518:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800651c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006520:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <main+0x3040>)
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8006528:	2000      	movs	r0, #0
 800652a:	f004 ff71 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(TH_ADDRESS,  &read_eeprom)) != HAL_OK)
 800652e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006532:	3b20      	subs	r3, #32
 8006534:	4619      	mov	r1, r3
 8006536:	2004      	movs	r0, #4
 8006538:	f7fc f8ca 	bl	80026d0 <EE_ReadVariable>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <main+0x2fe0>
					{
						print_segment("E1-R");
 8006542:	481a      	ldr	r0, [pc, #104]	; (80065ac <main+0x3044>)
 8006544:	f004 ff2e 	bl	800b3a4 <print_segment>
					}		
					TH_Value=(float)read_eeprom/10.0;
 8006548:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800654c:	3b20      	subs	r3, #32
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	ee07 3a90 	vmov	s15, r3
 8006554:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006558:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800655c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <main+0x3020>)
 8006562:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);
 8006566:	2032      	movs	r0, #50	; 0x32
 8006568:	f005 fb50 	bl	800bc0c <HAL_Delay>
				}

			break;
 800656c:	f003 bb41 	b.w	8009bf2 <main+0x668a>
 8006570:	9999999a 	.word	0x9999999a
 8006574:	3fb99999 	.word	0x3fb99999
 8006578:	20000778 	.word	0x20000778
 800657c:	0801eaec 	.word	0x0801eaec
 8006580:	200003e8 	.word	0x200003e8
 8006584:	200003d8 	.word	0x200003d8
 8006588:	20000810 	.word	0x20000810
 800658c:	42700000 	.word	0x42700000
 8006590:	42700000 	.word	0x42700000
 8006594:	0801ea90 	.word	0x0801ea90
 8006598:	200003d0 	.word	0x200003d0
 800659c:	20000808 	.word	0x20000808
 80065a0:	200003d9 	.word	0x200003d9
 80065a4:	200003d1 	.word	0x200003d1
 80065a8:	200003c4 	.word	0x200003c4
 80065ac:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE DELTAT_MENU/////////////////////////////////////////////////////////////////				
			case DELTAT_MENU:
				reset_keys();
 80065b0:	f7fc fdfc 	bl	80031ac <reset_keys>
				if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 80065b4:	4bbc      	ldr	r3, [pc, #752]	; (80068a8 <main+0x3340>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <main+0x305a>
 80065bc:	4bba      	ldr	r3, [pc, #744]	; (80068a8 <main+0x3340>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
				if(KEYSW3_longpressed) KEYSW3_longpressed=0;			
 80065c2:	4bba      	ldr	r3, [pc, #744]	; (80068ac <main+0x3344>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <main+0x3068>
 80065ca:	4bb8      	ldr	r3, [pc, #736]	; (80068ac <main+0x3344>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 80065d0:	4bb7      	ldr	r3, [pc, #732]	; (80068b0 <main+0x3348>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d05b      	beq.n	8006690 <main+0x3128>
			{
				KEYSW1_shortpressed=0;
 80065d8:	4bb5      	ldr	r3, [pc, #724]	; (80068b0 <main+0x3348>)
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
				if(prev_float!=DELTAT_Value)
 80065de:	4bb5      	ldr	r3, [pc, #724]	; (80068b4 <main+0x334c>)
 80065e0:	edd3 7a00 	vldr	s15, [r3]
 80065e4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80065e8:	f103 031c 	add.w	r3, r3, #28
 80065ec:	ed93 7a00 	vldr	s14, [r3]
 80065f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80065f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f8:	d01f      	beq.n	800663a <main+0x30d2>
				{
					if(EE_WriteVariable(DELTATEMP_ADDRESS,(uint16_t)(DELTAT_Value*10.0))!=HAL_OK)
 80065fa:	4bae      	ldr	r3, [pc, #696]	; (80068b4 <main+0x334c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7f9 ffa2 	bl	8000548 <__aeabi_f2d>
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	4bab      	ldr	r3, [pc, #684]	; (80068b8 <main+0x3350>)
 800660a:	f7f9 fff5 	bl	80005f8 <__aeabi_dmul>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	4618      	mov	r0, r3
 8006614:	4621      	mov	r1, r4
 8006616:	f7fa fac7 	bl	8000ba8 <__aeabi_d2uiz>
 800661a:	4603      	mov	r3, r0
 800661c:	b29b      	uxth	r3, r3
 800661e:	4619      	mov	r1, r3
 8006620:	2006      	movs	r0, #6
 8006622:	f7fc f89d 	bl	8002760 <EE_WriteVariable>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <main+0x30cc>
					{
						print_segment("ER02");
 800662c:	48a3      	ldr	r0, [pc, #652]	; (80068bc <main+0x3354>)
 800662e:	f004 feb9 	bl	800b3a4 <print_segment>
						while(1);
 8006632:	e7fe      	b.n	8006632 <main+0x30ca>
					}
					HAL_Delay(50);					
 8006634:	2032      	movs	r0, #50	; 0x32
 8006636:	f005 fae9 	bl	800bc0c <HAL_Delay>
				}

				sprintf(str_disp,"N%03.0f",NTCTL_Value);prev_float=NTCTL_Value;
 800663a:	4ba1      	ldr	r3, [pc, #644]	; (80068c0 <main+0x3358>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7f9 ff82 	bl	8000548 <__aeabi_f2d>
 8006644:	4603      	mov	r3, r0
 8006646:	460c      	mov	r4, r1
 8006648:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800664c:	f100 0004 	add.w	r0, r0, #4
 8006650:	461a      	mov	r2, r3
 8006652:	4623      	mov	r3, r4
 8006654:	499b      	ldr	r1, [pc, #620]	; (80068c4 <main+0x335c>)
 8006656:	f014 fb1b 	bl	801ac90 <siprintf>
 800665a:	4b99      	ldr	r3, [pc, #612]	; (80068c0 <main+0x3358>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8006662:	f102 021c 	add.w	r2, r2, #28
 8006666:	6013      	str	r3, [r2, #0]
				Menu_choice=NTCTL_MENU;
 8006668:	2305      	movs	r3, #5
 800666a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800666e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006672:	7013      	strb	r3, [r2, #0]
				print_segment(str_disp);
 8006674:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006678:	f103 0304 	add.w	r3, r3, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f004 fe91 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8006682:	2001      	movs	r0, #1
 8006684:	f004 fec4 	bl	800b410 <Blink_segments>

				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006688:	4b8f      	ldr	r3, [pc, #572]	; (80068c8 <main+0x3360>)
 800668a:	f241 3288 	movw	r2, #5000	; 0x1388
 800668e:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8006690:	4b8e      	ldr	r3, [pc, #568]	; (80068cc <main+0x3364>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d057      	beq.n	8006748 <main+0x31e0>
			{
				KEYSW2_shortpressed=0;
 8006698:	4b8c      	ldr	r3, [pc, #560]	; (80068cc <main+0x3364>)
 800669a:	2200      	movs	r2, #0
 800669c:	701a      	strb	r2, [r3, #0]
				DELTAT_Value++;
 800669e:	4b85      	ldr	r3, [pc, #532]	; (80068b4 <main+0x334c>)
 80066a0:	edd3 7a00 	vldr	s15, [r3]
 80066a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ac:	4b81      	ldr	r3, [pc, #516]	; (80068b4 <main+0x334c>)
 80066ae:	edc3 7a00 	vstr	s15, [r3]
				if((DELTAT_Value>((TH_Value-TL_Value)/2.0))||(DELTAT_Value>(float)DELTAT_MAX/10.0)) DELTAT_Value=0.0;
 80066b2:	4b80      	ldr	r3, [pc, #512]	; (80068b4 <main+0x334c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7f9 ff46 	bl	8000548 <__aeabi_f2d>
 80066bc:	4604      	mov	r4, r0
 80066be:	460d      	mov	r5, r1
 80066c0:	4b83      	ldr	r3, [pc, #524]	; (80068d0 <main+0x3368>)
 80066c2:	ed93 7a00 	vldr	s14, [r3]
 80066c6:	4b83      	ldr	r3, [pc, #524]	; (80068d4 <main+0x336c>)
 80066c8:	edd3 7a00 	vldr	s15, [r3]
 80066cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d0:	ee17 0a90 	vmov	r0, s15
 80066d4:	f7f9 ff38 	bl	8000548 <__aeabi_f2d>
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066e0:	f7fa f8b4 	bl	800084c <__aeabi_ddiv>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4620      	mov	r0, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	f7fa fa14 	bl	8000b18 <__aeabi_dcmpgt>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <main+0x31a2>
 80066f6:	4b6f      	ldr	r3, [pc, #444]	; (80068b4 <main+0x334c>)
 80066f8:	edd3 7a00 	vldr	s15, [r3]
 80066fc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8006700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006708:	dd03      	ble.n	8006712 <main+0x31aa>
 800670a:	4b6a      	ldr	r3, [pc, #424]	; (80068b4 <main+0x334c>)
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"DT%2.1f",DELTAT_Value);
 8006712:	4b68      	ldr	r3, [pc, #416]	; (80068b4 <main+0x334c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 ff16 	bl	8000548 <__aeabi_f2d>
 800671c:	4603      	mov	r3, r0
 800671e:	460c      	mov	r4, r1
 8006720:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006724:	f100 0004 	add.w	r0, r0, #4
 8006728:	461a      	mov	r2, r3
 800672a:	4623      	mov	r3, r4
 800672c:	496a      	ldr	r1, [pc, #424]	; (80068d8 <main+0x3370>)
 800672e:	f014 faaf 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006732:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006736:	f103 0304 	add.w	r3, r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f004 fe32 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006740:	4b61      	ldr	r3, [pc, #388]	; (80068c8 <main+0x3360>)
 8006742:	f241 3288 	movw	r2, #5000	; 0x1388
 8006746:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8006748:	4b64      	ldr	r3, [pc, #400]	; (80068dc <main+0x3374>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d078      	beq.n	8006842 <main+0x32da>
			{
				KEYSW3_shortpressed=0;
 8006750:	4b62      	ldr	r3, [pc, #392]	; (80068dc <main+0x3374>)
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
				if(DELTAT_Value==0.0) 
 8006756:	4b57      	ldr	r3, [pc, #348]	; (80068b4 <main+0x334c>)
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	d148      	bne.n	80067f8 <main+0x3290>
				{
					if(((TH_Value-TL_Value)/2.0)<(float)DELTAT_MAX/10.0)
 8006766:	4b5a      	ldr	r3, [pc, #360]	; (80068d0 <main+0x3368>)
 8006768:	ed93 7a00 	vldr	s14, [r3]
 800676c:	4b59      	ldr	r3, [pc, #356]	; (80068d4 <main+0x336c>)
 800676e:	edd3 7a00 	vldr	s15, [r3]
 8006772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006776:	ee17 0a90 	vmov	r0, s15
 800677a:	f7f9 fee5 	bl	8000548 <__aeabi_f2d>
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006786:	f7fa f861 	bl	800084c <__aeabi_ddiv>
 800678a:	4603      	mov	r3, r0
 800678c:	460c      	mov	r4, r1
 800678e:	4618      	mov	r0, r3
 8006790:	4621      	mov	r1, r4
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	4b52      	ldr	r3, [pc, #328]	; (80068e0 <main+0x3378>)
 8006798:	f7fa f9a0 	bl	8000adc <__aeabi_dcmplt>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d027      	beq.n	80067f2 <main+0x328a>
						DELTAT_Value=(float)((uint8_t)((TH_Value-TL_Value))/2.0)+1.0;
 80067a2:	4b4b      	ldr	r3, [pc, #300]	; (80068d0 <main+0x3368>)
 80067a4:	ed93 7a00 	vldr	s14, [r3]
 80067a8:	4b4a      	ldr	r3, [pc, #296]	; (80068d4 <main+0x336c>)
 80067aa:	edd3 7a00 	vldr	s15, [r3]
 80067ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80067ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7f9 feaf 	bl	8000524 <__aeabi_i2d>
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067ce:	f7fa f83d 	bl	800084c <__aeabi_ddiv>
 80067d2:	4603      	mov	r3, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	4618      	mov	r0, r3
 80067d8:	4621      	mov	r1, r4
 80067da:	f7fa fa05 	bl	8000be8 <__aeabi_d2f>
 80067de:	ee07 0a10 	vmov	s14, r0
 80067e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80067e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ea:	4b32      	ldr	r3, [pc, #200]	; (80068b4 <main+0x334c>)
 80067ec:	edc3 7a00 	vstr	s15, [r3]
 80067f0:	e002      	b.n	80067f8 <main+0x3290>
					else
						DELTAT_Value=(float)DELTAT_MAX/10.0+1.0;
 80067f2:	4b30      	ldr	r3, [pc, #192]	; (80068b4 <main+0x334c>)
 80067f4:	4a3b      	ldr	r2, [pc, #236]	; (80068e4 <main+0x337c>)
 80067f6:	601a      	str	r2, [r3, #0]
				}
				DELTAT_Value--;
 80067f8:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <main+0x334c>)
 80067fa:	edd3 7a00 	vldr	s15, [r3]
 80067fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006802:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006806:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <main+0x334c>)
 8006808:	edc3 7a00 	vstr	s15, [r3]
				sprintf(str_disp,"DT%2.1f",DELTAT_Value);
 800680c:	4b29      	ldr	r3, [pc, #164]	; (80068b4 <main+0x334c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f7f9 fe99 	bl	8000548 <__aeabi_f2d>
 8006816:	4603      	mov	r3, r0
 8006818:	460c      	mov	r4, r1
 800681a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800681e:	f100 0004 	add.w	r0, r0, #4
 8006822:	461a      	mov	r2, r3
 8006824:	4623      	mov	r3, r4
 8006826:	492c      	ldr	r1, [pc, #176]	; (80068d8 <main+0x3370>)
 8006828:	f014 fa32 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800682c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006830:	f103 0304 	add.w	r3, r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f004 fdb5 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 800683a:	4b23      	ldr	r3, [pc, #140]	; (80068c8 <main+0x3360>)
 800683c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006840:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 8006842:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <main+0x3360>)
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f043 81d6 	bne.w	8009bf8 <main+0x6690>
				{
					Menu_choice=MAIN_MENU;
 800684c:	2300      	movs	r3, #0
 800684e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8006852:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006856:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8006858:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <main+0x3380>)
 800685a:	2201      	movs	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 800685e:	2000      	movs	r0, #0
 8006860:	f004 fdd6 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(DELTATEMP_ADDRESS,  &read_eeprom)) != HAL_OK)
 8006864:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006868:	3b22      	subs	r3, #34	; 0x22
 800686a:	4619      	mov	r1, r3
 800686c:	2006      	movs	r0, #6
 800686e:	f7fb ff2f 	bl	80026d0 <EE_ReadVariable>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <main+0x3316>
					{
						print_segment("E1-R");
 8006878:	481c      	ldr	r0, [pc, #112]	; (80068ec <main+0x3384>)
 800687a:	f004 fd93 	bl	800b3a4 <print_segment>
					}		
					DELTAT_Value=(float)read_eeprom/10.0;
 800687e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006882:	3b22      	subs	r3, #34	; 0x22
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800688e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006896:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <main+0x334c>)
 8006898:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);
 800689c:	2032      	movs	r0, #50	; 0x32
 800689e:	f005 f9b5 	bl	800bc0c <HAL_Delay>
				}

			break;	
 80068a2:	f003 b9a9 	b.w	8009bf8 <main+0x6690>
 80068a6:	bf00      	nop
 80068a8:	200003d9 	.word	0x200003d9
 80068ac:	200003d1 	.word	0x200003d1
 80068b0:	200003e0 	.word	0x200003e0
 80068b4:	20000778 	.word	0x20000778
 80068b8:	40240000 	.word	0x40240000
 80068bc:	0801e944 	.word	0x0801e944
 80068c0:	20000774 	.word	0x20000774
 80068c4:	0801ea80 	.word	0x0801ea80
 80068c8:	200003e8 	.word	0x200003e8
 80068cc:	200003d8 	.word	0x200003d8
 80068d0:	20000810 	.word	0x20000810
 80068d4:	20000808 	.word	0x20000808
 80068d8:	0801eaec 	.word	0x0801eaec
 80068dc:	200003d0 	.word	0x200003d0
 80068e0:	40220000 	.word	0x40220000
 80068e4:	41200000 	.word	0x41200000
 80068e8:	200003c4 	.word	0x200003c4
 80068ec:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE NTC LOW MENU/////////////////////////////
			case NTCTL_MENU:
				reset_keys();
 80068f0:	f7fc fc5c 	bl	80031ac <reset_keys>
				if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 80068f4:	4ba9      	ldr	r3, [pc, #676]	; (8006b9c <main+0x3634>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <main+0x339a>
 80068fc:	4ba7      	ldr	r3, [pc, #668]	; (8006b9c <main+0x3634>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
				if(KEYSW3_longpressed) KEYSW3_longpressed=0;
 8006902:	4ba7      	ldr	r3, [pc, #668]	; (8006ba0 <main+0x3638>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <main+0x33a8>
 800690a:	4ba5      	ldr	r3, [pc, #660]	; (8006ba0 <main+0x3638>)
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
				if(KEYSW1_shortpressed) //set
 8006910:	4ba4      	ldr	r3, [pc, #656]	; (8006ba4 <main+0x363c>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d05b      	beq.n	80069d0 <main+0x3468>
				{
					KEYSW1_shortpressed=0;
 8006918:	4ba2      	ldr	r3, [pc, #648]	; (8006ba4 <main+0x363c>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
					if(prev_float!=NTCTL_Value)
 800691e:	4ba2      	ldr	r3, [pc, #648]	; (8006ba8 <main+0x3640>)
 8006920:	edd3 7a00 	vldr	s15, [r3]
 8006924:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8006928:	f103 031c 	add.w	r3, r3, #28
 800692c:	ed93 7a00 	vldr	s14, [r3]
 8006930:	eeb4 7a67 	vcmp.f32	s14, s15
 8006934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006938:	d01f      	beq.n	800697a <main+0x3412>
					{
						if(EE_WriteVariable(NTCTL_ADDRESS,(uint16_t)(NTCTL_Value*10.0))!=HAL_OK)
 800693a:	4b9b      	ldr	r3, [pc, #620]	; (8006ba8 <main+0x3640>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fe02 	bl	8000548 <__aeabi_f2d>
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	4b98      	ldr	r3, [pc, #608]	; (8006bac <main+0x3644>)
 800694a:	f7f9 fe55 	bl	80005f8 <__aeabi_dmul>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	4618      	mov	r0, r3
 8006954:	4621      	mov	r1, r4
 8006956:	f7fa f927 	bl	8000ba8 <__aeabi_d2uiz>
 800695a:	4603      	mov	r3, r0
 800695c:	b29b      	uxth	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	2016      	movs	r0, #22
 8006962:	f7fb fefd 	bl	8002760 <EE_WriteVariable>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <main+0x340c>
						{
							print_segment("ER02");
 800696c:	4890      	ldr	r0, [pc, #576]	; (8006bb0 <main+0x3648>)
 800696e:	f004 fd19 	bl	800b3a4 <print_segment>
							while(1);
 8006972:	e7fe      	b.n	8006972 <main+0x340a>
						}
						HAL_Delay(50);					
 8006974:	2032      	movs	r0, #50	; 0x32
 8006976:	f005 f949 	bl	800bc0c <HAL_Delay>
					}
					sprintf(str_disp,"N%03.0f",NTCTH_Value);prev_float=NTCTH_Value;
 800697a:	4b8e      	ldr	r3, [pc, #568]	; (8006bb4 <main+0x364c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7f9 fde2 	bl	8000548 <__aeabi_f2d>
 8006984:	4603      	mov	r3, r0
 8006986:	460c      	mov	r4, r1
 8006988:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800698c:	f100 0004 	add.w	r0, r0, #4
 8006990:	461a      	mov	r2, r3
 8006992:	4623      	mov	r3, r4
 8006994:	4988      	ldr	r1, [pc, #544]	; (8006bb8 <main+0x3650>)
 8006996:	f014 f97b 	bl	801ac90 <siprintf>
 800699a:	4b86      	ldr	r3, [pc, #536]	; (8006bb4 <main+0x364c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80069a2:	f102 021c 	add.w	r2, r2, #28
 80069a6:	6013      	str	r3, [r2, #0]
					Menu_choice=NTCTH_MENU;
 80069a8:	2306      	movs	r3, #6
 80069aa:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80069ae:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80069b2:	7013      	strb	r3, [r2, #0]
				
					print_segment(str_disp);
 80069b4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80069b8:	f103 0304 	add.w	r3, r3, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f004 fcf1 	bl	800b3a4 <print_segment>
					Blink_segments(1);					
 80069c2:	2001      	movs	r0, #1
 80069c4:	f004 fd24 	bl	800b410 <Blink_segments>
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 80069c8:	4b7c      	ldr	r3, [pc, #496]	; (8006bbc <main+0x3654>)
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	801a      	strh	r2, [r3, #0]

				}
				if(KEYSW2_shortpressed)//up
 80069d0:	4b7b      	ldr	r3, [pc, #492]	; (8006bc0 <main+0x3658>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d035      	beq.n	8006a44 <main+0x34dc>
				{
					KEYSW2_shortpressed=0;
 80069d8:	4b79      	ldr	r3, [pc, #484]	; (8006bc0 <main+0x3658>)
 80069da:	2200      	movs	r2, #0
 80069dc:	701a      	strb	r2, [r3, #0]
					NTCTL_Value+=1.0;
 80069de:	4b72      	ldr	r3, [pc, #456]	; (8006ba8 <main+0x3640>)
 80069e0:	edd3 7a00 	vldr	s15, [r3]
 80069e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069ec:	4b6e      	ldr	r3, [pc, #440]	; (8006ba8 <main+0x3640>)
 80069ee:	edc3 7a00 	vstr	s15, [r3]
					if(NTCTL_Value>(double)NTCTL_MAX/10.0) NTCTL_Value=0.0;
 80069f2:	4b6d      	ldr	r3, [pc, #436]	; (8006ba8 <main+0x3640>)
 80069f4:	edd3 7a00 	vldr	s15, [r3]
 80069f8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8006bc4 <main+0x365c>
 80069fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a04:	dd03      	ble.n	8006a0e <main+0x34a6>
 8006a06:	4b68      	ldr	r3, [pc, #416]	; (8006ba8 <main+0x3640>)
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
					sprintf(str_disp,"N%03.0f",NTCTL_Value);
 8006a0e:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <main+0x3640>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fd98 	bl	8000548 <__aeabi_f2d>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006a20:	f100 0004 	add.w	r0, r0, #4
 8006a24:	461a      	mov	r2, r3
 8006a26:	4623      	mov	r3, r4
 8006a28:	4963      	ldr	r1, [pc, #396]	; (8006bb8 <main+0x3650>)
 8006a2a:	f014 f931 	bl	801ac90 <siprintf>
					print_segment(str_disp);				
 8006a2e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006a32:	f103 0304 	add.w	r3, r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f004 fcb4 	bl	800b3a4 <print_segment>
					GOMAINMENU_counter=GOMAINMENU_DELAY;					
 8006a3c:	4b5f      	ldr	r3, [pc, #380]	; (8006bbc <main+0x3654>)
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	801a      	strh	r2, [r3, #0]
				}	
				if(KEYSW3_shortpressed)//dn
 8006a44:	4b60      	ldr	r3, [pc, #384]	; (8006bc8 <main+0x3660>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d032      	beq.n	8006ab2 <main+0x354a>
				{
					KEYSW3_shortpressed=0;
 8006a4c:	4b5e      	ldr	r3, [pc, #376]	; (8006bc8 <main+0x3660>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
					NTCTL_Value-=1.0;
 8006a52:	4b55      	ldr	r3, [pc, #340]	; (8006ba8 <main+0x3640>)
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a60:	4b51      	ldr	r3, [pc, #324]	; (8006ba8 <main+0x3640>)
 8006a62:	edc3 7a00 	vstr	s15, [r3]
					if(NTCTL_Value<(double)NTCTL_MIN/10.0) NTCTL_Value=(double)NTCTL_MAX/10.0;
 8006a66:	4b50      	ldr	r3, [pc, #320]	; (8006ba8 <main+0x3640>)
 8006a68:	edd3 7a00 	vldr	s15, [r3]
 8006a6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	d502      	bpl.n	8006a7c <main+0x3514>
 8006a76:	4b4c      	ldr	r3, [pc, #304]	; (8006ba8 <main+0x3640>)
 8006a78:	4a54      	ldr	r2, [pc, #336]	; (8006bcc <main+0x3664>)
 8006a7a:	601a      	str	r2, [r3, #0]
					sprintf(str_disp,"N%03.0f",NTCTL_Value);
 8006a7c:	4b4a      	ldr	r3, [pc, #296]	; (8006ba8 <main+0x3640>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7f9 fd61 	bl	8000548 <__aeabi_f2d>
 8006a86:	4603      	mov	r3, r0
 8006a88:	460c      	mov	r4, r1
 8006a8a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006a8e:	f100 0004 	add.w	r0, r0, #4
 8006a92:	461a      	mov	r2, r3
 8006a94:	4623      	mov	r3, r4
 8006a96:	4948      	ldr	r1, [pc, #288]	; (8006bb8 <main+0x3650>)
 8006a98:	f014 f8fa 	bl	801ac90 <siprintf>
					print_segment(str_disp);				
 8006a9c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006aa0:	f103 0304 	add.w	r3, r3, #4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f004 fc7d 	bl	800b3a4 <print_segment>
					GOMAINMENU_counter=GOMAINMENU_DELAY;					
 8006aaa:	4b44      	ldr	r3, [pc, #272]	; (8006bbc <main+0x3654>)
 8006aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab0:	801a      	strh	r2, [r3, #0]

				}
				if(GOMAINMENU_counter==0)
 8006ab2:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <main+0x3654>)
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f043 80a1 	bne.w	8009bfe <main+0x6696>
				{
					Menu_choice=MAIN_MENU;
 8006abc:	2300      	movs	r3, #0
 8006abe:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8006ac2:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006ac6:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8006ac8:	4b41      	ldr	r3, [pc, #260]	; (8006bd0 <main+0x3668>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f004 fc9e 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(NTCTL_ADDRESS,  &read_eeprom)) != HAL_OK)
 8006ad4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006ad8:	3b24      	subs	r3, #36	; 0x24
 8006ada:	4619      	mov	r1, r3
 8006adc:	2016      	movs	r0, #22
 8006ade:	f7fb fdf7 	bl	80026d0 <EE_ReadVariable>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <main+0x3586>
					{
						print_segment("E1-R");
 8006ae8:	483a      	ldr	r0, [pc, #232]	; (8006bd4 <main+0x366c>)
 8006aea:	f004 fc5b 	bl	800b3a4 <print_segment>
					}		
					NTCTL_Value=(float)read_eeprom/10.0;
 8006aee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006af2:	3b24      	subs	r3, #36	; 0x24
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006afe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b06:	4b28      	ldr	r3, [pc, #160]	; (8006ba8 <main+0x3640>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);					
 8006b0c:	2032      	movs	r0, #50	; 0x32
 8006b0e:	f005 f87d 	bl	800bc0c <HAL_Delay>
				}					
			break;
 8006b12:	f003 b874 	b.w	8009bfe <main+0x6696>
			/////////////////////////////////////////////////////////CASE NTC HIGH MENU/////////////////////////////			
			case NTCTH_MENU:
				reset_keys();
 8006b16:	f7fc fb49 	bl	80031ac <reset_keys>
				if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 8006b1a:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <main+0x3634>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <main+0x35c0>
 8006b22:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <main+0x3634>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
				if(KEYSW3_longpressed) KEYSW3_longpressed=0;
 8006b28:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <main+0x3638>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <main+0x35ce>
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <main+0x3638>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
			
				if(KEYSW1_shortpressed) //set
 8006b36:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <main+0x363c>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d07a      	beq.n	8006c34 <main+0x36cc>
				{
					KEYSW1_shortpressed=0;
 8006b3e:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <main+0x363c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
					if(prev_float!=NTCTH_Value)
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <main+0x364c>)
 8006b46:	edd3 7a00 	vldr	s15, [r3]
 8006b4a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8006b4e:	f103 031c 	add.w	r3, r3, #28
 8006b52:	ed93 7a00 	vldr	s14, [r3]
 8006b56:	eeb4 7a67 	vcmp.f32	s14, s15
 8006b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5e:	d03e      	beq.n	8006bde <main+0x3676>
					{
						if(EE_WriteVariable(NTCTH_ADDRESS,(uint16_t)(NTCTH_Value*10.0))!=HAL_OK)
 8006b60:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <main+0x364c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7f9 fcef 	bl	8000548 <__aeabi_f2d>
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <main+0x3644>)
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	4603      	mov	r3, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	f7fa f814 	bl	8000ba8 <__aeabi_d2uiz>
 8006b80:	4603      	mov	r3, r0
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	2018      	movs	r0, #24
 8006b88:	f7fb fdea 	bl	8002760 <EE_WriteVariable>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d022      	beq.n	8006bd8 <main+0x3670>
						{
							print_segment("ER02");
 8006b92:	4807      	ldr	r0, [pc, #28]	; (8006bb0 <main+0x3648>)
 8006b94:	f004 fc06 	bl	800b3a4 <print_segment>
							while(1);
 8006b98:	e7fe      	b.n	8006b98 <main+0x3630>
 8006b9a:	bf00      	nop
 8006b9c:	200003d9 	.word	0x200003d9
 8006ba0:	200003d1 	.word	0x200003d1
 8006ba4:	200003e0 	.word	0x200003e0
 8006ba8:	20000774 	.word	0x20000774
 8006bac:	40240000 	.word	0x40240000
 8006bb0:	0801e944 	.word	0x0801e944
 8006bb4:	200007c8 	.word	0x200007c8
 8006bb8:	0801ea80 	.word	0x0801ea80
 8006bbc:	200003e8 	.word	0x200003e8
 8006bc0:	200003d8 	.word	0x200003d8
 8006bc4:	42f00000 	.word	0x42f00000
 8006bc8:	200003d0 	.word	0x200003d0
 8006bcc:	42f00000 	.word	0x42f00000
 8006bd0:	200003c4 	.word	0x200003c4
 8006bd4:	0801e810 	.word	0x0801e810
						}
						HAL_Delay(50);					
 8006bd8:	2032      	movs	r0, #50	; 0x32
 8006bda:	f005 f817 	bl	800bc0c <HAL_Delay>
					}
					sprintf(str_disp,"H%4.1f",HL_Value);prev_float=HL_Value;
 8006bde:	4b81      	ldr	r3, [pc, #516]	; (8006de4 <main+0x387c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7f9 fcb0 	bl	8000548 <__aeabi_f2d>
 8006be8:	4603      	mov	r3, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006bf0:	f100 0004 	add.w	r0, r0, #4
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4623      	mov	r3, r4
 8006bf8:	497b      	ldr	r1, [pc, #492]	; (8006de8 <main+0x3880>)
 8006bfa:	f014 f849 	bl	801ac90 <siprintf>
 8006bfe:	4b79      	ldr	r3, [pc, #484]	; (8006de4 <main+0x387c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8006c06:	f102 021c 	add.w	r2, r2, #28
 8006c0a:	6013      	str	r3, [r2, #0]
					Menu_choice=HUML_MENU;
 8006c0c:	2307      	movs	r3, #7
 8006c0e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8006c12:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006c16:	7013      	strb	r3, [r2, #0]
				
					print_segment(str_disp);
 8006c18:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006c1c:	f103 0304 	add.w	r3, r3, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f004 fbbf 	bl	800b3a4 <print_segment>
					Blink_segments(1);					
 8006c26:	2001      	movs	r0, #1
 8006c28:	f004 fbf2 	bl	800b410 <Blink_segments>
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006c2c:	4b6f      	ldr	r3, [pc, #444]	; (8006dec <main+0x3884>)
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	801a      	strh	r2, [r3, #0]

				}
				if(KEYSW2_shortpressed)//up
 8006c34:	4b6e      	ldr	r3, [pc, #440]	; (8006df0 <main+0x3888>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d035      	beq.n	8006ca8 <main+0x3740>
				{
					KEYSW2_shortpressed=0;
 8006c3c:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <main+0x3888>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
					NTCTH_Value+=1.0;
 8006c42:	4b6c      	ldr	r3, [pc, #432]	; (8006df4 <main+0x388c>)
 8006c44:	edd3 7a00 	vldr	s15, [r3]
 8006c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c50:	4b68      	ldr	r3, [pc, #416]	; (8006df4 <main+0x388c>)
 8006c52:	edc3 7a00 	vstr	s15, [r3]
					if(NTCTH_Value>(double)NTCTH_MAX/10.0) NTCTH_Value=0.0;
 8006c56:	4b67      	ldr	r3, [pc, #412]	; (8006df4 <main+0x388c>)
 8006c58:	edd3 7a00 	vldr	s15, [r3]
 8006c5c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8006df8 <main+0x3890>
 8006c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c68:	dd03      	ble.n	8006c72 <main+0x370a>
 8006c6a:	4b62      	ldr	r3, [pc, #392]	; (8006df4 <main+0x388c>)
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
					sprintf(str_disp,"N%03.0f",NTCTH_Value);
 8006c72:	4b60      	ldr	r3, [pc, #384]	; (8006df4 <main+0x388c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7f9 fc66 	bl	8000548 <__aeabi_f2d>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006c84:	f100 0004 	add.w	r0, r0, #4
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	495b      	ldr	r1, [pc, #364]	; (8006dfc <main+0x3894>)
 8006c8e:	f013 ffff 	bl	801ac90 <siprintf>
					print_segment(str_disp);				
 8006c92:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006c96:	f103 0304 	add.w	r3, r3, #4
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f004 fb82 	bl	800b3a4 <print_segment>
					GOMAINMENU_counter=GOMAINMENU_DELAY;					
 8006ca0:	4b52      	ldr	r3, [pc, #328]	; (8006dec <main+0x3884>)
 8006ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca6:	801a      	strh	r2, [r3, #0]
				}	
				if(KEYSW3_shortpressed)//dn
 8006ca8:	4b55      	ldr	r3, [pc, #340]	; (8006e00 <main+0x3898>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d032      	beq.n	8006d16 <main+0x37ae>
				{
					KEYSW3_shortpressed=0;
 8006cb0:	4b53      	ldr	r3, [pc, #332]	; (8006e00 <main+0x3898>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
					NTCTH_Value-=1.0;
 8006cb6:	4b4f      	ldr	r3, [pc, #316]	; (8006df4 <main+0x388c>)
 8006cb8:	edd3 7a00 	vldr	s15, [r3]
 8006cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cc4:	4b4b      	ldr	r3, [pc, #300]	; (8006df4 <main+0x388c>)
 8006cc6:	edc3 7a00 	vstr	s15, [r3]
					if(NTCTH_Value<(double)NTCTH_MIN/10.0) NTCTH_Value=(double)NTCTH_MAX/10.0;
 8006cca:	4b4a      	ldr	r3, [pc, #296]	; (8006df4 <main+0x388c>)
 8006ccc:	edd3 7a00 	vldr	s15, [r3]
 8006cd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd8:	d502      	bpl.n	8006ce0 <main+0x3778>
 8006cda:	4b46      	ldr	r3, [pc, #280]	; (8006df4 <main+0x388c>)
 8006cdc:	4a49      	ldr	r2, [pc, #292]	; (8006e04 <main+0x389c>)
 8006cde:	601a      	str	r2, [r3, #0]
					sprintf(str_disp,"N%03.0f",NTCTH_Value);
 8006ce0:	4b44      	ldr	r3, [pc, #272]	; (8006df4 <main+0x388c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7f9 fc2f 	bl	8000548 <__aeabi_f2d>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006cf2:	f100 0004 	add.w	r0, r0, #4
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	4940      	ldr	r1, [pc, #256]	; (8006dfc <main+0x3894>)
 8006cfc:	f013 ffc8 	bl	801ac90 <siprintf>
					print_segment(str_disp);				
 8006d00:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006d04:	f103 0304 	add.w	r3, r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f004 fb4b 	bl	800b3a4 <print_segment>
					GOMAINMENU_counter=GOMAINMENU_DELAY;					
 8006d0e:	4b37      	ldr	r3, [pc, #220]	; (8006dec <main+0x3884>)
 8006d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d14:	801a      	strh	r2, [r3, #0]

				}
				if(GOMAINMENU_counter==0)
 8006d16:	4b35      	ldr	r3, [pc, #212]	; (8006dec <main+0x3884>)
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f042 8772 	bne.w	8009c04 <main+0x669c>
				{
					Menu_choice=MAIN_MENU;
 8006d20:	2300      	movs	r3, #0
 8006d22:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8006d26:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006d2a:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <main+0x38a0>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8006d32:	2000      	movs	r0, #0
 8006d34:	f004 fb6c 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(NTCTH_ADDRESS,  &read_eeprom)) != HAL_OK)
 8006d38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006d3c:	3b26      	subs	r3, #38	; 0x26
 8006d3e:	4619      	mov	r1, r3
 8006d40:	2018      	movs	r0, #24
 8006d42:	f7fb fcc5 	bl	80026d0 <EE_ReadVariable>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <main+0x37ea>
					{
						print_segment("E1-R");
 8006d4c:	482f      	ldr	r0, [pc, #188]	; (8006e0c <main+0x38a4>)
 8006d4e:	f004 fb29 	bl	800b3a4 <print_segment>
					}		
					NTCTH_Value=(float)read_eeprom/10.0;
 8006d52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006d56:	3b26      	subs	r3, #38	; 0x26
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d62:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8006d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d6a:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <main+0x388c>)
 8006d6c:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);					
 8006d70:	2032      	movs	r0, #50	; 0x32
 8006d72:	f004 ff4b 	bl	800bc0c <HAL_Delay>
				}		
			break;
 8006d76:	f002 bf45 	b.w	8009c04 <main+0x669c>
			/////////////////////////////////////////////////////////CASE HUML_MENU/////////////////////////////////////////////////////////////////				
			case HUML_MENU:
				reset_keys();
 8006d7a:	f7fc fa17 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <main+0x38a8>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d078      	beq.n	8006e78 <main+0x3910>
			{
				KEYSW1_shortpressed=0;
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <main+0x38a8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
				if(prev_float!=HL_Value)
 8006d8c:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <main+0x387c>)
 8006d8e:	edd3 7a00 	vldr	s15, [r3]
 8006d92:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8006d96:	f103 031c 	add.w	r3, r3, #28
 8006d9a:	ed93 7a00 	vldr	s14, [r3]
 8006d9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8006da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da6:	d03c      	beq.n	8006e22 <main+0x38ba>
				{
					if(EE_WriteVariable(HL_ADDRESS,(uint16_t)(HL_Value*10.0))!=HAL_OK)
 8006da8:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <main+0x387c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7f9 fbcb 	bl	8000548 <__aeabi_f2d>
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <main+0x38ac>)
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f7f9 fef0 	bl	8000ba8 <__aeabi_d2uiz>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	2008      	movs	r0, #8
 8006dd0:	f7fb fcc6 	bl	8002760 <EE_WriteVariable>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d020      	beq.n	8006e1c <main+0x38b4>
					{
						print_segment("ER02");
 8006dda:	480f      	ldr	r0, [pc, #60]	; (8006e18 <main+0x38b0>)
 8006ddc:	f004 fae2 	bl	800b3a4 <print_segment>
						while(1);
 8006de0:	e7fe      	b.n	8006de0 <main+0x3878>
 8006de2:	bf00      	nop
 8006de4:	20000760 	.word	0x20000760
 8006de8:	0801eab0 	.word	0x0801eab0
 8006dec:	200003e8 	.word	0x200003e8
 8006df0:	200003d8 	.word	0x200003d8
 8006df4:	200007c8 	.word	0x200007c8
 8006df8:	42f00000 	.word	0x42f00000
 8006dfc:	0801ea80 	.word	0x0801ea80
 8006e00:	200003d0 	.word	0x200003d0
 8006e04:	42f00000 	.word	0x42f00000
 8006e08:	200003c4 	.word	0x200003c4
 8006e0c:	0801e810 	.word	0x0801e810
 8006e10:	200003e0 	.word	0x200003e0
 8006e14:	40240000 	.word	0x40240000
 8006e18:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 8006e1c:	2032      	movs	r0, #50	; 0x32
 8006e1e:	f004 fef5 	bl	800bc0c <HAL_Delay>
				}
				sprintf(str_disp,"H%4.1f",HH_Value);prev_float=HH_Value;
 8006e22:	4bad      	ldr	r3, [pc, #692]	; (80070d8 <main+0x3b70>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7f9 fb8e 	bl	8000548 <__aeabi_f2d>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006e34:	f100 0004 	add.w	r0, r0, #4
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	49a7      	ldr	r1, [pc, #668]	; (80070dc <main+0x3b74>)
 8006e3e:	f013 ff27 	bl	801ac90 <siprintf>
 8006e42:	4ba5      	ldr	r3, [pc, #660]	; (80070d8 <main+0x3b70>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8006e4a:	f102 021c 	add.w	r2, r2, #28
 8006e4e:	6013      	str	r3, [r2, #0]
				print_segment(str_disp);
 8006e50:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006e54:	f103 0304 	add.w	r3, r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f004 faa3 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f004 fad6 	bl	800b410 <Blink_segments>
				Menu_choice=HUMH_MENU;
 8006e64:	2308      	movs	r3, #8
 8006e66:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8006e6a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8006e6e:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006e70:	4b9b      	ldr	r3, [pc, #620]	; (80070e0 <main+0x3b78>)
 8006e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e76:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8006e78:	4b9a      	ldr	r3, [pc, #616]	; (80070e4 <main+0x3b7c>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d03f      	beq.n	8006f00 <main+0x3998>
			{
				KEYSW2_shortpressed=0;
 8006e80:	4b98      	ldr	r3, [pc, #608]	; (80070e4 <main+0x3b7c>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
				HL_Value+=0.1;
 8006e86:	4b98      	ldr	r3, [pc, #608]	; (80070e8 <main+0x3b80>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7f9 fb5c 	bl	8000548 <__aeabi_f2d>
 8006e90:	a38f      	add	r3, pc, #572	; (adr r3, 80070d0 <main+0x3b68>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f9f9 	bl	800028c <__adddf3>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	f7f9 fea1 	bl	8000be8 <__aeabi_d2f>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b8f      	ldr	r3, [pc, #572]	; (80070e8 <main+0x3b80>)
 8006eaa:	601a      	str	r2, [r3, #0]
				if(HL_Value>=HH_Value) HL_Value=HH_Value;
 8006eac:	4b8e      	ldr	r3, [pc, #568]	; (80070e8 <main+0x3b80>)
 8006eae:	ed93 7a00 	vldr	s14, [r3]
 8006eb2:	4b89      	ldr	r3, [pc, #548]	; (80070d8 <main+0x3b70>)
 8006eb4:	edd3 7a00 	vldr	s15, [r3]
 8006eb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec0:	db03      	blt.n	8006eca <main+0x3962>
 8006ec2:	4b85      	ldr	r3, [pc, #532]	; (80070d8 <main+0x3b70>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a88      	ldr	r2, [pc, #544]	; (80070e8 <main+0x3b80>)
 8006ec8:	6013      	str	r3, [r2, #0]
				sprintf(str_disp,"H%4.1f",HL_Value);
 8006eca:	4b87      	ldr	r3, [pc, #540]	; (80070e8 <main+0x3b80>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 fb3a 	bl	8000548 <__aeabi_f2d>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006edc:	f100 0004 	add.w	r0, r0, #4
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	497d      	ldr	r1, [pc, #500]	; (80070dc <main+0x3b74>)
 8006ee6:	f013 fed3 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006eea:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006eee:	f103 0304 	add.w	r3, r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 fa56 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006ef8:	4b79      	ldr	r3, [pc, #484]	; (80070e0 <main+0x3b78>)
 8006efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efe:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8006f00:	4b7a      	ldr	r3, [pc, #488]	; (80070ec <main+0x3b84>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d03c      	beq.n	8006f82 <main+0x3a1a>
			{
				KEYSW3_shortpressed=0;
 8006f08:	4b78      	ldr	r3, [pc, #480]	; (80070ec <main+0x3b84>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]
				HL_Value-=0.1;
 8006f0e:	4b76      	ldr	r3, [pc, #472]	; (80070e8 <main+0x3b80>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7f9 fb18 	bl	8000548 <__aeabi_f2d>
 8006f18:	a36d      	add	r3, pc, #436	; (adr r3, 80070d0 <main+0x3b68>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f9b3 	bl	8000288 <__aeabi_dsub>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	4618      	mov	r0, r3
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f7f9 fe5d 	bl	8000be8 <__aeabi_d2f>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	4b6d      	ldr	r3, [pc, #436]	; (80070e8 <main+0x3b80>)
 8006f32:	601a      	str	r2, [r3, #0]
				if(HL_Value<=((float)HL_MIN/10.0)) HL_Value=(float)HL_MIN/10.0;
 8006f34:	4b6c      	ldr	r3, [pc, #432]	; (80070e8 <main+0x3b80>)
 8006f36:	edd3 7a00 	vldr	s15, [r3]
 8006f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f42:	d803      	bhi.n	8006f4c <main+0x39e4>
 8006f44:	4b68      	ldr	r3, [pc, #416]	; (80070e8 <main+0x3b80>)
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"H%4.1f",HL_Value);
 8006f4c:	4b66      	ldr	r3, [pc, #408]	; (80070e8 <main+0x3b80>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 faf9 	bl	8000548 <__aeabi_f2d>
 8006f56:	4603      	mov	r3, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006f5e:	f100 0004 	add.w	r0, r0, #4
 8006f62:	461a      	mov	r2, r3
 8006f64:	4623      	mov	r3, r4
 8006f66:	495d      	ldr	r1, [pc, #372]	; (80070dc <main+0x3b74>)
 8006f68:	f013 fe92 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006f6c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006f70:	f103 0304 	add.w	r3, r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f004 fa15 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8006f7a:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <main+0x3b78>)
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8006f82:	4b5b      	ldr	r3, [pc, #364]	; (80070f0 <main+0x3b88>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d036      	beq.n	8006ff8 <main+0x3a90>
			{
				KEYSW2_longpressed=0;
 8006f8a:	4b59      	ldr	r3, [pc, #356]	; (80070f0 <main+0x3b88>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
				HL_Value++;
 8006f90:	4b55      	ldr	r3, [pc, #340]	; (80070e8 <main+0x3b80>)
 8006f92:	edd3 7a00 	vldr	s15, [r3]
 8006f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f9e:	4b52      	ldr	r3, [pc, #328]	; (80070e8 <main+0x3b80>)
 8006fa0:	edc3 7a00 	vstr	s15, [r3]
				if(HL_Value>=HH_Value) HL_Value=HH_Value;
 8006fa4:	4b50      	ldr	r3, [pc, #320]	; (80070e8 <main+0x3b80>)
 8006fa6:	ed93 7a00 	vldr	s14, [r3]
 8006faa:	4b4b      	ldr	r3, [pc, #300]	; (80070d8 <main+0x3b70>)
 8006fac:	edd3 7a00 	vldr	s15, [r3]
 8006fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb8:	db03      	blt.n	8006fc2 <main+0x3a5a>
 8006fba:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <main+0x3b70>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a4a      	ldr	r2, [pc, #296]	; (80070e8 <main+0x3b80>)
 8006fc0:	6013      	str	r3, [r2, #0]
				sprintf(str_disp,"H%4.1f",HL_Value);
 8006fc2:	4b49      	ldr	r3, [pc, #292]	; (80070e8 <main+0x3b80>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7f9 fabe 	bl	8000548 <__aeabi_f2d>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8006fd4:	f100 0004 	add.w	r0, r0, #4
 8006fd8:	461a      	mov	r2, r3
 8006fda:	4623      	mov	r3, r4
 8006fdc:	493f      	ldr	r1, [pc, #252]	; (80070dc <main+0x3b74>)
 8006fde:	f013 fe57 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8006fe2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8006fe6:	f103 0304 	add.w	r3, r3, #4
 8006fea:	4618      	mov	r0, r3
 8006fec:	f004 f9da 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8006ff0:	4b3b      	ldr	r3, [pc, #236]	; (80070e0 <main+0x3b78>)
 8006ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff6:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	; (80070f4 <main+0x3b8c>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d033      	beq.n	8007068 <main+0x3b00>
			{
				KEYSW3_longpressed=0;
 8007000:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <main+0x3b8c>)
 8007002:	2200      	movs	r2, #0
 8007004:	701a      	strb	r2, [r3, #0]
				HL_Value--;
 8007006:	4b38      	ldr	r3, [pc, #224]	; (80070e8 <main+0x3b80>)
 8007008:	edd3 7a00 	vldr	s15, [r3]
 800700c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007014:	4b34      	ldr	r3, [pc, #208]	; (80070e8 <main+0x3b80>)
 8007016:	edc3 7a00 	vstr	s15, [r3]
				if(HL_Value<=((float)HL_MIN/10.0)) HL_Value=(float)HL_MIN/10.0;
 800701a:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <main+0x3b80>)
 800701c:	edd3 7a00 	vldr	s15, [r3]
 8007020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007028:	d803      	bhi.n	8007032 <main+0x3aca>
 800702a:	4b2f      	ldr	r3, [pc, #188]	; (80070e8 <main+0x3b80>)
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"H%4.1f",HL_Value);
 8007032:	4b2d      	ldr	r3, [pc, #180]	; (80070e8 <main+0x3b80>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f7f9 fa86 	bl	8000548 <__aeabi_f2d>
 800703c:	4603      	mov	r3, r0
 800703e:	460c      	mov	r4, r1
 8007040:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8007044:	f100 0004 	add.w	r0, r0, #4
 8007048:	461a      	mov	r2, r3
 800704a:	4623      	mov	r3, r4
 800704c:	4923      	ldr	r1, [pc, #140]	; (80070dc <main+0x3b74>)
 800704e:	f013 fe1f 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007052:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007056:	f103 0304 	add.w	r3, r3, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f004 f9a2 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007060:	4b1f      	ldr	r3, [pc, #124]	; (80070e0 <main+0x3b78>)
 8007062:	f241 3288 	movw	r2, #5000	; 0x1388
 8007066:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <main+0x3b78>)
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f042 85cc 	bne.w	8009c0a <main+0x66a2>
				{
					Menu_choice=MAIN_MENU;
 8007072:	2300      	movs	r3, #0
 8007074:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007078:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800707c:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 800707e:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <main+0x3b90>)
 8007080:	2201      	movs	r2, #1
 8007082:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8007084:	2000      	movs	r0, #0
 8007086:	f004 f9c3 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(HL_ADDRESS,  &read_eeprom)) != HAL_OK)
 800708a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800708e:	3b28      	subs	r3, #40	; 0x28
 8007090:	4619      	mov	r1, r3
 8007092:	2008      	movs	r0, #8
 8007094:	f7fb fb1c 	bl	80026d0 <EE_ReadVariable>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <main+0x3b3c>
					{
						print_segment("E1-R");
 800709e:	4817      	ldr	r0, [pc, #92]	; (80070fc <main+0x3b94>)
 80070a0:	f004 f980 	bl	800b3a4 <print_segment>
					}		
					HL_Value=(float)read_eeprom/10.0;
 80070a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80070a8:	3b28      	subs	r3, #40	; 0x28
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070b4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80070b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <main+0x3b80>)
 80070be:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);
 80070c2:	2032      	movs	r0, #50	; 0x32
 80070c4:	f004 fda2 	bl	800bc0c <HAL_Delay>
				}
				
				break;
 80070c8:	f002 bd9f 	b.w	8009c0a <main+0x66a2>
 80070cc:	f3af 8000 	nop.w
 80070d0:	9999999a 	.word	0x9999999a
 80070d4:	3fb99999 	.word	0x3fb99999
 80070d8:	200007f8 	.word	0x200007f8
 80070dc:	0801eab0 	.word	0x0801eab0
 80070e0:	200003e8 	.word	0x200003e8
 80070e4:	200003d8 	.word	0x200003d8
 80070e8:	20000760 	.word	0x20000760
 80070ec:	200003d0 	.word	0x200003d0
 80070f0:	200003d9 	.word	0x200003d9
 80070f4:	200003d1 	.word	0x200003d1
 80070f8:	200003c4 	.word	0x200003c4
 80070fc:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE HUMH_MENU/////////////////////////////////////////////////////////////////				
			case HUMH_MENU:
				reset_keys();
 8007100:	f7fc f854 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8007104:	4b18      	ldr	r3, [pc, #96]	; (8007168 <main+0x3c00>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d063      	beq.n	80071d4 <main+0x3c6c>
			{
				KEYSW1_shortpressed=0;
 800710c:	4b16      	ldr	r3, [pc, #88]	; (8007168 <main+0x3c00>)
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
				if(prev_float!=HH_Value)
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <main+0x3c04>)
 8007114:	edd3 7a00 	vldr	s15, [r3]
 8007118:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 800711c:	f103 031c 	add.w	r3, r3, #28
 8007120:	ed93 7a00 	vldr	s14, [r3]
 8007124:	eeb4 7a67 	vcmp.f32	s14, s15
 8007128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712c:	d027      	beq.n	800717e <main+0x3c16>
				{
					if(EE_WriteVariable(HH_ADDRESS,(uint16_t)(HH_Value*10.0))!=HAL_OK)
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <main+0x3c04>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 fa08 	bl	8000548 <__aeabi_f2d>
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <main+0x3c08>)
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_dmul>
 8007142:	4603      	mov	r3, r0
 8007144:	460c      	mov	r4, r1
 8007146:	4618      	mov	r0, r3
 8007148:	4621      	mov	r1, r4
 800714a:	f7f9 fd2d 	bl	8000ba8 <__aeabi_d2uiz>
 800714e:	4603      	mov	r3, r0
 8007150:	b29b      	uxth	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	200a      	movs	r0, #10
 8007156:	f7fb fb03 	bl	8002760 <EE_WriteVariable>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <main+0x3c10>
					{
						print_segment("ER02");
 8007160:	4804      	ldr	r0, [pc, #16]	; (8007174 <main+0x3c0c>)
 8007162:	f004 f91f 	bl	800b3a4 <print_segment>
						while(1);
 8007166:	e7fe      	b.n	8007166 <main+0x3bfe>
 8007168:	200003e0 	.word	0x200003e0
 800716c:	200007f8 	.word	0x200007f8
 8007170:	40240000 	.word	0x40240000
 8007174:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 8007178:	2032      	movs	r0, #50	; 0x32
 800717a:	f004 fd47 	bl	800bc0c <HAL_Delay>
				}
				sprintf(str_disp,"L%4.1f",BlinkW_Value);prev_float=BlinkW_Value;
 800717e:	4bae      	ldr	r3, [pc, #696]	; (8007438 <main+0x3ed0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f7f9 f9e0 	bl	8000548 <__aeabi_f2d>
 8007188:	4603      	mov	r3, r0
 800718a:	460c      	mov	r4, r1
 800718c:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8007190:	f100 0004 	add.w	r0, r0, #4
 8007194:	461a      	mov	r2, r3
 8007196:	4623      	mov	r3, r4
 8007198:	49a8      	ldr	r1, [pc, #672]	; (800743c <main+0x3ed4>)
 800719a:	f013 fd79 	bl	801ac90 <siprintf>
 800719e:	4ba6      	ldr	r3, [pc, #664]	; (8007438 <main+0x3ed0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80071a6:	f102 021c 	add.w	r2, r2, #28
 80071aa:	6013      	str	r3, [r2, #0]
				print_segment(str_disp);
 80071ac:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80071b0:	f103 0304 	add.w	r3, r3, #4
 80071b4:	4618      	mov	r0, r3
 80071b6:	f004 f8f5 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 80071ba:	2001      	movs	r0, #1
 80071bc:	f004 f928 	bl	800b410 <Blink_segments>
				Menu_choice=BLINKW_MENU;
 80071c0:	2309      	movs	r3, #9
 80071c2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80071c6:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80071ca:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80071cc:	4b9c      	ldr	r3, [pc, #624]	; (8007440 <main+0x3ed8>)
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 80071d4:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <main+0x3edc>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d03d      	beq.n	8007258 <main+0x3cf0>
			{
				KEYSW2_shortpressed=0;
 80071dc:	4b99      	ldr	r3, [pc, #612]	; (8007444 <main+0x3edc>)
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
				HH_Value+=0.1;
 80071e2:	4b99      	ldr	r3, [pc, #612]	; (8007448 <main+0x3ee0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7f9 f9ae 	bl	8000548 <__aeabi_f2d>
 80071ec:	a390      	add	r3, pc, #576	; (adr r3, 8007430 <main+0x3ec8>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f84b 	bl	800028c <__adddf3>
 80071f6:	4603      	mov	r3, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	4618      	mov	r0, r3
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7f9 fcf3 	bl	8000be8 <__aeabi_d2f>
 8007202:	4602      	mov	r2, r0
 8007204:	4b90      	ldr	r3, [pc, #576]	; (8007448 <main+0x3ee0>)
 8007206:	601a      	str	r2, [r3, #0]
				if(HH_Value>=(float)HH_MAX/10.0) HH_Value=(float)HH_MAX/10.0;
 8007208:	4b8f      	ldr	r3, [pc, #572]	; (8007448 <main+0x3ee0>)
 800720a:	edd3 7a00 	vldr	s15, [r3]
 800720e:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800744c <main+0x3ee4>
 8007212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721a:	db02      	blt.n	8007222 <main+0x3cba>
 800721c:	4b8a      	ldr	r3, [pc, #552]	; (8007448 <main+0x3ee0>)
 800721e:	4a8c      	ldr	r2, [pc, #560]	; (8007450 <main+0x3ee8>)
 8007220:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"H%4.1f",HH_Value);
 8007222:	4b89      	ldr	r3, [pc, #548]	; (8007448 <main+0x3ee0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7f9 f98e 	bl	8000548 <__aeabi_f2d>
 800722c:	4603      	mov	r3, r0
 800722e:	460c      	mov	r4, r1
 8007230:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8007234:	f100 0004 	add.w	r0, r0, #4
 8007238:	461a      	mov	r2, r3
 800723a:	4623      	mov	r3, r4
 800723c:	4985      	ldr	r1, [pc, #532]	; (8007454 <main+0x3eec>)
 800723e:	f013 fd27 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007242:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007246:	f103 0304 	add.w	r3, r3, #4
 800724a:	4618      	mov	r0, r3
 800724c:	f004 f8aa 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007250:	4b7b      	ldr	r3, [pc, #492]	; (8007440 <main+0x3ed8>)
 8007252:	f241 3288 	movw	r2, #5000	; 0x1388
 8007256:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8007258:	4b7f      	ldr	r3, [pc, #508]	; (8007458 <main+0x3ef0>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d03f      	beq.n	80072e0 <main+0x3d78>
			{
				KEYSW3_shortpressed=0;
 8007260:	4b7d      	ldr	r3, [pc, #500]	; (8007458 <main+0x3ef0>)
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
				HH_Value-=0.1;
 8007266:	4b78      	ldr	r3, [pc, #480]	; (8007448 <main+0x3ee0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f96c 	bl	8000548 <__aeabi_f2d>
 8007270:	a36f      	add	r3, pc, #444	; (adr r3, 8007430 <main+0x3ec8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f807 	bl	8000288 <__aeabi_dsub>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	4618      	mov	r0, r3
 8007280:	4621      	mov	r1, r4
 8007282:	f7f9 fcb1 	bl	8000be8 <__aeabi_d2f>
 8007286:	4602      	mov	r2, r0
 8007288:	4b6f      	ldr	r3, [pc, #444]	; (8007448 <main+0x3ee0>)
 800728a:	601a      	str	r2, [r3, #0]
				if(HH_Value<=HL_Value) HH_Value=HL_Value;
 800728c:	4b6e      	ldr	r3, [pc, #440]	; (8007448 <main+0x3ee0>)
 800728e:	ed93 7a00 	vldr	s14, [r3]
 8007292:	4b72      	ldr	r3, [pc, #456]	; (800745c <main+0x3ef4>)
 8007294:	edd3 7a00 	vldr	s15, [r3]
 8007298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	d803      	bhi.n	80072aa <main+0x3d42>
 80072a2:	4b6e      	ldr	r3, [pc, #440]	; (800745c <main+0x3ef4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a68      	ldr	r2, [pc, #416]	; (8007448 <main+0x3ee0>)
 80072a8:	6013      	str	r3, [r2, #0]
				sprintf(str_disp,"H%4.1f",HH_Value);
 80072aa:	4b67      	ldr	r3, [pc, #412]	; (8007448 <main+0x3ee0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f9 f94a 	bl	8000548 <__aeabi_f2d>
 80072b4:	4603      	mov	r3, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80072bc:	f100 0004 	add.w	r0, r0, #4
 80072c0:	461a      	mov	r2, r3
 80072c2:	4623      	mov	r3, r4
 80072c4:	4963      	ldr	r1, [pc, #396]	; (8007454 <main+0x3eec>)
 80072c6:	f013 fce3 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80072ca:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80072ce:	f103 0304 	add.w	r3, r3, #4
 80072d2:	4618      	mov	r0, r3
 80072d4:	f004 f866 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 80072d8:	4b59      	ldr	r3, [pc, #356]	; (8007440 <main+0x3ed8>)
 80072da:	f241 3288 	movw	r2, #5000	; 0x1388
 80072de:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 80072e0:	4b5f      	ldr	r3, [pc, #380]	; (8007460 <main+0x3ef8>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d034      	beq.n	8007352 <main+0x3dea>
			{
				KEYSW2_longpressed=0;
 80072e8:	4b5d      	ldr	r3, [pc, #372]	; (8007460 <main+0x3ef8>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
				HH_Value++;
 80072ee:	4b56      	ldr	r3, [pc, #344]	; (8007448 <main+0x3ee0>)
 80072f0:	edd3 7a00 	vldr	s15, [r3]
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072fc:	4b52      	ldr	r3, [pc, #328]	; (8007448 <main+0x3ee0>)
 80072fe:	edc3 7a00 	vstr	s15, [r3]
				if(HH_Value>=(float)HH_MAX/10.0) HH_Value=(float)HH_MAX/10.0;
 8007302:	4b51      	ldr	r3, [pc, #324]	; (8007448 <main+0x3ee0>)
 8007304:	edd3 7a00 	vldr	s15, [r3]
 8007308:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800744c <main+0x3ee4>
 800730c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007314:	db02      	blt.n	800731c <main+0x3db4>
 8007316:	4b4c      	ldr	r3, [pc, #304]	; (8007448 <main+0x3ee0>)
 8007318:	4a4d      	ldr	r2, [pc, #308]	; (8007450 <main+0x3ee8>)
 800731a:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"H%4.1f",HH_Value);
 800731c:	4b4a      	ldr	r3, [pc, #296]	; (8007448 <main+0x3ee0>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f7f9 f911 	bl	8000548 <__aeabi_f2d>
 8007326:	4603      	mov	r3, r0
 8007328:	460c      	mov	r4, r1
 800732a:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800732e:	f100 0004 	add.w	r0, r0, #4
 8007332:	461a      	mov	r2, r3
 8007334:	4623      	mov	r3, r4
 8007336:	4947      	ldr	r1, [pc, #284]	; (8007454 <main+0x3eec>)
 8007338:	f013 fcaa 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800733c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007340:	f103 0304 	add.w	r3, r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f004 f82d 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800734a:	4b3d      	ldr	r3, [pc, #244]	; (8007440 <main+0x3ed8>)
 800734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007350:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8007352:	4b44      	ldr	r3, [pc, #272]	; (8007464 <main+0x3efc>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d036      	beq.n	80073c8 <main+0x3e60>
			{
				KEYSW3_longpressed=0;
 800735a:	4b42      	ldr	r3, [pc, #264]	; (8007464 <main+0x3efc>)
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
				HH_Value--;
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <main+0x3ee0>)
 8007362:	edd3 7a00 	vldr	s15, [r3]
 8007366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800736a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800736e:	4b36      	ldr	r3, [pc, #216]	; (8007448 <main+0x3ee0>)
 8007370:	edc3 7a00 	vstr	s15, [r3]
				if(HH_Value<=HL_Value) HH_Value=HL_Value;
 8007374:	4b34      	ldr	r3, [pc, #208]	; (8007448 <main+0x3ee0>)
 8007376:	ed93 7a00 	vldr	s14, [r3]
 800737a:	4b38      	ldr	r3, [pc, #224]	; (800745c <main+0x3ef4>)
 800737c:	edd3 7a00 	vldr	s15, [r3]
 8007380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	d803      	bhi.n	8007392 <main+0x3e2a>
 800738a:	4b34      	ldr	r3, [pc, #208]	; (800745c <main+0x3ef4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2e      	ldr	r2, [pc, #184]	; (8007448 <main+0x3ee0>)
 8007390:	6013      	str	r3, [r2, #0]
				sprintf(str_disp,"H%4.1f",HH_Value);
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <main+0x3ee0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7f9 f8d6 	bl	8000548 <__aeabi_f2d>
 800739c:	4603      	mov	r3, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80073a4:	f100 0004 	add.w	r0, r0, #4
 80073a8:	461a      	mov	r2, r3
 80073aa:	4623      	mov	r3, r4
 80073ac:	4929      	ldr	r1, [pc, #164]	; (8007454 <main+0x3eec>)
 80073ae:	f013 fc6f 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80073b2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80073b6:	f103 0304 	add.w	r3, r3, #4
 80073ba:	4618      	mov	r0, r3
 80073bc:	f003 fff2 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 80073c0:	4b1f      	ldr	r3, [pc, #124]	; (8007440 <main+0x3ed8>)
 80073c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c6:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 80073c8:	4b1d      	ldr	r3, [pc, #116]	; (8007440 <main+0x3ed8>)
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f042 841f 	bne.w	8009c10 <main+0x66a8>
				{
					Menu_choice=MAIN_MENU;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80073d8:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80073dc:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <main+0x3f00>)
 80073e0:	2201      	movs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 80073e4:	2000      	movs	r0, #0
 80073e6:	f004 f813 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(HH_ADDRESS,  &read_eeprom)) != HAL_OK)
 80073ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80073ee:	3b2a      	subs	r3, #42	; 0x2a
 80073f0:	4619      	mov	r1, r3
 80073f2:	200a      	movs	r0, #10
 80073f4:	f7fb f96c 	bl	80026d0 <EE_ReadVariable>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <main+0x3e9c>
					{
						print_segment("E1-R");
 80073fe:	481b      	ldr	r0, [pc, #108]	; (800746c <main+0x3f04>)
 8007400:	f003 ffd0 	bl	800b3a4 <print_segment>
					}		
					HH_Value=(float)read_eeprom/10.0;
 8007404:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007408:	3b2a      	subs	r3, #42	; 0x2a
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007414:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <main+0x3ee0>)
 800741e:	edc3 7a00 	vstr	s15, [r3]
					HAL_Delay(50);
 8007422:	2032      	movs	r0, #50	; 0x32
 8007424:	f004 fbf2 	bl	800bc0c <HAL_Delay>
				}
				break;
 8007428:	f002 bbf2 	b.w	8009c10 <main+0x66a8>
 800742c:	f3af 8000 	nop.w
 8007430:	9999999a 	.word	0x9999999a
 8007434:	3fb99999 	.word	0x3fb99999
 8007438:	20000814 	.word	0x20000814
 800743c:	0801eab8 	.word	0x0801eab8
 8007440:	200003e8 	.word	0x200003e8
 8007444:	200003d8 	.word	0x200003d8
 8007448:	200007f8 	.word	0x200007f8
 800744c:	42a00000 	.word	0x42a00000
 8007450:	42a00000 	.word	0x42a00000
 8007454:	0801eab0 	.word	0x0801eab0
 8007458:	200003d0 	.word	0x200003d0
 800745c:	20000760 	.word	0x20000760
 8007460:	200003d9 	.word	0x200003d9
 8007464:	200003d1 	.word	0x200003d1
 8007468:	200003c4 	.word	0x200003c4
 800746c:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE BLINKW_MENU/////////////////////////////////////////////////////////////////				
			case BLINKW_MENU:
				reset_keys();
 8007470:	f7fb fe9c 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8007474:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <main+0x3f70>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05e      	beq.n	800753a <main+0x3fd2>
			{
				KEYSW1_shortpressed=0;
 800747c:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <main+0x3f70>)
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
			
				if(prev_float!=BlinkW_Value)
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <main+0x3f74>)
 8007484:	edd3 7a00 	vldr	s15, [r3]
 8007488:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 800748c:	f103 031c 	add.w	r3, r3, #28
 8007490:	ed93 7a00 	vldr	s14, [r3]
 8007494:	eeb4 7a67 	vcmp.f32	s14, s15
 8007498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749c:	d027      	beq.n	80074ee <main+0x3f86>
				{
					if(EE_WriteVariable(BLINKW_ADDRESS,(uint16_t)(BlinkW_Value*10.0))!=HAL_OK)
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <main+0x3f74>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 f850 	bl	8000548 <__aeabi_f2d>
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <main+0x3f78>)
 80074ae:	f7f9 f8a3 	bl	80005f8 <__aeabi_dmul>
 80074b2:	4603      	mov	r3, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	4618      	mov	r0, r3
 80074b8:	4621      	mov	r1, r4
 80074ba:	f7f9 fb75 	bl	8000ba8 <__aeabi_d2uiz>
 80074be:	4603      	mov	r3, r0
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	4619      	mov	r1, r3
 80074c4:	200e      	movs	r0, #14
 80074c6:	f7fb f94b 	bl	8002760 <EE_WriteVariable>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00b      	beq.n	80074e8 <main+0x3f80>
					{
						print_segment("ER02");
 80074d0:	4804      	ldr	r0, [pc, #16]	; (80074e4 <main+0x3f7c>)
 80074d2:	f003 ff67 	bl	800b3a4 <print_segment>
						while(1);
 80074d6:	e7fe      	b.n	80074d6 <main+0x3f6e>
 80074d8:	200003e0 	.word	0x200003e0
 80074dc:	20000814 	.word	0x20000814
 80074e0:	40240000 	.word	0x40240000
 80074e4:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 80074e8:	2032      	movs	r0, #50	; 0x32
 80074ea:	f004 fb8f 	bl	800bc0c <HAL_Delay>
				}
				sprintf(str_disp,"T%3d",BrightW_Value);prev_uint16t=BrightW_Value;
 80074ee:	4bba      	ldr	r3, [pc, #744]	; (80077d8 <main+0x4270>)
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80074f8:	f103 0304 	add.w	r3, r3, #4
 80074fc:	49b7      	ldr	r1, [pc, #732]	; (80077dc <main+0x4274>)
 80074fe:	4618      	mov	r0, r3
 8007500:	f013 fbc6 	bl	801ac90 <siprintf>
 8007504:	4bb4      	ldr	r3, [pc, #720]	; (80077d8 <main+0x4270>)
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800750c:	f102 020e 	add.w	r2, r2, #14
 8007510:	8013      	strh	r3, [r2, #0]
				print_segment(str_disp);
 8007512:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007516:	f103 0304 	add.w	r3, r3, #4
 800751a:	4618      	mov	r0, r3
 800751c:	f003 ff42 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8007520:	2001      	movs	r0, #1
 8007522:	f003 ff75 	bl	800b410 <Blink_segments>
				Menu_choice=BRIGHTW_MENU;
 8007526:	230a      	movs	r3, #10
 8007528:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800752c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8007530:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007532:	4bab      	ldr	r3, [pc, #684]	; (80077e0 <main+0x4278>)
 8007534:	f241 3288 	movw	r2, #5000	; 0x1388
 8007538:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 800753a:	4baa      	ldr	r3, [pc, #680]	; (80077e4 <main+0x427c>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d044      	beq.n	80075cc <main+0x4064>
			{
				KEYSW2_shortpressed=0;
 8007542:	4ba8      	ldr	r3, [pc, #672]	; (80077e4 <main+0x427c>)
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
				BlinkW_Value+=0.1;
 8007548:	4ba7      	ldr	r3, [pc, #668]	; (80077e8 <main+0x4280>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f7f8 fffb 	bl	8000548 <__aeabi_f2d>
 8007552:	a39f      	add	r3, pc, #636	; (adr r3, 80077d0 <main+0x4268>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 fe98 	bl	800028c <__adddf3>
 800755c:	4603      	mov	r3, r0
 800755e:	460c      	mov	r4, r1
 8007560:	4618      	mov	r0, r3
 8007562:	4621      	mov	r1, r4
 8007564:	f7f9 fb40 	bl	8000be8 <__aeabi_d2f>
 8007568:	4602      	mov	r2, r0
 800756a:	4b9f      	ldr	r3, [pc, #636]	; (80077e8 <main+0x4280>)
 800756c:	601a      	str	r2, [r3, #0]
				if(BlinkW_Value>=(float)BLINKW_MAX/10.0) BlinkW_Value=(float)BLINKW_MAX/10.0;
 800756e:	4b9e      	ldr	r3, [pc, #632]	; (80077e8 <main+0x4280>)
 8007570:	edd3 7a00 	vldr	s15, [r3]
 8007574:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	db02      	blt.n	8007588 <main+0x4020>
 8007582:	4b99      	ldr	r3, [pc, #612]	; (80077e8 <main+0x4280>)
 8007584:	4a99      	ldr	r2, [pc, #612]	; (80077ec <main+0x4284>)
 8007586:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"L%4.1f",BlinkW_Value);
 8007588:	4b97      	ldr	r3, [pc, #604]	; (80077e8 <main+0x4280>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f7f8 ffdb 	bl	8000548 <__aeabi_f2d>
 8007592:	4603      	mov	r3, r0
 8007594:	460c      	mov	r4, r1
 8007596:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800759a:	f100 0004 	add.w	r0, r0, #4
 800759e:	461a      	mov	r2, r3
 80075a0:	4623      	mov	r3, r4
 80075a2:	4993      	ldr	r1, [pc, #588]	; (80077f0 <main+0x4288>)
 80075a4:	f013 fb74 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80075a8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80075ac:	f103 0304 	add.w	r3, r3, #4
 80075b0:	4618      	mov	r0, r3
 80075b2:	f003 fef7 	bl	800b3a4 <print_segment>
				pca9632_setblinking(BlinkW_Value);
 80075b6:	4b8c      	ldr	r3, [pc, #560]	; (80077e8 <main+0x4280>)
 80075b8:	edd3 7a00 	vldr	s15, [r3]
 80075bc:	eeb0 0a67 	vmov.f32	s0, s15
 80075c0:	f002 fc90 	bl	8009ee4 <pca9632_setblinking>

				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80075c4:	4b86      	ldr	r3, [pc, #536]	; (80077e0 <main+0x4278>)
 80075c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ca:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 80075cc:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <main+0x428c>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d043      	beq.n	800765c <main+0x40f4>
			{
				KEYSW3_shortpressed=0;
 80075d4:	4b87      	ldr	r3, [pc, #540]	; (80077f4 <main+0x428c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
				BlinkW_Value-=0.1;
 80075da:	4b83      	ldr	r3, [pc, #524]	; (80077e8 <main+0x4280>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7f8 ffb2 	bl	8000548 <__aeabi_f2d>
 80075e4:	a37a      	add	r3, pc, #488	; (adr r3, 80077d0 <main+0x4268>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f8 fe4d 	bl	8000288 <__aeabi_dsub>
 80075ee:	4603      	mov	r3, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	4618      	mov	r0, r3
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7f9 faf7 	bl	8000be8 <__aeabi_d2f>
 80075fa:	4602      	mov	r2, r0
 80075fc:	4b7a      	ldr	r3, [pc, #488]	; (80077e8 <main+0x4280>)
 80075fe:	601a      	str	r2, [r3, #0]
				if(BlinkW_Value<=(float)BLINKW_MIN/10.0) BlinkW_Value=(float)BLINKW_MIN/10.0;
 8007600:	4b79      	ldr	r3, [pc, #484]	; (80077e8 <main+0x4280>)
 8007602:	edd3 7a00 	vldr	s15, [r3]
 8007606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760e:	d803      	bhi.n	8007618 <main+0x40b0>
 8007610:	4b75      	ldr	r3, [pc, #468]	; (80077e8 <main+0x4280>)
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"L%4.1f",BlinkW_Value);
 8007618:	4b73      	ldr	r3, [pc, #460]	; (80077e8 <main+0x4280>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f7f8 ff93 	bl	8000548 <__aeabi_f2d>
 8007622:	4603      	mov	r3, r0
 8007624:	460c      	mov	r4, r1
 8007626:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800762a:	f100 0004 	add.w	r0, r0, #4
 800762e:	461a      	mov	r2, r3
 8007630:	4623      	mov	r3, r4
 8007632:	496f      	ldr	r1, [pc, #444]	; (80077f0 <main+0x4288>)
 8007634:	f013 fb2c 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007638:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800763c:	f103 0304 	add.w	r3, r3, #4
 8007640:	4618      	mov	r0, r3
 8007642:	f003 feaf 	bl	800b3a4 <print_segment>
					pca9632_setblinking(BlinkW_Value);
 8007646:	4b68      	ldr	r3, [pc, #416]	; (80077e8 <main+0x4280>)
 8007648:	edd3 7a00 	vldr	s15, [r3]
 800764c:	eeb0 0a67 	vmov.f32	s0, s15
 8007650:	f002 fc48 	bl	8009ee4 <pca9632_setblinking>

				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007654:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <main+0x4278>)
 8007656:	f241 3288 	movw	r2, #5000	; 0x1388
 800765a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 800765c:	4b66      	ldr	r3, [pc, #408]	; (80077f8 <main+0x4290>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d03b      	beq.n	80076dc <main+0x4174>
			{
				KEYSW2_longpressed=0;
 8007664:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <main+0x4290>)
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
				BlinkW_Value++;
 800766a:	4b5f      	ldr	r3, [pc, #380]	; (80077e8 <main+0x4280>)
 800766c:	edd3 7a00 	vldr	s15, [r3]
 8007670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007674:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007678:	4b5b      	ldr	r3, [pc, #364]	; (80077e8 <main+0x4280>)
 800767a:	edc3 7a00 	vstr	s15, [r3]
				if(BlinkW_Value>=(float)BLINKW_MAX/10.0) BlinkW_Value=(float)BLINKW_MAX/10.0;
 800767e:	4b5a      	ldr	r3, [pc, #360]	; (80077e8 <main+0x4280>)
 8007680:	edd3 7a00 	vldr	s15, [r3]
 8007684:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	db02      	blt.n	8007698 <main+0x4130>
 8007692:	4b55      	ldr	r3, [pc, #340]	; (80077e8 <main+0x4280>)
 8007694:	4a55      	ldr	r2, [pc, #340]	; (80077ec <main+0x4284>)
 8007696:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"L%4.1f",BlinkW_Value);
 8007698:	4b53      	ldr	r3, [pc, #332]	; (80077e8 <main+0x4280>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f7f8 ff53 	bl	8000548 <__aeabi_f2d>
 80076a2:	4603      	mov	r3, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80076aa:	f100 0004 	add.w	r0, r0, #4
 80076ae:	461a      	mov	r2, r3
 80076b0:	4623      	mov	r3, r4
 80076b2:	494f      	ldr	r1, [pc, #316]	; (80077f0 <main+0x4288>)
 80076b4:	f013 faec 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80076b8:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80076bc:	f103 0304 	add.w	r3, r3, #4
 80076c0:	4618      	mov	r0, r3
 80076c2:	f003 fe6f 	bl	800b3a4 <print_segment>
					pca9632_setblinking(BlinkW_Value);
 80076c6:	4b48      	ldr	r3, [pc, #288]	; (80077e8 <main+0x4280>)
 80076c8:	edd3 7a00 	vldr	s15, [r3]
 80076cc:	eeb0 0a67 	vmov.f32	s0, s15
 80076d0:	f002 fc08 	bl	8009ee4 <pca9632_setblinking>

				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80076d4:	4b42      	ldr	r3, [pc, #264]	; (80077e0 <main+0x4278>)
 80076d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076da:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 80076dc:	4b47      	ldr	r3, [pc, #284]	; (80077fc <main+0x4294>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d03a      	beq.n	800775a <main+0x41f2>
			{
				KEYSW3_longpressed=0;
 80076e4:	4b45      	ldr	r3, [pc, #276]	; (80077fc <main+0x4294>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
				BlinkW_Value--;
 80076ea:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <main+0x4280>)
 80076ec:	edd3 7a00 	vldr	s15, [r3]
 80076f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076f8:	4b3b      	ldr	r3, [pc, #236]	; (80077e8 <main+0x4280>)
 80076fa:	edc3 7a00 	vstr	s15, [r3]
				if(BlinkW_Value<=(float)BLINKW_MIN/10.0) BlinkW_Value=(float)BLINKW_MIN/10.0;
 80076fe:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <main+0x4280>)
 8007700:	edd3 7a00 	vldr	s15, [r3]
 8007704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	d803      	bhi.n	8007716 <main+0x41ae>
 800770e:	4b36      	ldr	r3, [pc, #216]	; (80077e8 <main+0x4280>)
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
				sprintf(str_disp,"L%4.1f",BlinkW_Value);
 8007716:	4b34      	ldr	r3, [pc, #208]	; (80077e8 <main+0x4280>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7f8 ff14 	bl	8000548 <__aeabi_f2d>
 8007720:	4603      	mov	r3, r0
 8007722:	460c      	mov	r4, r1
 8007724:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8007728:	f100 0004 	add.w	r0, r0, #4
 800772c:	461a      	mov	r2, r3
 800772e:	4623      	mov	r3, r4
 8007730:	492f      	ldr	r1, [pc, #188]	; (80077f0 <main+0x4288>)
 8007732:	f013 faad 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 8007736:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800773a:	f103 0304 	add.w	r3, r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f003 fe30 	bl	800b3a4 <print_segment>
				pca9632_setblinking(BlinkW_Value);
 8007744:	4b28      	ldr	r3, [pc, #160]	; (80077e8 <main+0x4280>)
 8007746:	edd3 7a00 	vldr	s15, [r3]
 800774a:	eeb0 0a67 	vmov.f32	s0, s15
 800774e:	f002 fbc9 	bl	8009ee4 <pca9632_setblinking>
				
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007752:	4b23      	ldr	r3, [pc, #140]	; (80077e0 <main+0x4278>)
 8007754:	f241 3288 	movw	r2, #5000	; 0x1388
 8007758:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <main+0x4278>)
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f042 8259 	bne.w	8009c16 <main+0x66ae>
				{
					Menu_choice=MAIN_MENU;
 8007764:	2300      	movs	r3, #0
 8007766:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800776a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800776e:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <main+0x4298>)
 8007772:	2201      	movs	r2, #1
 8007774:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8007776:	2000      	movs	r0, #0
 8007778:	f003 fe4a 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(BLINKW_ADDRESS,  &read_eeprom)) != HAL_OK)
 800777c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007780:	3b2c      	subs	r3, #44	; 0x2c
 8007782:	4619      	mov	r1, r3
 8007784:	200e      	movs	r0, #14
 8007786:	f7fa ffa3 	bl	80026d0 <EE_ReadVariable>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <main+0x422e>
					{
						print_segment("E1-R");
 8007790:	481c      	ldr	r0, [pc, #112]	; (8007804 <main+0x429c>)
 8007792:	f003 fe07 	bl	800b3a4 <print_segment>
					}		
					BlinkW_Value=(float)read_eeprom/10.0;
 8007796:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800779a:	3b2c      	subs	r3, #44	; 0x2c
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077a6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80077aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <main+0x4280>)
 80077b0:	edc3 7a00 	vstr	s15, [r3]
					pca9632_setblinking(BlinkW_Value);
 80077b4:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <main+0x4280>)
 80077b6:	edd3 7a00 	vldr	s15, [r3]
 80077ba:	eeb0 0a67 	vmov.f32	s0, s15
 80077be:	f002 fb91 	bl	8009ee4 <pca9632_setblinking>
					
					HAL_Delay(50);
 80077c2:	2032      	movs	r0, #50	; 0x32
 80077c4:	f004 fa22 	bl	800bc0c <HAL_Delay>
				}				
				break;
 80077c8:	f002 ba25 	b.w	8009c16 <main+0x66ae>
 80077cc:	f3af 8000 	nop.w
 80077d0:	9999999a 	.word	0x9999999a
 80077d4:	3fb99999 	.word	0x3fb99999
 80077d8:	200007f4 	.word	0x200007f4
 80077dc:	0801eac0 	.word	0x0801eac0
 80077e0:	200003e8 	.word	0x200003e8
 80077e4:	200003d8 	.word	0x200003d8
 80077e8:	20000814 	.word	0x20000814
 80077ec:	40a00000 	.word	0x40a00000
 80077f0:	0801eab8 	.word	0x0801eab8
 80077f4:	200003d0 	.word	0x200003d0
 80077f8:	200003d9 	.word	0x200003d9
 80077fc:	200003d1 	.word	0x200003d1
 8007800:	200003c4 	.word	0x200003c4
 8007804:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE BRIGHTW_MENU/////////////////////////////////////////////////////////////////				
			case BRIGHTW_MENU:
				reset_keys();
 8007808:	f7fb fcd0 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 800780c:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <main+0x42e0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d05b      	beq.n	80078cc <main+0x4364>
			{
				KEYSW1_shortpressed=0;
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <main+0x42e0>)
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
				
				if(prev_uint16t!=BrightW_Value)
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <main+0x42e4>)
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007822:	f102 020e 	add.w	r2, r2, #14
 8007826:	8812      	ldrh	r2, [r2, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d016      	beq.n	800785a <main+0x42f2>
				{
					if(EE_WriteVariable(BRIGHTW_ADDRESS,(uint16_t)BrightW_Value)!=HAL_OK)
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <main+0x42e4>)
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	200c      	movs	r0, #12
 8007834:	f7fa ff94 	bl	8002760 <EE_WriteVariable>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <main+0x42ec>
					{
						print_segment("ER02");
 800783e:	4804      	ldr	r0, [pc, #16]	; (8007850 <main+0x42e8>)
 8007840:	f003 fdb0 	bl	800b3a4 <print_segment>
						while(1);
 8007844:	e7fe      	b.n	8007844 <main+0x42dc>
 8007846:	bf00      	nop
 8007848:	200003e0 	.word	0x200003e0
 800784c:	200007f4 	.word	0x200007f4
 8007850:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 8007854:	2032      	movs	r0, #50	; 0x32
 8007856:	f004 f9d9 	bl	800bc0c <HAL_Delay>
				//sprintf(str_disp,"R%3d",BrightIR_Value);prev_uint16t=BrightIR_Value;
				//print_segment(str_disp);					
				//Menu_choice=BRIGHTIR_MENU;
				//GOMAINMENU_counter=GOMAINMENU_DELAY;
				
				index_disp=0;
 800785a:	2300      	movs	r3, #0
 800785c:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007860:	f102 020c 	add.w	r2, r2, #12
 8007864:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 8007866:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800786a:	3b28      	subs	r3, #40	; 0x28
 800786c:	2200      	movs	r2, #0
 800786e:	4619      	mov	r1, r3
 8007870:	48b4      	ldr	r0, [pc, #720]	; (8007b44 <main+0x45dc>)
 8007872:	f009 f950 	bl	8010b16 <HAL_RTC_GetDate>
				sprintf(str_disp,"%04d",tmp_date.Year+1980);
 8007876:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800787a:	3b28      	subs	r3, #40	; 0x28
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8007882:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007886:	f103 0304 	add.w	r3, r3, #4
 800788a:	49af      	ldr	r1, [pc, #700]	; (8007b48 <main+0x45e0>)
 800788c:	4618      	mov	r0, r3
 800788e:	f013 f9ff 	bl	801ac90 <siprintf>
				prev_uint16t=tmp_date.Year;
 8007892:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007896:	3b28      	subs	r3, #40	; 0x28
 8007898:	78db      	ldrb	r3, [r3, #3]
 800789a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800789e:	f102 020e 	add.w	r2, r2, #14
 80078a2:	8013      	strh	r3, [r2, #0]

				print_segment(str_disp);
 80078a4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80078a8:	f103 0304 	add.w	r3, r3, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f003 fd79 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 80078b2:	2001      	movs	r0, #1
 80078b4:	f003 fdac 	bl	800b410 <Blink_segments>
				Menu_choice=SETYEAR_MENU;
 80078b8:	230c      	movs	r3, #12
 80078ba:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80078be:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80078c2:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80078c4:	4ba1      	ldr	r3, [pc, #644]	; (8007b4c <main+0x45e4>)
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	801a      	strh	r2, [r3, #0]
				
			}
			if(KEYSW2_shortpressed)//up
 80078cc:	4ba0      	ldr	r3, [pc, #640]	; (8007b50 <main+0x45e8>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d033      	beq.n	800793c <main+0x43d4>
			{
				KEYSW2_shortpressed=0;
 80078d4:	4b9e      	ldr	r3, [pc, #632]	; (8007b50 <main+0x45e8>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
				BrightW_Value++;
 80078da:	4b9e      	ldr	r3, [pc, #632]	; (8007b54 <main+0x45ec>)
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	3301      	adds	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	4b9c      	ldr	r3, [pc, #624]	; (8007b54 <main+0x45ec>)
 80078e4:	801a      	strh	r2, [r3, #0]
				if(BrightW_Value>100) BrightW_Value=100;
 80078e6:	4b9b      	ldr	r3, [pc, #620]	; (8007b54 <main+0x45ec>)
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	2b64      	cmp	r3, #100	; 0x64
 80078ec:	d902      	bls.n	80078f4 <main+0x438c>
 80078ee:	4b99      	ldr	r3, [pc, #612]	; (8007b54 <main+0x45ec>)
 80078f0:	2264      	movs	r2, #100	; 0x64
 80078f2:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"T%3d",BrightW_Value);
 80078f4:	4b97      	ldr	r3, [pc, #604]	; (8007b54 <main+0x45ec>)
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80078fe:	f103 0304 	add.w	r3, r3, #4
 8007902:	4995      	ldr	r1, [pc, #596]	; (8007b58 <main+0x45f0>)
 8007904:	4618      	mov	r0, r3
 8007906:	f013 f9c3 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800790a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800790e:	f103 0304 	add.w	r3, r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f003 fd46 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDW,BrightW_Value);
 8007918:	4b8e      	ldr	r3, [pc, #568]	; (8007b54 <main+0x45ec>)
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4619      	mov	r1, r3
 8007920:	2001      	movs	r0, #1
 8007922:	f002 fa87 	bl	8009e34 <pca9632_setonepwm>
				pca9632_setonepwm(LEDIR,BrightW_Value);
 8007926:	4b8b      	ldr	r3, [pc, #556]	; (8007b54 <main+0x45ec>)
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	2002      	movs	r0, #2
 8007930:	f002 fa80 	bl	8009e34 <pca9632_setonepwm>

				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007934:	4b85      	ldr	r3, [pc, #532]	; (8007b4c <main+0x45e4>)
 8007936:	f241 3288 	movw	r2, #5000	; 0x1388
 800793a:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 800793c:	4b87      	ldr	r3, [pc, #540]	; (8007b5c <main+0x45f4>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d033      	beq.n	80079ac <main+0x4444>
			{
				KEYSW3_shortpressed=0;
 8007944:	4b85      	ldr	r3, [pc, #532]	; (8007b5c <main+0x45f4>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
				if(BrightW_Value<=0) BrightW_Value=1;
 800794a:	4b82      	ldr	r3, [pc, #520]	; (8007b54 <main+0x45ec>)
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <main+0x43f0>
 8007952:	4b80      	ldr	r3, [pc, #512]	; (8007b54 <main+0x45ec>)
 8007954:	2201      	movs	r2, #1
 8007956:	801a      	strh	r2, [r3, #0]
				BrightW_Value--;
 8007958:	4b7e      	ldr	r3, [pc, #504]	; (8007b54 <main+0x45ec>)
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	4b7c      	ldr	r3, [pc, #496]	; (8007b54 <main+0x45ec>)
 8007962:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"T%3d",BrightW_Value);
 8007964:	4b7b      	ldr	r3, [pc, #492]	; (8007b54 <main+0x45ec>)
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800796e:	f103 0304 	add.w	r3, r3, #4
 8007972:	4979      	ldr	r1, [pc, #484]	; (8007b58 <main+0x45f0>)
 8007974:	4618      	mov	r0, r3
 8007976:	f013 f98b 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800797a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800797e:	f103 0304 	add.w	r3, r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f003 fd0e 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDW,BrightW_Value);
 8007988:	4b72      	ldr	r3, [pc, #456]	; (8007b54 <main+0x45ec>)
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	4619      	mov	r1, r3
 8007990:	2001      	movs	r0, #1
 8007992:	f002 fa4f 	bl	8009e34 <pca9632_setonepwm>
				pca9632_setonepwm(LEDIR,BrightW_Value);
 8007996:	4b6f      	ldr	r3, [pc, #444]	; (8007b54 <main+0x45ec>)
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	2002      	movs	r0, #2
 80079a0:	f002 fa48 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 80079a4:	4b69      	ldr	r3, [pc, #420]	; (8007b4c <main+0x45e4>)
 80079a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079aa:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 80079ac:	4b6c      	ldr	r3, [pc, #432]	; (8007b60 <main+0x45f8>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d036      	beq.n	8007a22 <main+0x44ba>
			{
				KEYSW2_longpressed=0;
 80079b4:	4b6a      	ldr	r3, [pc, #424]	; (8007b60 <main+0x45f8>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
				BrightW_Value+=10;
 80079ba:	4b66      	ldr	r3, [pc, #408]	; (8007b54 <main+0x45ec>)
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	330a      	adds	r3, #10
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	4b64      	ldr	r3, [pc, #400]	; (8007b54 <main+0x45ec>)
 80079c4:	801a      	strh	r2, [r3, #0]
				if(BrightW_Value>100) BrightW_Value=BrightW_Value-10;				
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <main+0x45ec>)
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	2b64      	cmp	r3, #100	; 0x64
 80079cc:	d905      	bls.n	80079da <main+0x4472>
 80079ce:	4b61      	ldr	r3, [pc, #388]	; (8007b54 <main+0x45ec>)
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	3b0a      	subs	r3, #10
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	4b5f      	ldr	r3, [pc, #380]	; (8007b54 <main+0x45ec>)
 80079d8:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"T%3d",BrightW_Value);
 80079da:	4b5e      	ldr	r3, [pc, #376]	; (8007b54 <main+0x45ec>)
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80079e4:	f103 0304 	add.w	r3, r3, #4
 80079e8:	495b      	ldr	r1, [pc, #364]	; (8007b58 <main+0x45f0>)
 80079ea:	4618      	mov	r0, r3
 80079ec:	f013 f950 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80079f0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80079f4:	f103 0304 	add.w	r3, r3, #4
 80079f8:	4618      	mov	r0, r3
 80079fa:	f003 fcd3 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDW,BrightW_Value);
 80079fe:	4b55      	ldr	r3, [pc, #340]	; (8007b54 <main+0x45ec>)
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	4619      	mov	r1, r3
 8007a06:	2001      	movs	r0, #1
 8007a08:	f002 fa14 	bl	8009e34 <pca9632_setonepwm>
				pca9632_setonepwm(LEDIR,BrightW_Value);
 8007a0c:	4b51      	ldr	r3, [pc, #324]	; (8007b54 <main+0x45ec>)
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	2002      	movs	r0, #2
 8007a16:	f002 fa0d 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007a1a:	4b4c      	ldr	r3, [pc, #304]	; (8007b4c <main+0x45e4>)
 8007a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a20:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8007a22:	4b50      	ldr	r3, [pc, #320]	; (8007b64 <main+0x45fc>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d036      	beq.n	8007a98 <main+0x4530>
			{
				KEYSW3_longpressed=0;
 8007a2a:	4b4e      	ldr	r3, [pc, #312]	; (8007b64 <main+0x45fc>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
				if(BrightW_Value<10) BrightW_Value=BrightW_Value+10;
 8007a30:	4b48      	ldr	r3, [pc, #288]	; (8007b54 <main+0x45ec>)
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d805      	bhi.n	8007a44 <main+0x44dc>
 8007a38:	4b46      	ldr	r3, [pc, #280]	; (8007b54 <main+0x45ec>)
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	330a      	adds	r3, #10
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	4b44      	ldr	r3, [pc, #272]	; (8007b54 <main+0x45ec>)
 8007a42:	801a      	strh	r2, [r3, #0]
				BrightW_Value-=10;
 8007a44:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <main+0x45ec>)
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	3b0a      	subs	r3, #10
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	4b41      	ldr	r3, [pc, #260]	; (8007b54 <main+0x45ec>)
 8007a4e:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"T%3d",BrightW_Value);
 8007a50:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <main+0x45ec>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007a5a:	f103 0304 	add.w	r3, r3, #4
 8007a5e:	493e      	ldr	r1, [pc, #248]	; (8007b58 <main+0x45f0>)
 8007a60:	4618      	mov	r0, r3
 8007a62:	f013 f915 	bl	801ac90 <siprintf>
				print_segment(str_disp);			
 8007a66:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007a6a:	f103 0304 	add.w	r3, r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f003 fc98 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDW,BrightW_Value);
 8007a74:	4b37      	ldr	r3, [pc, #220]	; (8007b54 <main+0x45ec>)
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	f002 f9d9 	bl	8009e34 <pca9632_setonepwm>
				pca9632_setonepwm(LEDIR,BrightW_Value);			
 8007a82:	4b34      	ldr	r3, [pc, #208]	; (8007b54 <main+0x45ec>)
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	4619      	mov	r1, r3
 8007a8a:	2002      	movs	r0, #2
 8007a8c:	f002 f9d2 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007a90:	4b2e      	ldr	r3, [pc, #184]	; (8007b4c <main+0x45e4>)
 8007a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a96:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 8007a98:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <main+0x45e4>)
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f042 80bd 	bne.w	8009c1c <main+0x66b4>
				{
					Menu_choice=MAIN_MENU;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007aa8:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8007aac:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8007aae:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <main+0x4600>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f003 fcab 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(BRIGHTW_ADDRESS,  &read_eeprom)) != HAL_OK)
 8007aba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007abe:	3b2e      	subs	r3, #46	; 0x2e
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	200c      	movs	r0, #12
 8007ac4:	f7fa fe04 	bl	80026d0 <EE_ReadVariable>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <main+0x456c>
					{
						print_segment("E1-R");
 8007ace:	4827      	ldr	r0, [pc, #156]	; (8007b6c <main+0x4604>)
 8007ad0:	f003 fc68 	bl	800b3a4 <print_segment>
					}		
					BrightW_Value=read_eeprom;
 8007ad4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ad8:	3b2e      	subs	r3, #46	; 0x2e
 8007ada:	881a      	ldrh	r2, [r3, #0]
 8007adc:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <main+0x45ec>)
 8007ade:	801a      	strh	r2, [r3, #0]
					pca9632_setonepwm(LEDW,BrightW_Value);
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <main+0x45ec>)
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f002 f9a3 	bl	8009e34 <pca9632_setonepwm>
					pca9632_setonepwm(LEDIR,BrightW_Value);
 8007aee:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <main+0x45ec>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4619      	mov	r1, r3
 8007af6:	2002      	movs	r0, #2
 8007af8:	f002 f99c 	bl	8009e34 <pca9632_setonepwm>
					HAL_Delay(50);
 8007afc:	2032      	movs	r0, #50	; 0x32
 8007afe:	f004 f885 	bl	800bc0c <HAL_Delay>
				}				
				break;
 8007b02:	f002 b88b 	b.w	8009c1c <main+0x66b4>
				
			/////////////////////////////////////////////////////////CASE BRIGHTIR_MENU/////////////////////////////////////////////////////////////////				
			case BRIGHTIR_MENU:
				reset_keys();
 8007b06:	f7fb fb51 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8007b0a:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <main+0x4608>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d070      	beq.n	8007bf4 <main+0x468c>
			{
				KEYSW1_shortpressed=0;
 8007b12:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <main+0x4608>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
				
				if(prev_uint16t!=BrightIR_Value)
 8007b18:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <main+0x460c>)
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007b20:	f102 020e 	add.w	r2, r2, #14
 8007b24:	8812      	ldrh	r2, [r2, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d02b      	beq.n	8007b82 <main+0x461a>
				{
					if(EE_WriteVariable(BRIGHTIR_ADDRESS,(uint16_t)BrightIR_Value)!=HAL_OK)
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <main+0x460c>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	2010      	movs	r0, #16
 8007b32:	f7fa fe15 	bl	8002760 <EE_WriteVariable>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01f      	beq.n	8007b7c <main+0x4614>
					{
						print_segment("ER02");
 8007b3c:	480e      	ldr	r0, [pc, #56]	; (8007b78 <main+0x4610>)
 8007b3e:	f003 fc31 	bl	800b3a4 <print_segment>
						while(1);
 8007b42:	e7fe      	b.n	8007b42 <main+0x45da>
 8007b44:	20000818 	.word	0x20000818
 8007b48:	0801e94c 	.word	0x0801e94c
 8007b4c:	200003e8 	.word	0x200003e8
 8007b50:	200003d8 	.word	0x200003d8
 8007b54:	200007f4 	.word	0x200007f4
 8007b58:	0801eac0 	.word	0x0801eac0
 8007b5c:	200003d0 	.word	0x200003d0
 8007b60:	200003d9 	.word	0x200003d9
 8007b64:	200003d1 	.word	0x200003d1
 8007b68:	200003c4 	.word	0x200003c4
 8007b6c:	0801e810 	.word	0x0801e810
 8007b70:	200003e0 	.word	0x200003e0
 8007b74:	200007cc 	.word	0x200007cc
 8007b78:	0801e944 	.word	0x0801e944
					}
					HAL_Delay(50);					
 8007b7c:	2032      	movs	r0, #50	; 0x32
 8007b7e:	f004 f845 	bl	800bc0c <HAL_Delay>
				}
				index_disp=0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007b88:	f102 020c 	add.w	r2, r2, #12
 8007b8c:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 8007b8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007b92:	3b28      	subs	r3, #40	; 0x28
 8007b94:	2200      	movs	r2, #0
 8007b96:	4619      	mov	r1, r3
 8007b98:	4893      	ldr	r0, [pc, #588]	; (8007de8 <main+0x4880>)
 8007b9a:	f008 ffbc 	bl	8010b16 <HAL_RTC_GetDate>
				sprintf(str_disp,"%04d",tmp_date.Year+1980);
 8007b9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007ba2:	3b28      	subs	r3, #40	; 0x28
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8007baa:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007bae:	f103 0304 	add.w	r3, r3, #4
 8007bb2:	498e      	ldr	r1, [pc, #568]	; (8007dec <main+0x4884>)
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f013 f86b 	bl	801ac90 <siprintf>
				prev_uint16t=tmp_date.Year;
 8007bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007bbe:	3b28      	subs	r3, #40	; 0x28
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007bc6:	f102 020e 	add.w	r2, r2, #14
 8007bca:	8013      	strh	r3, [r2, #0]
				print_segment(str_disp);
 8007bcc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007bd0:	f103 0304 	add.w	r3, r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f003 fbe5 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8007bda:	2001      	movs	r0, #1
 8007bdc:	f003 fc18 	bl	800b410 <Blink_segments>
				Menu_choice=SETYEAR_MENU;
 8007be0:	230c      	movs	r3, #12
 8007be2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007be6:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8007bea:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007bec:	4b80      	ldr	r3, [pc, #512]	; (8007df0 <main+0x4888>)
 8007bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf2:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8007bf4:	4b7f      	ldr	r3, [pc, #508]	; (8007df4 <main+0x488c>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d02c      	beq.n	8007c56 <main+0x46ee>
			{
				KEYSW2_shortpressed=0;
 8007bfc:	4b7d      	ldr	r3, [pc, #500]	; (8007df4 <main+0x488c>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
				BrightIR_Value++;
 8007c02:	4b7d      	ldr	r3, [pc, #500]	; (8007df8 <main+0x4890>)
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	4b7b      	ldr	r3, [pc, #492]	; (8007df8 <main+0x4890>)
 8007c0c:	801a      	strh	r2, [r3, #0]
				if(BrightIR_Value>100) BrightIR_Value=100;
 8007c0e:	4b7a      	ldr	r3, [pc, #488]	; (8007df8 <main+0x4890>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	2b64      	cmp	r3, #100	; 0x64
 8007c14:	d902      	bls.n	8007c1c <main+0x46b4>
 8007c16:	4b78      	ldr	r3, [pc, #480]	; (8007df8 <main+0x4890>)
 8007c18:	2264      	movs	r2, #100	; 0x64
 8007c1a:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"R%3d",BrightIR_Value);
 8007c1c:	4b76      	ldr	r3, [pc, #472]	; (8007df8 <main+0x4890>)
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007c26:	f103 0304 	add.w	r3, r3, #4
 8007c2a:	4974      	ldr	r1, [pc, #464]	; (8007dfc <main+0x4894>)
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f013 f82f 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007c32:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007c36:	f103 0304 	add.w	r3, r3, #4
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f003 fbb2 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDIR,BrightIR_Value);
 8007c40:	4b6d      	ldr	r3, [pc, #436]	; (8007df8 <main+0x4890>)
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	2002      	movs	r0, #2
 8007c4a:	f002 f8f3 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007c4e:	4b68      	ldr	r3, [pc, #416]	; (8007df0 <main+0x4888>)
 8007c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c54:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8007c56:	4b6a      	ldr	r3, [pc, #424]	; (8007e00 <main+0x4898>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d02c      	beq.n	8007cb8 <main+0x4750>
			{
				KEYSW3_shortpressed=0;
 8007c5e:	4b68      	ldr	r3, [pc, #416]	; (8007e00 <main+0x4898>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	701a      	strb	r2, [r3, #0]
				if(BrightIR_Value<=0) BrightIR_Value=0;
 8007c64:	4b64      	ldr	r3, [pc, #400]	; (8007df8 <main+0x4890>)
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <main+0x470a>
 8007c6c:	4b62      	ldr	r3, [pc, #392]	; (8007df8 <main+0x4890>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	801a      	strh	r2, [r3, #0]
				BrightIR_Value--;
 8007c72:	4b61      	ldr	r3, [pc, #388]	; (8007df8 <main+0x4890>)
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	4b5f      	ldr	r3, [pc, #380]	; (8007df8 <main+0x4890>)
 8007c7c:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"R%3d",BrightIR_Value);
 8007c7e:	4b5e      	ldr	r3, [pc, #376]	; (8007df8 <main+0x4890>)
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007c88:	f103 0304 	add.w	r3, r3, #4
 8007c8c:	495b      	ldr	r1, [pc, #364]	; (8007dfc <main+0x4894>)
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f012 fffe 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007c94:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007c98:	f103 0304 	add.w	r3, r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f003 fb81 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDIR,BrightIR_Value);
 8007ca2:	4b55      	ldr	r3, [pc, #340]	; (8007df8 <main+0x4890>)
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	2002      	movs	r0, #2
 8007cac:	f002 f8c2 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007cb0:	4b4f      	ldr	r3, [pc, #316]	; (8007df0 <main+0x4888>)
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8007cb8:	4b52      	ldr	r3, [pc, #328]	; (8007e04 <main+0x489c>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d02f      	beq.n	8007d20 <main+0x47b8>
			{
				KEYSW2_longpressed=0;
 8007cc0:	4b50      	ldr	r3, [pc, #320]	; (8007e04 <main+0x489c>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
				BrightIR_Value+=10;
 8007cc6:	4b4c      	ldr	r3, [pc, #304]	; (8007df8 <main+0x4890>)
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	330a      	adds	r3, #10
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	4b4a      	ldr	r3, [pc, #296]	; (8007df8 <main+0x4890>)
 8007cd0:	801a      	strh	r2, [r3, #0]
				if(BrightIR_Value>100) BrightIR_Value=BrightIR_Value-10;				
 8007cd2:	4b49      	ldr	r3, [pc, #292]	; (8007df8 <main+0x4890>)
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	2b64      	cmp	r3, #100	; 0x64
 8007cd8:	d905      	bls.n	8007ce6 <main+0x477e>
 8007cda:	4b47      	ldr	r3, [pc, #284]	; (8007df8 <main+0x4890>)
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	3b0a      	subs	r3, #10
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	4b45      	ldr	r3, [pc, #276]	; (8007df8 <main+0x4890>)
 8007ce4:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"R%3d",BrightIR_Value);
 8007ce6:	4b44      	ldr	r3, [pc, #272]	; (8007df8 <main+0x4890>)
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007cf0:	f103 0304 	add.w	r3, r3, #4
 8007cf4:	4941      	ldr	r1, [pc, #260]	; (8007dfc <main+0x4894>)
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f012 ffca 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007cfc:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007d00:	f103 0304 	add.w	r3, r3, #4
 8007d04:	4618      	mov	r0, r3
 8007d06:	f003 fb4d 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDIR,BrightIR_Value);
 8007d0a:	4b3b      	ldr	r3, [pc, #236]	; (8007df8 <main+0x4890>)
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	4619      	mov	r1, r3
 8007d12:	2002      	movs	r0, #2
 8007d14:	f002 f88e 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007d18:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <main+0x4888>)
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8007d20:	4b39      	ldr	r3, [pc, #228]	; (8007e08 <main+0x48a0>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d02f      	beq.n	8007d88 <main+0x4820>
			{
				KEYSW3_longpressed=0;
 8007d28:	4b37      	ldr	r3, [pc, #220]	; (8007e08 <main+0x48a0>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
				if(BrightIR_Value<10) BrightIR_Value=BrightIR_Value+10;
 8007d2e:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <main+0x4890>)
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d805      	bhi.n	8007d42 <main+0x47da>
 8007d36:	4b30      	ldr	r3, [pc, #192]	; (8007df8 <main+0x4890>)
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	330a      	adds	r3, #10
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <main+0x4890>)
 8007d40:	801a      	strh	r2, [r3, #0]
				BrightIR_Value-=10;
 8007d42:	4b2d      	ldr	r3, [pc, #180]	; (8007df8 <main+0x4890>)
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	3b0a      	subs	r3, #10
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	4b2b      	ldr	r3, [pc, #172]	; (8007df8 <main+0x4890>)
 8007d4c:	801a      	strh	r2, [r3, #0]
				sprintf(str_disp,"R%3d",BrightIR_Value);
 8007d4e:	4b2a      	ldr	r3, [pc, #168]	; (8007df8 <main+0x4890>)
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007d58:	f103 0304 	add.w	r3, r3, #4
 8007d5c:	4927      	ldr	r1, [pc, #156]	; (8007dfc <main+0x4894>)
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f012 ff96 	bl	801ac90 <siprintf>
				print_segment(str_disp);	
 8007d64:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007d68:	f103 0304 	add.w	r3, r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f003 fb19 	bl	800b3a4 <print_segment>
				pca9632_setonepwm(LEDIR,BrightIR_Value);
 8007d72:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <main+0x4890>)
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2002      	movs	r0, #2
 8007d7c:	f002 f85a 	bl	8009e34 <pca9632_setonepwm>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8007d80:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <main+0x4888>)
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 8007d88:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <main+0x4888>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f041 8748 	bne.w	8009c22 <main+0x66ba>
				{
					Menu_choice=MAIN_MENU;
 8007d92:	2300      	movs	r3, #0
 8007d94:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007d98:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8007d9c:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8007d9e:	4b1b      	ldr	r3, [pc, #108]	; (8007e0c <main+0x48a4>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8007da4:	2000      	movs	r0, #0
 8007da6:	f003 fb33 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(BRIGHTIR_ADDRESS,  &read_eeprom)) != HAL_OK)
 8007daa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dae:	3b30      	subs	r3, #48	; 0x30
 8007db0:	4619      	mov	r1, r3
 8007db2:	2010      	movs	r0, #16
 8007db4:	f7fa fc8c 	bl	80026d0 <EE_ReadVariable>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <main+0x485c>
					{
						print_segment("E1-R");
 8007dbe:	4814      	ldr	r0, [pc, #80]	; (8007e10 <main+0x48a8>)
 8007dc0:	f003 faf0 	bl	800b3a4 <print_segment>
					}		
					BrightIR_Value=read_eeprom;
 8007dc4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	881a      	ldrh	r2, [r3, #0]
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <main+0x4890>)
 8007dce:	801a      	strh	r2, [r3, #0]
					pca9632_setonepwm(LEDIR,BrightIR_Value);
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <main+0x4890>)
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	2002      	movs	r0, #2
 8007dda:	f002 f82b 	bl	8009e34 <pca9632_setonepwm>
					HAL_Delay(50);
 8007dde:	2032      	movs	r0, #50	; 0x32
 8007de0:	f003 ff14 	bl	800bc0c <HAL_Delay>
				}				
				break;
 8007de4:	f001 bf1d 	b.w	8009c22 <main+0x66ba>
 8007de8:	20000818 	.word	0x20000818
 8007dec:	0801e94c 	.word	0x0801e94c
 8007df0:	200003e8 	.word	0x200003e8
 8007df4:	200003d8 	.word	0x200003d8
 8007df8:	200007cc 	.word	0x200007cc
 8007dfc:	0801eac8 	.word	0x0801eac8
 8007e00:	200003d0 	.word	0x200003d0
 8007e04:	200003d9 	.word	0x200003d9
 8007e08:	200003d1 	.word	0x200003d1
 8007e0c:	200003c4 	.word	0x200003c4
 8007e10:	0801e810 	.word	0x0801e810
			/////////////////////////////////////////////////////////CASE SETYEAR_MENU/////////////////////////////////////////////////////////////////				
			case SETYEAR_MENU:
				reset_keys();
 8007e14:	f7fb f9ca 	bl	80031ac <reset_keys>
			if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 8007e18:	4b9e      	ldr	r3, [pc, #632]	; (8008094 <main+0x4b2c>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <main+0x48be>
 8007e20:	4b9c      	ldr	r3, [pc, #624]	; (8008094 <main+0x4b2c>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
			if(KEYSW3_longpressed) KEYSW3_longpressed=0;
 8007e26:	4b9c      	ldr	r3, [pc, #624]	; (8008098 <main+0x4b30>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <main+0x48cc>
 8007e2e:	4b9a      	ldr	r3, [pc, #616]	; (8008098 <main+0x4b30>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8007e34:	4b99      	ldr	r3, [pc, #612]	; (800809c <main+0x4b34>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80aa 	beq.w	8007f92 <main+0x4a2a>
			{
				KEYSW1_shortpressed=0;
 8007e3e:	4b97      	ldr	r3, [pc, #604]	; (800809c <main+0x4b34>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
				if(tmp_date.Year!=prev_uint16t)
 8007e44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e48:	3b28      	subs	r3, #40	; 0x28
 8007e4a:	78db      	ldrb	r3, [r3, #3]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007e52:	f102 020e 	add.w	r2, r2, #14
 8007e56:	8812      	ldrh	r2, [r2, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d062      	beq.n	8007f22 <main+0x49ba>
				{
					HAL_RTC_SetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 8007e5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e60:	3b28      	subs	r3, #40	; 0x28
 8007e62:	2200      	movs	r2, #0
 8007e64:	4619      	mov	r1, r3
 8007e66:	488e      	ldr	r0, [pc, #568]	; (80080a0 <main+0x4b38>)
 8007e68:	f008 fdae 	bl	80109c8 <HAL_RTC_SetDate>
					HAL_RTC_GetDate(&hrtc, &cur_date, RTC_FORMAT_BIN);
 8007e6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e70:	3b24      	subs	r3, #36	; 0x24
 8007e72:	2200      	movs	r2, #0
 8007e74:	4619      	mov	r1, r3
 8007e76:	488a      	ldr	r0, [pc, #552]	; (80080a0 <main+0x4b38>)
 8007e78:	f008 fe4d 	bl	8010b16 <HAL_RTC_GetDate>
					HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8007e7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e80:	3b20      	subs	r3, #32
 8007e82:	2200      	movs	r2, #0
 8007e84:	4619      	mov	r1, r3
 8007e86:	4886      	ldr	r0, [pc, #536]	; (80080a0 <main+0x4b38>)
 8007e88:	f008 fd40 	bl	801090c <HAL_RTC_GetTime>

					//date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
					//Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8007e8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007e90:	3b24      	subs	r3, #36	; 0x24
 8007e92:	789b      	ldrb	r3, [r3, #2]
 8007e94:	461a      	mov	r2, r3
 8007e96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e9a:	3b1c      	subs	r3, #28
 8007e9c:	609a      	str	r2, [r3, #8]
 8007e9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007ea2:	3b24      	subs	r3, #36	; 0x24
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007eac:	3b1c      	subs	r3, #28
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007eb4:	3b24      	subs	r3, #36	; 0x24
 8007eb6:	78db      	ldrb	r3, [r3, #3]
 8007eb8:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8007ebc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ec0:	3b1c      	subs	r3, #28
 8007ec2:	601a      	str	r2, [r3, #0]
					if(Astro_daylighsaving(date)) //summer
 8007ec4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ec8:	3b1c      	subs	r3, #28
 8007eca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ece:	f7f9 f941 	bl	8001154 <Astro_daylighsaving>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00c      	beq.n	8007ef2 <main+0x498a>
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 8007ed8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007edc:	3b20      	subs	r3, #32
 8007ede:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007ee2:	611a      	str	r2, [r3, #16]
						winter=0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007eea:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8007eee:	7013      	strb	r3, [r2, #0]
 8007ef0:	e00a      	b.n	8007f08 <main+0x49a0>
					}
					else
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8007ef2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007ef6:	3b20      	subs	r3, #32
 8007ef8:	2200      	movs	r2, #0
 8007efa:	611a      	str	r2, [r3, #16]
						winter=1;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007f02:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8007f06:	7013      	strb	r3, [r2, #0]
					}
					tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007f08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f0c:	3b20      	subs	r3, #32
 8007f0e:	2200      	movs	r2, #0
 8007f10:	60da      	str	r2, [r3, #12]
					HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8007f12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f16:	3b20      	subs	r3, #32
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4860      	ldr	r0, [pc, #384]	; (80080a0 <main+0x4b38>)
 8007f1e:	f008 fc38 	bl	8010792 <HAL_RTC_SetTime>
				}
				index_disp=0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007f28:	f102 020c 	add.w	r2, r2, #12
 8007f2c:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 8007f2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f32:	3b28      	subs	r3, #40	; 0x28
 8007f34:	2200      	movs	r2, #0
 8007f36:	4619      	mov	r1, r3
 8007f38:	4859      	ldr	r0, [pc, #356]	; (80080a0 <main+0x4b38>)
 8007f3a:	f008 fdec 	bl	8010b16 <HAL_RTC_GetDate>
				sprintf(str_disp,"N %02d",tmp_date.Month);prev_uint16t=tmp_date.Month;
 8007f3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f42:	3b28      	subs	r3, #40	; 0x28
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007f4c:	f103 0304 	add.w	r3, r3, #4
 8007f50:	4954      	ldr	r1, [pc, #336]	; (80080a4 <main+0x4b3c>)
 8007f52:	4618      	mov	r0, r3
 8007f54:	f012 fe9c 	bl	801ac90 <siprintf>
 8007f58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007f5c:	3b28      	subs	r3, #40	; 0x28
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8007f64:	f102 020e 	add.w	r2, r2, #14
 8007f68:	8013      	strh	r3, [r2, #0]
				print_segment(str_disp);
 8007f6a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007f6e:	f103 0304 	add.w	r3, r3, #4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f003 fa16 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f003 fa49 	bl	800b410 <Blink_segments>
				Menu_choice=SETMONTH_MENU;
 8007f7e:	230d      	movs	r3, #13
 8007f80:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8007f84:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8007f88:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007f8a:	4b47      	ldr	r3, [pc, #284]	; (80080a8 <main+0x4b40>)
 8007f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f90:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8007f92:	4b46      	ldr	r3, [pc, #280]	; (80080ac <main+0x4b44>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d030      	beq.n	8007ffc <main+0x4a94>
			{
				KEYSW2_shortpressed=0;
 8007f9a:	4b44      	ldr	r3, [pc, #272]	; (80080ac <main+0x4b44>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
				tmp_date.Year++;
 8007fa0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fa4:	3b28      	subs	r3, #40	; 0x28
 8007fa6:	78db      	ldrb	r3, [r3, #3]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fb0:	3b28      	subs	r3, #40	; 0x28
 8007fb2:	70da      	strb	r2, [r3, #3]
				if(tmp_date.Year>99) tmp_date.Year=0;
 8007fb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fb8:	3b28      	subs	r3, #40	; 0x28
 8007fba:	78db      	ldrb	r3, [r3, #3]
 8007fbc:	2b63      	cmp	r3, #99	; 0x63
 8007fbe:	d904      	bls.n	8007fca <main+0x4a62>
 8007fc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fc4:	3b28      	subs	r3, #40	; 0x28
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	70da      	strb	r2, [r3, #3]
				sprintf(str_disp,"%04d",tmp_date.Year+1980);
 8007fca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fce:	3b28      	subs	r3, #40	; 0x28
 8007fd0:	78db      	ldrb	r3, [r3, #3]
 8007fd2:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8007fd6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007fda:	f103 0304 	add.w	r3, r3, #4
 8007fde:	4934      	ldr	r1, [pc, #208]	; (80080b0 <main+0x4b48>)
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f012 fe55 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8007fe6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8007fea:	f103 0304 	add.w	r3, r3, #4
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f003 f9d8 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8007ff4:	4b2c      	ldr	r3, [pc, #176]	; (80080a8 <main+0x4b40>)
 8007ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffa:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8007ffc:	4b2d      	ldr	r3, [pc, #180]	; (80080b4 <main+0x4b4c>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d030      	beq.n	8008066 <main+0x4afe>
			{
				KEYSW3_shortpressed=0;
 8008004:	4b2b      	ldr	r3, [pc, #172]	; (80080b4 <main+0x4b4c>)
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
				if(tmp_date.Year<=0)tmp_date.Year=100;
 800800a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800800e:	3b28      	subs	r3, #40	; 0x28
 8008010:	78db      	ldrb	r3, [r3, #3]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <main+0x4ab8>
 8008016:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800801a:	3b28      	subs	r3, #40	; 0x28
 800801c:	2264      	movs	r2, #100	; 0x64
 800801e:	70da      	strb	r2, [r3, #3]
				tmp_date.Year--;
 8008020:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008024:	3b28      	subs	r3, #40	; 0x28
 8008026:	78db      	ldrb	r3, [r3, #3]
 8008028:	3b01      	subs	r3, #1
 800802a:	b2da      	uxtb	r2, r3
 800802c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008030:	3b28      	subs	r3, #40	; 0x28
 8008032:	70da      	strb	r2, [r3, #3]
				sprintf(str_disp,"%04d",tmp_date.Year+1980);
 8008034:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008038:	3b28      	subs	r3, #40	; 0x28
 800803a:	78db      	ldrb	r3, [r3, #3]
 800803c:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8008040:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008044:	f103 0304 	add.w	r3, r3, #4
 8008048:	4919      	ldr	r1, [pc, #100]	; (80080b0 <main+0x4b48>)
 800804a:	4618      	mov	r0, r3
 800804c:	f012 fe20 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008050:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008054:	f103 0304 	add.w	r3, r3, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f003 f9a3 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <main+0x4b40>)
 8008060:	f241 3288 	movw	r2, #5000	; 0x1388
 8008064:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
			if(GOMAINMENU_counter==0)
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <main+0x4b40>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f041 85dc 	bne.w	8009c28 <main+0x66c0>
			{
				Menu_choice=MAIN_MENU;
 8008070:	2300      	movs	r3, #0
 8008072:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008076:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800807a:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <main+0x4b50>)
 800807e:	2201      	movs	r2, #1
 8008080:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 8008082:	2000      	movs	r0, #0
 8008084:	f003 f9c4 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 8008088:	2032      	movs	r0, #50	; 0x32
 800808a:	f003 fdbf 	bl	800bc0c <HAL_Delay>
			}				
			break;
 800808e:	f001 bdcb 	b.w	8009c28 <main+0x66c0>
 8008092:	bf00      	nop
 8008094:	200003d9 	.word	0x200003d9
 8008098:	200003d1 	.word	0x200003d1
 800809c:	200003e0 	.word	0x200003e0
 80080a0:	20000818 	.word	0x20000818
 80080a4:	0801eaf4 	.word	0x0801eaf4
 80080a8:	200003e8 	.word	0x200003e8
 80080ac:	200003d8 	.word	0x200003d8
 80080b0:	0801e94c 	.word	0x0801e94c
 80080b4:	200003d0 	.word	0x200003d0
 80080b8:	200003c4 	.word	0x200003c4
			
			/////////////////////////////////////////////////////////CASE SETMONTH_MENU/////////////////////////////////////////////////////////////////				
			case SETMONTH_MENU:
				reset_keys();
 80080bc:	f7fb f876 	bl	80031ac <reset_keys>
			if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 80080c0:	4b9d      	ldr	r3, [pc, #628]	; (8008338 <main+0x4dd0>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <main+0x4b66>
 80080c8:	4b9b      	ldr	r3, [pc, #620]	; (8008338 <main+0x4dd0>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	701a      	strb	r2, [r3, #0]
			if(KEYSW3_longpressed) KEYSW3_longpressed=0;
 80080ce:	4b9b      	ldr	r3, [pc, #620]	; (800833c <main+0x4dd4>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <main+0x4b74>
 80080d6:	4b99      	ldr	r3, [pc, #612]	; (800833c <main+0x4dd4>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 80080dc:	4b98      	ldr	r3, [pc, #608]	; (8008340 <main+0x4dd8>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80aa 	beq.w	800823a <main+0x4cd2>
			{
				KEYSW1_shortpressed=0;
 80080e6:	4b96      	ldr	r3, [pc, #600]	; (8008340 <main+0x4dd8>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
				if(tmp_date.Month!=prev_uint16t)
 80080ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080f0:	3b28      	subs	r3, #40	; 0x28
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80080fa:	f102 020e 	add.w	r2, r2, #14
 80080fe:	8812      	ldrh	r2, [r2, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d062      	beq.n	80081ca <main+0x4c62>
				{
					HAL_RTC_SetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 8008104:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008108:	3b28      	subs	r3, #40	; 0x28
 800810a:	2200      	movs	r2, #0
 800810c:	4619      	mov	r1, r3
 800810e:	488d      	ldr	r0, [pc, #564]	; (8008344 <main+0x4ddc>)
 8008110:	f008 fc5a 	bl	80109c8 <HAL_RTC_SetDate>
					HAL_RTC_GetDate(&hrtc, &cur_date, RTC_FORMAT_BIN);
 8008114:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008118:	3b24      	subs	r3, #36	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	4619      	mov	r1, r3
 800811e:	4889      	ldr	r0, [pc, #548]	; (8008344 <main+0x4ddc>)
 8008120:	f008 fcf9 	bl	8010b16 <HAL_RTC_GetDate>
					HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008124:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008128:	3b20      	subs	r3, #32
 800812a:	2200      	movs	r2, #0
 800812c:	4619      	mov	r1, r3
 800812e:	4885      	ldr	r0, [pc, #532]	; (8008344 <main+0x4ddc>)
 8008130:	f008 fbec 	bl	801090c <HAL_RTC_GetTime>

					//date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
					//Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8008134:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008138:	3b24      	subs	r3, #36	; 0x24
 800813a:	789b      	ldrb	r3, [r3, #2]
 800813c:	461a      	mov	r2, r3
 800813e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008142:	3b1c      	subs	r3, #28
 8008144:	609a      	str	r2, [r3, #8]
 8008146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800814a:	3b24      	subs	r3, #36	; 0x24
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	461a      	mov	r2, r3
 8008150:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008154:	3b1c      	subs	r3, #28
 8008156:	605a      	str	r2, [r3, #4]
 8008158:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800815c:	3b24      	subs	r3, #36	; 0x24
 800815e:	78db      	ldrb	r3, [r3, #3]
 8008160:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8008164:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008168:	3b1c      	subs	r3, #28
 800816a:	601a      	str	r2, [r3, #0]
					if(Astro_daylighsaving(date)) //summer
 800816c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008170:	3b1c      	subs	r3, #28
 8008172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008176:	f7f8 ffed 	bl	8001154 <Astro_daylighsaving>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00c      	beq.n	800819a <main+0x4c32>
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 8008180:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008184:	3b20      	subs	r3, #32
 8008186:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800818a:	611a      	str	r2, [r3, #16]
						winter=0;
 800818c:	2300      	movs	r3, #0
 800818e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008192:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008196:	7013      	strb	r3, [r2, #0]
 8008198:	e00a      	b.n	80081b0 <main+0x4c48>
					}
					else
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 800819a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800819e:	3b20      	subs	r3, #32
 80081a0:	2200      	movs	r2, #0
 80081a2:	611a      	str	r2, [r3, #16]
						winter=1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80081aa:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 80081ae:	7013      	strb	r3, [r2, #0]
					}
					tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80081b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081b4:	3b20      	subs	r3, #32
 80081b6:	2200      	movs	r2, #0
 80081b8:	60da      	str	r2, [r3, #12]
					HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 80081ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081be:	3b20      	subs	r3, #32
 80081c0:	2200      	movs	r2, #0
 80081c2:	4619      	mov	r1, r3
 80081c4:	485f      	ldr	r0, [pc, #380]	; (8008344 <main+0x4ddc>)
 80081c6:	f008 fae4 	bl	8010792 <HAL_RTC_SetTime>
				}
				index_disp=0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80081d0:	f102 020c 	add.w	r2, r2, #12
 80081d4:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 80081d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081da:	3b28      	subs	r3, #40	; 0x28
 80081dc:	2200      	movs	r2, #0
 80081de:	4619      	mov	r1, r3
 80081e0:	4858      	ldr	r0, [pc, #352]	; (8008344 <main+0x4ddc>)
 80081e2:	f008 fc98 	bl	8010b16 <HAL_RTC_GetDate>
				sprintf(str_disp,"D %02d",tmp_date.Date);prev_uint16t=tmp_date.Date;
 80081e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80081ea:	3b28      	subs	r3, #40	; 0x28
 80081ec:	789b      	ldrb	r3, [r3, #2]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80081f4:	f103 0304 	add.w	r3, r3, #4
 80081f8:	4953      	ldr	r1, [pc, #332]	; (8008348 <main+0x4de0>)
 80081fa:	4618      	mov	r0, r3
 80081fc:	f012 fd48 	bl	801ac90 <siprintf>
 8008200:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008204:	3b28      	subs	r3, #40	; 0x28
 8008206:	789b      	ldrb	r3, [r3, #2]
 8008208:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800820c:	f102 020e 	add.w	r2, r2, #14
 8008210:	8013      	strh	r3, [r2, #0]
				print_segment(str_disp);
 8008212:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008216:	f103 0304 	add.w	r3, r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f003 f8c2 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8008220:	2001      	movs	r0, #1
 8008222:	f003 f8f5 	bl	800b410 <Blink_segments>
				Menu_choice=SETDAY_MENU;
 8008226:	230e      	movs	r3, #14
 8008228:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800822c:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008230:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008232:	4b46      	ldr	r3, [pc, #280]	; (800834c <main+0x4de4>)
 8008234:	f241 3288 	movw	r2, #5000	; 0x1388
 8008238:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 800823a:	4b45      	ldr	r3, [pc, #276]	; (8008350 <main+0x4de8>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d02f      	beq.n	80082a2 <main+0x4d3a>
			{
				KEYSW2_shortpressed=0;
 8008242:	4b43      	ldr	r3, [pc, #268]	; (8008350 <main+0x4de8>)
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
				tmp_date.Month++;
 8008248:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800824c:	3b28      	subs	r3, #40	; 0x28
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	3301      	adds	r3, #1
 8008252:	b2da      	uxtb	r2, r3
 8008254:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008258:	3b28      	subs	r3, #40	; 0x28
 800825a:	705a      	strb	r2, [r3, #1]
				if(tmp_date.Month>12) tmp_date.Month=1;
 800825c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008260:	3b28      	subs	r3, #40	; 0x28
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b0c      	cmp	r3, #12
 8008266:	d904      	bls.n	8008272 <main+0x4d0a>
 8008268:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800826c:	3b28      	subs	r3, #40	; 0x28
 800826e:	2201      	movs	r2, #1
 8008270:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp,"N %02d",tmp_date.Month);
 8008272:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008276:	3b28      	subs	r3, #40	; 0x28
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	461a      	mov	r2, r3
 800827c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008280:	f103 0304 	add.w	r3, r3, #4
 8008284:	4933      	ldr	r1, [pc, #204]	; (8008354 <main+0x4dec>)
 8008286:	4618      	mov	r0, r3
 8008288:	f012 fd02 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800828c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008290:	f103 0304 	add.w	r3, r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f003 f885 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800829a:	4b2c      	ldr	r3, [pc, #176]	; (800834c <main+0x4de4>)
 800829c:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a0:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 80082a2:	4b2d      	ldr	r3, [pc, #180]	; (8008358 <main+0x4df0>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d02f      	beq.n	800830a <main+0x4da2>
			{
				KEYSW3_shortpressed=0;
 80082aa:	4b2b      	ldr	r3, [pc, #172]	; (8008358 <main+0x4df0>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
				if(tmp_date.Month<1)tmp_date.Month=13;
 80082b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082b4:	3b28      	subs	r3, #40	; 0x28
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <main+0x4d5e>
 80082bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082c0:	3b28      	subs	r3, #40	; 0x28
 80082c2:	220d      	movs	r2, #13
 80082c4:	705a      	strb	r2, [r3, #1]
				tmp_date.Month--;
 80082c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082ca:	3b28      	subs	r3, #40	; 0x28
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082d6:	3b28      	subs	r3, #40	; 0x28
 80082d8:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp,"N %02d",tmp_date.Month);
 80082da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80082de:	3b28      	subs	r3, #40	; 0x28
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80082e8:	f103 0304 	add.w	r3, r3, #4
 80082ec:	4919      	ldr	r1, [pc, #100]	; (8008354 <main+0x4dec>)
 80082ee:	4618      	mov	r0, r3
 80082f0:	f012 fcce 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80082f4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80082f8:	f103 0304 	add.w	r3, r3, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f003 f851 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <main+0x4de4>)
 8008304:	f241 3288 	movw	r2, #5000	; 0x1388
 8008308:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
			if(GOMAINMENU_counter==0)
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <main+0x4de4>)
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f041 848d 	bne.w	8009c2e <main+0x66c6>
			{
				Menu_choice=MAIN_MENU;
 8008314:	2300      	movs	r3, #0
 8008316:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800831a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800831e:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 8008320:	4b0e      	ldr	r3, [pc, #56]	; (800835c <main+0x4df4>)
 8008322:	2201      	movs	r2, #1
 8008324:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 8008326:	2000      	movs	r0, #0
 8008328:	f003 f872 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 800832c:	2032      	movs	r0, #50	; 0x32
 800832e:	f003 fc6d 	bl	800bc0c <HAL_Delay>
			}				
			break;
 8008332:	f001 bc7c 	b.w	8009c2e <main+0x66c6>
 8008336:	bf00      	nop
 8008338:	200003d9 	.word	0x200003d9
 800833c:	200003d1 	.word	0x200003d1
 8008340:	200003e0 	.word	0x200003e0
 8008344:	20000818 	.word	0x20000818
 8008348:	0801eafc 	.word	0x0801eafc
 800834c:	200003e8 	.word	0x200003e8
 8008350:	200003d8 	.word	0x200003d8
 8008354:	0801eaf4 	.word	0x0801eaf4
 8008358:	200003d0 	.word	0x200003d0
 800835c:	200003c4 	.word	0x200003c4
			
			/////////////////////////////////////////////////////////CASE SETDAY_MENU/////////////////////////////////////////////////////////////////				
			case SETDAY_MENU:
				reset_keys();
 8008360:	f7fa ff24 	bl	80031ac <reset_keys>
			if(KEYSW2_longpressed) KEYSW2_longpressed=0;
 8008364:	4bc6      	ldr	r3, [pc, #792]	; (8008680 <main+0x5118>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <main+0x4e0a>
 800836c:	4bc4      	ldr	r3, [pc, #784]	; (8008680 <main+0x5118>)
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
			if(KEYSW3_longpressed) KEYSW3_longpressed=0;
 8008372:	4bc4      	ldr	r3, [pc, #784]	; (8008684 <main+0x511c>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <main+0x4e18>
 800837a:	4bc2      	ldr	r3, [pc, #776]	; (8008684 <main+0x511c>)
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8008380:	4bc1      	ldr	r3, [pc, #772]	; (8008688 <main+0x5120>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a1 	beq.w	80084cc <main+0x4f64>
			{
				KEYSW1_shortpressed=0;
 800838a:	4bbf      	ldr	r3, [pc, #764]	; (8008688 <main+0x5120>)
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
				if(tmp_date.Date!=prev_uint16t)
 8008390:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008394:	3b28      	subs	r3, #40	; 0x28
 8008396:	789b      	ldrb	r3, [r3, #2]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800839e:	f102 020e 	add.w	r2, r2, #14
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d062      	beq.n	800846e <main+0x4f06>
				{
					HAL_RTC_SetDate(&hrtc,&tmp_date,RTC_FORMAT_BIN);
 80083a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083ac:	3b28      	subs	r3, #40	; 0x28
 80083ae:	2200      	movs	r2, #0
 80083b0:	4619      	mov	r1, r3
 80083b2:	48b6      	ldr	r0, [pc, #728]	; (800868c <main+0x5124>)
 80083b4:	f008 fb08 	bl	80109c8 <HAL_RTC_SetDate>
					HAL_RTC_GetDate(&hrtc, &cur_date, RTC_FORMAT_BIN);
 80083b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083bc:	3b24      	subs	r3, #36	; 0x24
 80083be:	2200      	movs	r2, #0
 80083c0:	4619      	mov	r1, r3
 80083c2:	48b2      	ldr	r0, [pc, #712]	; (800868c <main+0x5124>)
 80083c4:	f008 fba7 	bl	8010b16 <HAL_RTC_GetDate>
					HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 80083c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083cc:	3b20      	subs	r3, #32
 80083ce:	2200      	movs	r2, #0
 80083d0:	4619      	mov	r1, r3
 80083d2:	48ae      	ldr	r0, [pc, #696]	; (800868c <main+0x5124>)
 80083d4:	f008 fa9a 	bl	801090c <HAL_RTC_GetTime>

					//date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
					//Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 80083d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083dc:	3b24      	subs	r3, #36	; 0x24
 80083de:	789b      	ldrb	r3, [r3, #2]
 80083e0:	461a      	mov	r2, r3
 80083e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083e6:	3b1c      	subs	r3, #28
 80083e8:	609a      	str	r2, [r3, #8]
 80083ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80083ee:	3b24      	subs	r3, #36	; 0x24
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	461a      	mov	r2, r3
 80083f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80083f8:	3b1c      	subs	r3, #28
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008400:	3b24      	subs	r3, #36	; 0x24
 8008402:	78db      	ldrb	r3, [r3, #3]
 8008404:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8008408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800840c:	3b1c      	subs	r3, #28
 800840e:	601a      	str	r2, [r3, #0]
					if(Astro_daylighsaving(date)) //summer
 8008410:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008414:	3b1c      	subs	r3, #28
 8008416:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800841a:	f7f8 fe9b 	bl	8001154 <Astro_daylighsaving>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <main+0x4ed6>
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 8008424:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008428:	3b20      	subs	r3, #32
 800842a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800842e:	611a      	str	r2, [r3, #16]
						winter=0;
 8008430:	2300      	movs	r3, #0
 8008432:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008436:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 800843a:	7013      	strb	r3, [r2, #0]
 800843c:	e00a      	b.n	8008454 <main+0x4eec>
					}
					else
					{
						tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 800843e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008442:	3b20      	subs	r3, #32
 8008444:	2200      	movs	r2, #0
 8008446:	611a      	str	r2, [r3, #16]
						winter=1;
 8008448:	2301      	movs	r3, #1
 800844a:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800844e:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008452:	7013      	strb	r3, [r2, #0]
					}
					tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008454:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008458:	3b20      	subs	r3, #32
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
					HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 800845e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008462:	3b20      	subs	r3, #32
 8008464:	2200      	movs	r2, #0
 8008466:	4619      	mov	r1, r3
 8008468:	4888      	ldr	r0, [pc, #544]	; (800868c <main+0x5124>)
 800846a:	f008 f992 	bl	8010792 <HAL_RTC_SetTime>

				}
				index_disp=0;
 800846e:	2300      	movs	r3, #0
 8008470:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8008474:	f102 020c 	add.w	r2, r2, #12
 8008478:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 800847a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800847e:	3b20      	subs	r3, #32
 8008480:	2200      	movs	r2, #0
 8008482:	4619      	mov	r1, r3
 8008484:	4881      	ldr	r0, [pc, #516]	; (800868c <main+0x5124>)
 8008486:	f008 fa41 	bl	801090c <HAL_RTC_GetTime>
				sprintf(str_disp,"HR%02d",tmp_time.Hours);
 800848a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800848e:	3b20      	subs	r3, #32
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008498:	f103 0304 	add.w	r3, r3, #4
 800849c:	497c      	ldr	r1, [pc, #496]	; (8008690 <main+0x5128>)
 800849e:	4618      	mov	r0, r3
 80084a0:	f012 fbf6 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 80084a4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80084a8:	f103 0304 	add.w	r3, r3, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 ff79 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 80084b2:	2001      	movs	r0, #1
 80084b4:	f002 ffac 	bl	800b410 <Blink_segments>
				Menu_choice=SETHOUR_MENU;
 80084b8:	230f      	movs	r3, #15
 80084ba:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80084be:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80084c2:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80084c4:	4b73      	ldr	r3, [pc, #460]	; (8008694 <main+0x512c>)
 80084c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ca:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 80084cc:	4b72      	ldr	r3, [pc, #456]	; (8008698 <main+0x5130>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d05c      	beq.n	800858e <main+0x5026>
			{
				KEYSW2_shortpressed=0;
 80084d4:	4b70      	ldr	r3, [pc, #448]	; (8008698 <main+0x5130>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
				tmp_date.Date++;
 80084da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084de:	3b28      	subs	r3, #40	; 0x28
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	3301      	adds	r3, #1
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084ea:	3b28      	subs	r3, #40	; 0x28
 80084ec:	709a      	strb	r2, [r3, #2]
				if(tmp_date.Month==2)
 80084ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084f2:	3b28      	subs	r3, #40	; 0x28
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d11f      	bne.n	800853a <main+0x4fd2>
				{
					if(tmp_date.Date>gDaysInMonth[tmp_date.Month-1]+leap(tmp_date.Year+1980)) tmp_date.Date=1;
 80084fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084fe:	3b28      	subs	r3, #40	; 0x28
 8008500:	789b      	ldrb	r3, [r3, #2]
 8008502:	461c      	mov	r4, r3
 8008504:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008508:	3b28      	subs	r3, #40	; 0x28
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	3b01      	subs	r3, #1
 800850e:	4a63      	ldr	r2, [pc, #396]	; (800869c <main+0x5134>)
 8008510:	5cd3      	ldrb	r3, [r2, r3]
 8008512:	461d      	mov	r5, r3
 8008514:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008518:	3b28      	subs	r3, #40	; 0x28
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8008520:	4618      	mov	r0, r3
 8008522:	f7f8 fedd 	bl	80012e0 <leap>
 8008526:	4603      	mov	r3, r0
 8008528:	442b      	add	r3, r5
 800852a:	429c      	cmp	r4, r3
 800852c:	dd17      	ble.n	800855e <main+0x4ff6>
 800852e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008532:	3b28      	subs	r3, #40	; 0x28
 8008534:	2201      	movs	r2, #1
 8008536:	709a      	strb	r2, [r3, #2]
 8008538:	e011      	b.n	800855e <main+0x4ff6>
				}
				else
				{
					if(tmp_date.Date>gDaysInMonth[tmp_date.Month-1]) tmp_date.Date=1;
 800853a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800853e:	3b28      	subs	r3, #40	; 0x28
 8008540:	789a      	ldrb	r2, [r3, #2]
 8008542:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008546:	3b28      	subs	r3, #40	; 0x28
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	3b01      	subs	r3, #1
 800854c:	4953      	ldr	r1, [pc, #332]	; (800869c <main+0x5134>)
 800854e:	5ccb      	ldrb	r3, [r1, r3]
 8008550:	429a      	cmp	r2, r3
 8008552:	d904      	bls.n	800855e <main+0x4ff6>
 8008554:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008558:	3b28      	subs	r3, #40	; 0x28
 800855a:	2201      	movs	r2, #1
 800855c:	709a      	strb	r2, [r3, #2]
				}
				sprintf(str_disp,"D %02d",tmp_date.Date);
 800855e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008562:	3b28      	subs	r3, #40	; 0x28
 8008564:	789b      	ldrb	r3, [r3, #2]
 8008566:	461a      	mov	r2, r3
 8008568:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800856c:	f103 0304 	add.w	r3, r3, #4
 8008570:	494b      	ldr	r1, [pc, #300]	; (80086a0 <main+0x5138>)
 8008572:	4618      	mov	r0, r3
 8008574:	f012 fb8c 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008578:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800857c:	f103 0304 	add.w	r3, r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f002 ff0f 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008586:	4b43      	ldr	r3, [pc, #268]	; (8008694 <main+0x512c>)
 8008588:	f241 3288 	movw	r2, #5000	; 0x1388
 800858c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 800858e:	4b45      	ldr	r3, [pc, #276]	; (80086a4 <main+0x513c>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d05d      	beq.n	8008652 <main+0x50ea>
			{
				KEYSW3_shortpressed=0;
 8008596:	4b43      	ldr	r3, [pc, #268]	; (80086a4 <main+0x513c>)
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
				
				if(tmp_date.Month==2)
 800859c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085a0:	3b28      	subs	r3, #40	; 0x28
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d11f      	bne.n	80085e8 <main+0x5080>
				{
					if(tmp_date.Date<=1) tmp_date.Date=gDaysInMonth[tmp_date.Month-1]+leap(tmp_date.Year+1980)+1;
 80085a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085ac:	3b28      	subs	r3, #40	; 0x28
 80085ae:	789b      	ldrb	r3, [r3, #2]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d82c      	bhi.n	800860e <main+0x50a6>
 80085b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085b8:	3b28      	subs	r3, #40	; 0x28
 80085ba:	785b      	ldrb	r3, [r3, #1]
 80085bc:	3b01      	subs	r3, #1
 80085be:	4a37      	ldr	r2, [pc, #220]	; (800869c <main+0x5134>)
 80085c0:	5cd4      	ldrb	r4, [r2, r3]
 80085c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085c6:	3b28      	subs	r3, #40	; 0x28
 80085c8:	78db      	ldrb	r3, [r3, #3]
 80085ca:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7f8 fe86 	bl	80012e0 <leap>
 80085d4:	4603      	mov	r3, r0
 80085d6:	4423      	add	r3, r4
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	3301      	adds	r3, #1
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085e2:	3b28      	subs	r3, #40	; 0x28
 80085e4:	709a      	strb	r2, [r3, #2]
 80085e6:	e012      	b.n	800860e <main+0x50a6>
				}
				else
				{
					if(tmp_date.Date<=1) tmp_date.Date=gDaysInMonth[tmp_date.Month-1]+1;
 80085e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085ec:	3b28      	subs	r3, #40	; 0x28
 80085ee:	789b      	ldrb	r3, [r3, #2]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d80c      	bhi.n	800860e <main+0x50a6>
 80085f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80085f8:	3b28      	subs	r3, #40	; 0x28
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4a27      	ldr	r2, [pc, #156]	; (800869c <main+0x5134>)
 8008600:	5cd3      	ldrb	r3, [r2, r3]
 8008602:	3301      	adds	r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800860a:	3b28      	subs	r3, #40	; 0x28
 800860c:	709a      	strb	r2, [r3, #2]
				}
				tmp_date.Date--;
 800860e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008612:	3b28      	subs	r3, #40	; 0x28
 8008614:	789b      	ldrb	r3, [r3, #2]
 8008616:	3b01      	subs	r3, #1
 8008618:	b2da      	uxtb	r2, r3
 800861a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800861e:	3b28      	subs	r3, #40	; 0x28
 8008620:	709a      	strb	r2, [r3, #2]
				sprintf(str_disp,"D %02d",tmp_date.Date);
 8008622:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008626:	3b28      	subs	r3, #40	; 0x28
 8008628:	789b      	ldrb	r3, [r3, #2]
 800862a:	461a      	mov	r2, r3
 800862c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008630:	f103 0304 	add.w	r3, r3, #4
 8008634:	491a      	ldr	r1, [pc, #104]	; (80086a0 <main+0x5138>)
 8008636:	4618      	mov	r0, r3
 8008638:	f012 fb2a 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800863c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008640:	f103 0304 	add.w	r3, r3, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f002 fead 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 800864a:	4b12      	ldr	r3, [pc, #72]	; (8008694 <main+0x512c>)
 800864c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008650:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
			if(GOMAINMENU_counter==0)
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <main+0x512c>)
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f041 82ec 	bne.w	8009c34 <main+0x66cc>
			{
				Menu_choice=MAIN_MENU;
 800865c:	2300      	movs	r3, #0
 800865e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008662:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008666:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <main+0x5140>)
 800866a:	2201      	movs	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 800866e:	2000      	movs	r0, #0
 8008670:	f002 fece 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 8008674:	2032      	movs	r0, #50	; 0x32
 8008676:	f003 fac9 	bl	800bc0c <HAL_Delay>
			}				
			break;
 800867a:	f001 badb 	b.w	8009c34 <main+0x66cc>
 800867e:	bf00      	nop
 8008680:	200003d9 	.word	0x200003d9
 8008684:	200003d1 	.word	0x200003d1
 8008688:	200003e0 	.word	0x200003e0
 800868c:	20000818 	.word	0x20000818
 8008690:	0801eb04 	.word	0x0801eb04
 8008694:	200003e8 	.word	0x200003e8
 8008698:	200003d8 	.word	0x200003d8
 800869c:	20000000 	.word	0x20000000
 80086a0:	0801eafc 	.word	0x0801eafc
 80086a4:	200003d0 	.word	0x200003d0
 80086a8:	200003c4 	.word	0x200003c4
			/////////////////////////////////////////////////////////CASE SETHOUR_MENU/////////////////////////////////////////////////////////////////				
			case SETHOUR_MENU:
				reset_keys();
 80086ac:	f7fa fd7e 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 80086b0:	4bd1      	ldr	r3, [pc, #836]	; (80089f8 <main+0x5490>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d07c      	beq.n	80087b2 <main+0x524a>
			{
				KEYSW1_shortpressed=0;
 80086b8:	4bcf      	ldr	r3, [pc, #828]	; (80089f8 <main+0x5490>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
				date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 80086be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80086c2:	3b24      	subs	r3, #36	; 0x24
 80086c4:	789b      	ldrb	r3, [r3, #2]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086cc:	3b1c      	subs	r3, #28
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80086d4:	3b24      	subs	r3, #36	; 0x24
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	461a      	mov	r2, r3
 80086da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086de:	3b1c      	subs	r3, #28
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80086e6:	3b24      	subs	r3, #36	; 0x24
 80086e8:	78db      	ldrb	r3, [r3, #3]
 80086ea:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 80086ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086f2:	3b1c      	subs	r3, #28
 80086f4:	601a      	str	r2, [r3, #0]
				if(Astro_daylighsaving(date)) //summer
 80086f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086fa:	3b1c      	subs	r3, #28
 80086fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008700:	f7f8 fd28 	bl	8001154 <Astro_daylighsaving>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00c      	beq.n	8008724 <main+0x51bc>
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 800870a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800870e:	3b20      	subs	r3, #32
 8008710:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008714:	611a      	str	r2, [r3, #16]
					winter=0;
 8008716:	2300      	movs	r3, #0
 8008718:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 800871c:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008720:	7013      	strb	r3, [r2, #0]
 8008722:	e00a      	b.n	800873a <main+0x51d2>
				}
				else
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8008724:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008728:	3b20      	subs	r3, #32
 800872a:	2200      	movs	r2, #0
 800872c:	611a      	str	r2, [r3, #16]
					winter=1;
 800872e:	2301      	movs	r3, #1
 8008730:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008734:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008738:	7013      	strb	r3, [r2, #0]
				}

				tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800873a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800873e:	3b20      	subs	r3, #32
 8008740:	2200      	movs	r2, #0
 8008742:	60da      	str	r2, [r3, #12]
				HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008744:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008748:	3b20      	subs	r3, #32
 800874a:	2200      	movs	r2, #0
 800874c:	4619      	mov	r1, r3
 800874e:	48ab      	ldr	r0, [pc, #684]	; (80089fc <main+0x5494>)
 8008750:	f008 f81f 	bl	8010792 <HAL_RTC_SetTime>


				index_disp=0;
 8008754:	2300      	movs	r3, #0
 8008756:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800875a:	f102 020c 	add.w	r2, r2, #12
 800875e:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008760:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008764:	3b20      	subs	r3, #32
 8008766:	2200      	movs	r2, #0
 8008768:	4619      	mov	r1, r3
 800876a:	48a4      	ldr	r0, [pc, #656]	; (80089fc <main+0x5494>)
 800876c:	f008 f8ce 	bl	801090c <HAL_RTC_GetTime>
				sprintf(str_disp," %02d'",tmp_time.Minutes);
 8008770:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008774:	3b20      	subs	r3, #32
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	461a      	mov	r2, r3
 800877a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800877e:	f103 0304 	add.w	r3, r3, #4
 8008782:	499f      	ldr	r1, [pc, #636]	; (8008a00 <main+0x5498>)
 8008784:	4618      	mov	r0, r3
 8008786:	f012 fa83 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 800878a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800878e:	f103 0304 	add.w	r3, r3, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f002 fe06 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8008798:	2001      	movs	r0, #1
 800879a:	f002 fe39 	bl	800b410 <Blink_segments>
				Menu_choice=SETMIN_MENU;
 800879e:	2310      	movs	r3, #16
 80087a0:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80087a4:	f102 0237 	add.w	r2, r2, #55	; 0x37
 80087a8:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80087aa:	4b96      	ldr	r3, [pc, #600]	; (8008a04 <main+0x549c>)
 80087ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b0:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 80087b2:	4b95      	ldr	r3, [pc, #596]	; (8008a08 <main+0x54a0>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d02f      	beq.n	800881a <main+0x52b2>
			{
				KEYSW2_shortpressed=0;
 80087ba:	4b93      	ldr	r3, [pc, #588]	; (8008a08 <main+0x54a0>)
 80087bc:	2200      	movs	r2, #0
 80087be:	701a      	strb	r2, [r3, #0]
				tmp_time.Hours++;
 80087c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087c4:	3b20      	subs	r3, #32
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087d0:	3b20      	subs	r3, #32
 80087d2:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Hours>23) tmp_time.Hours=0;
 80087d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087d8:	3b20      	subs	r3, #32
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b17      	cmp	r3, #23
 80087de:	d904      	bls.n	80087ea <main+0x5282>
 80087e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087e4:	3b20      	subs	r3, #32
 80087e6:	2200      	movs	r2, #0
 80087e8:	701a      	strb	r2, [r3, #0]
				sprintf(str_disp,"HR%02d",tmp_time.Hours);
 80087ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087ee:	3b20      	subs	r3, #32
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80087f8:	f103 0304 	add.w	r3, r3, #4
 80087fc:	4983      	ldr	r1, [pc, #524]	; (8008a0c <main+0x54a4>)
 80087fe:	4618      	mov	r0, r3
 8008800:	f012 fa46 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008804:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008808:	f103 0304 	add.w	r3, r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f002 fdc9 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008812:	4b7c      	ldr	r3, [pc, #496]	; (8008a04 <main+0x549c>)
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 800881a:	4b7d      	ldr	r3, [pc, #500]	; (8008a10 <main+0x54a8>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d02f      	beq.n	8008882 <main+0x531a>
			{
				KEYSW2_longpressed=0;
 8008822:	4b7b      	ldr	r3, [pc, #492]	; (8008a10 <main+0x54a8>)
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
				tmp_time.Hours+=5;
 8008828:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800882c:	3b20      	subs	r3, #32
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	3305      	adds	r3, #5
 8008832:	b2da      	uxtb	r2, r3
 8008834:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008838:	3b20      	subs	r3, #32
 800883a:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Hours>23) tmp_time.Hours=0;
 800883c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008840:	3b20      	subs	r3, #32
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b17      	cmp	r3, #23
 8008846:	d904      	bls.n	8008852 <main+0x52ea>
 8008848:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800884c:	3b20      	subs	r3, #32
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
				sprintf(str_disp,"HR%02d",tmp_time.Hours);
 8008852:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008856:	3b20      	subs	r3, #32
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008860:	f103 0304 	add.w	r3, r3, #4
 8008864:	4969      	ldr	r1, [pc, #420]	; (8008a0c <main+0x54a4>)
 8008866:	4618      	mov	r0, r3
 8008868:	f012 fa12 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800886c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008870:	f103 0304 	add.w	r3, r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f002 fd95 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800887a:	4b62      	ldr	r3, [pc, #392]	; (8008a04 <main+0x549c>)
 800887c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008880:	801a      	strh	r2, [r3, #0]
			}			
			if(KEYSW3_shortpressed)//dn
 8008882:	4b64      	ldr	r3, [pc, #400]	; (8008a14 <main+0x54ac>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d02f      	beq.n	80088ea <main+0x5382>
			{
				KEYSW3_shortpressed=0;
 800888a:	4b62      	ldr	r3, [pc, #392]	; (8008a14 <main+0x54ac>)
 800888c:	2200      	movs	r2, #0
 800888e:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Hours<=0) tmp_time.Hours=24;
 8008890:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008894:	3b20      	subs	r3, #32
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d104      	bne.n	80088a6 <main+0x533e>
 800889c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088a0:	3b20      	subs	r3, #32
 80088a2:	2218      	movs	r2, #24
 80088a4:	701a      	strb	r2, [r3, #0]
				tmp_time.Hours--;
 80088a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088aa:	3b20      	subs	r3, #32
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088b6:	3b20      	subs	r3, #32
 80088b8:	701a      	strb	r2, [r3, #0]
				sprintf(str_disp,"HR%02d",tmp_time.Hours);
 80088ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088be:	3b20      	subs	r3, #32
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80088c8:	f103 0304 	add.w	r3, r3, #4
 80088cc:	494f      	ldr	r1, [pc, #316]	; (8008a0c <main+0x54a4>)
 80088ce:	4618      	mov	r0, r3
 80088d0:	f012 f9de 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 80088d4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80088d8:	f103 0304 	add.w	r3, r3, #4
 80088dc:	4618      	mov	r0, r3
 80088de:	f002 fd61 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 80088e2:	4b48      	ldr	r3, [pc, #288]	; (8008a04 <main+0x549c>)
 80088e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e8:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 80088ea:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <main+0x54b0>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d02f      	beq.n	8008952 <main+0x53ea>
			{
				KEYSW3_longpressed=0;
 80088f2:	4b49      	ldr	r3, [pc, #292]	; (8008a18 <main+0x54b0>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Hours<=5) tmp_time.Hours=28;
 80088f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80088fc:	3b20      	subs	r3, #32
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b05      	cmp	r3, #5
 8008902:	d804      	bhi.n	800890e <main+0x53a6>
 8008904:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008908:	3b20      	subs	r3, #32
 800890a:	221c      	movs	r2, #28
 800890c:	701a      	strb	r2, [r3, #0]
				tmp_time.Hours-=5;
 800890e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008912:	3b20      	subs	r3, #32
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	3b05      	subs	r3, #5
 8008918:	b2da      	uxtb	r2, r3
 800891a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800891e:	3b20      	subs	r3, #32
 8008920:	701a      	strb	r2, [r3, #0]
				sprintf(str_disp,"HR%02d",tmp_time.Hours);
 8008922:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008926:	3b20      	subs	r3, #32
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008930:	f103 0304 	add.w	r3, r3, #4
 8008934:	4935      	ldr	r1, [pc, #212]	; (8008a0c <main+0x54a4>)
 8008936:	4618      	mov	r0, r3
 8008938:	f012 f9aa 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 800893c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008940:	f103 0304 	add.w	r3, r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f002 fd2d 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 800894a:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <main+0x549c>)
 800894c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008950:	801a      	strh	r2, [r3, #0]
			}
			
			/////////////////////////
			if(GOMAINMENU_counter==0)
 8008952:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <main+0x549c>)
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f041 816f 	bne.w	8009c3a <main+0x66d2>
			{
				Menu_choice=MAIN_MENU;
 800895c:	2300      	movs	r3, #0
 800895e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008962:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008966:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 8008968:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <main+0x54b4>)
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 800896e:	2000      	movs	r0, #0
 8008970:	f002 fd4e 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 8008974:	2032      	movs	r0, #50	; 0x32
 8008976:	f003 f949 	bl	800bc0c <HAL_Delay>
			}				
			break;
 800897a:	f001 b95e 	b.w	8009c3a <main+0x66d2>

				/////////////////////////////////////////////////////////CASE SETMIN_MENU/////////////////////////////////////////////////////////////////				
			case SETMIN_MENU:
				reset_keys();
 800897e:	f7fa fc15 	bl	80031ac <reset_keys>
	
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8008982:	4b1d      	ldr	r3, [pc, #116]	; (80089f8 <main+0x5490>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 8091 	beq.w	8008aae <main+0x5546>
			{
				KEYSW1_shortpressed=0;
 800898c:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <main+0x5490>)
 800898e:	2200      	movs	r2, #0
 8008990:	701a      	strb	r2, [r3, #0]
				date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8008992:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008996:	3b24      	subs	r3, #36	; 0x24
 8008998:	789b      	ldrb	r3, [r3, #2]
 800899a:	461a      	mov	r2, r3
 800899c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089a0:	3b1c      	subs	r3, #28
 80089a2:	609a      	str	r2, [r3, #8]
 80089a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80089a8:	3b24      	subs	r3, #36	; 0x24
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	461a      	mov	r2, r3
 80089ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089b2:	3b1c      	subs	r3, #28
 80089b4:	605a      	str	r2, [r3, #4]
 80089b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80089ba:	3b24      	subs	r3, #36	; 0x24
 80089bc:	78db      	ldrb	r3, [r3, #3]
 80089be:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 80089c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089c6:	3b1c      	subs	r3, #28
 80089c8:	601a      	str	r2, [r3, #0]

				if(Astro_daylighsaving(date)) //summer
 80089ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089ce:	3b1c      	subs	r3, #28
 80089d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089d4:	f7f8 fbbe 	bl	8001154 <Astro_daylighsaving>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d020      	beq.n	8008a20 <main+0x54b8>
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 80089de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80089e2:	3b20      	subs	r3, #32
 80089e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80089e8:	611a      	str	r2, [r3, #16]
					winter=0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80089f0:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 80089f4:	7013      	strb	r3, [r2, #0]
 80089f6:	e01e      	b.n	8008a36 <main+0x54ce>
 80089f8:	200003e0 	.word	0x200003e0
 80089fc:	20000818 	.word	0x20000818
 8008a00:	0801eb0c 	.word	0x0801eb0c
 8008a04:	200003e8 	.word	0x200003e8
 8008a08:	200003d8 	.word	0x200003d8
 8008a0c:	0801eb04 	.word	0x0801eb04
 8008a10:	200003d9 	.word	0x200003d9
 8008a14:	200003d0 	.word	0x200003d0
 8008a18:	200003d1 	.word	0x200003d1
 8008a1c:	200003c4 	.word	0x200003c4
				}
				else
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8008a20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a24:	3b20      	subs	r3, #32
 8008a26:	2200      	movs	r2, #0
 8008a28:	611a      	str	r2, [r3, #16]
					winter=1;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008a30:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008a34:	7013      	strb	r3, [r2, #0]
				}

				tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008a36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a3a:	3b20      	subs	r3, #32
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	60da      	str	r2, [r3, #12]
				HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008a40:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a44:	3b20      	subs	r3, #32
 8008a46:	2200      	movs	r2, #0
 8008a48:	4619      	mov	r1, r3
 8008a4a:	48af      	ldr	r0, [pc, #700]	; (8008d08 <main+0x57a0>)
 8008a4c:	f007 fea1 	bl	8010792 <HAL_RTC_SetTime>

				index_disp=0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8008a56:	f102 020c 	add.w	r2, r2, #12
 8008a5a:	7013      	strb	r3, [r2, #0]
				HAL_RTC_GetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008a5c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a60:	3b20      	subs	r3, #32
 8008a62:	2200      	movs	r2, #0
 8008a64:	4619      	mov	r1, r3
 8008a66:	48a8      	ldr	r0, [pc, #672]	; (8008d08 <main+0x57a0>)
 8008a68:	f007 ff50 	bl	801090c <HAL_RTC_GetTime>
				sprintf(str_disp," %02d\"",tmp_time.Seconds);
 8008a6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008a70:	3b20      	subs	r3, #32
 8008a72:	789b      	ldrb	r3, [r3, #2]
 8008a74:	461a      	mov	r2, r3
 8008a76:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008a7a:	f103 0304 	add.w	r3, r3, #4
 8008a7e:	49a3      	ldr	r1, [pc, #652]	; (8008d0c <main+0x57a4>)
 8008a80:	4618      	mov	r0, r3
 8008a82:	f012 f905 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 8008a86:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008a8a:	f103 0304 	add.w	r3, r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f002 fc88 	bl	800b3a4 <print_segment>
				Blink_segments(1);					
 8008a94:	2001      	movs	r0, #1
 8008a96:	f002 fcbb 	bl	800b410 <Blink_segments>
				Menu_choice=SETSEC_MENU;
 8008a9a:	2311      	movs	r3, #17
 8008a9c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008aa0:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008aa4:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008aa6:	4b9a      	ldr	r3, [pc, #616]	; (8008d10 <main+0x57a8>)
 8008aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aac:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8008aae:	4b99      	ldr	r3, [pc, #612]	; (8008d14 <main+0x57ac>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d02f      	beq.n	8008b16 <main+0x55ae>
			{
				KEYSW2_shortpressed=0;
 8008ab6:	4b97      	ldr	r3, [pc, #604]	; (8008d14 <main+0x57ac>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
				tmp_time.Minutes++;
 8008abc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ac0:	3b20      	subs	r3, #32
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008acc:	3b20      	subs	r3, #32
 8008ace:	705a      	strb	r2, [r3, #1]
				if(tmp_time.Minutes>59) tmp_time.Minutes=0;
 8008ad0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ad4:	3b20      	subs	r3, #32
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b3b      	cmp	r3, #59	; 0x3b
 8008ada:	d904      	bls.n	8008ae6 <main+0x557e>
 8008adc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ae0:	3b20      	subs	r3, #32
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp," %02d'",tmp_time.Minutes);
 8008ae6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008aea:	3b20      	subs	r3, #32
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008af4:	f103 0304 	add.w	r3, r3, #4
 8008af8:	4987      	ldr	r1, [pc, #540]	; (8008d18 <main+0x57b0>)
 8008afa:	4618      	mov	r0, r3
 8008afc:	f012 f8c8 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008b00:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008b04:	f103 0304 	add.w	r3, r3, #4
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f002 fc4b 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008b0e:	4b80      	ldr	r3, [pc, #512]	; (8008d10 <main+0x57a8>)
 8008b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b14:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8008b16:	4b81      	ldr	r3, [pc, #516]	; (8008d1c <main+0x57b4>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d02f      	beq.n	8008b7e <main+0x5616>
			{
				KEYSW3_shortpressed=0;
 8008b1e:	4b7f      	ldr	r3, [pc, #508]	; (8008d1c <main+0x57b4>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Minutes<=0) tmp_time.Minutes=60;
 8008b24:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b28:	3b20      	subs	r3, #32
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <main+0x55d2>
 8008b30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b34:	3b20      	subs	r3, #32
 8008b36:	223c      	movs	r2, #60	; 0x3c
 8008b38:	705a      	strb	r2, [r3, #1]
				tmp_time.Minutes--;
 8008b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b3e:	3b20      	subs	r3, #32
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b4a:	3b20      	subs	r3, #32
 8008b4c:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp," %02d'",tmp_time.Minutes);
 8008b4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b52:	3b20      	subs	r3, #32
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	461a      	mov	r2, r3
 8008b58:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008b5c:	f103 0304 	add.w	r3, r3, #4
 8008b60:	496d      	ldr	r1, [pc, #436]	; (8008d18 <main+0x57b0>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f012 f894 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008b68:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008b6c:	f103 0304 	add.w	r3, r3, #4
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fc17 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8008b76:	4b66      	ldr	r3, [pc, #408]	; (8008d10 <main+0x57a8>)
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8008b7e:	4b68      	ldr	r3, [pc, #416]	; (8008d20 <main+0x57b8>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d034      	beq.n	8008bf0 <main+0x5688>
			{
				KEYSW2_longpressed=0;
 8008b86:	4b66      	ldr	r3, [pc, #408]	; (8008d20 <main+0x57b8>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
				tmp_time.Minutes+=10;
 8008b8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b90:	3b20      	subs	r3, #32
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	330a      	adds	r3, #10
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008b9c:	3b20      	subs	r3, #32
 8008b9e:	705a      	strb	r2, [r3, #1]
				if(tmp_time.Minutes>59) tmp_time.Minutes=tmp_time.Minutes-59;				
 8008ba0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ba4:	3b20      	subs	r3, #32
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	2b3b      	cmp	r3, #59	; 0x3b
 8008baa:	d909      	bls.n	8008bc0 <main+0x5658>
 8008bac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008bb0:	3b20      	subs	r3, #32
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	3b3b      	subs	r3, #59	; 0x3b
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008bbc:	3b20      	subs	r3, #32
 8008bbe:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp," %02d'",tmp_time.Minutes);
 8008bc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008bc4:	3b20      	subs	r3, #32
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008bce:	f103 0304 	add.w	r3, r3, #4
 8008bd2:	4951      	ldr	r1, [pc, #324]	; (8008d18 <main+0x57b0>)
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f012 f85b 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008bda:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008bde:	f103 0304 	add.w	r3, r3, #4
 8008be2:	4618      	mov	r0, r3
 8008be4:	f002 fbde 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008be8:	4b49      	ldr	r3, [pc, #292]	; (8008d10 <main+0x57a8>)
 8008bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bee:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8008bf0:	4b4c      	ldr	r3, [pc, #304]	; (8008d24 <main+0x57bc>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d034      	beq.n	8008c62 <main+0x56fa>
			{
				KEYSW3_longpressed=0;
 8008bf8:	4b4a      	ldr	r3, [pc, #296]	; (8008d24 <main+0x57bc>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Minutes<10) tmp_time.Minutes=tmp_time.Minutes+60;
 8008bfe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c02:	3b20      	subs	r3, #32
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d809      	bhi.n	8008c1e <main+0x56b6>
 8008c0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c0e:	3b20      	subs	r3, #32
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	333c      	adds	r3, #60	; 0x3c
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c1a:	3b20      	subs	r3, #32
 8008c1c:	705a      	strb	r2, [r3, #1]
				tmp_time.Minutes-=10;
 8008c1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c22:	3b20      	subs	r3, #32
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	3b0a      	subs	r3, #10
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c2e:	3b20      	subs	r3, #32
 8008c30:	705a      	strb	r2, [r3, #1]
				sprintf(str_disp," %02d'",tmp_time.Minutes);
 8008c32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008c36:	3b20      	subs	r3, #32
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008c40:	f103 0304 	add.w	r3, r3, #4
 8008c44:	4934      	ldr	r1, [pc, #208]	; (8008d18 <main+0x57b0>)
 8008c46:	4618      	mov	r0, r3
 8008c48:	f012 f822 	bl	801ac90 <siprintf>
				print_segment(str_disp);	
 8008c4c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008c50:	f103 0304 	add.w	r3, r3, #4
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fba5 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8008c5a:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <main+0x57a8>)
 8008c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c60:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
			if(GOMAINMENU_counter==0)
 8008c62:	4b2b      	ldr	r3, [pc, #172]	; (8008d10 <main+0x57a8>)
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f040 87ea 	bne.w	8009c40 <main+0x66d8>
			{
				Menu_choice=MAIN_MENU;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008c72:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008c76:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 8008c78:	4b2b      	ldr	r3, [pc, #172]	; (8008d28 <main+0x57c0>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 8008c7e:	2000      	movs	r0, #0
 8008c80:	f002 fbc6 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 8008c84:	2032      	movs	r0, #50	; 0x32
 8008c86:	f002 ffc1 	bl	800bc0c <HAL_Delay>
			}				
			break;
 8008c8a:	f000 bfd9 	b.w	8009c40 <main+0x66d8>
			/////////////////////////////////////////////////////////CASE SETSEC_MENU/////////////////////////////////////////////////////////////////				
			case SETSEC_MENU:
				reset_keys();
 8008c8e:	f7fa fa8d 	bl	80031ac <reset_keys>
			/////////////////////////////				
			if(KEYSW1_shortpressed) //set
 8008c92:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <main+0x57c4>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 808b 	beq.w	8008db2 <main+0x584a>
			{
				KEYSW1_shortpressed=0;
 8008c9c:	4b23      	ldr	r3, [pc, #140]	; (8008d2c <main+0x57c4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
				date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8008ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ca6:	3b24      	subs	r3, #36	; 0x24
 8008ca8:	789b      	ldrb	r3, [r3, #2]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cb0:	3b1c      	subs	r3, #28
 8008cb2:	609a      	str	r2, [r3, #8]
 8008cb4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008cb8:	3b24      	subs	r3, #36	; 0x24
 8008cba:	785b      	ldrb	r3, [r3, #1]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cc2:	3b1c      	subs	r3, #28
 8008cc4:	605a      	str	r2, [r3, #4]
 8008cc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008cca:	3b24      	subs	r3, #36	; 0x24
 8008ccc:	78db      	ldrb	r3, [r3, #3]
 8008cce:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8008cd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cd6:	3b1c      	subs	r3, #28
 8008cd8:	601a      	str	r2, [r3, #0]
				if(Astro_daylighsaving(date)) //summer
 8008cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008cde:	3b1c      	subs	r3, #28
 8008ce0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ce4:	f7f8 fa36 	bl	8001154 <Astro_daylighsaving>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d020      	beq.n	8008d30 <main+0x57c8>
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_SET;
 8008cee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008cf2:	3b20      	subs	r3, #32
 8008cf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008cf8:	611a      	str	r2, [r3, #16]
					winter=0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008d00:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008d04:	7013      	strb	r3, [r2, #0]
 8008d06:	e01e      	b.n	8008d46 <main+0x57de>
 8008d08:	20000818 	.word	0x20000818
 8008d0c:	0801eb14 	.word	0x0801eb14
 8008d10:	200003e8 	.word	0x200003e8
 8008d14:	200003d8 	.word	0x200003d8
 8008d18:	0801eb0c 	.word	0x0801eb0c
 8008d1c:	200003d0 	.word	0x200003d0
 8008d20:	200003d9 	.word	0x200003d9
 8008d24:	200003d1 	.word	0x200003d1
 8008d28:	200003c4 	.word	0x200003c4
 8008d2c:	200003e0 	.word	0x200003e0
				}
				else
				{
					tmp_time.StoreOperation = RTC_STOREOPERATION_RESET;
 8008d30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d34:	3b20      	subs	r3, #32
 8008d36:	2200      	movs	r2, #0
 8008d38:	611a      	str	r2, [r3, #16]
					winter=1;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008d40:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8008d44:	7013      	strb	r3, [r2, #0]
				}

				tmp_time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008d46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d4a:	3b20      	subs	r3, #32
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	60da      	str	r2, [r3, #12]
				HAL_RTC_SetTime(&hrtc,&tmp_time,RTC_FORMAT_BIN);
 8008d50:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d54:	3b20      	subs	r3, #32
 8008d56:	2200      	movs	r2, #0
 8008d58:	4619      	mov	r1, r3
 8008d5a:	48a8      	ldr	r0, [pc, #672]	; (8008ffc <main+0x5a94>)
 8008d5c:	f007 fd19 	bl	8010792 <HAL_RTC_SetTime>
				
				sprintf(str_disp,"A.%4.1f",LAT_Value);prev_double=LAT_Value;
 8008d60:	4ba7      	ldr	r3, [pc, #668]	; (8009000 <main+0x5a98>)
 8008d62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d66:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8008d6a:	f100 0004 	add.w	r0, r0, #4
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4623      	mov	r3, r4
 8008d72:	49a4      	ldr	r1, [pc, #656]	; (8009004 <main+0x5a9c>)
 8008d74:	f011 ff8c 	bl	801ac90 <siprintf>
 8008d78:	4ba1      	ldr	r3, [pc, #644]	; (8009000 <main+0x5a98>)
 8008d7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008d7e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8008d82:	f102 0210 	add.w	r2, r2, #16
 8008d86:	e9c2 3400 	strd	r3, r4, [r2]
				print_segment(str_disp);
 8008d8a:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008d8e:	f103 0304 	add.w	r3, r3, #4
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 fb06 	bl	800b3a4 <print_segment>
				Blink_segments(1);
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f002 fb39 	bl	800b410 <Blink_segments>
				Menu_choice=SETLAT_MENU;
 8008d9e:	2312      	movs	r3, #18
 8008da0:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008da4:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008da8:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008daa:	4b97      	ldr	r3, [pc, #604]	; (8009008 <main+0x5aa0>)
 8008dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db0:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8008db2:	4b96      	ldr	r3, [pc, #600]	; (800900c <main+0x5aa4>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d02f      	beq.n	8008e1a <main+0x58b2>
			{
				KEYSW2_shortpressed=0;
 8008dba:	4b94      	ldr	r3, [pc, #592]	; (800900c <main+0x5aa4>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
				tmp_time.Seconds++;
 8008dc0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dc4:	3b20      	subs	r3, #32
 8008dc6:	789b      	ldrb	r3, [r3, #2]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dd0:	3b20      	subs	r3, #32
 8008dd2:	709a      	strb	r2, [r3, #2]
				if(tmp_time.Seconds>59) tmp_time.Seconds=0;
 8008dd4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dd8:	3b20      	subs	r3, #32
 8008dda:	789b      	ldrb	r3, [r3, #2]
 8008ddc:	2b3b      	cmp	r3, #59	; 0x3b
 8008dde:	d904      	bls.n	8008dea <main+0x5882>
 8008de0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008de4:	3b20      	subs	r3, #32
 8008de6:	2200      	movs	r2, #0
 8008de8:	709a      	strb	r2, [r3, #2]
				sprintf(str_disp," %02d\"",tmp_time.Seconds);
 8008dea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dee:	3b20      	subs	r3, #32
 8008df0:	789b      	ldrb	r3, [r3, #2]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008df8:	f103 0304 	add.w	r3, r3, #4
 8008dfc:	4984      	ldr	r1, [pc, #528]	; (8009010 <main+0x5aa8>)
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f011 ff46 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008e04:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008e08:	f103 0304 	add.w	r3, r3, #4
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f002 fac9 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008e12:	4b7d      	ldr	r3, [pc, #500]	; (8009008 <main+0x5aa0>)
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 8008e1a:	4b7e      	ldr	r3, [pc, #504]	; (8009014 <main+0x5aac>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d02f      	beq.n	8008e82 <main+0x591a>
			{
				KEYSW3_shortpressed=0;
 8008e22:	4b7c      	ldr	r3, [pc, #496]	; (8009014 <main+0x5aac>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Seconds<=0) tmp_time.Seconds=60;
 8008e28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e2c:	3b20      	subs	r3, #32
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d104      	bne.n	8008e3e <main+0x58d6>
 8008e34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e38:	3b20      	subs	r3, #32
 8008e3a:	223c      	movs	r2, #60	; 0x3c
 8008e3c:	709a      	strb	r2, [r3, #2]
				tmp_time.Seconds--;
 8008e3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e42:	3b20      	subs	r3, #32
 8008e44:	789b      	ldrb	r3, [r3, #2]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e4e:	3b20      	subs	r3, #32
 8008e50:	709a      	strb	r2, [r3, #2]
				sprintf(str_disp," %02d\"",tmp_time.Seconds);
 8008e52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e56:	3b20      	subs	r3, #32
 8008e58:	789b      	ldrb	r3, [r3, #2]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008e60:	f103 0304 	add.w	r3, r3, #4
 8008e64:	496a      	ldr	r1, [pc, #424]	; (8009010 <main+0x5aa8>)
 8008e66:	4618      	mov	r0, r3
 8008e68:	f011 ff12 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008e6c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008e70:	f103 0304 	add.w	r3, r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fa95 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8008e7a:	4b63      	ldr	r3, [pc, #396]	; (8009008 <main+0x5aa0>)
 8008e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e80:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8008e82:	4b65      	ldr	r3, [pc, #404]	; (8009018 <main+0x5ab0>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d034      	beq.n	8008ef4 <main+0x598c>
			{
				KEYSW2_longpressed=0;
 8008e8a:	4b63      	ldr	r3, [pc, #396]	; (8009018 <main+0x5ab0>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	701a      	strb	r2, [r3, #0]
				tmp_time.Seconds+=10;
 8008e90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008e94:	3b20      	subs	r3, #32
 8008e96:	789b      	ldrb	r3, [r3, #2]
 8008e98:	330a      	adds	r3, #10
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ea0:	3b20      	subs	r3, #32
 8008ea2:	709a      	strb	r2, [r3, #2]
				if(tmp_time.Seconds>59) tmp_time.Seconds=tmp_time.Seconds-59;				
 8008ea4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ea8:	3b20      	subs	r3, #32
 8008eaa:	789b      	ldrb	r3, [r3, #2]
 8008eac:	2b3b      	cmp	r3, #59	; 0x3b
 8008eae:	d909      	bls.n	8008ec4 <main+0x595c>
 8008eb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008eb4:	3b20      	subs	r3, #32
 8008eb6:	789b      	ldrb	r3, [r3, #2]
 8008eb8:	3b3b      	subs	r3, #59	; 0x3b
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ec0:	3b20      	subs	r3, #32
 8008ec2:	709a      	strb	r2, [r3, #2]
				sprintf(str_disp," %02d\"",tmp_time.Seconds);
 8008ec4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ec8:	3b20      	subs	r3, #32
 8008eca:	789b      	ldrb	r3, [r3, #2]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008ed2:	f103 0304 	add.w	r3, r3, #4
 8008ed6:	494e      	ldr	r1, [pc, #312]	; (8009010 <main+0x5aa8>)
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f011 fed9 	bl	801ac90 <siprintf>
				print_segment(str_disp);				
 8008ede:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008ee2:	f103 0304 	add.w	r3, r3, #4
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 fa5c 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8008eec:	4b46      	ldr	r3, [pc, #280]	; (8009008 <main+0x5aa0>)
 8008eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef2:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 8008ef4:	4b49      	ldr	r3, [pc, #292]	; (800901c <main+0x5ab4>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d034      	beq.n	8008f66 <main+0x59fe>
			{
				KEYSW3_longpressed=0;
 8008efc:	4b47      	ldr	r3, [pc, #284]	; (800901c <main+0x5ab4>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
				if(tmp_time.Seconds<10) tmp_time.Seconds=tmp_time.Seconds+60;
 8008f02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f06:	3b20      	subs	r3, #32
 8008f08:	789b      	ldrb	r3, [r3, #2]
 8008f0a:	2b09      	cmp	r3, #9
 8008f0c:	d809      	bhi.n	8008f22 <main+0x59ba>
 8008f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f12:	3b20      	subs	r3, #32
 8008f14:	789b      	ldrb	r3, [r3, #2]
 8008f16:	333c      	adds	r3, #60	; 0x3c
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f1e:	3b20      	subs	r3, #32
 8008f20:	709a      	strb	r2, [r3, #2]
				tmp_time.Seconds-=10;
 8008f22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f26:	3b20      	subs	r3, #32
 8008f28:	789b      	ldrb	r3, [r3, #2]
 8008f2a:	3b0a      	subs	r3, #10
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f32:	3b20      	subs	r3, #32
 8008f34:	709a      	strb	r2, [r3, #2]
				sprintf(str_disp," %02d\"",tmp_time.Seconds);
 8008f36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008f3a:	3b20      	subs	r3, #32
 8008f3c:	789b      	ldrb	r3, [r3, #2]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008f44:	f103 0304 	add.w	r3, r3, #4
 8008f48:	4931      	ldr	r1, [pc, #196]	; (8009010 <main+0x5aa8>)
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f011 fea0 	bl	801ac90 <siprintf>
				print_segment(str_disp);	
 8008f50:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8008f54:	f103 0304 	add.w	r3, r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f002 fa23 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;				
 8008f5e:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <main+0x5aa0>)
 8008f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f64:	801a      	strh	r2, [r3, #0]
			}
			/////////////////////////
			if(GOMAINMENU_counter==0)
 8008f66:	4b28      	ldr	r3, [pc, #160]	; (8009008 <main+0x5aa0>)
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f040 866b 	bne.w	8009c46 <main+0x66de>
			{
				Menu_choice=MAIN_MENU;
 8008f70:	2300      	movs	r3, #0
 8008f72:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8008f76:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8008f7a:	7013      	strb	r3, [r2, #0]
				flag_1s=1;
 8008f7c:	4b28      	ldr	r3, [pc, #160]	; (8009020 <main+0x5ab8>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	701a      	strb	r2, [r3, #0]
				Blink_segments(0);
 8008f82:	2000      	movs	r0, #0
 8008f84:	f002 fa44 	bl	800b410 <Blink_segments>
				HAL_Delay(50);
 8008f88:	2032      	movs	r0, #50	; 0x32
 8008f8a:	f002 fe3f 	bl	800bc0c <HAL_Delay>
			}				
			break;
 8008f8e:	f000 be5a 	b.w	8009c46 <main+0x66de>
				/////////////////////////////////////////////////////////CASE SETLAT_MENU//////////////////////////////////////////////////////////////////
			case SETLAT_MENU:
				reset_keys();
 8008f92:	f7fa f90b 	bl	80031ac <reset_keys>
			/////////////////////////////
			if(KEYSW1_shortpressed) //set
 8008f96:	4b23      	ldr	r3, [pc, #140]	; (8009024 <main+0x5abc>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80bb 	beq.w	8009116 <main+0x5bae>
			{
				KEYSW1_shortpressed=0;
 8008fa0:	4b20      	ldr	r3, [pc, #128]	; (8009024 <main+0x5abc>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
				if(prev_double!=LAT_Value)
 8008fa6:	4b16      	ldr	r3, [pc, #88]	; (8009000 <main+0x5a98>)
 8008fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fac:	461a      	mov	r2, r3
 8008fae:	4623      	mov	r3, r4
 8008fb0:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 8008fb4:	f101 0110 	add.w	r1, r1, #16
 8008fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fbc:	f7f7 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d178      	bne.n	80090b8 <main+0x5b50>
				{

					if(EE_WriteVariable(LAT_ADDRESS,(uint16_t)(LAT_Value*10.0))!=HAL_OK)
 8008fc6:	4b0e      	ldr	r3, [pc, #56]	; (8009000 <main+0x5a98>)
 8008fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fcc:	f04f 0200 	mov.w	r2, #0
 8008fd0:	4b15      	ldr	r3, [pc, #84]	; (8009028 <main+0x5ac0>)
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	4618      	mov	r0, r3
 8008fdc:	4621      	mov	r1, r4
 8008fde:	f7f7 fde3 	bl	8000ba8 <__aeabi_d2uiz>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	201a      	movs	r0, #26
 8008fea:	f7f9 fbb9 	bl	8002760 <EE_WriteVariable>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01d      	beq.n	8009030 <main+0x5ac8>
					{
						print_segment("ER12");
 8008ff4:	480d      	ldr	r0, [pc, #52]	; (800902c <main+0x5ac4>)
 8008ff6:	f002 f9d5 	bl	800b3a4 <print_segment>
						while(1);
 8008ffa:	e7fe      	b.n	8008ffa <main+0x5a92>
 8008ffc:	20000818 	.word	0x20000818
 8009000:	20000790 	.word	0x20000790
 8009004:	0801eb1c 	.word	0x0801eb1c
 8009008:	200003e8 	.word	0x200003e8
 800900c:	200003d8 	.word	0x200003d8
 8009010:	0801eb14 	.word	0x0801eb14
 8009014:	200003d0 	.word	0x200003d0
 8009018:	200003d9 	.word	0x200003d9
 800901c:	200003d1 	.word	0x200003d1
 8009020:	200003c4 	.word	0x200003c4
 8009024:	200003e0 	.word	0x200003e0
 8009028:	40240000 	.word	0x40240000
 800902c:	0801e994 	.word	0x0801e994
					}
					HAL_RTC_GetDate(&hrtc, &cur_date, RTC_FORMAT_BIN);
 8009030:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009034:	3b24      	subs	r3, #36	; 0x24
 8009036:	2200      	movs	r2, #0
 8009038:	4619      	mov	r1, r3
 800903a:	48bb      	ldr	r0, [pc, #748]	; (8009328 <main+0x5dc0>)
 800903c:	f007 fd6b 	bl	8010b16 <HAL_RTC_GetDate>
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8009040:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009044:	3b24      	subs	r3, #36	; 0x24
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	461a      	mov	r2, r3
 800904a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800904e:	3b1c      	subs	r3, #28
 8009050:	609a      	str	r2, [r3, #8]
 8009052:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009056:	3b24      	subs	r3, #36	; 0x24
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	461a      	mov	r2, r3
 800905c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009060:	3b1c      	subs	r3, #28
 8009062:	605a      	str	r2, [r3, #4]
 8009064:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009068:	3b24      	subs	r3, #36	; 0x24
 800906a:	78db      	ldrb	r3, [r3, #3]
 800906c:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8009070:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009074:	3b1c      	subs	r3, #28
 8009076:	601a      	str	r2, [r3, #0]
					Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
 8009078:	4bac      	ldr	r3, [pc, #688]	; (800932c <main+0x5dc4>)
 800907a:	ed93 7b00 	vldr	d7, [r3]
 800907e:	4bac      	ldr	r3, [pc, #688]	; (8009330 <main+0x5dc8>)
 8009080:	ed93 6b00 	vldr	d6, [r3]
 8009084:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009088:	3a1c      	subs	r2, #28
 800908a:	2301      	movs	r3, #1
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	4ba9      	ldr	r3, [pc, #676]	; (8009334 <main+0x5dcc>)
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	4ba9      	ldr	r3, [pc, #676]	; (8009338 <main+0x5dd0>)
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	4ba9      	ldr	r3, [pc, #676]	; (800933c <main+0x5dd4>)
 8009098:	ca07      	ldmia	r2, {r0, r1, r2}
 800909a:	ed9f 2b9f 	vldr	d2, [pc, #636]	; 8009318 <main+0x5db0>
 800909e:	eeb0 1a46 	vmov.f32	s2, s12
 80090a2:	eef0 1a66 	vmov.f32	s3, s13
 80090a6:	eeb0 0a47 	vmov.f32	s0, s14
 80090aa:	eef0 0a67 	vmov.f32	s1, s15
 80090ae:	f7f8 fadf 	bl	8001670 <Astro_sunRiseSet>

					HAL_Delay(50);
 80090b2:	2032      	movs	r0, #50	; 0x32
 80090b4:	f002 fdaa 	bl	800bc0c <HAL_Delay>
				}

				index_disp=0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80090be:	f102 020c 	add.w	r2, r2, #12
 80090c2:	7013      	strb	r3, [r2, #0]
				sprintf(str_disp,"O.%4.1f",LONG_Value);prev_double=LONG_Value;
 80090c4:	4b9a      	ldr	r3, [pc, #616]	; (8009330 <main+0x5dc8>)
 80090c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090ca:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80090ce:	f100 0004 	add.w	r0, r0, #4
 80090d2:	461a      	mov	r2, r3
 80090d4:	4623      	mov	r3, r4
 80090d6:	499a      	ldr	r1, [pc, #616]	; (8009340 <main+0x5dd8>)
 80090d8:	f011 fdda 	bl	801ac90 <siprintf>
 80090dc:	4b94      	ldr	r3, [pc, #592]	; (8009330 <main+0x5dc8>)
 80090de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090e2:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80090e6:	f102 0210 	add.w	r2, r2, #16
 80090ea:	e9c2 3400 	strd	r3, r4, [r2]
				print_segment(str_disp);
 80090ee:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80090f2:	f103 0304 	add.w	r3, r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 f954 	bl	800b3a4 <print_segment>
				Blink_segments(1);
 80090fc:	2001      	movs	r0, #1
 80090fe:	f002 f987 	bl	800b410 <Blink_segments>
				Menu_choice=SETLONG_MENU;
 8009102:	2313      	movs	r3, #19
 8009104:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009108:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800910c:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800910e:	4b8d      	ldr	r3, [pc, #564]	; (8009344 <main+0x5ddc>)
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8009116:	4b8c      	ldr	r3, [pc, #560]	; (8009348 <main+0x5de0>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d037      	beq.n	800918e <main+0x5c26>
			{
				KEYSW2_shortpressed=0;
 800911e:	4b8a      	ldr	r3, [pc, #552]	; (8009348 <main+0x5de0>)
 8009120:	2200      	movs	r2, #0
 8009122:	701a      	strb	r2, [r3, #0]
				LAT_Value+=0.1;
 8009124:	4b81      	ldr	r3, [pc, #516]	; (800932c <main+0x5dc4>)
 8009126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800912a:	a37d      	add	r3, pc, #500	; (adr r3, 8009320 <main+0x5db8>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	f7f7 f8ac 	bl	800028c <__adddf3>
 8009134:	4603      	mov	r3, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4a7c      	ldr	r2, [pc, #496]	; (800932c <main+0x5dc4>)
 800913a:	e9c2 3400 	strd	r3, r4, [r2]
				if(LAT_Value>(double)LAT_MAX/10.0) LAT_Value=(double)LAT_MIN/10.0;
 800913e:	4b7b      	ldr	r3, [pc, #492]	; (800932c <main+0x5dc4>)
 8009140:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009144:	f04f 0200 	mov.w	r2, #0
 8009148:	4b80      	ldr	r3, [pc, #512]	; (800934c <main+0x5de4>)
 800914a:	f7f7 fce5 	bl	8000b18 <__aeabi_dcmpgt>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <main+0x5bf8>
 8009154:	4a75      	ldr	r2, [pc, #468]	; (800932c <main+0x5dc4>)
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	4c7d      	ldr	r4, [pc, #500]	; (8009350 <main+0x5de8>)
 800915c:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"A.%4.1f",LAT_Value);
 8009160:	4b72      	ldr	r3, [pc, #456]	; (800932c <main+0x5dc4>)
 8009162:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009166:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800916a:	f100 0004 	add.w	r0, r0, #4
 800916e:	461a      	mov	r2, r3
 8009170:	4623      	mov	r3, r4
 8009172:	4978      	ldr	r1, [pc, #480]	; (8009354 <main+0x5dec>)
 8009174:	f011 fd8c 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 8009178:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800917c:	f103 0304 	add.w	r3, r3, #4
 8009180:	4618      	mov	r0, r3
 8009182:	f002 f90f 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8009186:	4b6f      	ldr	r3, [pc, #444]	; (8009344 <main+0x5ddc>)
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 800918e:	4b72      	ldr	r3, [pc, #456]	; (8009358 <main+0x5df0>)
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d037      	beq.n	8009206 <main+0x5c9e>
			{
				KEYSW3_shortpressed=0;
 8009196:	4b70      	ldr	r3, [pc, #448]	; (8009358 <main+0x5df0>)
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
				LAT_Value-=0.1;
 800919c:	4b63      	ldr	r3, [pc, #396]	; (800932c <main+0x5dc4>)
 800919e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091a2:	a35f      	add	r3, pc, #380	; (adr r3, 8009320 <main+0x5db8>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 f86e 	bl	8000288 <__aeabi_dsub>
 80091ac:	4603      	mov	r3, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	4a5e      	ldr	r2, [pc, #376]	; (800932c <main+0x5dc4>)
 80091b2:	e9c2 3400 	strd	r3, r4, [r2]
				if(LAT_Value<(double)LAT_MIN/10.0) LAT_Value=(double)LAT_MAX/10.0;
 80091b6:	4b5d      	ldr	r3, [pc, #372]	; (800932c <main+0x5dc4>)
 80091b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	4b63      	ldr	r3, [pc, #396]	; (8009350 <main+0x5de8>)
 80091c2:	f7f7 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <main+0x5c70>
 80091cc:	4a57      	ldr	r2, [pc, #348]	; (800932c <main+0x5dc4>)
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	4c5e      	ldr	r4, [pc, #376]	; (800934c <main+0x5de4>)
 80091d4:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"A.%4.1f",LAT_Value);
 80091d8:	4b54      	ldr	r3, [pc, #336]	; (800932c <main+0x5dc4>)
 80091da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091de:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80091e2:	f100 0004 	add.w	r0, r0, #4
 80091e6:	461a      	mov	r2, r3
 80091e8:	4623      	mov	r3, r4
 80091ea:	495a      	ldr	r1, [pc, #360]	; (8009354 <main+0x5dec>)
 80091ec:	f011 fd50 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 80091f0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80091f4:	f103 0304 	add.w	r3, r3, #4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 f8d3 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80091fe:	4b51      	ldr	r3, [pc, #324]	; (8009344 <main+0x5ddc>)
 8009200:	f241 3288 	movw	r2, #5000	; 0x1388
 8009204:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8009206:	4b55      	ldr	r3, [pc, #340]	; (800935c <main+0x5df4>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d037      	beq.n	800927e <main+0x5d16>
			{
				KEYSW2_longpressed=0;
 800920e:	4b53      	ldr	r3, [pc, #332]	; (800935c <main+0x5df4>)
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
				LAT_Value++;
 8009214:	4b45      	ldr	r3, [pc, #276]	; (800932c <main+0x5dc4>)
 8009216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800921a:	f04f 0200 	mov.w	r2, #0
 800921e:	4b50      	ldr	r3, [pc, #320]	; (8009360 <main+0x5df8>)
 8009220:	f7f7 f834 	bl	800028c <__adddf3>
 8009224:	4603      	mov	r3, r0
 8009226:	460c      	mov	r4, r1
 8009228:	4a40      	ldr	r2, [pc, #256]	; (800932c <main+0x5dc4>)
 800922a:	e9c2 3400 	strd	r3, r4, [r2]
				if(LAT_Value>(double)LAT_MAX/10.0) LAT_Value=(double)LAT_MIN/10.0;
 800922e:	4b3f      	ldr	r3, [pc, #252]	; (800932c <main+0x5dc4>)
 8009230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	4b44      	ldr	r3, [pc, #272]	; (800934c <main+0x5de4>)
 800923a:	f7f7 fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <main+0x5ce8>
 8009244:	4a39      	ldr	r2, [pc, #228]	; (800932c <main+0x5dc4>)
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	4c41      	ldr	r4, [pc, #260]	; (8009350 <main+0x5de8>)
 800924c:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"A.%4.1f",LAT_Value);
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <main+0x5dc4>)
 8009252:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009256:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 800925a:	f100 0004 	add.w	r0, r0, #4
 800925e:	461a      	mov	r2, r3
 8009260:	4623      	mov	r3, r4
 8009262:	493c      	ldr	r1, [pc, #240]	; (8009354 <main+0x5dec>)
 8009264:	f011 fd14 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 8009268:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800926c:	f103 0304 	add.w	r3, r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f002 f897 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 8009276:	4b33      	ldr	r3, [pc, #204]	; (8009344 <main+0x5ddc>)
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 800927e:	4b39      	ldr	r3, [pc, #228]	; (8009364 <main+0x5dfc>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d037      	beq.n	80092f6 <main+0x5d8e>
			{
				KEYSW3_longpressed=0;
 8009286:	4b37      	ldr	r3, [pc, #220]	; (8009364 <main+0x5dfc>)
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
				LAT_Value--;
 800928c:	4b27      	ldr	r3, [pc, #156]	; (800932c <main+0x5dc4>)
 800928e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009292:	f04f 0200 	mov.w	r2, #0
 8009296:	4b32      	ldr	r3, [pc, #200]	; (8009360 <main+0x5df8>)
 8009298:	f7f6 fff6 	bl	8000288 <__aeabi_dsub>
 800929c:	4603      	mov	r3, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4a22      	ldr	r2, [pc, #136]	; (800932c <main+0x5dc4>)
 80092a2:	e9c2 3400 	strd	r3, r4, [r2]
				if(LAT_Value<(double)LAT_MIN/10.0) LAT_Value=(double)LAT_MAX/10.0;
 80092a6:	4b21      	ldr	r3, [pc, #132]	; (800932c <main+0x5dc4>)
 80092a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	4b27      	ldr	r3, [pc, #156]	; (8009350 <main+0x5de8>)
 80092b2:	f7f7 fc13 	bl	8000adc <__aeabi_dcmplt>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <main+0x5d60>
 80092bc:	4a1b      	ldr	r2, [pc, #108]	; (800932c <main+0x5dc4>)
 80092be:	f04f 0300 	mov.w	r3, #0
 80092c2:	4c22      	ldr	r4, [pc, #136]	; (800934c <main+0x5de4>)
 80092c4:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"A.%4.1f",LAT_Value);
 80092c8:	4b18      	ldr	r3, [pc, #96]	; (800932c <main+0x5dc4>)
 80092ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80092ce:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 80092d2:	f100 0004 	add.w	r0, r0, #4
 80092d6:	461a      	mov	r2, r3
 80092d8:	4623      	mov	r3, r4
 80092da:	491e      	ldr	r1, [pc, #120]	; (8009354 <main+0x5dec>)
 80092dc:	f011 fcd8 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 80092e0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80092e4:	f103 0304 	add.w	r3, r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f002 f85b 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80092ee:	4b15      	ldr	r3, [pc, #84]	; (8009344 <main+0x5ddc>)
 80092f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f4:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <main+0x5ddc>)
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f040 84a6 	bne.w	8009c4c <main+0x66e4>
				{
					Menu_choice=MAIN_MENU;
 8009300:	2300      	movs	r3, #0
 8009302:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009306:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800930a:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 800930c:	4b16      	ldr	r3, [pc, #88]	; (8009368 <main+0x5e00>)
 800930e:	2201      	movs	r2, #1
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e02b      	b.n	800936c <main+0x5e04>
 8009314:	f3af 8000 	nop.w
 8009318:	00000000 	.word	0x00000000
 800931c:	400c0000 	.word	0x400c0000
 8009320:	9999999a 	.word	0x9999999a
 8009324:	3fb99999 	.word	0x3fb99999
 8009328:	20000818 	.word	0x20000818
 800932c:	20000790 	.word	0x20000790
 8009330:	20000788 	.word	0x20000788
 8009334:	200007e8 	.word	0x200007e8
 8009338:	200007fc 	.word	0x200007fc
 800933c:	200007a0 	.word	0x200007a0
 8009340:	0801eb24 	.word	0x0801eb24
 8009344:	200003e8 	.word	0x200003e8
 8009348:	200003d8 	.word	0x200003d8
 800934c:	40468000 	.word	0x40468000
 8009350:	40340000 	.word	0x40340000
 8009354:	0801eb1c 	.word	0x0801eb1c
 8009358:	200003d0 	.word	0x200003d0
 800935c:	200003d9 	.word	0x200003d9
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	200003d1 	.word	0x200003d1
 8009368:	200003c4 	.word	0x200003c4
					Blink_segments(0);
 800936c:	2000      	movs	r0, #0
 800936e:	f002 f84f 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(LAT_ADDRESS,  &read_eeprom)) != HAL_OK)
 8009372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009376:	3b32      	subs	r3, #50	; 0x32
 8009378:	4619      	mov	r1, r3
 800937a:	201a      	movs	r0, #26
 800937c:	f7f9 f9a8 	bl	80026d0 <EE_ReadVariable>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <main+0x5e24>
					{
						print_segment("E1-R");
 8009386:	4827      	ldr	r0, [pc, #156]	; (8009424 <main+0x5ebc>)
 8009388:	f002 f80c 	bl	800b3a4 <print_segment>
					}
					LAT_Value=(double)read_eeprom/10.0;
 800938c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009390:	3b32      	subs	r3, #50	; 0x32
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f7f7 f8b5 	bl	8000504 <__aeabi_ui2d>
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	4b22      	ldr	r3, [pc, #136]	; (8009428 <main+0x5ec0>)
 80093a0:	f7f7 fa54 	bl	800084c <__aeabi_ddiv>
 80093a4:	4603      	mov	r3, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	4a20      	ldr	r2, [pc, #128]	; (800942c <main+0x5ec4>)
 80093aa:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_Delay(50);
 80093ae:	2032      	movs	r0, #50	; 0x32
 80093b0:	f002 fc2c 	bl	800bc0c <HAL_Delay>
				}
				break;
 80093b4:	f000 bc4a 	b.w	8009c4c <main+0x66e4>
			/////////////////////////////////////////////////////////CASE SETLONG_MENU//////////////////////////////////////////////////////////////////
			case SETLONG_MENU:
				reset_keys();
 80093b8:	f7f9 fef8 	bl	80031ac <reset_keys>
			/////////////////////////////
			if(KEYSW1_shortpressed) //set
 80093bc:	4b1c      	ldr	r3, [pc, #112]	; (8009430 <main+0x5ec8>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80bf 	beq.w	8009544 <main+0x5fdc>
			{
				KEYSW1_shortpressed=0;
 80093c6:	4b1a      	ldr	r3, [pc, #104]	; (8009430 <main+0x5ec8>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]
				if(prev_double!=LONG_Value)
 80093cc:	4b19      	ldr	r3, [pc, #100]	; (8009434 <main+0x5ecc>)
 80093ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80093d2:	461a      	mov	r2, r3
 80093d4:	4623      	mov	r3, r4
 80093d6:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 80093da:	f101 0110 	add.w	r1, r1, #16
 80093de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e2:	f7f7 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d16b      	bne.n	80094c4 <main+0x5f5c>
				{
					if(EE_WriteVariable(LONG_ADDRESS,(uint16_t)(LONG_Value*10.0))!=HAL_OK)
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <main+0x5ecc>)
 80093ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093f2:	f04f 0200 	mov.w	r2, #0
 80093f6:	4b0c      	ldr	r3, [pc, #48]	; (8009428 <main+0x5ec0>)
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	4603      	mov	r3, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	4618      	mov	r0, r3
 8009402:	4621      	mov	r1, r4
 8009404:	f7f7 fbd0 	bl	8000ba8 <__aeabi_d2uiz>
 8009408:	4603      	mov	r3, r0
 800940a:	b29b      	uxth	r3, r3
 800940c:	4619      	mov	r1, r3
 800940e:	201c      	movs	r0, #28
 8009410:	f7f9 f9a6 	bl	8002760 <EE_WriteVariable>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d010      	beq.n	800943c <main+0x5ed4>
					{
						print_segment("ER12");
 800941a:	4807      	ldr	r0, [pc, #28]	; (8009438 <main+0x5ed0>)
 800941c:	f001 ffc2 	bl	800b3a4 <print_segment>
						while(1);
 8009420:	e7fe      	b.n	8009420 <main+0x5eb8>
 8009422:	bf00      	nop
 8009424:	0801e810 	.word	0x0801e810
 8009428:	40240000 	.word	0x40240000
 800942c:	20000790 	.word	0x20000790
 8009430:	200003e0 	.word	0x200003e0
 8009434:	20000788 	.word	0x20000788
 8009438:	0801e994 	.word	0x0801e994
					}
					HAL_Delay(50);
 800943c:	2032      	movs	r0, #50	; 0x32
 800943e:	f002 fbe5 	bl	800bc0c <HAL_Delay>
					HAL_RTC_GetDate(&hrtc, &cur_date, RTC_FORMAT_BIN);
 8009442:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009446:	3b24      	subs	r3, #36	; 0x24
 8009448:	2200      	movs	r2, #0
 800944a:	4619      	mov	r1, r3
 800944c:	48bc      	ldr	r0, [pc, #752]	; (8009740 <main+0x61d8>)
 800944e:	f007 fb62 	bl	8010b16 <HAL_RTC_GetDate>
					date.day=cur_date.Date;date.month=cur_date.Month;date.year=cur_date.Year+1980;
 8009452:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009456:	3b24      	subs	r3, #36	; 0x24
 8009458:	789b      	ldrb	r3, [r3, #2]
 800945a:	461a      	mov	r2, r3
 800945c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009460:	3b1c      	subs	r3, #28
 8009462:	609a      	str	r2, [r3, #8]
 8009464:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009468:	3b24      	subs	r3, #36	; 0x24
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	461a      	mov	r2, r3
 800946e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009472:	3b1c      	subs	r3, #28
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800947a:	3b24      	subs	r3, #36	; 0x24
 800947c:	78db      	ldrb	r3, [r3, #3]
 800947e:	f203 72bc 	addw	r2, r3, #1980	; 0x7bc
 8009482:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009486:	3b1c      	subs	r3, #28
 8009488:	601a      	str	r2, [r3, #0]
					Astro_sunRiseSet(LAT_Value, LONG_Value, UTCOEFF_TEHRAN, date,&sunrise_t,&noon_t,&sunset_t,1);
 800948a:	4bae      	ldr	r3, [pc, #696]	; (8009744 <main+0x61dc>)
 800948c:	ed93 7b00 	vldr	d7, [r3]
 8009490:	4bad      	ldr	r3, [pc, #692]	; (8009748 <main+0x61e0>)
 8009492:	ed93 6b00 	vldr	d6, [r3]
 8009496:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800949a:	3a1c      	subs	r2, #28
 800949c:	2301      	movs	r3, #1
 800949e:	9302      	str	r3, [sp, #8]
 80094a0:	4baa      	ldr	r3, [pc, #680]	; (800974c <main+0x61e4>)
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	4baa      	ldr	r3, [pc, #680]	; (8009750 <main+0x61e8>)
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	4baa      	ldr	r3, [pc, #680]	; (8009754 <main+0x61ec>)
 80094aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80094ac:	ed9f 2ba0 	vldr	d2, [pc, #640]	; 8009730 <main+0x61c8>
 80094b0:	eeb0 1a46 	vmov.f32	s2, s12
 80094b4:	eef0 1a66 	vmov.f32	s3, s13
 80094b8:	eeb0 0a47 	vmov.f32	s0, s14
 80094bc:	eef0 0a67 	vmov.f32	s1, s15
 80094c0:	f7f8 f8d6 	bl	8001670 <Astro_sunRiseSet>

				}

				index_disp=0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80094ca:	f102 020c 	add.w	r2, r2, #12
 80094ce:	7013      	strb	r3, [r2, #0]
				disp_pass[0]='-';disp_pass[1]='-';disp_pass[2]='-';disp_pass[3]='-';
 80094d0:	232d      	movs	r3, #45	; 0x2d
 80094d2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80094d6:	7013      	strb	r3, [r2, #0]
 80094d8:	232d      	movs	r3, #45	; 0x2d
 80094da:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80094de:	f102 0201 	add.w	r2, r2, #1
 80094e2:	7013      	strb	r3, [r2, #0]
 80094e4:	232d      	movs	r3, #45	; 0x2d
 80094e6:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80094ea:	f102 0202 	add.w	r2, r2, #2
 80094ee:	7013      	strb	r3, [r2, #0]
 80094f0:	232d      	movs	r3, #45	; 0x2d
 80094f2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 80094f6:	f102 0203 	add.w	r2, r2, #3
 80094fa:	7013      	strb	r3, [r2, #0]
				print_pass(disp_pass,index_disp,1);prev_uint16t=Password_Value;
 80094fc:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009500:	f103 030c 	add.w	r3, r3, #12
 8009504:	7819      	ldrb	r1, [r3, #0]
 8009506:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800950a:	2201      	movs	r2, #1
 800950c:	4618      	mov	r0, r3
 800950e:	f7f9 fe6f 	bl	80031f0 <print_pass>
 8009512:	4b91      	ldr	r3, [pc, #580]	; (8009758 <main+0x61f0>)
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800951a:	f102 020e 	add.w	r2, r2, #14
 800951e:	8013      	strh	r3, [r2, #0]
				Blink_segments(1);
 8009520:	2001      	movs	r0, #1
 8009522:	f001 ff75 	bl	800b410 <Blink_segments>
				counterlog_file=0;
 8009526:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800952a:	3b38      	subs	r3, #56	; 0x38
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]

				Menu_choice=SETPASS_MENU;
 8009530:	2314      	movs	r3, #20
 8009532:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009536:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800953a:	7013      	strb	r3, [r2, #0]
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800953c:	4b87      	ldr	r3, [pc, #540]	; (800975c <main+0x61f4>)
 800953e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009542:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_shortpressed)//up
 8009544:	4b86      	ldr	r3, [pc, #536]	; (8009760 <main+0x61f8>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d037      	beq.n	80095bc <main+0x6054>
			{
				KEYSW2_shortpressed=0;
 800954c:	4b84      	ldr	r3, [pc, #528]	; (8009760 <main+0x61f8>)
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
				LONG_Value+=0.1;
 8009552:	4b7d      	ldr	r3, [pc, #500]	; (8009748 <main+0x61e0>)
 8009554:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009558:	a377      	add	r3, pc, #476	; (adr r3, 8009738 <main+0x61d0>)
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f6 fe95 	bl	800028c <__adddf3>
 8009562:	4603      	mov	r3, r0
 8009564:	460c      	mov	r4, r1
 8009566:	4a78      	ldr	r2, [pc, #480]	; (8009748 <main+0x61e0>)
 8009568:	e9c2 3400 	strd	r3, r4, [r2]
				if(LONG_Value>(double)LONG_MAX/10.0) LONG_Value=(double)LONG_MIN/10.0;
 800956c:	4b76      	ldr	r3, [pc, #472]	; (8009748 <main+0x61e0>)
 800956e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	4b7b      	ldr	r3, [pc, #492]	; (8009764 <main+0x61fc>)
 8009578:	f7f7 face 	bl	8000b18 <__aeabi_dcmpgt>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <main+0x6026>
 8009582:	4a71      	ldr	r2, [pc, #452]	; (8009748 <main+0x61e0>)
 8009584:	f04f 0300 	mov.w	r3, #0
 8009588:	4c77      	ldr	r4, [pc, #476]	; (8009768 <main+0x6200>)
 800958a:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"O.%4.1f",LONG_Value);
 800958e:	4b6e      	ldr	r3, [pc, #440]	; (8009748 <main+0x61e0>)
 8009590:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009594:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8009598:	f100 0004 	add.w	r0, r0, #4
 800959c:	461a      	mov	r2, r3
 800959e:	4623      	mov	r3, r4
 80095a0:	4972      	ldr	r1, [pc, #456]	; (800976c <main+0x6204>)
 80095a2:	f011 fb75 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 80095a6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80095aa:	f103 0304 	add.w	r3, r3, #4
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 fef8 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80095b4:	4b69      	ldr	r3, [pc, #420]	; (800975c <main+0x61f4>)
 80095b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ba:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_shortpressed)//dn
 80095bc:	4b6c      	ldr	r3, [pc, #432]	; (8009770 <main+0x6208>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d037      	beq.n	8009634 <main+0x60cc>
			{
				KEYSW3_shortpressed=0;
 80095c4:	4b6a      	ldr	r3, [pc, #424]	; (8009770 <main+0x6208>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
				LONG_Value-=0.1;
 80095ca:	4b5f      	ldr	r3, [pc, #380]	; (8009748 <main+0x61e0>)
 80095cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095d0:	a359      	add	r3, pc, #356	; (adr r3, 8009738 <main+0x61d0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fe57 	bl	8000288 <__aeabi_dsub>
 80095da:	4603      	mov	r3, r0
 80095dc:	460c      	mov	r4, r1
 80095de:	4a5a      	ldr	r2, [pc, #360]	; (8009748 <main+0x61e0>)
 80095e0:	e9c2 3400 	strd	r3, r4, [r2]
				if(LONG_Value<(double)LONG_MIN/10.0) LONG_Value=(double)LONG_MAX/10.0;
 80095e4:	4b58      	ldr	r3, [pc, #352]	; (8009748 <main+0x61e0>)
 80095e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	4b5e      	ldr	r3, [pc, #376]	; (8009768 <main+0x6200>)
 80095f0:	f7f7 fa74 	bl	8000adc <__aeabi_dcmplt>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <main+0x609e>
 80095fa:	4a53      	ldr	r2, [pc, #332]	; (8009748 <main+0x61e0>)
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	4c58      	ldr	r4, [pc, #352]	; (8009764 <main+0x61fc>)
 8009602:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"O.%4.1f",LONG_Value);
 8009606:	4b50      	ldr	r3, [pc, #320]	; (8009748 <main+0x61e0>)
 8009608:	e9d3 3400 	ldrd	r3, r4, [r3]
 800960c:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8009610:	f100 0004 	add.w	r0, r0, #4
 8009614:	461a      	mov	r2, r3
 8009616:	4623      	mov	r3, r4
 8009618:	4954      	ldr	r1, [pc, #336]	; (800976c <main+0x6204>)
 800961a:	f011 fb39 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 800961e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009622:	f103 0304 	add.w	r3, r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f001 febc 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800962c:	4b4b      	ldr	r3, [pc, #300]	; (800975c <main+0x61f4>)
 800962e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009632:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW2_longpressed)//up
 8009634:	4b4f      	ldr	r3, [pc, #316]	; (8009774 <main+0x620c>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d037      	beq.n	80096ac <main+0x6144>
			{
				KEYSW2_longpressed=0;
 800963c:	4b4d      	ldr	r3, [pc, #308]	; (8009774 <main+0x620c>)
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
				LONG_Value++;
 8009642:	4b41      	ldr	r3, [pc, #260]	; (8009748 <main+0x61e0>)
 8009644:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009648:	f04f 0200 	mov.w	r2, #0
 800964c:	4b4a      	ldr	r3, [pc, #296]	; (8009778 <main+0x6210>)
 800964e:	f7f6 fe1d 	bl	800028c <__adddf3>
 8009652:	4603      	mov	r3, r0
 8009654:	460c      	mov	r4, r1
 8009656:	4a3c      	ldr	r2, [pc, #240]	; (8009748 <main+0x61e0>)
 8009658:	e9c2 3400 	strd	r3, r4, [r2]
				if(LONG_Value>(double)LONG_MAX/10.0) LONG_Value=(double)LONG_MIN/10.0;
 800965c:	4b3a      	ldr	r3, [pc, #232]	; (8009748 <main+0x61e0>)
 800965e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	4b3f      	ldr	r3, [pc, #252]	; (8009764 <main+0x61fc>)
 8009668:	f7f7 fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <main+0x6116>
 8009672:	4a35      	ldr	r2, [pc, #212]	; (8009748 <main+0x61e0>)
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	4c3b      	ldr	r4, [pc, #236]	; (8009768 <main+0x6200>)
 800967a:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"O.%4.1f",LONG_Value);
 800967e:	4b32      	ldr	r3, [pc, #200]	; (8009748 <main+0x61e0>)
 8009680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009684:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8009688:	f100 0004 	add.w	r0, r0, #4
 800968c:	461a      	mov	r2, r3
 800968e:	4623      	mov	r3, r4
 8009690:	4936      	ldr	r1, [pc, #216]	; (800976c <main+0x6204>)
 8009692:	f011 fafd 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 8009696:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 800969a:	f103 0304 	add.w	r3, r3, #4
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 fe80 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 80096a4:	4b2d      	ldr	r3, [pc, #180]	; (800975c <main+0x61f4>)
 80096a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096aa:	801a      	strh	r2, [r3, #0]
			}
			if(KEYSW3_longpressed)//dn
 80096ac:	4b33      	ldr	r3, [pc, #204]	; (800977c <main+0x6214>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d037      	beq.n	8009724 <main+0x61bc>
			{
				KEYSW3_longpressed=0;
 80096b4:	4b31      	ldr	r3, [pc, #196]	; (800977c <main+0x6214>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
				LONG_Value--;
 80096ba:	4b23      	ldr	r3, [pc, #140]	; (8009748 <main+0x61e0>)
 80096bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096c0:	f04f 0200 	mov.w	r2, #0
 80096c4:	4b2c      	ldr	r3, [pc, #176]	; (8009778 <main+0x6210>)
 80096c6:	f7f6 fddf 	bl	8000288 <__aeabi_dsub>
 80096ca:	4603      	mov	r3, r0
 80096cc:	460c      	mov	r4, r1
 80096ce:	4a1e      	ldr	r2, [pc, #120]	; (8009748 <main+0x61e0>)
 80096d0:	e9c2 3400 	strd	r3, r4, [r2]
				if(LONG_Value<(double)LONG_MIN/10.0) LONG_Value=(double)LONG_MAX/10.0;
 80096d4:	4b1c      	ldr	r3, [pc, #112]	; (8009748 <main+0x61e0>)
 80096d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	4b22      	ldr	r3, [pc, #136]	; (8009768 <main+0x6200>)
 80096e0:	f7f7 f9fc 	bl	8000adc <__aeabi_dcmplt>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <main+0x618e>
 80096ea:	4a17      	ldr	r2, [pc, #92]	; (8009748 <main+0x61e0>)
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	4c1c      	ldr	r4, [pc, #112]	; (8009764 <main+0x61fc>)
 80096f2:	e9c2 3400 	strd	r3, r4, [r2]
				sprintf(str_disp,"O.%4.1f",LONG_Value);
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <main+0x61e0>)
 80096f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80096fc:	f507 5052 	add.w	r0, r7, #13440	; 0x3480
 8009700:	f100 0004 	add.w	r0, r0, #4
 8009704:	461a      	mov	r2, r3
 8009706:	4623      	mov	r3, r4
 8009708:	4918      	ldr	r1, [pc, #96]	; (800976c <main+0x6204>)
 800970a:	f011 fac1 	bl	801ac90 <siprintf>
				print_segment(str_disp);
 800970e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009712:	f103 0304 	add.w	r3, r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f001 fe44 	bl	800b3a4 <print_segment>
				GOMAINMENU_counter=GOMAINMENU_DELAY;
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <main+0x61f4>)
 800971e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009722:	801a      	strh	r2, [r3, #0]

			}
			/////////////////////////
				if(GOMAINMENU_counter==0)
 8009724:	4b0d      	ldr	r3, [pc, #52]	; (800975c <main+0x61f4>)
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f040 8292 	bne.w	8009c52 <main+0x66ea>
 800972e:	e027      	b.n	8009780 <main+0x6218>
 8009730:	00000000 	.word	0x00000000
 8009734:	400c0000 	.word	0x400c0000
 8009738:	9999999a 	.word	0x9999999a
 800973c:	3fb99999 	.word	0x3fb99999
 8009740:	20000818 	.word	0x20000818
 8009744:	20000790 	.word	0x20000790
 8009748:	20000788 	.word	0x20000788
 800974c:	200007e8 	.word	0x200007e8
 8009750:	200007fc 	.word	0x200007fc
 8009754:	200007a0 	.word	0x200007a0
 8009758:	20000770 	.word	0x20000770
 800975c:	200003e8 	.word	0x200003e8
 8009760:	200003d8 	.word	0x200003d8
 8009764:	40504000 	.word	0x40504000
 8009768:	40440000 	.word	0x40440000
 800976c:	0801eb24 	.word	0x0801eb24
 8009770:	200003d0 	.word	0x200003d0
 8009774:	200003d9 	.word	0x200003d9
 8009778:	3ff00000 	.word	0x3ff00000
 800977c:	200003d1 	.word	0x200003d1
				{
					Menu_choice=MAIN_MENU;
 8009780:	2300      	movs	r3, #0
 8009782:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009786:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800978a:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 800978c:	4ba1      	ldr	r3, [pc, #644]	; (8009a14 <main+0x64ac>)
 800978e:	2201      	movs	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8009792:	2000      	movs	r0, #0
 8009794:	f001 fe3c 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(LONG_ADDRESS,  &read_eeprom)) != HAL_OK)
 8009798:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800979c:	3b34      	subs	r3, #52	; 0x34
 800979e:	4619      	mov	r1, r3
 80097a0:	201c      	movs	r0, #28
 80097a2:	f7f8 ff95 	bl	80026d0 <EE_ReadVariable>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <main+0x624a>
					{
						print_segment("E1-R");
 80097ac:	489a      	ldr	r0, [pc, #616]	; (8009a18 <main+0x64b0>)
 80097ae:	f001 fdf9 	bl	800b3a4 <print_segment>
					}
					LONG_Value=(double)read_eeprom/10.0;
 80097b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80097b6:	3b34      	subs	r3, #52	; 0x34
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f6 fea2 	bl	8000504 <__aeabi_ui2d>
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	4b95      	ldr	r3, [pc, #596]	; (8009a1c <main+0x64b4>)
 80097c6:	f7f7 f841 	bl	800084c <__aeabi_ddiv>
 80097ca:	4603      	mov	r3, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	4a94      	ldr	r2, [pc, #592]	; (8009a20 <main+0x64b8>)
 80097d0:	e9c2 3400 	strd	r3, r4, [r2]
					HAL_Delay(50);
 80097d4:	2032      	movs	r0, #50	; 0x32
 80097d6:	f002 fa19 	bl	800bc0c <HAL_Delay>
				}
				break;
 80097da:	e23a      	b.n	8009c52 <main+0x66ea>
			/////////////////////////////////////////////////////////CASE SETPASS_MENU/////////////////////////////////////////////////////////////////
			case SETPASS_MENU:
				reset_keys();
 80097dc:	f7f9 fce6 	bl	80031ac <reset_keys>
			///////////////////////////////////////////////////////////////
				if(KEYSW2_longpressed)	KEYSW2_longpressed=0;
 80097e0:	4b90      	ldr	r3, [pc, #576]	; (8009a24 <main+0x64bc>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <main+0x6286>
 80097e8:	4b8e      	ldr	r3, [pc, #568]	; (8009a24 <main+0x64bc>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
				if(KEYSW3_longpressed)	KEYSW3_longpressed=0;
 80097ee:	4b8e      	ldr	r3, [pc, #568]	; (8009a28 <main+0x64c0>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <main+0x6294>
 80097f6:	4b8c      	ldr	r3, [pc, #560]	; (8009a28 <main+0x64c0>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	701a      	strb	r2, [r3, #0]
				if(KEYSW2_shortpressed)//up
 80097fc:	4b8b      	ldr	r3, [pc, #556]	; (8009a2c <main+0x64c4>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d064      	beq.n	80098ce <main+0x6366>
				{
					KEYSW2_shortpressed=0;
 8009804:	4b89      	ldr	r3, [pc, #548]	; (8009a2c <main+0x64c4>)
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 800980a:	4b89      	ldr	r3, [pc, #548]	; (8009a30 <main+0x64c8>)
 800980c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009810:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-')
 8009812:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009816:	f103 030c 	add.w	r3, r3, #12
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009820:	f102 0220 	add.w	r2, r2, #32
 8009824:	4413      	add	r3, r2
 8009826:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 800982a:	2b2d      	cmp	r3, #45	; 0x2d
 800982c:	d106      	bne.n	800983c <main+0x62d4>
					{
						passsegment_value=0;
 800982e:	2300      	movs	r3, #0
 8009830:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009834:	f102 020b 	add.w	r2, r2, #11
 8009838:	7013      	strb	r3, [r2, #0]
 800983a:	e017      	b.n	800986c <main+0x6304>
					}
					else
					{
						passsegment_value++;
 800983c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009840:	f103 030b 	add.w	r3, r3, #11
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800984c:	f102 020b 	add.w	r2, r2, #11
 8009850:	7013      	strb	r3, [r2, #0]
						if(passsegment_value>9) passsegment_value=0;
 8009852:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009856:	f103 030b 	add.w	r3, r3, #11
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	2b09      	cmp	r3, #9
 800985e:	d905      	bls.n	800986c <main+0x6304>
 8009860:	2300      	movs	r3, #0
 8009862:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009866:	f102 020b 	add.w	r2, r2, #11
 800986a:	7013      	strb	r3, [r2, #0]
					}
					disp_pass[index_disp]=passsegment_value+'0';
 800986c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009870:	f103 030c 	add.w	r3, r3, #12
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800987a:	f102 020b 	add.w	r2, r2, #11
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	3230      	adds	r2, #48	; 0x30
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 8009888:	f101 0120 	add.w	r1, r1, #32
 800988c:	440b      	add	r3, r1
 800988e:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 8009892:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009896:	f103 030d 	add.w	r3, r3, #13
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <main+0x6350>
					{
						print_pass(disp_pass,index_disp,1);
 80098a0:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80098a4:	f103 030c 	add.w	r3, r3, #12
 80098a8:	7819      	ldrb	r1, [r3, #0]
 80098aa:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80098ae:	2201      	movs	r2, #1
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f9 fc9d 	bl	80031f0 <print_pass>
 80098b6:	e00a      	b.n	80098ce <main+0x6366>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 80098b8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80098bc:	f103 030c 	add.w	r3, r3, #12
 80098c0:	7819      	ldrb	r1, [r3, #0]
 80098c2:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 80098c6:	2200      	movs	r2, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f9 fc91 	bl	80031f0 <print_pass>
					}					
				}
				if(KEYSW3_shortpressed)//dn
 80098ce:	4b59      	ldr	r3, [pc, #356]	; (8009a34 <main+0x64cc>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d064      	beq.n	80099a0 <main+0x6438>
				{
					KEYSW3_shortpressed=0;
 80098d6:	4b57      	ldr	r3, [pc, #348]	; (8009a34 <main+0x64cc>)
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 80098dc:	4b54      	ldr	r3, [pc, #336]	; (8009a30 <main+0x64c8>)
 80098de:	f241 3288 	movw	r2, #5000	; 0x1388
 80098e2:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-')
 80098e4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80098e8:	f103 030c 	add.w	r3, r3, #12
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80098f2:	f102 0220 	add.w	r2, r2, #32
 80098f6:	4413      	add	r3, r2
 80098f8:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80098fc:	2b2d      	cmp	r3, #45	; 0x2d
 80098fe:	d106      	bne.n	800990e <main+0x63a6>
					{
						passsegment_value=9;
 8009900:	2309      	movs	r3, #9
 8009902:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009906:	f102 020b 	add.w	r2, r2, #11
 800990a:	7013      	strb	r3, [r2, #0]
 800990c:	e017      	b.n	800993e <main+0x63d6>
					}
					else
					{
						if(passsegment_value==0) passsegment_value=10;
 800990e:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009912:	f103 030b 	add.w	r3, r3, #11
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d105      	bne.n	8009928 <main+0x63c0>
 800991c:	230a      	movs	r3, #10
 800991e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009922:	f102 020b 	add.w	r2, r2, #11
 8009926:	7013      	strb	r3, [r2, #0]
						passsegment_value--;
 8009928:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 800992c:	f103 030b 	add.w	r3, r3, #11
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	3b01      	subs	r3, #1
 8009934:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009938:	f102 020b 	add.w	r2, r2, #11
 800993c:	7013      	strb	r3, [r2, #0]
						
					}
					disp_pass[index_disp]=passsegment_value+'0';
 800993e:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009942:	f103 030c 	add.w	r3, r3, #12
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 800994c:	f102 020b 	add.w	r2, r2, #11
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	3230      	adds	r2, #48	; 0x30
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	f507 5153 	add.w	r1, r7, #13504	; 0x34c0
 800995a:	f101 0120 	add.w	r1, r1, #32
 800995e:	440b      	add	r3, r1
 8009960:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 8009964:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009968:	f103 030d 	add.w	r3, r3, #13
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <main+0x6422>
					{
						print_pass(disp_pass,index_disp,1);
 8009972:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009976:	f103 030c 	add.w	r3, r3, #12
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009980:	2201      	movs	r2, #1
 8009982:	4618      	mov	r0, r3
 8009984:	f7f9 fc34 	bl	80031f0 <print_pass>
 8009988:	e00a      	b.n	80099a0 <main+0x6438>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 800998a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 800998e:	f103 030c 	add.w	r3, r3, #12
 8009992:	7819      	ldrb	r1, [r3, #0]
 8009994:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009998:	2200      	movs	r2, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f7f9 fc28 	bl	80031f0 <print_pass>
					}							
				}
				if(KEYSW1_shortpressed)//set
 80099a0:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <main+0x64d0>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80c3 	beq.w	8009b30 <main+0x65c8>
				{
					KEYSW1_shortpressed=0;
 80099aa:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <main+0x64d0>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
					GOMAINMENU_counter=GOMAINMENU_DELAY;
 80099b0:	4b1f      	ldr	r3, [pc, #124]	; (8009a30 <main+0x64c8>)
 80099b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b6:	801a      	strh	r2, [r3, #0]
					if(disp_pass[index_disp]=='-') disp_pass[index_disp]='0';
 80099b8:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80099bc:	f103 030c 	add.w	r3, r3, #12
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80099c6:	f102 0220 	add.w	r2, r2, #32
 80099ca:	4413      	add	r3, r2
 80099cc:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80099d0:	2b2d      	cmp	r3, #45	; 0x2d
 80099d2:	d10c      	bne.n	80099ee <main+0x6486>
 80099d4:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80099d8:	f103 030c 	add.w	r3, r3, #12
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 80099e2:	f102 0220 	add.w	r2, r2, #32
 80099e6:	4413      	add	r3, r2
 80099e8:	2230      	movs	r2, #48	; 0x30
 80099ea:	f803 2c60 	strb.w	r2, [r3, #-96]
					if(blink)
 80099ee:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 80099f2:	f103 030d 	add.w	r3, r3, #13
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01f      	beq.n	8009a3c <main+0x64d4>
					{
						print_pass(disp_pass,index_disp,1);
 80099fc:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009a00:	f103 030c 	add.w	r3, r3, #12
 8009a04:	7819      	ldrb	r1, [r3, #0]
 8009a06:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7f9 fbef 	bl	80031f0 <print_pass>
 8009a12:	e01e      	b.n	8009a52 <main+0x64ea>
 8009a14:	200003c4 	.word	0x200003c4
 8009a18:	0801e810 	.word	0x0801e810
 8009a1c:	40240000 	.word	0x40240000
 8009a20:	20000788 	.word	0x20000788
 8009a24:	200003d9 	.word	0x200003d9
 8009a28:	200003d1 	.word	0x200003d1
 8009a2c:	200003d8 	.word	0x200003d8
 8009a30:	200003e8 	.word	0x200003e8
 8009a34:	200003d0 	.word	0x200003d0
 8009a38:	200003e0 	.word	0x200003e0
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8009a3c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009a40:	f103 030c 	add.w	r3, r3, #12
 8009a44:	7819      	ldrb	r1, [r3, #0]
 8009a46:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f9 fbcf 	bl	80031f0 <print_pass>
					}						
					
					index_disp++;
 8009a52:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009a56:	f103 030c 	add.w	r3, r3, #12
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009a62:	f102 020c 	add.w	r2, r2, #12
 8009a66:	7013      	strb	r3, [r2, #0]
					if(index_disp==4)
 8009a68:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009a6c:	f103 030c 	add.w	r3, r3, #12
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d15c      	bne.n	8009b30 <main+0x65c8>
					{
						tmp_uint16t=(disp_pass[0]-'0')*1000+(disp_pass[1]-'0')*100+(disp_pass[2]-'0')*10+(disp_pass[3]-'0');
 8009a76:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	3b30      	subs	r3, #48	; 0x30
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	0152      	lsls	r2, r2, #5
 8009a84:	1ad2      	subs	r2, r2, r3
 8009a86:	0092      	lsls	r2, r2, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009a92:	f103 0301 	add.w	r3, r3, #1
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	3b30      	subs	r3, #48	; 0x30
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	0089      	lsls	r1, r1, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	0088      	lsls	r0, r1, #2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	440b      	add	r3, r1
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	4413      	add	r3, r2
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009ab8:	f103 0302 	add.w	r3, r3, #2
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	3b30      	subs	r3, #48	; 0x30
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	0089      	lsls	r1, r1, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	005b      	lsls	r3, r3, #1
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	4413      	add	r3, r2
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009ad4:	f103 0303 	add.w	r3, r3, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	3b30      	subs	r3, #48	; 0x30
 8009ae2:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009ae6:	f102 0214 	add.w	r2, r2, #20
 8009aea:	8013      	strh	r3, [r2, #0]
						if(prev_uint16t!=tmp_uint16t)
 8009aec:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009af0:	f103 030e 	add.w	r3, r3, #14
 8009af4:	881a      	ldrh	r2, [r3, #0]
 8009af6:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009afa:	f103 0314 	add.w	r3, r3, #20
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d012      	beq.n	8009b2a <main+0x65c2>
						{
							if(EE_WriteVariable(PASSWORD_ADDRESS,tmp_uint16t)!=HAL_OK)
 8009b04:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009b08:	f103 0314 	add.w	r3, r3, #20
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	2012      	movs	r0, #18
 8009b12:	f7f8 fe25 	bl	8002760 <EE_WriteVariable>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <main+0x65bc>
							{
								print_segment("ER02");
 8009b1c:	4850      	ldr	r0, [pc, #320]	; (8009c60 <main+0x66f8>)
 8009b1e:	f001 fc41 	bl	800b3a4 <print_segment>
								while(1);
 8009b22:	e7fe      	b.n	8009b22 <main+0x65ba>
							}
							HAL_Delay(50);						
 8009b24:	2032      	movs	r0, #50	; 0x32
 8009b26:	f002 f871 	bl	800bc0c <HAL_Delay>
					}
						GOMAINMENU_counter=0;
 8009b2a:	4b4e      	ldr	r3, [pc, #312]	; (8009c64 <main+0x66fc>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	801a      	strh	r2, [r3, #0]
					}
				}
				if(flag_1s)
 8009b30:	4b4d      	ldr	r3, [pc, #308]	; (8009c68 <main+0x6700>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d02c      	beq.n	8009b92 <main+0x662a>
				{
					flag_1s=0;
 8009b38:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <main+0x6700>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
					if(blink)
 8009b3e:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009b42:	f103 030d 	add.w	r3, r3, #13
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <main+0x65fc>
					{
						print_pass(disp_pass,index_disp,1);
 8009b4c:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009b50:	f103 030c 	add.w	r3, r3, #12
 8009b54:	7819      	ldrb	r1, [r3, #0]
 8009b56:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7f9 fb47 	bl	80031f0 <print_pass>
 8009b62:	e00a      	b.n	8009b7a <main+0x6612>
					}
					else
					{
						print_pass(disp_pass,index_disp,0);
 8009b64:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009b68:	f103 030c 	add.w	r3, r3, #12
 8009b6c:	7819      	ldrb	r1, [r3, #0]
 8009b6e:	f507 5352 	add.w	r3, r7, #13440	; 0x3480
 8009b72:	2200      	movs	r2, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f9 fb3b 	bl	80031f0 <print_pass>
					}
					blink=1-blink;
 8009b7a:	f507 5353 	add.w	r3, r7, #13504	; 0x34c0
 8009b7e:	f103 030d 	add.w	r3, r3, #13
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	f1c3 0301 	rsb	r3, r3, #1
 8009b88:	f507 5253 	add.w	r2, r7, #13504	; 0x34c0
 8009b8c:	f102 020d 	add.w	r2, r2, #13
 8009b90:	7013      	strb	r3, [r2, #0]
				}
			
				////////////////////////////////////////////////////
				if(GOMAINMENU_counter==0)
 8009b92:	4b34      	ldr	r3, [pc, #208]	; (8009c64 <main+0x66fc>)
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d15e      	bne.n	8009c58 <main+0x66f0>
				{
					Menu_choice=MAIN_MENU;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f507 5252 	add.w	r2, r7, #13440	; 0x3480
 8009ba0:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8009ba4:	7013      	strb	r3, [r2, #0]
					flag_1s=1;
 8009ba6:	4b30      	ldr	r3, [pc, #192]	; (8009c68 <main+0x6700>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
					Blink_segments(0);
 8009bac:	2000      	movs	r0, #0
 8009bae:	f001 fc2f 	bl	800b410 <Blink_segments>
					uint16_t read_eeprom;
					if((EE_ReadVariable(PASSWORD_ADDRESS,  &read_eeprom)) != HAL_OK)
 8009bb2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009bb6:	3b36      	subs	r3, #54	; 0x36
 8009bb8:	4619      	mov	r1, r3
 8009bba:	2012      	movs	r0, #18
 8009bbc:	f7f8 fd88 	bl	80026d0 <EE_ReadVariable>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <main+0x6664>
					{
						print_segment("E1-R");
 8009bc6:	4829      	ldr	r0, [pc, #164]	; (8009c6c <main+0x6704>)
 8009bc8:	f001 fbec 	bl	800b3a4 <print_segment>
					}		
					Password_Value=read_eeprom;
 8009bcc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009bd0:	3b36      	subs	r3, #54	; 0x36
 8009bd2:	881a      	ldrh	r2, [r3, #0]
 8009bd4:	4b26      	ldr	r3, [pc, #152]	; (8009c70 <main+0x6708>)
 8009bd6:	801a      	strh	r2, [r3, #0]
					HAL_Delay(50);
 8009bd8:	2032      	movs	r0, #50	; 0x32
 8009bda:	f002 f817 	bl	800bc0c <HAL_Delay>
				}						
				break;
 8009bde:	e03b      	b.n	8009c58 <main+0x66f0>
				break;
 8009be0:	bf00      	nop
 8009be2:	f7f9 bf9f 	b.w	8003b24 <main+0x5bc>
			break;				
 8009be6:	bf00      	nop
 8009be8:	f7f9 bf9c 	b.w	8003b24 <main+0x5bc>
				break;
 8009bec:	bf00      	nop
 8009bee:	f7f9 bf99 	b.w	8003b24 <main+0x5bc>
			break;
 8009bf2:	bf00      	nop
 8009bf4:	f7f9 bf96 	b.w	8003b24 <main+0x5bc>
			break;	
 8009bf8:	bf00      	nop
 8009bfa:	f7f9 bf93 	b.w	8003b24 <main+0x5bc>
			break;
 8009bfe:	bf00      	nop
 8009c00:	f7f9 bf90 	b.w	8003b24 <main+0x5bc>
			break;
 8009c04:	bf00      	nop
 8009c06:	f7f9 bf8d 	b.w	8003b24 <main+0x5bc>
				break;
 8009c0a:	bf00      	nop
 8009c0c:	f7f9 bf8a 	b.w	8003b24 <main+0x5bc>
				break;
 8009c10:	bf00      	nop
 8009c12:	f7f9 bf87 	b.w	8003b24 <main+0x5bc>
				break;
 8009c16:	bf00      	nop
 8009c18:	f7f9 bf84 	b.w	8003b24 <main+0x5bc>
				break;
 8009c1c:	bf00      	nop
 8009c1e:	f7f9 bf81 	b.w	8003b24 <main+0x5bc>
				break;
 8009c22:	bf00      	nop
 8009c24:	f7f9 bf7e 	b.w	8003b24 <main+0x5bc>
			break;
 8009c28:	bf00      	nop
 8009c2a:	f7f9 bf7b 	b.w	8003b24 <main+0x5bc>
			break;
 8009c2e:	bf00      	nop
 8009c30:	f7f9 bf78 	b.w	8003b24 <main+0x5bc>
			break;
 8009c34:	bf00      	nop
 8009c36:	f7f9 bf75 	b.w	8003b24 <main+0x5bc>
			break;
 8009c3a:	bf00      	nop
 8009c3c:	f7f9 bf72 	b.w	8003b24 <main+0x5bc>
			break;
 8009c40:	bf00      	nop
 8009c42:	f7f9 bf6f 	b.w	8003b24 <main+0x5bc>
			break;
 8009c46:	bf00      	nop
 8009c48:	f7f9 bf6c 	b.w	8003b24 <main+0x5bc>
				break;
 8009c4c:	bf00      	nop
 8009c4e:	f7f9 bf69 	b.w	8003b24 <main+0x5bc>
				break;
 8009c52:	bf00      	nop
 8009c54:	f7f9 bf66 	b.w	8003b24 <main+0x5bc>
				break;
 8009c58:	bf00      	nop
			HAL_IWDG_Refresh(&hiwdg);
 8009c5a:	f7f9 bf63 	b.w	8003b24 <main+0x5bc>
 8009c5e:	bf00      	nop
 8009c60:	0801e944 	.word	0x0801e944
 8009c64:	200003e8 	.word	0x200003e8
 8009c68:	200003c4 	.word	0x200003c4
 8009c6c:	0801e810 	.word	0x0801e810
 8009c70:	20000770 	.word	0x20000770

08009c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b098      	sub	sp, #96	; 0x60
 8009c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c7e:	2230      	movs	r2, #48	; 0x30
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f010 fae7 	bl	801a256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c88:	f107 031c 	add.w	r3, r7, #28
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	605a      	str	r2, [r3, #4]
 8009c92:	609a      	str	r2, [r3, #8]
 8009c94:	60da      	str	r2, [r3, #12]
 8009c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009c98:	f107 030c 	add.w	r3, r7, #12
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	609a      	str	r2, [r3, #8]
 8009ca4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60bb      	str	r3, [r7, #8]
 8009caa:	4b31      	ldr	r3, [pc, #196]	; (8009d70 <SystemClock_Config+0xfc>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	4a30      	ldr	r2, [pc, #192]	; (8009d70 <SystemClock_Config+0xfc>)
 8009cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8009cb6:	4b2e      	ldr	r3, [pc, #184]	; (8009d70 <SystemClock_Config+0xfc>)
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	607b      	str	r3, [r7, #4]
 8009cc6:	4b2b      	ldr	r3, [pc, #172]	; (8009d74 <SystemClock_Config+0x100>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a2a      	ldr	r2, [pc, #168]	; (8009d74 <SystemClock_Config+0x100>)
 8009ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <SystemClock_Config+0x100>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cda:	607b      	str	r3, [r7, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8009cde:	230d      	movs	r3, #13
 8009ce0:	633b      	str	r3, [r7, #48]	; 0x30
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009cec:	2301      	movs	r3, #1
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009cf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009cfa:	2319      	movs	r3, #25
 8009cfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 8009cfe:	2390      	movs	r3, #144	; 0x90
 8009d00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d02:	2302      	movs	r3, #2
 8009d04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8009d06:	2303      	movs	r3, #3
 8009d08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f005 ffa4 	bl	800fc5c <HAL_RCC_OscConfig>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009d1a:	f000 f82d 	bl	8009d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d1e:	230f      	movs	r3, #15
 8009d20:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d22:	2302      	movs	r3, #2
 8009d24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d26:	2300      	movs	r3, #0
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009d30:	2300      	movs	r3, #0
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009d34:	f107 031c 	add.w	r3, r7, #28
 8009d38:	2102      	movs	r1, #2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f006 f9fe 	bl	801013c <HAL_RCC_ClockConfig>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8009d46:	f000 f817 	bl	8009d78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d52:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d54:	f107 030c 	add.w	r3, r7, #12
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f006 fba7 	bl	80104ac <HAL_RCCEx_PeriphCLKConfig>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8009d64:	f000 f808 	bl	8009d78 <Error_Handler>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	3760      	adds	r7, #96	; 0x60
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	40023800 	.word	0x40023800
 8009d74:	40007000 	.word	0x40007000

08009d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009d7c:	bf00      	nop
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
	...

08009d88 <pca9632_init>:
#include "i2c.h"
#include "pca9632.h"

//////////////////////////////////////////////////////////////////
HAL_StatusTypeDef pca9632_init()
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af02      	add	r7, sp, #8
		HAL_I2C_MspInit(&hi2c1);
 8009d8e:	4828      	ldr	r0, [pc, #160]	; (8009e30 <pca9632_init+0xa8>)
 8009d90:	f7f8 ffd2 	bl	8002d38 <HAL_I2C_MspInit>
		MX_I2C1_Init();
 8009d94:	f7f8 ffa2 	bl	8002cdc <MX_I2C1_Init>
		uint8_t buffer[5];
		buffer[0]=PCA9632_CMD_MODE1;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	703b      	strb	r3, [r7, #0]
		buffer[1]=0x01;//00000001//normal & accept all call
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	707b      	strb	r3, [r7, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009da0:	463a      	mov	r2, r7
 8009da2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	2302      	movs	r3, #2
 8009daa:	21c0      	movs	r1, #192	; 0xc0
 8009dac:	4820      	ldr	r0, [pc, #128]	; (8009e30 <pca9632_init+0xa8>)
 8009dae:	f003 ff39 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <pca9632_init+0x34>
		return PCA9632_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e035      	b.n	8009e28 <pca9632_init+0xa0>
	HAL_Delay(20);
 8009dbc:	2014      	movs	r0, #20
 8009dbe:	f001 ff25 	bl	800bc0c <HAL_Delay>
	
		buffer[0]=PCA9632_CMD_MODE2;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	703b      	strb	r3, [r7, #0]
		buffer[1]=0x35;//00110101//blinking/invert/stop/totempole
 8009dc6:	2335      	movs	r3, #53	; 0x35
 8009dc8:	707b      	strb	r3, [r7, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009dca:	463a      	mov	r2, r7
 8009dcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	21c0      	movs	r1, #192	; 0xc0
 8009dd6:	4816      	ldr	r0, [pc, #88]	; (8009e30 <pca9632_init+0xa8>)
 8009dd8:	f003 ff24 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <pca9632_init+0x5e>
		return PCA9632_ERROR;	
 8009de2:	2301      	movs	r3, #1
 8009de4:	e020      	b.n	8009e28 <pca9632_init+0xa0>
	HAL_Delay(20);
 8009de6:	2014      	movs	r0, #20
 8009de8:	f001 ff10 	bl	800bc0c <HAL_Delay>
	//LEDS in pwm mode
	buffer[0]=PCA9632_CMD_LEDOUT;
 8009dec:	2308      	movs	r3, #8
 8009dee:	703b      	strb	r3, [r7, #0]
//	buffer[1]=0x0B;//00001011: LED0 in LDR0=11 , LED1 in LDR1=10
	buffer[1]=0x0F;//00001011: LED0 in LDR0=11 , LED1 in LDR1=11
 8009df0:	230f      	movs	r3, #15
 8009df2:	707b      	strb	r3, [r7, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009df4:	463a      	mov	r2, r7
 8009df6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	21c0      	movs	r1, #192	; 0xc0
 8009e00:	480b      	ldr	r0, [pc, #44]	; (8009e30 <pca9632_init+0xa8>)
 8009e02:	f003 ff0f 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <pca9632_init+0x88>
		return PCA9632_ERROR;	
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e00b      	b.n	8009e28 <pca9632_init+0xa0>
	HAL_Delay(20);
 8009e10:	2014      	movs	r0, #20
 8009e12:	f001 fefb 	bl	800bc0c <HAL_Delay>
	pca9632_setonepwm(LEDW,0);
 8009e16:	2100      	movs	r1, #0
 8009e18:	2001      	movs	r0, #1
 8009e1a:	f000 f80b 	bl	8009e34 <pca9632_setonepwm>
	pca9632_setonepwm(LEDIR,0);
 8009e1e:	2100      	movs	r1, #0
 8009e20:	2002      	movs	r0, #2
 8009e22:	f000 f807 	bl	8009e34 <pca9632_setonepwm>
	return PCA9632_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	200006fc 	.word	0x200006fc

08009e34 <pca9632_setonepwm>:
	*/
	return PCA9632_OK;
}
//////////////////////////////////////////////////////////////////
HAL_StatusTypeDef pca9632_setonepwm(uint8_t leds,uint8_t duty)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	460a      	mov	r2, r1
 8009e3e:	71fb      	strb	r3, [r7, #7]
 8009e40:	4613      	mov	r3, r2
 8009e42:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp;
	//suppose:bightess mode :MOD2:DMBLK=1
	//LED0(White) in 11(individual brightness and group dimming/blinking)
	// LED1(IR) in 10 (individual brightness can be controlled through its PWM1)
	//STEP2:PWM registers 0 to 3, PWMx � Individual brightness control registers
	switch(leds)
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	2b07      	cmp	r3, #7
 8009e4a:	d81f      	bhi.n	8009e8c <pca9632_setonepwm+0x58>
 8009e4c:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <pca9632_setonepwm+0x20>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e75 	.word	0x08009e75
 8009e58:	08009e7b 	.word	0x08009e7b
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009e81 	.word	0x08009e81
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e8d 	.word	0x08009e8d
 8009e70:	08009e87 	.word	0x08009e87
	{
		case 0x01:
				buffer[0]=PCA9632_CMD_PWM0;
 8009e74:	2302      	movs	r3, #2
 8009e76:	733b      	strb	r3, [r7, #12]
			break;
 8009e78:	e008      	b.n	8009e8c <pca9632_setonepwm+0x58>
		case  0x02:
				buffer[0]=PCA9632_CMD_PWM1;			
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	733b      	strb	r3, [r7, #12]
			break;
 8009e7e:	e005      	b.n	8009e8c <pca9632_setonepwm+0x58>
		case 0x04:
				buffer[0]=PCA9632_CMD_PWM2;			
 8009e80:	2304      	movs	r3, #4
 8009e82:	733b      	strb	r3, [r7, #12]
			break;
 8009e84:	e002      	b.n	8009e8c <pca9632_setonepwm+0x58>
		case 0x08:
				buffer[0]=PCA9632_CMD_PWM3;			
 8009e86:	2305      	movs	r3, #5
 8009e88:	733b      	strb	r3, [r7, #12]
			break;
 8009e8a:	bf00      	nop
	}
	tmp=((uint16_t)duty*256/100);
 8009e8c:	79bb      	ldrb	r3, [r7, #6]
 8009e8e:	021b      	lsls	r3, r3, #8
 8009e90:	4a12      	ldr	r2, [pc, #72]	; (8009edc <pca9632_setonepwm+0xa8>)
 8009e92:	fb82 1203 	smull	r1, r2, r2, r3
 8009e96:	1152      	asrs	r2, r2, #5
 8009e98:	17db      	asrs	r3, r3, #31
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	81fb      	strh	r3, [r7, #14]
	if(tmp>255) tmp=255;
 8009e9e:	89fb      	ldrh	r3, [r7, #14]
 8009ea0:	2bff      	cmp	r3, #255	; 0xff
 8009ea2:	d901      	bls.n	8009ea8 <pca9632_setonepwm+0x74>
 8009ea4:	23ff      	movs	r3, #255	; 0xff
 8009ea6:	81fb      	strh	r3, [r7, #14]
	buffer[1]=(uint8_t) tmp;
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009eae:	f107 020c 	add.w	r2, r7, #12
 8009eb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	21c0      	movs	r1, #192	; 0xc0
 8009ebc:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <pca9632_setonepwm+0xac>)
 8009ebe:	f003 feb1 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <pca9632_setonepwm+0x98>
		return PCA9632_ERROR;	
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e003      	b.n	8009ed4 <pca9632_setonepwm+0xa0>
	HAL_Delay(20);	
 8009ecc:	2014      	movs	r0, #20
 8009ece:	f001 fe9d 	bl	800bc0c <HAL_Delay>
return PCA9632_OK;	
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	51eb851f 	.word	0x51eb851f
 8009ee0:	200006fc 	.word	0x200006fc

08009ee4 <pca9632_setblinking>:
////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef pca9632_setblinking(float second) //0->100 ,0=blink off,1=0.1second,100=10second
{	
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af02      	add	r7, sp, #8
 8009eea:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t buffer[2];
	uint8_t tenthsecond=(uint8_t)((float)second*10.0);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7f6 fb2a 	bl	8000548 <__aeabi_f2d>
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	4b40      	ldr	r3, [pc, #256]	; (8009ffc <pca9632_setblinking+0x118>)
 8009efa:	f7f6 fb7d 	bl	80005f8 <__aeabi_dmul>
 8009efe:	4603      	mov	r3, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	4618      	mov	r0, r3
 8009f04:	4621      	mov	r1, r4
 8009f06:	f7f6 fe4f 	bl	8000ba8 <__aeabi_d2uiz>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
	//suppose LED0(White) in 11(individual brightness and group dimming/blinking)
	// LED1(IR) in 10 (individual brightness can be controlled through its PWM1)
	//STEP2:PWM registers 0 to 3, PWMx � Individual brightness control registers
	if(tenthsecond==0)
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d116      	bne.n	8009f42 <pca9632_setblinking+0x5e>
	{
		//goto LDR0=11,LDR2=10;
			buffer[0]=PCA9632_CMD_LEDOUT;
 8009f14:	2308      	movs	r3, #8
 8009f16:	733b      	strb	r3, [r7, #12]
			buffer[1]=0x0A;//00001010: LED0 in LDR0=10 , LED1 in LDR1=10
 8009f18:	230a      	movs	r3, #10
 8009f1a:	737b      	strb	r3, [r7, #13]
			if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009f1c:	f107 020c 	add.w	r2, r7, #12
 8009f20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	2302      	movs	r3, #2
 8009f28:	21c0      	movs	r1, #192	; 0xc0
 8009f2a:	4835      	ldr	r0, [pc, #212]	; (800a000 <pca9632_setblinking+0x11c>)
 8009f2c:	f003 fe7a 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <pca9632_setblinking+0x56>
				return PCA9632_ERROR;	
 8009f36:	2301      	movs	r3, #1
 8009f38:	e05b      	b.n	8009ff2 <pca9632_setblinking+0x10e>
			HAL_Delay(20);
 8009f3a:	2014      	movs	r0, #20
 8009f3c:	f001 fe66 	bl	800bc0c <HAL_Delay>
 8009f40:	e056      	b.n	8009ff0 <pca9632_setblinking+0x10c>
	}
	else
	{
		//goto LDR0=11,LDR2=10;
			buffer[0]=PCA9632_CMD_LEDOUT;
 8009f42:	2308      	movs	r3, #8
 8009f44:	733b      	strb	r3, [r7, #12]
			//buffer[1]=0x0B;//00001011: LED0 in LDR0=11 , LED1 in LDR1=10
			buffer[1]=0x0F;//00001011: LED0 in LDR0=11 , LED1 in LDR1=11
 8009f46:	230f      	movs	r3, #15
 8009f48:	737b      	strb	r3, [r7, #13]
			if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009f4a:	f107 020c 	add.w	r2, r7, #12
 8009f4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2302      	movs	r3, #2
 8009f56:	21c0      	movs	r1, #192	; 0xc0
 8009f58:	4829      	ldr	r0, [pc, #164]	; (800a000 <pca9632_setblinking+0x11c>)
 8009f5a:	f003 fe63 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <pca9632_setblinking+0x84>
				return PCA9632_ERROR;	
 8009f64:	2301      	movs	r3, #1
 8009f66:	e044      	b.n	8009ff2 <pca9632_setblinking+0x10e>
			HAL_Delay(20);
 8009f68:	2014      	movs	r0, #20
 8009f6a:	f001 fe4f 	bl	800bc0c <HAL_Delay>
			
			buffer[0]=PCA9632_CMD_GRPFREQ;
 8009f6e:	2307      	movs	r3, #7
 8009f70:	733b      	strb	r3, [r7, #12]
			buffer[1]=(uint8_t)((uint16_t)24*tenthsecond/5);
 8009f72:	7bfa      	ldrb	r2, [r7, #15]
 8009f74:	4613      	mov	r3, r2
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	4413      	add	r3, r2
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	4a21      	ldr	r2, [pc, #132]	; (800a004 <pca9632_setblinking+0x120>)
 8009f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8009f82:	1052      	asrs	r2, r2, #1
 8009f84:	17db      	asrs	r3, r3, #31
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	737b      	strb	r3, [r7, #13]
			if(buffer[1]>=1) 
 8009f8c:	7b7b      	ldrb	r3, [r7, #13]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <pca9632_setblinking+0xb8>
				buffer[1]--;
 8009f92:	7b7b      	ldrb	r3, [r7, #13]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	737b      	strb	r3, [r7, #13]
 8009f9a:	e001      	b.n	8009fa0 <pca9632_setblinking+0xbc>
			else
				buffer[1]=0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	737b      	strb	r3, [r7, #13]
			if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009fa0:	f107 020c 	add.w	r2, r7, #12
 8009fa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	2302      	movs	r3, #2
 8009fac:	21c0      	movs	r1, #192	; 0xc0
 8009fae:	4814      	ldr	r0, [pc, #80]	; (800a000 <pca9632_setblinking+0x11c>)
 8009fb0:	f003 fe38 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <pca9632_setblinking+0xda>
				return PCA9632_ERROR;	
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e019      	b.n	8009ff2 <pca9632_setblinking+0x10e>
			HAL_Delay(20);	
 8009fbe:	2014      	movs	r0, #20
 8009fc0:	f001 fe24 	bl	800bc0c <HAL_Delay>
			
			buffer[0]=PCA9632_CMD_GRPPWM;
 8009fc4:	2306      	movs	r3, #6
 8009fc6:	733b      	strb	r3, [r7, #12]
			buffer[1]=128;
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	737b      	strb	r3, [r7, #13]
			if(HAL_I2C_Master_Transmit(&hi2c1,PCA9632_BASEADDRESS<<1,buffer,2,500)!=PCA9632_OK)
 8009fcc:	f107 020c 	add.w	r2, r7, #12
 8009fd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	21c0      	movs	r1, #192	; 0xc0
 8009fda:	4809      	ldr	r0, [pc, #36]	; (800a000 <pca9632_setblinking+0x11c>)
 8009fdc:	f003 fe22 	bl	800dc24 <HAL_I2C_Master_Transmit>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <pca9632_setblinking+0x106>
				return PCA9632_ERROR;	
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e003      	b.n	8009ff2 <pca9632_setblinking+0x10e>
			HAL_Delay(20);	
 8009fea:	2014      	movs	r0, #20
 8009fec:	f001 fe0e 	bl	800bc0c <HAL_Delay>
			

	}
return PCA9632_OK;		
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd90      	pop	{r4, r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	40240000 	.word	0x40240000
 800a000:	200006fc 	.word	0x200006fc
 800a004:	66666667 	.word	0x66666667

0800a008 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800a00e:	1d3b      	adds	r3, r7, #4
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	605a      	str	r2, [r3, #4]
 800a016:	609a      	str	r2, [r3, #8]
 800a018:	60da      	str	r2, [r3, #12]
 800a01a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a01c:	2300      	movs	r3, #0
 800a01e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a020:	4b30      	ldr	r3, [pc, #192]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a022:	4a31      	ldr	r2, [pc, #196]	; (800a0e8 <MX_RTC_Init+0xe0>)
 800a024:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a028:	2200      	movs	r2, #0
 800a02a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a02c:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a02e:	227f      	movs	r2, #127	; 0x7f
 800a030:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a032:	4b2c      	ldr	r3, [pc, #176]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a038:	4b2a      	ldr	r3, [pc, #168]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a03e:	4b29      	ldr	r3, [pc, #164]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a040:	2200      	movs	r2, #0
 800a042:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a044:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a046:	2200      	movs	r2, #0
 800a048:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a04a:	4826      	ldr	r0, [pc, #152]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a04c:	f006 fb10 	bl	8010670 <HAL_RTC_Init>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800a056:	f7ff fe8f 	bl	8009d78 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
 if (HAL_RTCEx_BKUPRead (&hrtc,RTC_BKP_DR0) !=0x5050)
 800a05a:	2100      	movs	r1, #0
 800a05c:	4821      	ldr	r0, [pc, #132]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a05e:	f006 ff37 	bl	8010ed0 <HAL_RTCEx_BKUPRead>
 800a062:	4602      	mov	r2, r0
 800a064:	f245 0350 	movw	r3, #20560	; 0x5050
 800a068:	429a      	cmp	r2, r3
 800a06a:	d02d      	beq.n	800a0c8 <MX_RTC_Init+0xc0>
	{
		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date 
		*/
		sTime.Hours = 22;
 800a06c:	2316      	movs	r3, #22
 800a06e:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 38;
 800a070:	2326      	movs	r3, #38	; 0x26
 800a072:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	71bb      	strb	r3, [r7, #6]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a078:	2300      	movs	r3, #0
 800a07a:	613b      	str	r3, [r7, #16]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a080:	1d3b      	adds	r3, r7, #4
 800a082:	2200      	movs	r2, #0
 800a084:	4619      	mov	r1, r3
 800a086:	4817      	ldr	r0, [pc, #92]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a088:	f006 fb83 	bl	8010792 <HAL_RTC_SetTime>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <MX_RTC_Init+0x8e>
		{
			Error_Handler();
 800a092:	f7ff fe71 	bl	8009d78 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800a096:	2302      	movs	r3, #2
 800a098:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_JUNE;
 800a09a:	2306      	movs	r3, #6
 800a09c:	707b      	strb	r3, [r7, #1]
		sDate.Date = 2;
 800a09e:	2302      	movs	r3, #2
 800a0a0:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 2020-1980;
 800a0a2:	2328      	movs	r3, #40	; 0x28
 800a0a4:	70fb      	strb	r3, [r7, #3]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	480d      	ldr	r0, [pc, #52]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a0ae:	f006 fc8b 	bl	80109c8 <HAL_RTC_SetDate>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <MX_RTC_Init+0xb4>
		{
			Error_Handler();
 800a0b8:	f7ff fe5e 	bl	8009d78 <Error_Handler>
		}
  		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x5050);
 800a0bc:	f245 0250 	movw	r2, #20560	; 0x5050
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4808      	ldr	r0, [pc, #32]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a0c4:	f006 feea 	bl	8010e9c <HAL_RTCEx_BKUPWrite>
    Error_Handler();
  }
	*/
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800a0c8:	2204      	movs	r2, #4
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <MX_RTC_Init+0xdc>)
 800a0ce:	f006 fe01 	bl	8010cd4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 800a0d8:	f7ff fe4e 	bl	8009d78 <Error_Handler>
  }

}
 800a0dc:	bf00      	nop
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000818 	.word	0x20000818
 800a0e8:	40002800 	.word	0x40002800

0800a0ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a08      	ldr	r2, [pc, #32]	; (800a11c <HAL_RTC_MspInit+0x30>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d10a      	bne.n	800a114 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <HAL_RTC_MspInit+0x34>)
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	2003      	movs	r0, #3
 800a10a:	f002 fa88 	bl	800c61e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800a10e:	2003      	movs	r0, #3
 800a110:	f002 faa1 	bl	800c656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	40002800 	.word	0x40002800
 800a120:	42470e3c 	.word	0x42470e3c

0800a124 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a12a:	4a0d      	ldr	r2, [pc, #52]	; (800a160 <MX_SDIO_SD_Init+0x3c>)
 800a12c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a134:	4b09      	ldr	r3, [pc, #36]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a136:	2200      	movs	r2, #0
 800a138:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a142:	2200      	movs	r2, #0
 800a144:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a148:	2200      	movs	r2, #0
 800a14a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <MX_SDIO_SD_Init+0x38>)
 800a14e:	2203      	movs	r2, #3
 800a150:	619a      	str	r2, [r3, #24]

}
 800a152:	bf00      	nop
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	200008f8 	.word	0x200008f8
 800a160:	40012c00 	.word	0x40012c00

0800a164 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08a      	sub	sp, #40	; 0x28
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a16c:	f107 0314 	add.w	r3, r7, #20
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	605a      	str	r2, [r3, #4]
 800a176:	609a      	str	r2, [r3, #8]
 800a178:	60da      	str	r2, [r3, #12]
 800a17a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a68      	ldr	r2, [pc, #416]	; (800a324 <HAL_SD_MspInit+0x1c0>)
 800a182:	4293      	cmp	r3, r2
 800a184:	f040 80c9 	bne.w	800a31a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a188:	2300      	movs	r3, #0
 800a18a:	613b      	str	r3, [r7, #16]
 800a18c:	4b66      	ldr	r3, [pc, #408]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a190:	4a65      	ldr	r2, [pc, #404]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a192:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a196:	6453      	str	r3, [r2, #68]	; 0x44
 800a198:	4b63      	ldr	r3, [pc, #396]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1a0:	613b      	str	r3, [r7, #16]
 800a1a2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	4b5f      	ldr	r3, [pc, #380]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ac:	4a5e      	ldr	r2, [pc, #376]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1ae:	f043 0304 	orr.w	r3, r3, #4
 800a1b2:	6313      	str	r3, [r2, #48]	; 0x30
 800a1b4:	4b5c      	ldr	r3, [pc, #368]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60bb      	str	r3, [r7, #8]
 800a1c4:	4b58      	ldr	r3, [pc, #352]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	4a57      	ldr	r2, [pc, #348]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1ca:	f043 0308 	orr.w	r3, r3, #8
 800a1ce:	6313      	str	r3, [r2, #48]	; 0x30
 800a1d0:	4b55      	ldr	r3, [pc, #340]	; (800a328 <HAL_SD_MspInit+0x1c4>)
 800a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d4:	f003 0308 	and.w	r3, r3, #8
 800a1d8:	60bb      	str	r3, [r7, #8]
 800a1da:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800a1dc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800a1e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a1f2:	f107 0314 	add.w	r3, r7, #20
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	484c      	ldr	r0, [pc, #304]	; (800a32c <HAL_SD_MspInit+0x1c8>)
 800a1fa:	f003 f915 	bl	800d428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a1fe:	2304      	movs	r3, #4
 800a200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a202:	2302      	movs	r3, #2
 800a204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a206:	2300      	movs	r3, #0
 800a208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a20a:	2303      	movs	r3, #3
 800a20c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a20e:	230c      	movs	r3, #12
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4619      	mov	r1, r3
 800a218:	4845      	ldr	r0, [pc, #276]	; (800a330 <HAL_SD_MspInit+0x1cc>)
 800a21a:	f003 f905 	bl	800d428 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800a21e:	4b45      	ldr	r3, [pc, #276]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a220:	4a45      	ldr	r2, [pc, #276]	; (800a338 <HAL_SD_MspInit+0x1d4>)
 800a222:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a224:	4b43      	ldr	r3, [pc, #268]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a22a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a22c:	4b41      	ldr	r3, [pc, #260]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a22e:	2200      	movs	r2, #0
 800a230:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a232:	4b40      	ldr	r3, [pc, #256]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a234:	2200      	movs	r2, #0
 800a236:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a238:	4b3e      	ldr	r3, [pc, #248]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a23a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a23e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a240:	4b3c      	ldr	r3, [pc, #240]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a246:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a248:	4b3a      	ldr	r3, [pc, #232]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a24a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a24e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800a250:	4b38      	ldr	r3, [pc, #224]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a252:	2220      	movs	r2, #32
 800a254:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a256:	4b37      	ldr	r3, [pc, #220]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a258:	2200      	movs	r2, #0
 800a25a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a25c:	4b35      	ldr	r3, [pc, #212]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a25e:	2204      	movs	r2, #4
 800a260:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a262:	4b34      	ldr	r3, [pc, #208]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a264:	2203      	movs	r2, #3
 800a266:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a268:	4b32      	ldr	r3, [pc, #200]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a26a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a26e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a270:	4b30      	ldr	r3, [pc, #192]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a272:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800a278:	482e      	ldr	r0, [pc, #184]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a27a:	f002 fa15 	bl	800c6a8 <HAL_DMA_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800a284:	f7ff fd78 	bl	8009d78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a28c:	641a      	str	r2, [r3, #64]	; 0x40
 800a28e:	4a29      	ldr	r2, [pc, #164]	; (800a334 <HAL_SD_MspInit+0x1d0>)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800a294:	4b29      	ldr	r3, [pc, #164]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a296:	4a2a      	ldr	r2, [pc, #168]	; (800a340 <HAL_SD_MspInit+0x1dc>)
 800a298:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800a29a:	4b28      	ldr	r3, [pc, #160]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a29c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2a0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a2a2:	4b26      	ldr	r3, [pc, #152]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2a4:	2240      	movs	r2, #64	; 0x40
 800a2a6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2a8:	4b24      	ldr	r3, [pc, #144]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a2ae:	4b23      	ldr	r3, [pc, #140]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2b4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a2b6:	4b21      	ldr	r3, [pc, #132]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2bc:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a2be:	4b1f      	ldr	r3, [pc, #124]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a2c4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a2c6:	4b1d      	ldr	r3, [pc, #116]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a2cc:	4b1b      	ldr	r3, [pc, #108]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a2d2:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2d4:	2204      	movs	r2, #4
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a2d8:	4b18      	ldr	r3, [pc, #96]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2da:	2203      	movs	r2, #3
 800a2dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a2de:	4b17      	ldr	r3, [pc, #92]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a2e6:	4b15      	ldr	r3, [pc, #84]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a2ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800a2ee:	4813      	ldr	r0, [pc, #76]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a2f0:	f002 f9da 	bl	800c6a8 <HAL_DMA_Init>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800a2fa:	f7ff fd3d 	bl	8009d78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a0e      	ldr	r2, [pc, #56]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a302:	63da      	str	r2, [r3, #60]	; 0x3c
 800a304:	4a0d      	ldr	r2, [pc, #52]	; (800a33c <HAL_SD_MspInit+0x1d8>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800a30a:	2200      	movs	r2, #0
 800a30c:	2100      	movs	r1, #0
 800a30e:	2031      	movs	r0, #49	; 0x31
 800a310:	f002 f985 	bl	800c61e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a314:	2031      	movs	r0, #49	; 0x31
 800a316:	f002 f99e 	bl	800c656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a31a:	bf00      	nop
 800a31c:	3728      	adds	r7, #40	; 0x28
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40012c00 	.word	0x40012c00
 800a328:	40023800 	.word	0x40023800
 800a32c:	40020800 	.word	0x40020800
 800a330:	40020c00 	.word	0x40020c00
 800a334:	20000838 	.word	0x20000838
 800a338:	40026458 	.word	0x40026458
 800a33c:	20000898 	.word	0x20000898
 800a340:	400264a0 	.word	0x400264a0

0800a344 <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]

  if(sdHandle->Instance==SDIO)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a11      	ldr	r2, [pc, #68]	; (800a398 <HAL_SD_MspDeInit+0x54>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d11b      	bne.n	800a38e <HAL_SD_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();
 800a356:	4b11      	ldr	r3, [pc, #68]	; (800a39c <HAL_SD_MspDeInit+0x58>)
 800a358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a35a:	4a10      	ldr	r2, [pc, #64]	; (800a39c <HAL_SD_MspDeInit+0x58>)
 800a35c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a360:	6453      	str	r3, [r2, #68]	; 0x44
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_12);
 800a362:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800a366:	480e      	ldr	r0, [pc, #56]	; (800a3a0 <HAL_SD_MspDeInit+0x5c>)
 800a368:	f003 f9f8 	bl	800d75c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800a36c:	2104      	movs	r1, #4
 800a36e:	480d      	ldr	r0, [pc, #52]	; (800a3a4 <HAL_SD_MspDeInit+0x60>)
 800a370:	f003 f9f4 	bl	800d75c <HAL_GPIO_DeInit>

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	4618      	mov	r0, r3
 800a37a:	f002 fa43 	bl	800c804 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(sdHandle->hdmatx);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	4618      	mov	r0, r3
 800a384:	f002 fa3e 	bl	800c804 <HAL_DMA_DeInit>

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
 800a388:	2031      	movs	r0, #49	; 0x31
 800a38a:	f002 f972 	bl	800c672 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

  /* USER CODE END SDIO_MspDeInit 1 */
  }
} 
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	40012c00 	.word	0x40012c00
 800a39c:	40023800 	.word	0x40023800
 800a3a0:	40020800 	.word	0x40020800
 800a3a4:	40020c00 	.word	0x40020c00

0800a3a8 <reset_digits>:
uint16_t digit_pins[]={SEG_DIG1_Pin,SEG_DIG2_Pin,SEG_DIG3_Pin,SEG_DIG4_Pin};
char str_segments[]={' ',' ',' ',' '};
uint8_t dp_segments[]={0,0,0,0};
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void reset_digits()
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(SEG_DIG1_GPIO_Port,SEG_DIG1_Pin,GPIO_PIN_SET);
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a3b2:	480b      	ldr	r0, [pc, #44]	; (800a3e0 <reset_digits+0x38>)
 800a3b4:	f003 fae4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_DIG2_GPIO_Port,SEG_DIG2_Pin,GPIO_PIN_SET);
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a3be:	4809      	ldr	r0, [pc, #36]	; (800a3e4 <reset_digits+0x3c>)
 800a3c0:	f003 fade 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_DIG3_GPIO_Port,SEG_DIG3_Pin,GPIO_PIN_SET);
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a3ca:	4806      	ldr	r0, [pc, #24]	; (800a3e4 <reset_digits+0x3c>)
 800a3cc:	f003 fad8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_DIG4_GPIO_Port,SEG_DIG4_Pin,GPIO_PIN_SET);
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a3d6:	4803      	ldr	r0, [pc, #12]	; (800a3e4 <reset_digits+0x3c>)
 800a3d8:	f003 fad2 	bl	800d980 <HAL_GPIO_WritePin>
}
 800a3dc:	bf00      	nop
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	40020400 	.word	0x40020400
 800a3e4:	40021000 	.word	0x40021000

0800a3e8 <init_sevenseg>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_sevenseg()
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
	reset_digits();
 800a3ec:	f7ff ffdc 	bl	800a3a8 <reset_digits>
}
 800a3f0:	bf00      	nop
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <show_segments>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void show_segments(char ch)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
	switch(toupper(ch))
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	73fb      	strb	r3, [r7, #15]
 800a402:	f00f feed 	bl	801a1e0 <__locale_ctype_ptr>
 800a406:	4602      	mov	r2, r0
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d102      	bne.n	800a41e <show_segments+0x2a>
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	3b20      	subs	r3, #32
 800a41c:	e000      	b.n	800a420 <show_segments+0x2c>
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3b22      	subs	r3, #34	; 0x22
 800a422:	2b37      	cmp	r3, #55	; 0x37
 800a424:	f200 8536 	bhi.w	800ae94 <show_segments+0xaa0>
 800a428:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <show_segments+0x3c>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800ae3f 	.word	0x0800ae3f
 800a434:	0800ae95 	.word	0x0800ae95
 800a438:	0800ae95 	.word	0x0800ae95
 800a43c:	0800ae95 	.word	0x0800ae95
 800a440:	0800ae95 	.word	0x0800ae95
 800a444:	0800ade9 	.word	0x0800ade9
 800a448:	0800ae95 	.word	0x0800ae95
 800a44c:	0800ae95 	.word	0x0800ae95
 800a450:	0800ae95 	.word	0x0800ae95
 800a454:	0800ae95 	.word	0x0800ae95
 800a458:	0800ae95 	.word	0x0800ae95
 800a45c:	0800a881 	.word	0x0800a881
 800a460:	0800ae95 	.word	0x0800ae95
 800a464:	0800ae95 	.word	0x0800ae95
 800a468:	0800a511 	.word	0x0800a511
 800a46c:	0800a569 	.word	0x0800a569
 800a470:	0800a5c1 	.word	0x0800a5c1
 800a474:	0800a619 	.word	0x0800a619
 800a478:	0800a671 	.word	0x0800a671
 800a47c:	0800a6c9 	.word	0x0800a6c9
 800a480:	0800a71f 	.word	0x0800a71f
 800a484:	0800a775 	.word	0x0800a775
 800a488:	0800a7cb 	.word	0x0800a7cb
 800a48c:	0800a821 	.word	0x0800a821
 800a490:	0800ae95 	.word	0x0800ae95
 800a494:	0800ae95 	.word	0x0800ae95
 800a498:	0800ae95 	.word	0x0800ae95
 800a49c:	0800ae95 	.word	0x0800ae95
 800a4a0:	0800ae95 	.word	0x0800ae95
 800a4a4:	0800ae95 	.word	0x0800ae95
 800a4a8:	0800ae95 	.word	0x0800ae95
 800a4ac:	0800a8d7 	.word	0x0800a8d7
 800a4b0:	0800a92d 	.word	0x0800a92d
 800a4b4:	0800ae95 	.word	0x0800ae95
 800a4b8:	0800ac91 	.word	0x0800ac91
 800a4bc:	0800ab31 	.word	0x0800ab31
 800a4c0:	0800aa2f 	.word	0x0800aa2f
 800a4c4:	0800ae95 	.word	0x0800ae95
 800a4c8:	0800ab87 	.word	0x0800ab87
 800a4cc:	0800ae95 	.word	0x0800ae95
 800a4d0:	0800ae95 	.word	0x0800ae95
 800a4d4:	0800ae95 	.word	0x0800ae95
 800a4d8:	0800a9d9 	.word	0x0800a9d9
 800a4dc:	0800ae95 	.word	0x0800ae95
 800a4e0:	0800ace7 	.word	0x0800ace7
 800a4e4:	0800ad93 	.word	0x0800ad93
 800a4e8:	0800abe5 	.word	0x0800abe5
 800a4ec:	0800aa85 	.word	0x0800aa85
 800a4f0:	0800aadb 	.word	0x0800aadb
 800a4f4:	0800ae95 	.word	0x0800ae95
 800a4f8:	0800a983 	.word	0x0800a983
 800a4fc:	0800ac3b 	.word	0x0800ac3b
 800a500:	0800ae95 	.word	0x0800ae95
 800a504:	0800ae95 	.word	0x0800ae95
 800a508:	0800ae95 	.word	0x0800ae95
 800a50c:	0800ad3d 	.word	0x0800ad3d
	{
		case '0':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a510:	2200      	movs	r2, #0
 800a512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a516:	48d8      	ldr	r0, [pc, #864]	; (800a878 <show_segments+0x484>)
 800a518:	f003 fa32 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a51c:	2200      	movs	r2, #0
 800a51e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a522:	48d5      	ldr	r0, [pc, #852]	; (800a878 <show_segments+0x484>)
 800a524:	f003 fa2c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a528:	2200      	movs	r2, #0
 800a52a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a52e:	48d3      	ldr	r0, [pc, #844]	; (800a87c <show_segments+0x488>)
 800a530:	f003 fa26 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a534:	2200      	movs	r2, #0
 800a536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a53a:	48d0      	ldr	r0, [pc, #832]	; (800a87c <show_segments+0x488>)
 800a53c:	f003 fa20 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a540:	2200      	movs	r2, #0
 800a542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a546:	48cd      	ldr	r0, [pc, #820]	; (800a87c <show_segments+0x488>)
 800a548:	f003 fa1a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a54c:	2200      	movs	r2, #0
 800a54e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a552:	48c9      	ldr	r0, [pc, #804]	; (800a878 <show_segments+0x484>)
 800a554:	f003 fa14 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);	
 800a558:	2201      	movs	r2, #1
 800a55a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a55e:	48c7      	ldr	r0, [pc, #796]	; (800a87c <show_segments+0x488>)
 800a560:	f003 fa0e 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800a564:	f000 bcc0 	b.w	800aee8 <show_segments+0xaf4>
		case '1':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800a568:	2201      	movs	r2, #1
 800a56a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a56e:	48c2      	ldr	r0, [pc, #776]	; (800a878 <show_segments+0x484>)
 800a570:	f003 fa06 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a574:	2200      	movs	r2, #0
 800a576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a57a:	48bf      	ldr	r0, [pc, #764]	; (800a878 <show_segments+0x484>)
 800a57c:	f003 fa00 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a580:	2200      	movs	r2, #0
 800a582:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a586:	48bd      	ldr	r0, [pc, #756]	; (800a87c <show_segments+0x488>)
 800a588:	f003 f9fa 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800a58c:	2201      	movs	r2, #1
 800a58e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a592:	48ba      	ldr	r0, [pc, #744]	; (800a87c <show_segments+0x488>)
 800a594:	f003 f9f4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a598:	2201      	movs	r2, #1
 800a59a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a59e:	48b7      	ldr	r0, [pc, #732]	; (800a87c <show_segments+0x488>)
 800a5a0:	f003 f9ee 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5aa:	48b3      	ldr	r0, [pc, #716]	; (800a878 <show_segments+0x484>)
 800a5ac:	f003 f9e8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);	
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5b6:	48b1      	ldr	r0, [pc, #708]	; (800a87c <show_segments+0x488>)
 800a5b8:	f003 f9e2 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a5bc:	f000 bc94 	b.w	800aee8 <show_segments+0xaf4>
		case '2':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a5c6:	48ac      	ldr	r0, [pc, #688]	; (800a878 <show_segments+0x484>)
 800a5c8:	f003 f9da 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5d2:	48a9      	ldr	r0, [pc, #676]	; (800a878 <show_segments+0x484>)
 800a5d4:	f003 f9d4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);	
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a5de:	48a7      	ldr	r0, [pc, #668]	; (800a87c <show_segments+0x488>)
 800a5e0:	f003 f9ce 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5ea:	48a4      	ldr	r0, [pc, #656]	; (800a87c <show_segments+0x488>)
 800a5ec:	f003 f9c8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a5f6:	48a1      	ldr	r0, [pc, #644]	; (800a87c <show_segments+0x488>)
 800a5f8:	f003 f9c2 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a602:	489d      	ldr	r0, [pc, #628]	; (800a878 <show_segments+0x484>)
 800a604:	f003 f9bc 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a60e:	489b      	ldr	r0, [pc, #620]	; (800a87c <show_segments+0x488>)
 800a610:	f003 f9b6 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a614:	f000 bc68 	b.w	800aee8 <show_segments+0xaf4>
		case '3':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a618:	2200      	movs	r2, #0
 800a61a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a61e:	4896      	ldr	r0, [pc, #600]	; (800a878 <show_segments+0x484>)
 800a620:	f003 f9ae 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a624:	2200      	movs	r2, #0
 800a626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a62a:	4893      	ldr	r0, [pc, #588]	; (800a878 <show_segments+0x484>)
 800a62c:	f003 f9a8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a630:	2200      	movs	r2, #0
 800a632:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a636:	4891      	ldr	r0, [pc, #580]	; (800a87c <show_segments+0x488>)
 800a638:	f003 f9a2 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a63c:	2200      	movs	r2, #0
 800a63e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a642:	488e      	ldr	r0, [pc, #568]	; (800a87c <show_segments+0x488>)
 800a644:	f003 f99c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a648:	2201      	movs	r2, #1
 800a64a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a64e:	488b      	ldr	r0, [pc, #556]	; (800a87c <show_segments+0x488>)
 800a650:	f003 f996 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800a654:	2201      	movs	r2, #1
 800a656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a65a:	4887      	ldr	r0, [pc, #540]	; (800a878 <show_segments+0x484>)
 800a65c:	f003 f990 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a660:	2200      	movs	r2, #0
 800a662:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a666:	4885      	ldr	r0, [pc, #532]	; (800a87c <show_segments+0x488>)
 800a668:	f003 f98a 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a66c:	f000 bc3c 	b.w	800aee8 <show_segments+0xaf4>
		case '4':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800a670:	2201      	movs	r2, #1
 800a672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a676:	4880      	ldr	r0, [pc, #512]	; (800a878 <show_segments+0x484>)
 800a678:	f003 f982 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a67c:	2200      	movs	r2, #0
 800a67e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a682:	487d      	ldr	r0, [pc, #500]	; (800a878 <show_segments+0x484>)
 800a684:	f003 f97c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a68e:	487b      	ldr	r0, [pc, #492]	; (800a87c <show_segments+0x488>)
 800a690:	f003 f976 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800a694:	2201      	movs	r2, #1
 800a696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a69a:	4878      	ldr	r0, [pc, #480]	; (800a87c <show_segments+0x488>)
 800a69c:	f003 f970 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6a6:	4875      	ldr	r0, [pc, #468]	; (800a87c <show_segments+0x488>)
 800a6a8:	f003 f96a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a6b2:	4871      	ldr	r0, [pc, #452]	; (800a878 <show_segments+0x484>)
 800a6b4:	f003 f964 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a6be:	486f      	ldr	r0, [pc, #444]	; (800a87c <show_segments+0x488>)
 800a6c0:	f003 f95e 	bl	800d980 <HAL_GPIO_WritePin>

		break;
 800a6c4:	f000 bc10 	b.w	800aee8 <show_segments+0xaf4>
		case '5':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a6ce:	486a      	ldr	r0, [pc, #424]	; (800a878 <show_segments+0x484>)
 800a6d0:	f003 f956 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);	
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6da:	4867      	ldr	r0, [pc, #412]	; (800a878 <show_segments+0x484>)
 800a6dc:	f003 f950 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6e6:	4865      	ldr	r0, [pc, #404]	; (800a87c <show_segments+0x488>)
 800a6e8:	f003 f94a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6f2:	4862      	ldr	r0, [pc, #392]	; (800a87c <show_segments+0x488>)
 800a6f4:	f003 f944 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6fe:	485f      	ldr	r0, [pc, #380]	; (800a87c <show_segments+0x488>)
 800a700:	f003 f93e 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a704:	2200      	movs	r2, #0
 800a706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a70a:	485b      	ldr	r0, [pc, #364]	; (800a878 <show_segments+0x484>)
 800a70c:	f003 f938 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a710:	2200      	movs	r2, #0
 800a712:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a716:	4859      	ldr	r0, [pc, #356]	; (800a87c <show_segments+0x488>)
 800a718:	f003 f932 	bl	800d980 <HAL_GPIO_WritePin>
		break;		
 800a71c:	e3e4      	b.n	800aee8 <show_segments+0xaf4>
		case '6':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a71e:	2200      	movs	r2, #0
 800a720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a724:	4854      	ldr	r0, [pc, #336]	; (800a878 <show_segments+0x484>)
 800a726:	f003 f92b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);	
 800a72a:	2201      	movs	r2, #1
 800a72c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a730:	4851      	ldr	r0, [pc, #324]	; (800a878 <show_segments+0x484>)
 800a732:	f003 f925 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a736:	2200      	movs	r2, #0
 800a738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a73c:	484f      	ldr	r0, [pc, #316]	; (800a87c <show_segments+0x488>)
 800a73e:	f003 f91f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a742:	2200      	movs	r2, #0
 800a744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a748:	484c      	ldr	r0, [pc, #304]	; (800a87c <show_segments+0x488>)
 800a74a:	f003 f919 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a74e:	2200      	movs	r2, #0
 800a750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a754:	4849      	ldr	r0, [pc, #292]	; (800a87c <show_segments+0x488>)
 800a756:	f003 f913 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a75a:	2200      	movs	r2, #0
 800a75c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a760:	4845      	ldr	r0, [pc, #276]	; (800a878 <show_segments+0x484>)
 800a762:	f003 f90d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a766:	2200      	movs	r2, #0
 800a768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a76c:	4843      	ldr	r0, [pc, #268]	; (800a87c <show_segments+0x488>)
 800a76e:	f003 f907 	bl	800d980 <HAL_GPIO_WritePin>
		break;			
 800a772:	e3b9      	b.n	800aee8 <show_segments+0xaf4>
		case '7':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a774:	2200      	movs	r2, #0
 800a776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a77a:	483f      	ldr	r0, [pc, #252]	; (800a878 <show_segments+0x484>)
 800a77c:	f003 f900 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a780:	2200      	movs	r2, #0
 800a782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a786:	483c      	ldr	r0, [pc, #240]	; (800a878 <show_segments+0x484>)
 800a788:	f003 f8fa 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a78c:	2200      	movs	r2, #0
 800a78e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a792:	483a      	ldr	r0, [pc, #232]	; (800a87c <show_segments+0x488>)
 800a794:	f003 f8f4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800a798:	2201      	movs	r2, #1
 800a79a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a79e:	4837      	ldr	r0, [pc, #220]	; (800a87c <show_segments+0x488>)
 800a7a0:	f003 f8ee 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7aa:	4834      	ldr	r0, [pc, #208]	; (800a87c <show_segments+0x488>)
 800a7ac:	f003 f8e8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a7b6:	4830      	ldr	r0, [pc, #192]	; (800a878 <show_segments+0x484>)
 800a7b8:	f003 f8e2 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);	
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7c2:	482e      	ldr	r0, [pc, #184]	; (800a87c <show_segments+0x488>)
 800a7c4:	f003 f8dc 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a7c8:	e38e      	b.n	800aee8 <show_segments+0xaf4>
		case '8':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a7d0:	4829      	ldr	r0, [pc, #164]	; (800a878 <show_segments+0x484>)
 800a7d2:	f003 f8d5 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7dc:	4826      	ldr	r0, [pc, #152]	; (800a878 <show_segments+0x484>)
 800a7de:	f003 f8cf 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7e8:	4824      	ldr	r0, [pc, #144]	; (800a87c <show_segments+0x488>)
 800a7ea:	f003 f8c9 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7f4:	4821      	ldr	r0, [pc, #132]	; (800a87c <show_segments+0x488>)
 800a7f6:	f003 f8c3 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a800:	481e      	ldr	r0, [pc, #120]	; (800a87c <show_segments+0x488>)
 800a802:	f003 f8bd 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a806:	2200      	movs	r2, #0
 800a808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a80c:	481a      	ldr	r0, [pc, #104]	; (800a878 <show_segments+0x484>)
 800a80e:	f003 f8b7 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a812:	2200      	movs	r2, #0
 800a814:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a818:	4818      	ldr	r0, [pc, #96]	; (800a87c <show_segments+0x488>)
 800a81a:	f003 f8b1 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800a81e:	e363      	b.n	800aee8 <show_segments+0xaf4>
		case '9':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a820:	2200      	movs	r2, #0
 800a822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a826:	4814      	ldr	r0, [pc, #80]	; (800a878 <show_segments+0x484>)
 800a828:	f003 f8aa 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a82c:	2200      	movs	r2, #0
 800a82e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a832:	4811      	ldr	r0, [pc, #68]	; (800a878 <show_segments+0x484>)
 800a834:	f003 f8a4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a838:	2200      	movs	r2, #0
 800a83a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a83e:	480f      	ldr	r0, [pc, #60]	; (800a87c <show_segments+0x488>)
 800a840:	f003 f89e 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a844:	2200      	movs	r2, #0
 800a846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a84a:	480c      	ldr	r0, [pc, #48]	; (800a87c <show_segments+0x488>)
 800a84c:	f003 f898 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a850:	2201      	movs	r2, #1
 800a852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a856:	4809      	ldr	r0, [pc, #36]	; (800a87c <show_segments+0x488>)
 800a858:	f003 f892 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a85c:	2200      	movs	r2, #0
 800a85e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a862:	4805      	ldr	r0, [pc, #20]	; (800a878 <show_segments+0x484>)
 800a864:	f003 f88c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a868:	2200      	movs	r2, #0
 800a86a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a86e:	4803      	ldr	r0, [pc, #12]	; (800a87c <show_segments+0x488>)
 800a870:	f003 f886 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a874:	e338      	b.n	800aee8 <show_segments+0xaf4>
 800a876:	bf00      	nop
 800a878:	40021000 	.word	0x40021000
 800a87c:	40020c00 	.word	0x40020c00
		case '-':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800a880:	2201      	movs	r2, #1
 800a882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a886:	48d5      	ldr	r0, [pc, #852]	; (800abdc <show_segments+0x7e8>)
 800a888:	f003 f87a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);	
 800a88c:	2201      	movs	r2, #1
 800a88e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a892:	48d2      	ldr	r0, [pc, #840]	; (800abdc <show_segments+0x7e8>)
 800a894:	f003 f874 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);	
 800a898:	2201      	movs	r2, #1
 800a89a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a89e:	48d0      	ldr	r0, [pc, #832]	; (800abe0 <show_segments+0x7ec>)
 800a8a0:	f003 f86e 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8aa:	48cd      	ldr	r0, [pc, #820]	; (800abe0 <show_segments+0x7ec>)
 800a8ac:	f003 f868 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8b6:	48ca      	ldr	r0, [pc, #808]	; (800abe0 <show_segments+0x7ec>)
 800a8b8:	f003 f862 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a8c2:	48c6      	ldr	r0, [pc, #792]	; (800abdc <show_segments+0x7e8>)
 800a8c4:	f003 f85c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8ce:	48c4      	ldr	r0, [pc, #784]	; (800abe0 <show_segments+0x7ec>)
 800a8d0:	f003 f856 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a8d4:	e308      	b.n	800aee8 <show_segments+0xaf4>
		case 'A':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8dc:	48bf      	ldr	r0, [pc, #764]	; (800abdc <show_segments+0x7e8>)
 800a8de:	f003 f84f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8e8:	48bc      	ldr	r0, [pc, #752]	; (800abdc <show_segments+0x7e8>)
 800a8ea:	f003 f849 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8f4:	48ba      	ldr	r0, [pc, #744]	; (800abe0 <show_segments+0x7ec>)
 800a8f6:	f003 f843 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a900:	48b7      	ldr	r0, [pc, #732]	; (800abe0 <show_segments+0x7ec>)
 800a902:	f003 f83d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a906:	2200      	movs	r2, #0
 800a908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a90c:	48b4      	ldr	r0, [pc, #720]	; (800abe0 <show_segments+0x7ec>)
 800a90e:	f003 f837 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a912:	2200      	movs	r2, #0
 800a914:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a918:	48b0      	ldr	r0, [pc, #704]	; (800abdc <show_segments+0x7e8>)
 800a91a:	f003 f831 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a91e:	2200      	movs	r2, #0
 800a920:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a924:	48ae      	ldr	r0, [pc, #696]	; (800abe0 <show_segments+0x7ec>)
 800a926:	f003 f82b 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800a92a:	e2dd      	b.n	800aee8 <show_segments+0xaf4>
		case 'B':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);
 800a92c:	2201      	movs	r2, #1
 800a92e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a932:	48aa      	ldr	r0, [pc, #680]	; (800abdc <show_segments+0x7e8>)
 800a934:	f003 f824 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800a938:	2201      	movs	r2, #1
 800a93a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a93e:	48a7      	ldr	r0, [pc, #668]	; (800abdc <show_segments+0x7e8>)
 800a940:	f003 f81e 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800a944:	2200      	movs	r2, #0
 800a946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a94a:	48a5      	ldr	r0, [pc, #660]	; (800abe0 <show_segments+0x7ec>)
 800a94c:	f003 f818 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a950:	2200      	movs	r2, #0
 800a952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a956:	48a2      	ldr	r0, [pc, #648]	; (800abe0 <show_segments+0x7ec>)
 800a958:	f003 f812 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a95c:	2200      	movs	r2, #0
 800a95e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a962:	489f      	ldr	r0, [pc, #636]	; (800abe0 <show_segments+0x7ec>)
 800a964:	f003 f80c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a968:	2200      	movs	r2, #0
 800a96a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a96e:	489b      	ldr	r0, [pc, #620]	; (800abdc <show_segments+0x7e8>)
 800a970:	f003 f806 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a974:	2200      	movs	r2, #0
 800a976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a97a:	4899      	ldr	r0, [pc, #612]	; (800abe0 <show_segments+0x7ec>)
 800a97c:	f003 f800 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a980:	e2b2      	b.n	800aee8 <show_segments+0xaf4>
		case 'T':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);
 800a982:	2201      	movs	r2, #1
 800a984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a988:	4894      	ldr	r0, [pc, #592]	; (800abdc <show_segments+0x7e8>)
 800a98a:	f002 fff9 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800a98e:	2201      	movs	r2, #1
 800a990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a994:	4891      	ldr	r0, [pc, #580]	; (800abdc <show_segments+0x7e8>)
 800a996:	f002 fff3 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800a99a:	2201      	movs	r2, #1
 800a99c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9a0:	488f      	ldr	r0, [pc, #572]	; (800abe0 <show_segments+0x7ec>)
 800a9a2:	f002 ffed 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a9ac:	488c      	ldr	r0, [pc, #560]	; (800abe0 <show_segments+0x7ec>)
 800a9ae:	f002 ffe7 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a9b8:	4889      	ldr	r0, [pc, #548]	; (800abe0 <show_segments+0x7ec>)
 800a9ba:	f002 ffe1 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a9c4:	4885      	ldr	r0, [pc, #532]	; (800abdc <show_segments+0x7e8>)
 800a9c6:	f002 ffdb 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a9d0:	4883      	ldr	r0, [pc, #524]	; (800abe0 <show_segments+0x7ec>)
 800a9d2:	f002 ffd5 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800a9d6:	e287      	b.n	800aee8 <show_segments+0xaf4>
		case 'L':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9de:	487f      	ldr	r0, [pc, #508]	; (800abdc <show_segments+0x7e8>)
 800a9e0:	f002 ffce 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a9ea:	487c      	ldr	r0, [pc, #496]	; (800abdc <show_segments+0x7e8>)
 800a9ec:	f002 ffc8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9f6:	487a      	ldr	r0, [pc, #488]	; (800abe0 <show_segments+0x7ec>)
 800a9f8:	f002 ffc2 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa02:	4877      	ldr	r0, [pc, #476]	; (800abe0 <show_segments+0x7ec>)
 800aa04:	f002 ffbc 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aa0e:	4874      	ldr	r0, [pc, #464]	; (800abe0 <show_segments+0x7ec>)
 800aa10:	f002 ffb6 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800aa14:	2200      	movs	r2, #0
 800aa16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa1a:	4870      	ldr	r0, [pc, #448]	; (800abdc <show_segments+0x7e8>)
 800aa1c:	f002 ffb0 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);
 800aa20:	2201      	movs	r2, #1
 800aa22:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa26:	486e      	ldr	r0, [pc, #440]	; (800abe0 <show_segments+0x7ec>)
 800aa28:	f002 ffaa 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800aa2c:	e25c      	b.n	800aee8 <show_segments+0xaf4>
		case 'F':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa34:	4869      	ldr	r0, [pc, #420]	; (800abdc <show_segments+0x7e8>)
 800aa36:	f002 ffa3 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa40:	4866      	ldr	r0, [pc, #408]	; (800abdc <show_segments+0x7e8>)
 800aa42:	f002 ff9d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800aa46:	2201      	movs	r2, #1
 800aa48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa4c:	4864      	ldr	r0, [pc, #400]	; (800abe0 <show_segments+0x7ec>)
 800aa4e:	f002 ff97 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800aa52:	2201      	movs	r2, #1
 800aa54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa58:	4861      	ldr	r0, [pc, #388]	; (800abe0 <show_segments+0x7ec>)
 800aa5a:	f002 ff91 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aa64:	485e      	ldr	r0, [pc, #376]	; (800abe0 <show_segments+0x7ec>)
 800aa66:	f002 ff8b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa70:	485a      	ldr	r0, [pc, #360]	; (800abdc <show_segments+0x7e8>)
 800aa72:	f002 ff85 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800aa76:	2200      	movs	r2, #0
 800aa78:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa7c:	4858      	ldr	r0, [pc, #352]	; (800abe0 <show_segments+0x7ec>)
 800aa7e:	f002 ff7f 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800aa82:	e231      	b.n	800aee8 <show_segments+0xaf4>
		case 'Q':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800aa84:	2200      	movs	r2, #0
 800aa86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa8a:	4854      	ldr	r0, [pc, #336]	; (800abdc <show_segments+0x7e8>)
 800aa8c:	f002 ff78 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800aa90:	2200      	movs	r2, #0
 800aa92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aa96:	4851      	ldr	r0, [pc, #324]	; (800abdc <show_segments+0x7e8>)
 800aa98:	f002 ff72 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaa2:	484f      	ldr	r0, [pc, #316]	; (800abe0 <show_segments+0x7ec>)
 800aaa4:	f002 ff6c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aaae:	484c      	ldr	r0, [pc, #304]	; (800abe0 <show_segments+0x7ec>)
 800aab0:	f002 ff66 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);
 800aab4:	2201      	movs	r2, #1
 800aab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aaba:	4849      	ldr	r0, [pc, #292]	; (800abe0 <show_segments+0x7ec>)
 800aabc:	f002 ff60 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800aac0:	2200      	movs	r2, #0
 800aac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aac6:	4845      	ldr	r0, [pc, #276]	; (800abdc <show_segments+0x7e8>)
 800aac8:	f002 ff5a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800aacc:	2200      	movs	r2, #0
 800aace:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aad2:	4843      	ldr	r0, [pc, #268]	; (800abe0 <show_segments+0x7ec>)
 800aad4:	f002 ff54 	bl	800d980 <HAL_GPIO_WritePin>
		break;	
 800aad8:	e206      	b.n	800aee8 <show_segments+0xaf4>
		case 'R':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);
 800aada:	2201      	movs	r2, #1
 800aadc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aae0:	483e      	ldr	r0, [pc, #248]	; (800abdc <show_segments+0x7e8>)
 800aae2:	f002 ff4d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800aae6:	2201      	movs	r2, #1
 800aae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aaec:	483b      	ldr	r0, [pc, #236]	; (800abdc <show_segments+0x7e8>)
 800aaee:	f002 ff47 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaf8:	4839      	ldr	r0, [pc, #228]	; (800abe0 <show_segments+0x7ec>)
 800aafa:	f002 ff41 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800aafe:	2201      	movs	r2, #1
 800ab00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab04:	4836      	ldr	r0, [pc, #216]	; (800abe0 <show_segments+0x7ec>)
 800ab06:	f002 ff3b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab10:	4833      	ldr	r0, [pc, #204]	; (800abe0 <show_segments+0x7ec>)
 800ab12:	f002 ff35 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);
 800ab16:	2201      	movs	r2, #1
 800ab18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ab1c:	482f      	ldr	r0, [pc, #188]	; (800abdc <show_segments+0x7e8>)
 800ab1e:	f002 ff2f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800ab22:	2200      	movs	r2, #0
 800ab24:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab28:	482d      	ldr	r0, [pc, #180]	; (800abe0 <show_segments+0x7ec>)
 800ab2a:	f002 ff29 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800ab2e:	e1db      	b.n	800aee8 <show_segments+0xaf4>
		case 'E':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800ab30:	2200      	movs	r2, #0
 800ab32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab36:	4829      	ldr	r0, [pc, #164]	; (800abdc <show_segments+0x7e8>)
 800ab38:	f002 ff22 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab42:	4826      	ldr	r0, [pc, #152]	; (800abdc <show_segments+0x7e8>)
 800ab44:	f002 ff1c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab4e:	4824      	ldr	r0, [pc, #144]	; (800abe0 <show_segments+0x7ec>)
 800ab50:	f002 ff16 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800ab54:	2200      	movs	r2, #0
 800ab56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab5a:	4821      	ldr	r0, [pc, #132]	; (800abe0 <show_segments+0x7ec>)
 800ab5c:	f002 ff10 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800ab60:	2200      	movs	r2, #0
 800ab62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ab66:	481e      	ldr	r0, [pc, #120]	; (800abe0 <show_segments+0x7ec>)
 800ab68:	f002 ff0a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ab72:	481a      	ldr	r0, [pc, #104]	; (800abdc <show_segments+0x7e8>)
 800ab74:	f002 ff04 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab7e:	4818      	ldr	r0, [pc, #96]	; (800abe0 <show_segments+0x7ec>)
 800ab80:	f002 fefe 	bl	800d980 <HAL_GPIO_WritePin>
		break;		
 800ab84:	e1b0      	b.n	800aee8 <show_segments+0xaf4>
		case 'H':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ab86:	2201      	movs	r2, #1
 800ab88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ab8c:	4813      	ldr	r0, [pc, #76]	; (800abdc <show_segments+0x7e8>)
 800ab8e:	f002 fef7 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ab92:	2200      	movs	r2, #0
 800ab94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ab98:	4810      	ldr	r0, [pc, #64]	; (800abdc <show_segments+0x7e8>)
 800ab9a:	f002 fef1 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aba4:	480e      	ldr	r0, [pc, #56]	; (800abe0 <show_segments+0x7ec>)
 800aba6:	f002 feeb 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800abaa:	2201      	movs	r2, #1
 800abac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abb0:	480b      	ldr	r0, [pc, #44]	; (800abe0 <show_segments+0x7ec>)
 800abb2:	f002 fee5 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800abb6:	2200      	movs	r2, #0
 800abb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800abbc:	4808      	ldr	r0, [pc, #32]	; (800abe0 <show_segments+0x7ec>)
 800abbe:	f002 fedf 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800abc2:	2200      	movs	r2, #0
 800abc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800abc8:	4804      	ldr	r0, [pc, #16]	; (800abdc <show_segments+0x7e8>)
 800abca:	f002 fed9 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800abce:	2200      	movs	r2, #0
 800abd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abd4:	4802      	ldr	r0, [pc, #8]	; (800abe0 <show_segments+0x7ec>)
 800abd6:	f002 fed3 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800abda:	e185      	b.n	800aee8 <show_segments+0xaf4>
 800abdc:	40021000 	.word	0x40021000
 800abe0:	40020c00 	.word	0x40020c00
	case 'P':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800abe4:	2200      	movs	r2, #0
 800abe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abea:	48c1      	ldr	r0, [pc, #772]	; (800aef0 <show_segments+0xafc>)
 800abec:	f002 fec8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800abf0:	2200      	movs	r2, #0
 800abf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abf6:	48be      	ldr	r0, [pc, #760]	; (800aef0 <show_segments+0xafc>)
 800abf8:	f002 fec2 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);	
 800abfc:	2201      	movs	r2, #1
 800abfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac02:	48bc      	ldr	r0, [pc, #752]	; (800aef4 <show_segments+0xb00>)
 800ac04:	f002 febc 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac0e:	48b9      	ldr	r0, [pc, #740]	; (800aef4 <show_segments+0xb00>)
 800ac10:	f002 feb6 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800ac14:	2200      	movs	r2, #0
 800ac16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac1a:	48b6      	ldr	r0, [pc, #728]	; (800aef4 <show_segments+0xb00>)
 800ac1c:	f002 feb0 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800ac20:	2200      	movs	r2, #0
 800ac22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac26:	48b2      	ldr	r0, [pc, #712]	; (800aef0 <show_segments+0xafc>)
 800ac28:	f002 feaa 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac32:	48b0      	ldr	r0, [pc, #704]	; (800aef4 <show_segments+0xb00>)
 800ac34:	f002 fea4 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800ac38:	e156      	b.n	800aee8 <show_segments+0xaf4>

		case 'U':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac40:	48ab      	ldr	r0, [pc, #684]	; (800aef0 <show_segments+0xafc>)
 800ac42:	f002 fe9d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ac46:	2200      	movs	r2, #0
 800ac48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac4c:	48a8      	ldr	r0, [pc, #672]	; (800aef0 <show_segments+0xafc>)
 800ac4e:	f002 fe97 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800ac52:	2200      	movs	r2, #0
 800ac54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac58:	48a6      	ldr	r0, [pc, #664]	; (800aef4 <show_segments+0xb00>)
 800ac5a:	f002 fe91 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac64:	48a3      	ldr	r0, [pc, #652]	; (800aef4 <show_segments+0xb00>)
 800ac66:	f002 fe8b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ac70:	48a0      	ldr	r0, [pc, #640]	; (800aef4 <show_segments+0xb00>)
 800ac72:	f002 fe85 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800ac76:	2200      	movs	r2, #0
 800ac78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac7c:	489c      	ldr	r0, [pc, #624]	; (800aef0 <show_segments+0xafc>)
 800ac7e:	f002 fe7f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);	
 800ac82:	2201      	movs	r2, #1
 800ac84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac88:	489a      	ldr	r0, [pc, #616]	; (800aef4 <show_segments+0xb00>)
 800ac8a:	f002 fe79 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800ac8e:	e12b      	b.n	800aee8 <show_segments+0xaf4>
		case 'D':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ac90:	2201      	movs	r2, #1
 800ac92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac96:	4896      	ldr	r0, [pc, #600]	; (800aef0 <show_segments+0xafc>)
 800ac98:	f002 fe72 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aca2:	4893      	ldr	r0, [pc, #588]	; (800aef0 <show_segments+0xafc>)
 800aca4:	f002 fe6c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800acae:	4891      	ldr	r0, [pc, #580]	; (800aef4 <show_segments+0xb00>)
 800acb0:	f002 fe66 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800acb4:	2200      	movs	r2, #0
 800acb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800acba:	488e      	ldr	r0, [pc, #568]	; (800aef4 <show_segments+0xb00>)
 800acbc:	f002 fe60 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800acc0:	2200      	movs	r2, #0
 800acc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800acc6:	488b      	ldr	r0, [pc, #556]	; (800aef4 <show_segments+0xb00>)
 800acc8:	f002 fe5a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);
 800accc:	2201      	movs	r2, #1
 800acce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800acd2:	4887      	ldr	r0, [pc, #540]	; (800aef0 <show_segments+0xafc>)
 800acd4:	f002 fe54 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800acd8:	2200      	movs	r2, #0
 800acda:	f44f 7180 	mov.w	r1, #256	; 0x100
 800acde:	4885      	ldr	r0, [pc, #532]	; (800aef4 <show_segments+0xb00>)
 800ace0:	f002 fe4e 	bl	800d980 <HAL_GPIO_WritePin>
		break	;
 800ace4:	e100      	b.n	800aee8 <show_segments+0xaf4>
	case 'N':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ace6:	2201      	movs	r2, #1
 800ace8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800acec:	4880      	ldr	r0, [pc, #512]	; (800aef0 <show_segments+0xafc>)
 800acee:	f002 fe47 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);
 800acf2:	2201      	movs	r2, #1
 800acf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800acf8:	487d      	ldr	r0, [pc, #500]	; (800aef0 <show_segments+0xafc>)
 800acfa:	f002 fe41 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800acfe:	2200      	movs	r2, #0
 800ad00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad04:	487b      	ldr	r0, [pc, #492]	; (800aef4 <show_segments+0xb00>)
 800ad06:	f002 fe3b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad10:	4878      	ldr	r0, [pc, #480]	; (800aef4 <show_segments+0xb00>)
 800ad12:	f002 fe35 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800ad16:	2200      	movs	r2, #0
 800ad18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad1c:	4875      	ldr	r0, [pc, #468]	; (800aef4 <show_segments+0xb00>)
 800ad1e:	f002 fe2f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);
 800ad22:	2201      	movs	r2, #1
 800ad24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad28:	4871      	ldr	r0, [pc, #452]	; (800aef0 <show_segments+0xafc>)
 800ad2a:	f002 fe29 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad34:	486f      	ldr	r0, [pc, #444]	; (800aef4 <show_segments+0xb00>)
 800ad36:	f002 fe23 	bl	800d980 <HAL_GPIO_WritePin>
		break	;	
 800ad3a:	e0d5      	b.n	800aee8 <show_segments+0xaf4>
		case 'Y':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad42:	486b      	ldr	r0, [pc, #428]	; (800aef0 <show_segments+0xafc>)
 800ad44:	f002 fe1c 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad4e:	4868      	ldr	r0, [pc, #416]	; (800aef0 <show_segments+0xafc>)
 800ad50:	f002 fe16 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800ad54:	2200      	movs	r2, #0
 800ad56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad5a:	4866      	ldr	r0, [pc, #408]	; (800aef4 <show_segments+0xb00>)
 800ad5c:	f002 fe10 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800ad60:	2200      	movs	r2, #0
 800ad62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ad66:	4863      	ldr	r0, [pc, #396]	; (800aef4 <show_segments+0xb00>)
 800ad68:	f002 fe0a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ad72:	4860      	ldr	r0, [pc, #384]	; (800aef4 <show_segments+0xb00>)
 800ad74:	f002 fe04 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ad7e:	485c      	ldr	r0, [pc, #368]	; (800aef0 <show_segments+0xafc>)
 800ad80:	f002 fdfe 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_RESET);
 800ad84:	2200      	movs	r2, #0
 800ad86:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad8a:	485a      	ldr	r0, [pc, #360]	; (800aef4 <show_segments+0xb00>)
 800ad8c:	f002 fdf8 	bl	800d980 <HAL_GPIO_WritePin>
		break	;	
 800ad90:	e0aa      	b.n	800aee8 <show_segments+0xaf4>
		case 'O':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_RESET);
 800ad92:	2200      	movs	r2, #0
 800ad94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad98:	4855      	ldr	r0, [pc, #340]	; (800aef0 <show_segments+0xafc>)
 800ad9a:	f002 fdf1 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ada4:	4852      	ldr	r0, [pc, #328]	; (800aef0 <show_segments+0xafc>)
 800ada6:	f002 fdeb 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_RESET);
 800adaa:	2200      	movs	r2, #0
 800adac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800adb0:	4850      	ldr	r0, [pc, #320]	; (800aef4 <show_segments+0xb00>)
 800adb2:	f002 fde5 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_RESET);
 800adb6:	2200      	movs	r2, #0
 800adb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adbc:	484d      	ldr	r0, [pc, #308]	; (800aef4 <show_segments+0xb00>)
 800adbe:	f002 fddf 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_RESET);
 800adc2:	2200      	movs	r2, #0
 800adc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800adc8:	484a      	ldr	r0, [pc, #296]	; (800aef4 <show_segments+0xb00>)
 800adca:	f002 fdd9 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800adce:	2200      	movs	r2, #0
 800add0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800add4:	4846      	ldr	r0, [pc, #280]	; (800aef0 <show_segments+0xafc>)
 800add6:	f002 fdd3 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);
 800adda:	2201      	movs	r2, #1
 800addc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ade0:	4844      	ldr	r0, [pc, #272]	; (800aef4 <show_segments+0xb00>)
 800ade2:	f002 fdcd 	bl	800d980 <HAL_GPIO_WritePin>
		break;
 800ade6:	e07f      	b.n	800aee8 <show_segments+0xaf4>
		case '\'':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ade8:	2201      	movs	r2, #1
 800adea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800adee:	4840      	ldr	r0, [pc, #256]	; (800aef0 <show_segments+0xafc>)
 800adf0:	f002 fdc6 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800adf4:	2200      	movs	r2, #0
 800adf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800adfa:	483d      	ldr	r0, [pc, #244]	; (800aef0 <show_segments+0xafc>)
 800adfc:	f002 fdc0 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800ae00:	2201      	movs	r2, #1
 800ae02:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae06:	483b      	ldr	r0, [pc, #236]	; (800aef4 <show_segments+0xb00>)
 800ae08:	f002 fdba 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae12:	4838      	ldr	r0, [pc, #224]	; (800aef4 <show_segments+0xb00>)
 800ae14:	f002 fdb4 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae1e:	4835      	ldr	r0, [pc, #212]	; (800aef4 <show_segments+0xb00>)
 800ae20:	f002 fdae 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);
 800ae24:	2201      	movs	r2, #1
 800ae26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ae2a:	4831      	ldr	r0, [pc, #196]	; (800aef0 <show_segments+0xafc>)
 800ae2c:	f002 fda8 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);
 800ae30:	2201      	movs	r2, #1
 800ae32:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae36:	482f      	ldr	r0, [pc, #188]	; (800aef4 <show_segments+0xb00>)
 800ae38:	f002 fda2 	bl	800d980 <HAL_GPIO_WritePin>
		break	;
 800ae3c:	e054      	b.n	800aee8 <show_segments+0xaf4>

		case '\"':
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae44:	482a      	ldr	r0, [pc, #168]	; (800aef0 <show_segments+0xafc>)
 800ae46:	f002 fd9b 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_RESET);
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae50:	4827      	ldr	r0, [pc, #156]	; (800aef0 <show_segments+0xafc>)
 800ae52:	f002 fd95 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);
 800ae56:	2201      	movs	r2, #1
 800ae58:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae5c:	4825      	ldr	r0, [pc, #148]	; (800aef4 <show_segments+0xb00>)
 800ae5e:	f002 fd8f 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);
 800ae62:	2201      	movs	r2, #1
 800ae64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae68:	4822      	ldr	r0, [pc, #136]	; (800aef4 <show_segments+0xb00>)
 800ae6a:	f002 fd89 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae74:	481f      	ldr	r0, [pc, #124]	; (800aef4 <show_segments+0xb00>)
 800ae76:	f002 fd83 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_RESET);
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ae80:	481b      	ldr	r0, [pc, #108]	; (800aef0 <show_segments+0xafc>)
 800ae82:	f002 fd7d 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);
 800ae86:	2201      	movs	r2, #1
 800ae88:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae8c:	4819      	ldr	r0, [pc, #100]	; (800aef4 <show_segments+0xb00>)
 800ae8e:	f002 fd77 	bl	800d980 <HAL_GPIO_WritePin>
		break	;		
 800ae92:	e029      	b.n	800aee8 <show_segments+0xaf4>
		default	:
			HAL_GPIO_WritePin(SEG_A_GPIO_Port,SEG_A_Pin,GPIO_PIN_SET);	
 800ae94:	2201      	movs	r2, #1
 800ae96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae9a:	4815      	ldr	r0, [pc, #84]	; (800aef0 <show_segments+0xafc>)
 800ae9c:	f002 fd70 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_B_GPIO_Port,SEG_B_Pin,GPIO_PIN_SET);	
 800aea0:	2201      	movs	r2, #1
 800aea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aea6:	4812      	ldr	r0, [pc, #72]	; (800aef0 <show_segments+0xafc>)
 800aea8:	f002 fd6a 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_C_GPIO_Port,SEG_C_Pin,GPIO_PIN_SET);	
 800aeac:	2201      	movs	r2, #1
 800aeae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aeb2:	4810      	ldr	r0, [pc, #64]	; (800aef4 <show_segments+0xb00>)
 800aeb4:	f002 fd64 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_D_GPIO_Port,SEG_D_Pin,GPIO_PIN_SET);	
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800aebe:	480d      	ldr	r0, [pc, #52]	; (800aef4 <show_segments+0xb00>)
 800aec0:	f002 fd5e 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_E_GPIO_Port,SEG_E_Pin,GPIO_PIN_SET);	
 800aec4:	2201      	movs	r2, #1
 800aec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800aeca:	480a      	ldr	r0, [pc, #40]	; (800aef4 <show_segments+0xb00>)
 800aecc:	f002 fd58 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_F_GPIO_Port,SEG_F_Pin,GPIO_PIN_SET);	
 800aed0:	2201      	movs	r2, #1
 800aed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aed6:	4806      	ldr	r0, [pc, #24]	; (800aef0 <show_segments+0xafc>)
 800aed8:	f002 fd52 	bl	800d980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG_G_GPIO_Port,SEG_G_Pin,GPIO_PIN_SET);			
 800aedc:	2201      	movs	r2, #1
 800aede:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aee2:	4804      	ldr	r0, [pc, #16]	; (800aef4 <show_segments+0xb00>)
 800aee4:	f002 fd4c 	bl	800d980 <HAL_GPIO_WritePin>
	}
	
}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	40021000 	.word	0x40021000
 800aef4:	40020c00 	.word	0x40020c00

0800aef8 <HAL_TIM_PeriodElapsedCallback>:
uint16_t counter_Blink=0;
uint8_t disp_Blink=0;
uint8_t flag_Blink=0;
uint8_t flag_blinkLED=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM10)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a8b      	ldr	r2, [pc, #556]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800af06:	4293      	cmp	r3, r2
 800af08:	f040 820d 	bne.w	800b326 <HAL_TIM_PeriodElapsedCallback+0x42e>
	{
		//////////////////////////////////////////////////////////////////////
	if(GOMAINMENU_counter)
 800af0c:	4b8a      	ldr	r3, [pc, #552]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d005      	beq.n	800af20 <HAL_TIM_PeriodElapsedCallback+0x28>
		GOMAINMENU_counter--;
 800af14:	4b88      	ldr	r3, [pc, #544]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	4b86      	ldr	r3, [pc, #536]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800af1e:	801a      	strh	r2, [r3, #0]
		/////////////////////////////////////////////////////////////////////////////////
		counter_Blink++;
 800af20:	4b86      	ldr	r3, [pc, #536]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	4b84      	ldr	r3, [pc, #528]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800af2a:	801a      	strh	r2, [r3, #0]
		if(counter_Blink==BLINK_DELAY)
 800af2c:	4b83      	ldr	r3, [pc, #524]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800af2e:	881b      	ldrh	r3, [r3, #0]
 800af30:	2b96      	cmp	r3, #150	; 0x96
 800af32:	d109      	bne.n	800af48 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			counter_Blink=0;
 800af34:	4b81      	ldr	r3, [pc, #516]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800af36:	2200      	movs	r2, #0
 800af38:	801a      	strh	r2, [r3, #0]
			flag_Blink=1-flag_Blink;
 800af3a:	4b81      	ldr	r3, [pc, #516]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	f1c3 0301 	rsb	r3, r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	4b7e      	ldr	r3, [pc, #504]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800af46:	701a      	strb	r2, [r3, #0]
		}
		/////////////////////////////////////////////////////////////////////////////////
		counter_1s++;
 800af48:	4b7e      	ldr	r3, [pc, #504]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	b29a      	uxth	r2, r3
 800af50:	4b7c      	ldr	r3, [pc, #496]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800af52:	801a      	strh	r2, [r3, #0]
		if(counter_1s==500)
 800af54:	4b7b      	ldr	r3, [pc, #492]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800af5c:	d115      	bne.n	800af8a <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			counter_1s=0;
 800af5e:	4b79      	ldr	r3, [pc, #484]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800af60:	2200      	movs	r2, #0
 800af62:	801a      	strh	r2, [r3, #0]
			flag_1s=1;
 800af64:	4b78      	ldr	r3, [pc, #480]	; (800b148 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800af66:	2201      	movs	r2, #1
 800af68:	701a      	strb	r2, [r3, #0]
			counter_10s++;
 800af6a:	4b78      	ldr	r3, [pc, #480]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	3301      	adds	r3, #1
 800af70:	b29a      	uxth	r2, r3
 800af72:	4b76      	ldr	r3, [pc, #472]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800af74:	801a      	strh	r2, [r3, #0]
			if(counter_10s==10)
 800af76:	4b75      	ldr	r3, [pc, #468]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	2b0a      	cmp	r3, #10
 800af7c:	d105      	bne.n	800af8a <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				counter_10s=0;
 800af7e:	4b73      	ldr	r3, [pc, #460]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800af80:	2200      	movs	r2, #0
 800af82:	801a      	strh	r2, [r3, #0]
				flag_10s=1;
 800af84:	4b72      	ldr	r3, [pc, #456]	; (800b150 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800af86:	2201      	movs	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]
			}
		}
	///////////////////////////KEY STATE///////////////////////
	/////////////////////KEY SW4/////////////////////////////////
	current_state_sw4=(uint8_t)KEYSW4_GET();
 800af8a:	2101      	movs	r1, #1
 800af8c:	4871      	ldr	r0, [pc, #452]	; (800b154 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800af8e:	f002 fcdf 	bl	800d950 <HAL_GPIO_ReadPin>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	4b70      	ldr	r3, [pc, #448]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800af98:	701a      	strb	r2, [r3, #0]

	if(current_state_sw4 && !previous_state_sw4)
 800af9a:	4b6f      	ldr	r3, [pc, #444]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d016      	beq.n	800afd0 <HAL_TIM_PeriodElapsedCallback+0xd8>
 800afa2:	4b6e      	ldr	r3, [pc, #440]	; (800b15c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d112      	bne.n	800afd0 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		if((LIMIT_SHORT_L<KEYSW4_cntshort)&&(KEYSW4_cntshort<LIMIT_SHORT_H) && !KEYSW4_longpressed)
 800afaa:	4b6d      	ldr	r3, [pc, #436]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d90a      	bls.n	800afc8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800afb2:	4b6b      	ldr	r3, [pc, #428]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2bc7      	cmp	r3, #199	; 0xc7
 800afb8:	d806      	bhi.n	800afc8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 800afba:	4b6a      	ldr	r3, [pc, #424]	; (800b164 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d102      	bne.n	800afc8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		{
			KEYSW4_shortpressed=1;
 800afc2:	4b69      	ldr	r3, [pc, #420]	; (800b168 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]
		}                        
		KEYSW4_cntshort=0;
 800afc8:	4b65      	ldr	r3, [pc, #404]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	e02a      	b.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
	}
	else if(!current_state_sw4 && previous_state_sw4)
 800afd0:	4b61      	ldr	r3, [pc, #388]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d107      	bne.n	800afe8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 800afd8:	4b60      	ldr	r3, [pc, #384]	; (800b15c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <HAL_TIM_PeriodElapsedCallback+0xf0>
	{
		KEYSW4_cntshort=0;
 800afe0:	4b5f      	ldr	r3, [pc, #380]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	e01e      	b.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
	}
	else if(!current_state_sw4 && !previous_state_sw4)
 800afe8:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d11a      	bne.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
 800aff0:	4b5a      	ldr	r3, [pc, #360]	; (800b15c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d116      	bne.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
	{
		KEYSW4_cntshort++;
 800aff8:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3301      	adds	r3, #1
 800affe:	4a58      	ldr	r2, [pc, #352]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b000:	6013      	str	r3, [r2, #0]
		if((LIMIT_T1_L<KEYSW4_cntshort)&&(KEYSW4_cntshort<LIMIT_T1_H))
 800b002:	4b57      	ldr	r3, [pc, #348]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d90b      	bls.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
 800b00e:	4b54      	ldr	r3, [pc, #336]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800b016:	4293      	cmp	r3, r2
 800b018:	d805      	bhi.n	800b026 <HAL_TIM_PeriodElapsedCallback+0x12e>
		{
			KEYSW4_longpressed=1;
 800b01a:	4b52      	ldr	r3, [pc, #328]	; (800b164 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	701a      	strb	r2, [r3, #0]
			KEYSW4_cntshort=0;
 800b020:	4b4f      	ldr	r3, [pc, #316]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
		}                 
	}
	previous_state_sw4=current_state_sw4;		
 800b026:	4b4c      	ldr	r3, [pc, #304]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800b028:	781a      	ldrb	r2, [r3, #0]
 800b02a:	4b4c      	ldr	r3, [pc, #304]	; (800b15c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800b02c:	701a      	strb	r2, [r3, #0]
		
	/////////////////////KEY SW3/////////////////////////////////
	current_state_sw3=(uint8_t)KEYSW3_GET();
 800b02e:	2180      	movs	r1, #128	; 0x80
 800b030:	484e      	ldr	r0, [pc, #312]	; (800b16c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800b032:	f002 fc8d 	bl	800d950 <HAL_GPIO_ReadPin>
 800b036:	4603      	mov	r3, r0
 800b038:	461a      	mov	r2, r3
 800b03a:	4b4d      	ldr	r3, [pc, #308]	; (800b170 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b03c:	701a      	strb	r2, [r3, #0]

	if(current_state_sw3 && !previous_state_sw3)
 800b03e:	4b4c      	ldr	r3, [pc, #304]	; (800b170 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d016      	beq.n	800b074 <HAL_TIM_PeriodElapsedCallback+0x17c>
 800b046:	4b4b      	ldr	r3, [pc, #300]	; (800b174 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d112      	bne.n	800b074 <HAL_TIM_PeriodElapsedCallback+0x17c>
	{
		if((LIMIT_SHORT_L<KEYSW3_cntshort)&&(KEYSW3_cntshort<LIMIT_SHORT_H)&& !KEYSW3_longpressed)
 800b04e:	4b4a      	ldr	r3, [pc, #296]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b05      	cmp	r3, #5
 800b054:	d90a      	bls.n	800b06c <HAL_TIM_PeriodElapsedCallback+0x174>
 800b056:	4b48      	ldr	r3, [pc, #288]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2bc7      	cmp	r3, #199	; 0xc7
 800b05c:	d806      	bhi.n	800b06c <HAL_TIM_PeriodElapsedCallback+0x174>
 800b05e:	4b47      	ldr	r3, [pc, #284]	; (800b17c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <HAL_TIM_PeriodElapsedCallback+0x174>
		{
			KEYSW3_shortpressed=1;
 800b066:	4b46      	ldr	r3, [pc, #280]	; (800b180 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800b068:	2201      	movs	r2, #1
 800b06a:	701a      	strb	r2, [r3, #0]
		}                        
		KEYSW3_cntshort=0;
 800b06c:	4b42      	ldr	r3, [pc, #264]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	e02a      	b.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
	}
	else if(!current_state_sw3 && previous_state_sw3)
 800b074:	4b3e      	ldr	r3, [pc, #248]	; (800b170 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d107      	bne.n	800b08c <HAL_TIM_PeriodElapsedCallback+0x194>
 800b07c:	4b3d      	ldr	r3, [pc, #244]	; (800b174 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_TIM_PeriodElapsedCallback+0x194>
	{
		KEYSW3_cntshort=0;
 800b084:	4b3c      	ldr	r3, [pc, #240]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b086:	2200      	movs	r2, #0
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	e01e      	b.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
	}
	else if(!current_state_sw3 && !previous_state_sw3)
 800b08c:	4b38      	ldr	r3, [pc, #224]	; (800b170 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d11a      	bne.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
 800b094:	4b37      	ldr	r3, [pc, #220]	; (800b174 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d116      	bne.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
	{
		KEYSW3_cntshort++;
 800b09c:	4b36      	ldr	r3, [pc, #216]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	4a35      	ldr	r2, [pc, #212]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b0a4:	6013      	str	r3, [r2, #0]
		if((LIMIT_T1_L<KEYSW3_cntshort)&&(KEYSW3_cntshort<LIMIT_T1_H))
 800b0a6:	4b34      	ldr	r3, [pc, #208]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d90b      	bls.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
 800b0b2:	4b31      	ldr	r3, [pc, #196]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d805      	bhi.n	800b0ca <HAL_TIM_PeriodElapsedCallback+0x1d2>
		{
			KEYSW3_longpressed=1;
 800b0be:	4b2f      	ldr	r3, [pc, #188]	; (800b17c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	701a      	strb	r2, [r3, #0]
			KEYSW3_cntshort=0;
 800b0c4:	4b2c      	ldr	r3, [pc, #176]	; (800b178 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
		}                 
	}
	previous_state_sw3=current_state_sw3;		
 800b0ca:	4b29      	ldr	r3, [pc, #164]	; (800b170 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	4b29      	ldr	r3, [pc, #164]	; (800b174 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800b0d0:	701a      	strb	r2, [r3, #0]
		/////////////////////KEY SW2/////////////////////////////////
	current_state_sw2=(uint8_t)KEYSW2_GET();
 800b0d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0d6:	4825      	ldr	r0, [pc, #148]	; (800b16c <HAL_TIM_PeriodElapsedCallback+0x274>)
 800b0d8:	f002 fc3a 	bl	800d950 <HAL_GPIO_ReadPin>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	4b28      	ldr	r3, [pc, #160]	; (800b184 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b0e2:	701a      	strb	r2, [r3, #0]

	if(current_state_sw2 && !previous_state_sw2)
 800b0e4:	4b27      	ldr	r3, [pc, #156]	; (800b184 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d016      	beq.n	800b11a <HAL_TIM_PeriodElapsedCallback+0x222>
 800b0ec:	4b26      	ldr	r3, [pc, #152]	; (800b188 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d112      	bne.n	800b11a <HAL_TIM_PeriodElapsedCallback+0x222>
	{
		if((LIMIT_SHORT_L<KEYSW2_cntshort)&&(KEYSW2_cntshort<LIMIT_SHORT_H)&& !KEYSW2_longpressed)
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b05      	cmp	r3, #5
 800b0fa:	d90a      	bls.n	800b112 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800b0fc:	4b23      	ldr	r3, [pc, #140]	; (800b18c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2bc7      	cmp	r3, #199	; 0xc7
 800b102:	d806      	bhi.n	800b112 <HAL_TIM_PeriodElapsedCallback+0x21a>
 800b104:	4b22      	ldr	r3, [pc, #136]	; (800b190 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d102      	bne.n	800b112 <HAL_TIM_PeriodElapsedCallback+0x21a>
		{
			KEYSW2_shortpressed=1;
 800b10c:	4b21      	ldr	r3, [pc, #132]	; (800b194 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800b10e:	2201      	movs	r2, #1
 800b110:	701a      	strb	r2, [r3, #0]
		}                        
		KEYSW2_cntshort=0;
 800b112:	4b1e      	ldr	r3, [pc, #120]	; (800b18c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	e05d      	b.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
	}
	else if(!current_state_sw2 && previous_state_sw2)
 800b11a:	4b1a      	ldr	r3, [pc, #104]	; (800b184 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d13a      	bne.n	800b198 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 800b122:	4b19      	ldr	r3, [pc, #100]	; (800b188 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d036      	beq.n	800b198 <HAL_TIM_PeriodElapsedCallback+0x2a0>
	{
		KEYSW2_cntshort=0;
 800b12a:	4b18      	ldr	r3, [pc, #96]	; (800b18c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	e051      	b.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
 800b132:	bf00      	nop
 800b134:	40014400 	.word	0x40014400
 800b138:	200003e8 	.word	0x200003e8
 800b13c:	200003ea 	.word	0x200003ea
 800b140:	200003ed 	.word	0x200003ed
 800b144:	200003c0 	.word	0x200003c0
 800b148:	200003c4 	.word	0x200003c4
 800b14c:	200003c2 	.word	0x200003c2
 800b150:	200003c5 	.word	0x200003c5
 800b154:	40020400 	.word	0x40020400
 800b158:	2000097d 	.word	0x2000097d
 800b15c:	20000038 	.word	0x20000038
 800b160:	200003cc 	.word	0x200003cc
 800b164:	200003c8 	.word	0x200003c8
 800b168:	200003c7 	.word	0x200003c7
 800b16c:	40021000 	.word	0x40021000
 800b170:	2000097f 	.word	0x2000097f
 800b174:	20000039 	.word	0x20000039
 800b178:	200003d4 	.word	0x200003d4
 800b17c:	200003d1 	.word	0x200003d1
 800b180:	200003d0 	.word	0x200003d0
 800b184:	2000097e 	.word	0x2000097e
 800b188:	2000003a 	.word	0x2000003a
 800b18c:	200003dc 	.word	0x200003dc
 800b190:	200003d9 	.word	0x200003d9
 800b194:	200003d8 	.word	0x200003d8
	}
	else if(!current_state_sw2 && !previous_state_sw2)
 800b198:	4b6e      	ldr	r3, [pc, #440]	; (800b354 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d11a      	bne.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
 800b1a0:	4b6d      	ldr	r3, [pc, #436]	; (800b358 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d116      	bne.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
	{
		KEYSW2_cntshort++;
 800b1a8:	4b6c      	ldr	r3, [pc, #432]	; (800b35c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	4a6b      	ldr	r2, [pc, #428]	; (800b35c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b1b0:	6013      	str	r3, [r2, #0]
		if((LIMIT_T1_L<KEYSW2_cntshort)&&(KEYSW2_cntshort<LIMIT_T1_H))
 800b1b2:	4b6a      	ldr	r3, [pc, #424]	; (800b35c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d90b      	bls.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
 800b1be:	4b67      	ldr	r3, [pc, #412]	; (800b35c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d805      	bhi.n	800b1d6 <HAL_TIM_PeriodElapsedCallback+0x2de>
		{
			KEYSW2_longpressed=1;
 800b1ca:	4b65      	ldr	r3, [pc, #404]	; (800b360 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	701a      	strb	r2, [r3, #0]
			KEYSW2_cntshort=0;
 800b1d0:	4b62      	ldr	r3, [pc, #392]	; (800b35c <HAL_TIM_PeriodElapsedCallback+0x464>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
		}                 
	}
	previous_state_sw2=current_state_sw2;		
 800b1d6:	4b5f      	ldr	r3, [pc, #380]	; (800b354 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800b1d8:	781a      	ldrb	r2, [r3, #0]
 800b1da:	4b5f      	ldr	r3, [pc, #380]	; (800b358 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800b1dc:	701a      	strb	r2, [r3, #0]
	/////////////////////////////KEY SW1////////////////////////////////////
	current_state_sw1=(uint8_t)KEYSW1_GET();
 800b1de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1e2:	4860      	ldr	r0, [pc, #384]	; (800b364 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800b1e4:	f002 fbb4 	bl	800d950 <HAL_GPIO_ReadPin>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	4b5e      	ldr	r3, [pc, #376]	; (800b368 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b1ee:	701a      	strb	r2, [r3, #0]

	if(current_state_sw1 && !previous_state_sw1)
 800b1f0:	4b5d      	ldr	r3, [pc, #372]	; (800b368 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d016      	beq.n	800b226 <HAL_TIM_PeriodElapsedCallback+0x32e>
 800b1f8:	4b5c      	ldr	r3, [pc, #368]	; (800b36c <HAL_TIM_PeriodElapsedCallback+0x474>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d112      	bne.n	800b226 <HAL_TIM_PeriodElapsedCallback+0x32e>
	{
		if((LIMIT_SHORT_L<KEYSW1_cntshort)&&(KEYSW1_cntshort<LIMIT_SHORT_H)&& !KEYSW1_longpressed)
 800b200:	4b5b      	ldr	r3, [pc, #364]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b05      	cmp	r3, #5
 800b206:	d90a      	bls.n	800b21e <HAL_TIM_PeriodElapsedCallback+0x326>
 800b208:	4b59      	ldr	r3, [pc, #356]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2bc7      	cmp	r3, #199	; 0xc7
 800b20e:	d806      	bhi.n	800b21e <HAL_TIM_PeriodElapsedCallback+0x326>
 800b210:	4b58      	ldr	r3, [pc, #352]	; (800b374 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <HAL_TIM_PeriodElapsedCallback+0x326>
		{
			KEYSW1_shortpressed=1;
 800b218:	4b57      	ldr	r3, [pc, #348]	; (800b378 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	701a      	strb	r2, [r3, #0]
		}
		KEYSW1_cntshort=0;			
 800b21e:	4b54      	ldr	r3, [pc, #336]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e027      	b.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
	}
	else if(!current_state_sw1 && previous_state_sw1)
 800b226:	4b50      	ldr	r3, [pc, #320]	; (800b368 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d107      	bne.n	800b23e <HAL_TIM_PeriodElapsedCallback+0x346>
 800b22e:	4b4f      	ldr	r3, [pc, #316]	; (800b36c <HAL_TIM_PeriodElapsedCallback+0x474>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <HAL_TIM_PeriodElapsedCallback+0x346>
	{
		KEYSW1_cntshort=0;
 800b236:	4b4e      	ldr	r3, [pc, #312]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	e01b      	b.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
	}
	else if(!current_state_sw1 && !previous_state_sw1)
 800b23e:	4b4a      	ldr	r3, [pc, #296]	; (800b368 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d117      	bne.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
 800b246:	4b49      	ldr	r3, [pc, #292]	; (800b36c <HAL_TIM_PeriodElapsedCallback+0x474>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d113      	bne.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
	{	
		KEYSW1_cntshort++;
 800b24e:	4b48      	ldr	r3, [pc, #288]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	4a46      	ldr	r2, [pc, #280]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b256:	6013      	str	r3, [r2, #0]
		if((LIMIT_T1_L<KEYSW1_cntshort)&&(KEYSW1_cntshort<LIMIT_T1_H))
 800b258:	4b45      	ldr	r3, [pc, #276]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b260:	4293      	cmp	r3, r2
 800b262:	d908      	bls.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
 800b264:	4b42      	ldr	r3, [pc, #264]	; (800b370 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f240 62d5 	movw	r2, #1749	; 0x6d5
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d802      	bhi.n	800b276 <HAL_TIM_PeriodElapsedCallback+0x37e>
		{
			KEYSW1_longpressed=1;
 800b270:	4b40      	ldr	r3, [pc, #256]	; (800b374 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800b272:	2201      	movs	r2, #1
 800b274:	701a      	strb	r2, [r3, #0]
                        //KEYSET_cntshort=0;
		}		
	}
	previous_state_sw1=current_state_sw1;
 800b276:	4b3c      	ldr	r3, [pc, #240]	; (800b368 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	4b3c      	ldr	r3, [pc, #240]	; (800b36c <HAL_TIM_PeriodElapsedCallback+0x474>)
 800b27c:	701a      	strb	r2, [r3, #0]
	
	////////////////////////////////////////////////////////
		reset_digits(); //turn off all digits
 800b27e:	f7ff f893 	bl	800a3a8 <reset_digits>
		show_segments(str_segments[cur_seg]);
 800b282:	4b3e      	ldr	r3, [pc, #248]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	4b3d      	ldr	r3, [pc, #244]	; (800b380 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800b28a:	5c9b      	ldrb	r3, [r3, r2]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff f8b1 	bl	800a3f4 <show_segments>
		if(dp_segments[cur_seg]) //turn on dp
 800b292:	4b3a      	ldr	r3, [pc, #232]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	4b3a      	ldr	r3, [pc, #232]	; (800b384 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800b29a:	5c9b      	ldrb	r3, [r3, r2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <HAL_TIM_PeriodElapsedCallback+0x3b6>
			HAL_GPIO_WritePin(SEG_DP_GPIO_Port,SEG_DP_Pin,GPIO_PIN_RESET);			
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b2a6:	4838      	ldr	r0, [pc, #224]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800b2a8:	f002 fb6a 	bl	800d980 <HAL_GPIO_WritePin>
 800b2ac:	e005      	b.n	800b2ba <HAL_TIM_PeriodElapsedCallback+0x3c2>
		else
			HAL_GPIO_WritePin(SEG_DP_GPIO_Port,SEG_DP_Pin,GPIO_PIN_SET);			
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b2b4:	4834      	ldr	r0, [pc, #208]	; (800b388 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800b2b6:	f002 fb63 	bl	800d980 <HAL_GPIO_WritePin>
		if(disp_Blink && flag_Blink)
 800b2ba:	4b34      	ldr	r3, [pc, #208]	; (800b38c <HAL_TIM_PeriodElapsedCallback+0x494>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d014      	beq.n	800b2ec <HAL_TIM_PeriodElapsedCallback+0x3f4>
 800b2c2:	4b33      	ldr	r3, [pc, #204]	; (800b390 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d010      	beq.n	800b2ec <HAL_TIM_PeriodElapsedCallback+0x3f4>
		{
				HAL_GPIO_WritePin(digit_ports[cur_seg],digit_pins[cur_seg],GPIO_PIN_SET);//turn on current digits			
 800b2ca:	4b2c      	ldr	r3, [pc, #176]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4b30      	ldr	r3, [pc, #192]	; (800b394 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800b2d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b2d6:	4b29      	ldr	r3, [pc, #164]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	4b2e      	ldr	r3, [pc, #184]	; (800b398 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800b2de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	f002 fb4b 	bl	800d980 <HAL_GPIO_WritePin>
 800b2ea:	e00f      	b.n	800b30c <HAL_TIM_PeriodElapsedCallback+0x414>
		}
		else
			HAL_GPIO_WritePin(digit_ports[cur_seg],digit_pins[cur_seg],GPIO_PIN_RESET);//turn on current digits
 800b2ec:	4b23      	ldr	r3, [pc, #140]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4b28      	ldr	r3, [pc, #160]	; (800b394 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800b2f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b2f8:	4b20      	ldr	r3, [pc, #128]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4b26      	ldr	r3, [pc, #152]	; (800b398 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800b300:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b304:	2200      	movs	r2, #0
 800b306:	4619      	mov	r1, r3
 800b308:	f002 fb3a 	bl	800d980 <HAL_GPIO_WritePin>
		cur_seg++;
 800b30c:	4b1b      	ldr	r3, [pc, #108]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	4b19      	ldr	r3, [pc, #100]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b316:	701a      	strb	r2, [r3, #0]
		if(cur_seg==4) cur_seg=0;
 800b318:	4b18      	ldr	r3, [pc, #96]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b04      	cmp	r3, #4
 800b31e:	d102      	bne.n	800b326 <HAL_TIM_PeriodElapsedCallback+0x42e>
 800b320:	4b16      	ldr	r3, [pc, #88]	; (800b37c <HAL_TIM_PeriodElapsedCallback+0x484>)
 800b322:	2200      	movs	r2, #0
 800b324:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance==TIM11)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d10d      	bne.n	800b34c <HAL_TIM_PeriodElapsedCallback+0x454>
	{
		if(flag_blinkLED)
 800b330:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d102      	bne.n	800b33e <HAL_TIM_PeriodElapsedCallback+0x446>
			//setpwm_value(Duty_Value);
			//HAL_TIM_PWM_Start(&htim9,TIM_CHANNEL_1);
		}
		else
		{
			setpwm_value(0);
 800b338:	2000      	movs	r0, #0
 800b33a:	f7f7 fd97 	bl	8002e6c <setpwm_value>
			//HAL_TIM_PWM_Stop(&htim9,TIM_CHANNEL_1);			
		}
		flag_blinkLED=1-flag_blinkLED;
 800b33e:	4b18      	ldr	r3, [pc, #96]	; (800b3a0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f1c3 0301 	rsb	r3, r3, #1
 800b346:	b2da      	uxtb	r2, r3
 800b348:	4b15      	ldr	r3, [pc, #84]	; (800b3a0 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800b34a:	701a      	strb	r2, [r3, #0]
	}
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000097e 	.word	0x2000097e
 800b358:	2000003a 	.word	0x2000003a
 800b35c:	200003dc 	.word	0x200003dc
 800b360:	200003d9 	.word	0x200003d9
 800b364:	40021000 	.word	0x40021000
 800b368:	2000097c 	.word	0x2000097c
 800b36c:	2000003b 	.word	0x2000003b
 800b370:	200003e4 	.word	0x200003e4
 800b374:	2000003c 	.word	0x2000003c
 800b378:	200003e0 	.word	0x200003e0
 800b37c:	200003c6 	.word	0x200003c6
 800b380:	20000034 	.word	0x20000034
 800b384:	200003bc 	.word	0x200003bc
 800b388:	40020c00 	.word	0x40020c00
 800b38c:	200003ec 	.word	0x200003ec
 800b390:	200003ed 	.word	0x200003ed
 800b394:	2000001c 	.word	0x2000001c
 800b398:	2000002c 	.word	0x2000002c
 800b39c:	40014800 	.word	0x40014800
 800b3a0:	200003ee 	.word	0x200003ee

0800b3a4 <print_segment>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void print_segment( char *str)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	uint8_t i=0,j=0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73bb      	strb	r3, [r7, #14]
	while(*(str+i))
 800b3b4:	e01c      	b.n	800b3f0 <print_segment+0x4c>
	{
		if(*(str+i)=='.')
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c0:	d105      	bne.n	800b3ce <print_segment+0x2a>
		{
			dp_segments[j-1]=1;
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	4a10      	ldr	r2, [pc, #64]	; (800b408 <print_segment+0x64>)
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	54d1      	strb	r1, [r2, r3]
 800b3cc:	e00d      	b.n	800b3ea <print_segment+0x46>
		}
		else
		{
			dp_segments[j]=0;
 800b3ce:	7bbb      	ldrb	r3, [r7, #14]
 800b3d0:	4a0d      	ldr	r2, [pc, #52]	; (800b408 <print_segment+0x64>)
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	54d1      	strb	r1, [r2, r3]
			str_segments[j]=*(str+i);
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	441a      	add	r2, r3
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	7811      	ldrb	r1, [r2, #0]
 800b3e0:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <print_segment+0x68>)
 800b3e2:	54d1      	strb	r1, [r2, r3]
			j++;
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	73bb      	strb	r3, [r7, #14]
		}
		i++;
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	73fb      	strb	r3, [r7, #15]
	while(*(str+i))
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1dc      	bne.n	800b3b6 <print_segment+0x12>
	}
}
 800b3fc:	bf00      	nop
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	200003bc 	.word	0x200003bc
 800b40c:	20000034 	.word	0x20000034

0800b410 <Blink_segments>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
void Blink_segments(uint8_t on_off)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	71fb      	strb	r3, [r7, #7]
	disp_Blink=on_off;
 800b41a:	4a04      	ldr	r2, [pc, #16]	; (800b42c <Blink_segments+0x1c>)
 800b41c:	79fb      	ldrb	r3, [r7, #7]
 800b41e:	7013      	strb	r3, [r2, #0]
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	200003ec 	.word	0x200003ec

0800b430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b436:	2300      	movs	r3, #0
 800b438:	607b      	str	r3, [r7, #4]
 800b43a:	4b10      	ldr	r3, [pc, #64]	; (800b47c <HAL_MspInit+0x4c>)
 800b43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b43e:	4a0f      	ldr	r2, [pc, #60]	; (800b47c <HAL_MspInit+0x4c>)
 800b440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b444:	6453      	str	r3, [r2, #68]	; 0x44
 800b446:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <HAL_MspInit+0x4c>)
 800b448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b452:	2300      	movs	r3, #0
 800b454:	603b      	str	r3, [r7, #0]
 800b456:	4b09      	ldr	r3, [pc, #36]	; (800b47c <HAL_MspInit+0x4c>)
 800b458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45a:	4a08      	ldr	r2, [pc, #32]	; (800b47c <HAL_MspInit+0x4c>)
 800b45c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b460:	6413      	str	r3, [r2, #64]	; 0x40
 800b462:	4b06      	ldr	r3, [pc, #24]	; (800b47c <HAL_MspInit+0x4c>)
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b46a:	603b      	str	r3, [r7, #0]
 800b46c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b46e:	bf00      	nop
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	40023800 	.word	0x40023800

0800b480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b484:	bf00      	nop
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b48e:	b480      	push	{r7}
 800b490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b492:	e7fe      	b.n	800b492 <HardFault_Handler+0x4>

0800b494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b498:	e7fe      	b.n	800b498 <MemManage_Handler+0x4>

0800b49a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b49a:	b480      	push	{r7}
 800b49c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b49e:	e7fe      	b.n	800b49e <BusFault_Handler+0x4>

0800b4a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b4a4:	e7fe      	b.n	800b4a4 <UsageFault_Handler+0x4>

0800b4a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b4aa:	bf00      	nop
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b4b8:	bf00      	nop
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b4c6:	bf00      	nop
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b4d4:	f000 fb7a 	bl	800bbcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b4d8:	bf00      	nop
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800b4e0:	4802      	ldr	r0, [pc, #8]	; (800b4ec <RTC_WKUP_IRQHandler+0x10>)
 800b4e2:	f005 fcb7 	bl	8010e54 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800b4e6:	bf00      	nop
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000818 	.word	0x20000818

0800b4f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800b4f4:	4802      	ldr	r0, [pc, #8]	; (800b500 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b4f6:	f006 ff0b 	bl	8012310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b4fa:	bf00      	nop
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20000980 	.word	0x20000980

0800b504 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800b508:	4802      	ldr	r0, [pc, #8]	; (800b514 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800b50a:	f006 ff01 	bl	8012310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800b50e:	bf00      	nop
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	200009c0 	.word	0x200009c0

0800b518 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800b51c:	4802      	ldr	r0, [pc, #8]	; (800b528 <SDIO_IRQHandler+0x10>)
 800b51e:	f005 ff79 	bl	8011414 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800b522:	bf00      	nop
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200008f8 	.word	0x200008f8

0800b52c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b530:	4802      	ldr	r0, [pc, #8]	; (800b53c <DMA2_Stream0_IRQHandler+0x10>)
 800b532:	f001 fa3f 	bl	800c9b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b536:	bf00      	nop
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000684 	.word	0x20000684

0800b540 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800b544:	4802      	ldr	r0, [pc, #8]	; (800b550 <DMA2_Stream3_IRQHandler+0x10>)
 800b546:	f001 fa35 	bl	800c9b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b54a:	bf00      	nop
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000838 	.word	0x20000838

0800b554 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800b558:	4802      	ldr	r0, [pc, #8]	; (800b564 <OTG_FS_IRQHandler+0x10>)
 800b55a:	f003 fb4b 	bl	800ebf4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b55e:	bf00      	nop
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20003fa4 	.word	0x20003fa4

0800b568 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800b56c:	4802      	ldr	r0, [pc, #8]	; (800b578 <DMA2_Stream6_IRQHandler+0x10>)
 800b56e:	f001 fa21 	bl	800c9b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b572:	bf00      	nop
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000898 	.word	0x20000898

0800b57c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b584:	4b11      	ldr	r3, [pc, #68]	; (800b5cc <_sbrk+0x50>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d102      	bne.n	800b592 <_sbrk+0x16>
		heap_end = &end;
 800b58c:	4b0f      	ldr	r3, [pc, #60]	; (800b5cc <_sbrk+0x50>)
 800b58e:	4a10      	ldr	r2, [pc, #64]	; (800b5d0 <_sbrk+0x54>)
 800b590:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b592:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <_sbrk+0x50>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <_sbrk+0x50>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4413      	add	r3, r2
 800b5a0:	466a      	mov	r2, sp
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d907      	bls.n	800b5b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b5a6:	f00e fdf1 	bl	801a18c <__errno>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5b4:	e006      	b.n	800b5c4 <_sbrk+0x48>
	}

	heap_end += incr;
 800b5b6:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <_sbrk+0x50>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	4a03      	ldr	r2, [pc, #12]	; (800b5cc <_sbrk+0x50>)
 800b5c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	200003f0 	.word	0x200003f0
 800b5d0:	200043b0 	.word	0x200043b0

0800b5d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b5d8:	4b08      	ldr	r3, [pc, #32]	; (800b5fc <SystemInit+0x28>)
 800b5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5de:	4a07      	ldr	r2, [pc, #28]	; (800b5fc <SystemInit+0x28>)
 800b5e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b5e8:	4b04      	ldr	r3, [pc, #16]	; (800b5fc <SystemInit+0x28>)
 800b5ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b5ee:	609a      	str	r2, [r3, #8]
#endif
}
 800b5f0:	bf00      	nop
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	e000ed00 	.word	0xe000ed00

0800b600 <MX_TIM9_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b606:	1d3b      	adds	r3, r7, #4
 800b608:	2200      	movs	r2, #0
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	605a      	str	r2, [r3, #4]
 800b60e:	609a      	str	r2, [r3, #8]
 800b610:	60da      	str	r2, [r3, #12]
 800b612:	611a      	str	r2, [r3, #16]
 800b614:	615a      	str	r2, [r3, #20]
 800b616:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 800b618:	4b1a      	ldr	r3, [pc, #104]	; (800b684 <MX_TIM9_Init+0x84>)
 800b61a:	4a1b      	ldr	r2, [pc, #108]	; (800b688 <MX_TIM9_Init+0x88>)
 800b61c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1000-1;
 800b61e:	4b19      	ldr	r3, [pc, #100]	; (800b684 <MX_TIM9_Init+0x84>)
 800b620:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b624:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b626:	4b17      	ldr	r3, [pc, #92]	; (800b684 <MX_TIM9_Init+0x84>)
 800b628:	2200      	movs	r2, #0
 800b62a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 576-1;
 800b62c:	4b15      	ldr	r3, [pc, #84]	; (800b684 <MX_TIM9_Init+0x84>)
 800b62e:	f240 223f 	movw	r2, #575	; 0x23f
 800b632:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b634:	4b13      	ldr	r3, [pc, #76]	; (800b684 <MX_TIM9_Init+0x84>)
 800b636:	2200      	movs	r2, #0
 800b638:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b63a:	4b12      	ldr	r3, [pc, #72]	; (800b684 <MX_TIM9_Init+0x84>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800b640:	4810      	ldr	r0, [pc, #64]	; (800b684 <MX_TIM9_Init+0x84>)
 800b642:	f006 fdfb 	bl	801223c <HAL_TIM_PWM_Init>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 800b64c:	f7fe fb94 	bl	8009d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b650:	2360      	movs	r3, #96	; 0x60
 800b652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b660:	1d3b      	adds	r3, r7, #4
 800b662:	2200      	movs	r2, #0
 800b664:	4619      	mov	r1, r3
 800b666:	4807      	ldr	r0, [pc, #28]	; (800b684 <MX_TIM9_Init+0x84>)
 800b668:	f006 ff5a 	bl	8012520 <HAL_TIM_PWM_ConfigChannel>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800b672:	f7fe fb81 	bl	8009d78 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800b676:	4803      	ldr	r0, [pc, #12]	; (800b684 <MX_TIM9_Init+0x84>)
 800b678:	f000 f8b8 	bl	800b7ec <HAL_TIM_MspPostInit>

}
 800b67c:	bf00      	nop
 800b67e:	3720      	adds	r7, #32
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20000a00 	.word	0x20000a00
 800b688:	40014000 	.word	0x40014000

0800b68c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800b690:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b692:	4a0f      	ldr	r2, [pc, #60]	; (800b6d0 <MX_TIM10_Init+0x44>)
 800b694:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800b696:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b698:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b69c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b69e:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 143;
 800b6a4:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b6a6:	228f      	movs	r2, #143	; 0x8f
 800b6a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b6aa:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b6b0:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800b6b6:	4805      	ldr	r0, [pc, #20]	; (800b6cc <MX_TIM10_Init+0x40>)
 800b6b8:	f006 fd71 	bl	801219e <HAL_TIM_Base_Init>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800b6c2:	f7fe fb59 	bl	8009d78 <Error_Handler>
  }

}
 800b6c6:	bf00      	nop
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000980 	.word	0x20000980
 800b6d0:	40014400 	.word	0x40014400

0800b6d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6da:	4a0f      	ldr	r2, [pc, #60]	; (800b718 <MX_TIM11_Init+0x44>)
 800b6dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 30000-1;
 800b6de:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6e0:	f247 522f 	movw	r2, #29999	; 0x752f
 800b6e4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2400-1;
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6ee:	f640 125f 	movw	r2, #2399	; 0x95f
 800b6f2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b6f4:	4b07      	ldr	r3, [pc, #28]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <MX_TIM11_Init+0x40>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800b700:	4804      	ldr	r0, [pc, #16]	; (800b714 <MX_TIM11_Init+0x40>)
 800b702:	f006 fd4c 	bl	801219e <HAL_TIM_Base_Init>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 800b70c:	f7fe fb34 	bl	8009d78 <Error_Handler>
  }

}
 800b710:	bf00      	nop
 800b712:	bd80      	pop	{r7, pc}
 800b714:	200009c0 	.word	0x200009c0
 800b718:	40014800 	.word	0x40014800

0800b71c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a0b      	ldr	r2, [pc, #44]	; (800b758 <HAL_TIM_PWM_MspInit+0x3c>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d10d      	bne.n	800b74a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
 800b732:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <HAL_TIM_PWM_MspInit+0x40>)
 800b734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b736:	4a09      	ldr	r2, [pc, #36]	; (800b75c <HAL_TIM_PWM_MspInit+0x40>)
 800b738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b73c:	6453      	str	r3, [r2, #68]	; 0x44
 800b73e:	4b07      	ldr	r3, [pc, #28]	; (800b75c <HAL_TIM_PWM_MspInit+0x40>)
 800b740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40014000 	.word	0x40014000
 800b75c:	40023800 	.word	0x40023800

0800b760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a1c      	ldr	r2, [pc, #112]	; (800b7e0 <HAL_TIM_Base_MspInit+0x80>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d116      	bne.n	800b7a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b77a:	4a1a      	ldr	r2, [pc, #104]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b77c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b780:	6453      	str	r3, [r2, #68]	; 0x44
 800b782:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800b78e:	2200      	movs	r2, #0
 800b790:	2100      	movs	r1, #0
 800b792:	2019      	movs	r0, #25
 800b794:	f000 ff43 	bl	800c61e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b798:	2019      	movs	r0, #25
 800b79a:	f000 ff5c 	bl	800c656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800b79e:	e01a      	b.n	800b7d6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a10      	ldr	r2, [pc, #64]	; (800b7e8 <HAL_TIM_Base_MspInit+0x88>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d115      	bne.n	800b7d6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	60bb      	str	r3, [r7, #8]
 800b7ae:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b2:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b7b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7b8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7ba:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <HAL_TIM_Base_MspInit+0x84>)
 800b7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7c2:	60bb      	str	r3, [r7, #8]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	201a      	movs	r0, #26
 800b7cc:	f000 ff27 	bl	800c61e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800b7d0:	201a      	movs	r0, #26
 800b7d2:	f000 ff40 	bl	800c656 <HAL_NVIC_EnableIRQ>
}
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	40014400 	.word	0x40014400
 800b7e4:	40023800 	.word	0x40023800
 800b7e8:	40014800 	.word	0x40014800

0800b7ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
 800b7fe:	609a      	str	r2, [r3, #8]
 800b800:	60da      	str	r2, [r3, #12]
 800b802:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a12      	ldr	r2, [pc, #72]	; (800b854 <HAL_TIM_MspPostInit+0x68>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d11d      	bne.n	800b84a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800b80e:	2300      	movs	r3, #0
 800b810:	60bb      	str	r3, [r7, #8]
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <HAL_TIM_MspPostInit+0x6c>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b816:	4a10      	ldr	r2, [pc, #64]	; (800b858 <HAL_TIM_MspPostInit+0x6c>)
 800b818:	f043 0310 	orr.w	r3, r3, #16
 800b81c:	6313      	str	r3, [r2, #48]	; 0x30
 800b81e:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <HAL_TIM_MspPostInit+0x6c>)
 800b820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b822:	f003 0310 	and.w	r3, r3, #16
 800b826:	60bb      	str	r3, [r7, #8]
 800b828:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b82a:	2320      	movs	r3, #32
 800b82c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b82e:	2302      	movs	r3, #2
 800b830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b832:	2300      	movs	r3, #0
 800b834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b836:	2300      	movs	r3, #0
 800b838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800b83a:	2303      	movs	r3, #3
 800b83c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	4619      	mov	r1, r3
 800b844:	4805      	ldr	r0, [pc, #20]	; (800b85c <HAL_TIM_MspPostInit+0x70>)
 800b846:	f001 fdef 	bl	800d428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800b84a:	bf00      	nop
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	40014000 	.word	0x40014000
 800b858:	40023800 	.word	0x40023800
 800b85c:	40021000 	.word	0x40021000

0800b860 <tmp275_init>:

#include "i2c.h"
#include "tmp275.h"
uint8_t tmp275_res=TMP275_12BIT;
HAL_StatusTypeDef tmp275_init(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
	HAL_I2C_MspInit(&hi2c1);
 800b864:	4805      	ldr	r0, [pc, #20]	; (800b87c <tmp275_init+0x1c>)
 800b866:	f7f7 fa67 	bl	8002d38 <HAL_I2C_MspInit>
	MX_I2C1_Init();
 800b86a:	f7f7 fa37 	bl	8002cdc <MX_I2C1_Init>
	return tmp275_setResolution(TMP275_12BIT);
 800b86e:	2060      	movs	r0, #96	; 0x60
 800b870:	f000 f806 	bl	800b880 <tmp275_setResolution>
 800b874:	4603      	mov	r3, r0
}
 800b876:	4618      	mov	r0, r3
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	200006fc 	.word	0x200006fc

0800b880 <tmp275_setResolution>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef tmp275_setResolution(uint8_t res)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af02      	add	r7, sp, #8
 800b886:	4603      	mov	r3, r0
 800b888:	71fb      	strb	r3, [r7, #7]

//	uint8_t buffer[]={res<<5};

//	if(HAL_I2C_Mem_Write(&hi2c1, TMP275_BASEADDRESS<<1, TMP275_CONF_REG, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000)!=TMP275_OK)
//		return TMP275_ERROR;
	uint8_t buffer[]={TMP275_CONF_REG,res};
 800b88a:	2301      	movs	r3, #1
 800b88c:	733b      	strb	r3, [r7, #12]
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1, TMP275_BASEADDRESS<<1, buffer, 2, 1000)!=TMP275_OK)
 800b892:	f107 020c 	add.w	r2, r7, #12
 800b896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	2302      	movs	r3, #2
 800b89e:	2198      	movs	r1, #152	; 0x98
 800b8a0:	4807      	ldr	r0, [pc, #28]	; (800b8c0 <tmp275_setResolution+0x40>)
 800b8a2:	f002 f9bf 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <tmp275_setResolution+0x30>
		return TMP275_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e003      	b.n	800b8b8 <tmp275_setResolution+0x38>
	tmp275_res=res;
 800b8b0:	4a04      	ldr	r2, [pc, #16]	; (800b8c4 <tmp275_setResolution+0x44>)
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	7013      	strb	r3, [r2, #0]
	return TMP275_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200006fc 	.word	0x200006fc
 800b8c4:	20000044 	.word	0x20000044

0800b8c8 <tmp275_readTemperature>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef tmp275_readTemperature(double *Temperature)
{
 800b8c8:	b590      	push	{r4, r7, lr}
 800b8ca:	b087      	sub	sp, #28
 800b8cc:	af02      	add	r7, sp, #8
 800b8ce:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2];
	uint16_t raw_temp;

	buffer[0]=TMP275_TMP_REG;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	733b      	strb	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(&hi2c1,TMP275_BASEADDRESS<<1,buffer,1,1000)!=TMP275_OK)
 800b8d4:	f107 020c 	add.w	r2, r7, #12
 800b8d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	2301      	movs	r3, #1
 800b8e0:	2198      	movs	r1, #152	; 0x98
 800b8e2:	4837      	ldr	r0, [pc, #220]	; (800b9c0 <tmp275_readTemperature+0xf8>)
 800b8e4:	f002 f99e 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <tmp275_readTemperature+0x2a>
		return TMP275_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e061      	b.n	800b9b6 <tmp275_readTemperature+0xee>

	switch(tmp275_res)
 800b8f2:	4b34      	ldr	r3, [pc, #208]	; (800b9c4 <tmp275_readTemperature+0xfc>)
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d00d      	beq.n	800b916 <tmp275_readTemperature+0x4e>
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	dc02      	bgt.n	800b904 <tmp275_readTemperature+0x3c>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <tmp275_readTemperature+0x46>
 800b902:	e015      	b.n	800b930 <tmp275_readTemperature+0x68>
 800b904:	2b40      	cmp	r3, #64	; 0x40
 800b906:	d00a      	beq.n	800b91e <tmp275_readTemperature+0x56>
 800b908:	2b60      	cmp	r3, #96	; 0x60
 800b90a:	d00c      	beq.n	800b926 <tmp275_readTemperature+0x5e>
 800b90c:	e010      	b.n	800b930 <tmp275_readTemperature+0x68>
	{
	case TMP275_9BIT:
		HAL_Delay(TMP275_9BIT_DELAY);
 800b90e:	2026      	movs	r0, #38	; 0x26
 800b910:	f000 f97c 	bl	800bc0c <HAL_Delay>
		break;
 800b914:	e00c      	b.n	800b930 <tmp275_readTemperature+0x68>
	case TMP275_10BIT:
		HAL_Delay(TMP275_10BIT_DELAY);
 800b916:	204b      	movs	r0, #75	; 0x4b
 800b918:	f000 f978 	bl	800bc0c <HAL_Delay>
		break;
 800b91c:	e008      	b.n	800b930 <tmp275_readTemperature+0x68>
	case TMP275_11BIT:
		HAL_Delay(TMP275_11BIT_DELAY);
 800b91e:	2096      	movs	r0, #150	; 0x96
 800b920:	f000 f974 	bl	800bc0c <HAL_Delay>
		break;
 800b924:	e004      	b.n	800b930 <tmp275_readTemperature+0x68>
	case TMP275_12BIT:
		HAL_Delay(TMP275_12BIT_DELAY);
 800b926:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b92a:	f000 f96f 	bl	800bc0c <HAL_Delay>
		break;
 800b92e:	bf00      	nop
	}

	if(HAL_I2C_Master_Receive(&hi2c1,TMP275_BASEADDRESS<<1,buffer,2,2000)!=TMP275_OK)
 800b930:	f107 020c 	add.w	r2, r7, #12
 800b934:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	2302      	movs	r3, #2
 800b93c:	2198      	movs	r1, #152	; 0x98
 800b93e:	4820      	ldr	r0, [pc, #128]	; (800b9c0 <tmp275_readTemperature+0xf8>)
 800b940:	f002 fa6e 	bl	800de20 <HAL_I2C_Master_Receive>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <tmp275_readTemperature+0x86>
		return TMP275_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e033      	b.n	800b9b6 <tmp275_readTemperature+0xee>
	raw_temp=(buffer[0]<<4)|(buffer[1]>>4);
 800b94e:	7b3b      	ldrb	r3, [r7, #12]
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	b21a      	sxth	r2, r3
 800b954:	7b7b      	ldrb	r3, [r7, #13]
 800b956:	091b      	lsrs	r3, r3, #4
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	b21b      	sxth	r3, r3
 800b95c:	4313      	orrs	r3, r2
 800b95e:	b21b      	sxth	r3, r3
 800b960:	81fb      	strh	r3, [r7, #14]
	if(buffer[0]>128)
 800b962:	7b3b      	ldrb	r3, [r7, #12]
 800b964:	2b80      	cmp	r3, #128	; 0x80
 800b966:	d917      	bls.n	800b998 <tmp275_readTemperature+0xd0>
	{
		*Temperature=((double)raw_temp-(double)0x1000)/16.0;
 800b968:	89fb      	ldrh	r3, [r7, #14]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f4 fdca 	bl	8000504 <__aeabi_ui2d>
 800b970:	f04f 0200 	mov.w	r2, #0
 800b974:	4b14      	ldr	r3, [pc, #80]	; (800b9c8 <tmp275_readTemperature+0x100>)
 800b976:	f7f4 fc87 	bl	8000288 <__aeabi_dsub>
 800b97a:	4603      	mov	r3, r0
 800b97c:	460c      	mov	r4, r1
 800b97e:	4618      	mov	r0, r3
 800b980:	4621      	mov	r1, r4
 800b982:	f04f 0200 	mov.w	r2, #0
 800b986:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <tmp275_readTemperature+0x104>)
 800b988:	f7f4 ff60 	bl	800084c <__aeabi_ddiv>
 800b98c:	4603      	mov	r3, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	e9c2 3400 	strd	r3, r4, [r2]
 800b996:	e00d      	b.n	800b9b4 <tmp275_readTemperature+0xec>
	}
	else
	{
		*Temperature=(double)raw_temp/16.0;
 800b998:	89fb      	ldrh	r3, [r7, #14]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f4 fdb2 	bl	8000504 <__aeabi_ui2d>
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <tmp275_readTemperature+0x104>)
 800b9a6:	f7f4 ff51 	bl	800084c <__aeabi_ddiv>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	e9c2 3400 	strd	r3, r4, [r2]

	}
	return TMP275_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd90      	pop	{r4, r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200006fc 	.word	0x200006fc
 800b9c4:	20000044 	.word	0x20000044
 800b9c8:	40b00000 	.word	0x40b00000
 800b9cc:	40300000 	.word	0x40300000

0800b9d0 <vcnl4200_init>:
//#include "main.h"
#include "i2c.h"
#include "vcnl4200.h"
///////////////////////////////////////////////////
HAL_StatusTypeDef vcnl4200_init(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af02      	add	r7, sp, #8
	HAL_I2C_MspInit(&hi2c1);
 800b9d6:	483e      	ldr	r0, [pc, #248]	; (800bad0 <vcnl4200_init+0x100>)
 800b9d8:	f7f7 f9ae 	bl	8002d38 <HAL_I2C_MspInit>
	MX_I2C1_Init();
 800b9dc:	f7f7 f97e 	bl	8002cdc <MX_I2C1_Init>
	uint8_t buffer[4];
	/////////////////////////////////ALS_CONF////////////////////////////////////////
	buffer[0]=VCNL4200_ALS_CONF;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	713b      	strb	r3, [r7, #4]
	buffer[1]=VCNL4200_ALS_Shutdown_on|
 800b9e4:	2340      	movs	r3, #64	; 0x40
 800b9e6:	717b      	strb	r3, [r7, #5]
						VCNL4200_ALS_Interrupt_disable|
						VCNL4200_ALS_Pers_one|
						VCNL4200_ALS_INT_SWITCH_als|
						VCNL4200_ALS_IT_ms100;//0x40;//0xFA;//low byte:11 11 101 0 :1/1280 9T~240ms
	buffer[2]=0x00;//high byte:0000 0000
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1,VCNL4200_BASEADDRESS<<1,buffer,3,1000)!=VCNL4200_OK)
 800b9ec:	1d3a      	adds	r2, r7, #4
 800b9ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	2303      	movs	r3, #3
 800b9f6:	21a2      	movs	r1, #162	; 0xa2
 800b9f8:	4835      	ldr	r0, [pc, #212]	; (800bad0 <vcnl4200_init+0x100>)
 800b9fa:	f002 f913 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <vcnl4200_init+0x38>
		return VCNL4200_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e05f      	b.n	800bac8 <vcnl4200_init+0xf8>
	HAL_Delay(10);	
 800ba08:	200a      	movs	r0, #10
 800ba0a:	f000 f8ff 	bl	800bc0c <HAL_Delay>
	///////////////////////////////PS_CONF1_CONF2///////////////////////////////////////
	//low byte:PD_duty(7:6) PS_PERS(5:4)	PS_IT(3:1)	PS_SD(0)
	//high byte:reserved(7:4) PS_HD(3)	reserved(2) PS_INT(1:0)
	buffer[0]=VCNL4200_PS_CONF1_CONF2;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	713b      	strb	r3, [r7, #4]
	buffer[1]=VCNL4200_PS_Shutdown_on|
 800ba12:	230a      	movs	r3, #10
 800ba14:	717b      	strb	r3, [r7, #5]
						VCNL4200_PS_9T|
						VCNL4200_PS_Pers_1|
						VCNL4200_PS_1_160;//0x2a;//0xFA;//low byte:11 11 101 0 :1/1280 9T~240ms
	buffer[2]=0x0b;//high byte:0000 1 0	11 
 800ba16:	230b      	movs	r3, #11
 800ba18:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1,VCNL4200_BASEADDRESS<<1,buffer,3,1000)!=VCNL4200_OK)
 800ba1a:	1d3a      	adds	r2, r7, #4
 800ba1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	2303      	movs	r3, #3
 800ba24:	21a2      	movs	r1, #162	; 0xa2
 800ba26:	482a      	ldr	r0, [pc, #168]	; (800bad0 <vcnl4200_init+0x100>)
 800ba28:	f002 f8fc 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <vcnl4200_init+0x66>
		return VCNL4200_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e048      	b.n	800bac8 <vcnl4200_init+0xf8>
	HAL_Delay(10);
 800ba36:	200a      	movs	r0, #10
 800ba38:	f000 f8e8 	bl	800bc0c <HAL_Delay>
	///////////////////////////////PS_CONF3_MS///////////////////////////////////////////
	//low byte:Reserved(7) PS_MPS(6:5)	PS_SMART_PERS(4)	PS_AF(3) PS_TRIG(2) PS_SC_ADV(1) PS_SC_EN(0)
	//high byte:reserved(7:6) PS_MS(5)	PS_SP(4) PS_SPO(3) LED_I(2:0)
	buffer[0]=VCNL4200_PS_CONF3_MS;
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	713b      	strb	r3, [r7, #4]
	buffer[1]=0x60;//0x70;//low byte:0 11 1 0 0 0 0
 800ba40:	2360      	movs	r3, #96	; 0x60
 800ba42:	717b      	strb	r3, [r7, #5]
	buffer[2]=0x27;//0x22;//high byte:00 1 0 0 010 //100mA
 800ba44:	2327      	movs	r3, #39	; 0x27
 800ba46:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1,VCNL4200_BASEADDRESS<<1,buffer,3,1000)!=VCNL4200_OK)
 800ba48:	1d3a      	adds	r2, r7, #4
 800ba4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	2303      	movs	r3, #3
 800ba52:	21a2      	movs	r1, #162	; 0xa2
 800ba54:	481e      	ldr	r0, [pc, #120]	; (800bad0 <vcnl4200_init+0x100>)
 800ba56:	f002 f8e5 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <vcnl4200_init+0x94>
		return VCNL4200_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e031      	b.n	800bac8 <vcnl4200_init+0xf8>
	HAL_Delay(10);
 800ba64:	200a      	movs	r0, #10
 800ba66:	f000 f8d1 	bl	800bc0c <HAL_Delay>

	////////////////////////////////////////PS_THDL////////////////////////////////////
	buffer[0]=VCNL4200_PS_THDL;
 800ba6a:	2306      	movs	r3, #6
 800ba6c:	713b      	strb	r3, [r7, #4]
	buffer[1]=0x00;//low byte:0 11 0 0 0 0 0
 800ba6e:	2300      	movs	r3, #0
 800ba70:	717b      	strb	r3, [r7, #5]
	buffer[2]=0x3c;//high byte:00 1 0 0 010 //100mA
 800ba72:	233c      	movs	r3, #60	; 0x3c
 800ba74:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1,VCNL4200_BASEADDRESS<<1,buffer,3,1000)!=VCNL4200_OK)
 800ba76:	1d3a      	adds	r2, r7, #4
 800ba78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2303      	movs	r3, #3
 800ba80:	21a2      	movs	r1, #162	; 0xa2
 800ba82:	4813      	ldr	r0, [pc, #76]	; (800bad0 <vcnl4200_init+0x100>)
 800ba84:	f002 f8ce 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d001      	beq.n	800ba92 <vcnl4200_init+0xc2>
		return VCNL4200_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e01a      	b.n	800bac8 <vcnl4200_init+0xf8>
	HAL_Delay(10);
 800ba92:	200a      	movs	r0, #10
 800ba94:	f000 f8ba 	bl	800bc0c <HAL_Delay>
	//////////////////////////////////////PS_THDH/////////////////////////////////
		buffer[0]=VCNL4200_PS_THDH;
 800ba98:	2307      	movs	r3, #7
 800ba9a:	713b      	strb	r3, [r7, #4]
	buffer[1]=0x00;//low byte:0 11 0 0 0 0 0
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	717b      	strb	r3, [r7, #5]
	buffer[2]=0x40;//high byte:00 1 0 0 010 //100mA
 800baa0:	2340      	movs	r3, #64	; 0x40
 800baa2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Master_Transmit(&hi2c1,VCNL4200_BASEADDRESS<<1,buffer,3,1000)!=VCNL4200_OK)
 800baa4:	1d3a      	adds	r2, r7, #4
 800baa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	2303      	movs	r3, #3
 800baae:	21a2      	movs	r1, #162	; 0xa2
 800bab0:	4807      	ldr	r0, [pc, #28]	; (800bad0 <vcnl4200_init+0x100>)
 800bab2:	f002 f8b7 	bl	800dc24 <HAL_I2C_Master_Transmit>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <vcnl4200_init+0xf0>
		return VCNL4200_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e003      	b.n	800bac8 <vcnl4200_init+0xf8>
	HAL_Delay(10);
 800bac0:	200a      	movs	r0, #10
 800bac2:	f000 f8a3 	bl	800bc0c <HAL_Delay>

	return VCNL4200_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	200006fc 	.word	0x200006fc

0800bad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800bad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bada:	e003      	b.n	800bae4 <LoopCopyDataInit>

0800badc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800badc:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bae2:	3104      	adds	r1, #4

0800bae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bae4:	480b      	ldr	r0, [pc, #44]	; (800bb14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bae6:	4b0c      	ldr	r3, [pc, #48]	; (800bb18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800baea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800baec:	d3f6      	bcc.n	800badc <CopyDataInit>
  ldr  r2, =_sbss
 800baee:	4a0b      	ldr	r2, [pc, #44]	; (800bb1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800baf0:	e002      	b.n	800baf8 <LoopFillZerobss>

0800baf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800baf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800baf4:	f842 3b04 	str.w	r3, [r2], #4

0800baf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800baf8:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bafa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bafc:	d3f9      	bcc.n	800baf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bafe:	f7ff fd69 	bl	800b5d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb02:	f00e fb49 	bl	801a198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb06:	f7f7 fd2f 	bl	8003568 <main>
  bx  lr    
 800bb0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800bb0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bb10:	0801f488 	.word	0x0801f488
  ldr  r0, =_sdata
 800bb14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb18:	20000398 	.word	0x20000398
  ldr  r2, =_sbss
 800bb1c:	20000398 	.word	0x20000398
  ldr  r3, = _ebss
 800bb20:	200043b0 	.word	0x200043b0

0800bb24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb24:	e7fe      	b.n	800bb24 <ADC_IRQHandler>
	...

0800bb28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bb2c:	4b0e      	ldr	r3, [pc, #56]	; (800bb68 <HAL_Init+0x40>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0d      	ldr	r2, [pc, #52]	; (800bb68 <HAL_Init+0x40>)
 800bb32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bb38:	4b0b      	ldr	r3, [pc, #44]	; (800bb68 <HAL_Init+0x40>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a0a      	ldr	r2, [pc, #40]	; (800bb68 <HAL_Init+0x40>)
 800bb3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb44:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <HAL_Init+0x40>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a07      	ldr	r2, [pc, #28]	; (800bb68 <HAL_Init+0x40>)
 800bb4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb50:	2003      	movs	r0, #3
 800bb52:	f000 fd59 	bl	800c608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb56:	2000      	movs	r0, #0
 800bb58:	f000 f808 	bl	800bb6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bb5c:	f7ff fc68 	bl	800b430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	40023c00 	.word	0x40023c00

0800bb6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bb74:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <HAL_InitTick+0x54>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	4b12      	ldr	r3, [pc, #72]	; (800bbc4 <HAL_InitTick+0x58>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb82:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fd7f 	bl	800c68e <HAL_SYSTICK_Config>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e00e      	b.n	800bbb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b0f      	cmp	r3, #15
 800bb9e:	d80a      	bhi.n	800bbb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bba0:	2200      	movs	r2, #0
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	f000 fd39 	bl	800c61e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bbac:	4a06      	ldr	r2, [pc, #24]	; (800bbc8 <HAL_InitTick+0x5c>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e000      	b.n	800bbb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20000040 	.word	0x20000040
 800bbc4:	2000004c 	.word	0x2000004c
 800bbc8:	20000048 	.word	0x20000048

0800bbcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <HAL_IncTick+0x20>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <HAL_IncTick+0x24>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4413      	add	r3, r2
 800bbdc:	4a04      	ldr	r2, [pc, #16]	; (800bbf0 <HAL_IncTick+0x24>)
 800bbde:	6013      	str	r3, [r2, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	2000004c 	.word	0x2000004c
 800bbf0:	20000a40 	.word	0x20000a40

0800bbf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	af00      	add	r7, sp, #0
  return uwTick;
 800bbf8:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <HAL_GetTick+0x14>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	20000a40 	.word	0x20000a40

0800bc0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc14:	f7ff ffee 	bl	800bbf4 <HAL_GetTick>
 800bc18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc24:	d005      	beq.n	800bc32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc26:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <HAL_Delay+0x40>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bc32:	bf00      	nop
 800bc34:	f7ff ffde 	bl	800bbf4 <HAL_GetTick>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d8f7      	bhi.n	800bc34 <HAL_Delay+0x28>
  {
  }
}
 800bc44:	bf00      	nop
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	2000004c 	.word	0x2000004c

0800bc50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e033      	b.n	800bcce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d109      	bne.n	800bc82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7f5 f9f8 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc86:	f003 0310 	and.w	r3, r3, #16
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d118      	bne.n	800bcc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bc96:	f023 0302 	bic.w	r3, r3, #2
 800bc9a:	f043 0202 	orr.w	r2, r3, #2
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa40 	bl	800c128 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb2:	f023 0303 	bic.w	r3, r3, #3
 800bcb6:	f043 0201 	orr.w	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	641a      	str	r2, [r3, #64]	; 0x40
 800bcbe:	e001      	b.n	800bcc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
	...

0800bcd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d101      	bne.n	800bcf6 <HAL_ADC_Start_DMA+0x1e>
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e0cc      	b.n	800be90 <HAL_ADC_Start_DMA+0x1b8>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d018      	beq.n	800bd3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0201 	orr.w	r2, r2, #1
 800bd1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800bd1c:	4b5e      	ldr	r3, [pc, #376]	; (800be98 <HAL_ADC_Start_DMA+0x1c0>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a5e      	ldr	r2, [pc, #376]	; (800be9c <HAL_ADC_Start_DMA+0x1c4>)
 800bd22:	fba2 2303 	umull	r2, r3, r2, r3
 800bd26:	0c9a      	lsrs	r2, r3, #18
 800bd28:	4613      	mov	r3, r2
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	4413      	add	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800bd30:	e002      	b.n	800bd38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1f9      	bne.n	800bd32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	f040 80a0 	bne.w	800be8e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bd56:	f023 0301 	bic.w	r3, r3, #1
 800bd5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d007      	beq.n	800bd80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd8c:	d106      	bne.n	800bd9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd92:	f023 0206 	bic.w	r2, r3, #6
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	645a      	str	r2, [r3, #68]	; 0x44
 800bd9a:	e002      	b.n	800bda2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bdaa:	4b3d      	ldr	r3, [pc, #244]	; (800bea0 <HAL_ADC_Start_DMA+0x1c8>)
 800bdac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	4a3c      	ldr	r2, [pc, #240]	; (800bea4 <HAL_ADC_Start_DMA+0x1cc>)
 800bdb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdba:	4a3b      	ldr	r2, [pc, #236]	; (800bea8 <HAL_ADC_Start_DMA+0x1d0>)
 800bdbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	4a3a      	ldr	r2, [pc, #232]	; (800beac <HAL_ADC_Start_DMA+0x1d4>)
 800bdc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bdce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bdde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	689a      	ldr	r2, [r3, #8]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	334c      	adds	r3, #76	; 0x4c
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f000 fd5e 	bl	800c8c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	f003 031f 	and.w	r3, r3, #31
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d12a      	bne.n	800be66 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a26      	ldr	r2, [pc, #152]	; (800beb0 <HAL_ADC_Start_DMA+0x1d8>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d015      	beq.n	800be46 <HAL_ADC_Start_DMA+0x16e>
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a25      	ldr	r2, [pc, #148]	; (800beb4 <HAL_ADC_Start_DMA+0x1dc>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d105      	bne.n	800be30 <HAL_ADC_Start_DMA+0x158>
 800be24:	4b1e      	ldr	r3, [pc, #120]	; (800bea0 <HAL_ADC_Start_DMA+0x1c8>)
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f003 031f 	and.w	r3, r3, #31
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00a      	beq.n	800be46 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a20      	ldr	r2, [pc, #128]	; (800beb8 <HAL_ADC_Start_DMA+0x1e0>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d129      	bne.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
 800be3a:	4b19      	ldr	r3, [pc, #100]	; (800bea0 <HAL_ADC_Start_DMA+0x1c8>)
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f003 031f 	and.w	r3, r3, #31
 800be42:	2b0f      	cmp	r3, #15
 800be44:	d823      	bhi.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d11c      	bne.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689a      	ldr	r2, [r3, #8]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800be62:	609a      	str	r2, [r3, #8]
 800be64:	e013      	b.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a11      	ldr	r2, [pc, #68]	; (800beb0 <HAL_ADC_Start_DMA+0x1d8>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d10e      	bne.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d107      	bne.n	800be8e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	689a      	ldr	r2, [r3, #8]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800be8c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000040 	.word	0x20000040
 800be9c:	431bde83 	.word	0x431bde83
 800bea0:	40012300 	.word	0x40012300
 800bea4:	0800c321 	.word	0x0800c321
 800bea8:	0800c3db 	.word	0x0800c3db
 800beac:	0800c3f7 	.word	0x0800c3f7
 800beb0:	40012000 	.word	0x40012000
 800beb4:	40012100 	.word	0x40012100
 800beb8:	40012200 	.word	0x40012200

0800bebc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800beee:	2300      	movs	r3, #0
 800bef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_ADC_ConfigChannel+0x1c>
 800befc:	2302      	movs	r3, #2
 800befe:	e105      	b.n	800c10c <HAL_ADC_ConfigChannel+0x228>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d925      	bls.n	800bf5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68d9      	ldr	r1, [r3, #12]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	3b1e      	subs	r3, #30
 800bf26:	2207      	movs	r2, #7
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	43da      	mvns	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	400a      	ands	r2, r1
 800bf34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68d9      	ldr	r1, [r3, #12]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	689a      	ldr	r2, [r3, #8]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	4618      	mov	r0, r3
 800bf48:	4603      	mov	r3, r0
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	4403      	add	r3, r0
 800bf4e:	3b1e      	subs	r3, #30
 800bf50:	409a      	lsls	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	60da      	str	r2, [r3, #12]
 800bf5a:	e022      	b.n	800bfa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6919      	ldr	r1, [r3, #16]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	2207      	movs	r2, #7
 800bf72:	fa02 f303 	lsl.w	r3, r2, r3
 800bf76:	43da      	mvns	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	400a      	ands	r2, r1
 800bf7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6919      	ldr	r1, [r3, #16]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	689a      	ldr	r2, [r3, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	4618      	mov	r0, r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4403      	add	r3, r0
 800bf98:	409a      	lsls	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	2b06      	cmp	r3, #6
 800bfa8:	d824      	bhi.n	800bff4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	3b05      	subs	r3, #5
 800bfbc:	221f      	movs	r2, #31
 800bfbe:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc2:	43da      	mvns	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	400a      	ands	r2, r1
 800bfca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	4618      	mov	r0, r3
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	3b05      	subs	r3, #5
 800bfe6:	fa00 f203 	lsl.w	r2, r0, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	430a      	orrs	r2, r1
 800bff0:	635a      	str	r2, [r3, #52]	; 0x34
 800bff2:	e04c      	b.n	800c08e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	2b0c      	cmp	r3, #12
 800bffa:	d824      	bhi.n	800c046 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	3b23      	subs	r3, #35	; 0x23
 800c00e:	221f      	movs	r2, #31
 800c010:	fa02 f303 	lsl.w	r3, r2, r3
 800c014:	43da      	mvns	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	400a      	ands	r2, r1
 800c01c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	4618      	mov	r0, r3
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	3b23      	subs	r3, #35	; 0x23
 800c038:	fa00 f203 	lsl.w	r2, r0, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
 800c044:	e023      	b.n	800c08e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	3b41      	subs	r3, #65	; 0x41
 800c058:	221f      	movs	r2, #31
 800c05a:	fa02 f303 	lsl.w	r3, r2, r3
 800c05e:	43da      	mvns	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	400a      	ands	r2, r1
 800c066:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	b29b      	uxth	r3, r3
 800c074:	4618      	mov	r0, r3
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	3b41      	subs	r3, #65	; 0x41
 800c082:	fa00 f203 	lsl.w	r2, r0, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	430a      	orrs	r2, r1
 800c08c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c08e:	4b22      	ldr	r3, [pc, #136]	; (800c118 <HAL_ADC_ConfigChannel+0x234>)
 800c090:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a21      	ldr	r2, [pc, #132]	; (800c11c <HAL_ADC_ConfigChannel+0x238>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d109      	bne.n	800c0b0 <HAL_ADC_ConfigChannel+0x1cc>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b12      	cmp	r3, #18
 800c0a2:	d105      	bne.n	800c0b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a19      	ldr	r2, [pc, #100]	; (800c11c <HAL_ADC_ConfigChannel+0x238>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d123      	bne.n	800c102 <HAL_ADC_ConfigChannel+0x21e>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b10      	cmp	r3, #16
 800c0c0:	d003      	beq.n	800c0ca <HAL_ADC_ConfigChannel+0x1e6>
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b11      	cmp	r3, #17
 800c0c8:	d11b      	bne.n	800c102 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b10      	cmp	r3, #16
 800c0dc:	d111      	bne.n	800c102 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800c0de:	4b10      	ldr	r3, [pc, #64]	; (800c120 <HAL_ADC_ConfigChannel+0x23c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4a10      	ldr	r2, [pc, #64]	; (800c124 <HAL_ADC_ConfigChannel+0x240>)
 800c0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e8:	0c9a      	lsrs	r2, r3, #18
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c0f4:	e002      	b.n	800c0fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1f9      	bne.n	800c0f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	40012300 	.word	0x40012300
 800c11c:	40012000 	.word	0x40012000
 800c120:	20000040 	.word	0x20000040
 800c124:	431bde83 	.word	0x431bde83

0800c128 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c130:	4b79      	ldr	r3, [pc, #484]	; (800c318 <ADC_Init+0x1f0>)
 800c132:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	431a      	orrs	r2, r3
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c15c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6859      	ldr	r1, [r3, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	021a      	lsls	r2, r3, #8
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	430a      	orrs	r2, r1
 800c170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6859      	ldr	r1, [r3, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	689a      	ldr	r2, [r3, #8]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689a      	ldr	r2, [r3, #8]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6899      	ldr	r1, [r3, #8]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ba:	4a58      	ldr	r2, [pc, #352]	; (800c31c <ADC_Init+0x1f4>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d022      	beq.n	800c206 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c1ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6899      	ldr	r1, [r3, #8]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	689a      	ldr	r2, [r3, #8]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c1f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6899      	ldr	r1, [r3, #8]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	430a      	orrs	r2, r1
 800c202:	609a      	str	r2, [r3, #8]
 800c204:	e00f      	b.n	800c226 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800c224:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	689a      	ldr	r2, [r3, #8]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f022 0202 	bic.w	r2, r2, #2
 800c234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6899      	ldr	r1, [r3, #8]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7e1b      	ldrb	r3, [r3, #24]
 800c240:	005a      	lsls	r2, r3, #1
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d01b      	beq.n	800c28c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c262:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800c272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6859      	ldr	r1, [r3, #4]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27e:	3b01      	subs	r3, #1
 800c280:	035a      	lsls	r2, r3, #13
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	605a      	str	r2, [r3, #4]
 800c28a:	e007      	b.n	800c29c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c29a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	051a      	lsls	r2, r3, #20
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c2d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6899      	ldr	r1, [r3, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2de:	025a      	lsls	r2, r3, #9
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	430a      	orrs	r2, r1
 800c2e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689a      	ldr	r2, [r3, #8]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6899      	ldr	r1, [r3, #8]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	029a      	lsls	r2, r3, #10
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	430a      	orrs	r2, r1
 800c30a:	609a      	str	r2, [r3, #8]
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	40012300 	.word	0x40012300
 800c31c:	0f000001 	.word	0x0f000001

0800c320 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c332:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c336:	2b00      	cmp	r3, #0
 800c338:	d13c      	bne.n	800c3b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d12b      	bne.n	800c3ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d127      	bne.n	800c3ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c366:	2b00      	cmp	r3, #0
 800c368:	d006      	beq.n	800c378 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c374:	2b00      	cmp	r3, #0
 800c376:	d119      	bne.n	800c3ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0220 	bic.w	r2, r2, #32
 800c386:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d105      	bne.n	800c3ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a4:	f043 0201 	orr.w	r2, r3, #1
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7f7 f8bb 	bl	8003528 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c3b2:	e00e      	b.n	800c3d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b8:	f003 0310 	and.w	r3, r3, #16
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d003      	beq.n	800c3c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff fd85 	bl	800bed0 <HAL_ADC_ErrorCallback>
}
 800c3c6:	e004      	b.n	800c3d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	4798      	blx	r3
}
 800c3d2:	bf00      	nop
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f7ff fd67 	bl	800bebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c3ee:	bf00      	nop
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c402:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2240      	movs	r2, #64	; 0x40
 800c408:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40e:	f043 0204 	orr.w	r2, r3, #4
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff fd5a 	bl	800bed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c434:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <__NVIC_SetPriorityGrouping+0x44>)
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c440:	4013      	ands	r3, r2
 800c442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c44c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c456:	4a04      	ldr	r2, [pc, #16]	; (800c468 <__NVIC_SetPriorityGrouping+0x44>)
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	60d3      	str	r3, [r2, #12]
}
 800c45c:	bf00      	nop
 800c45e:	3714      	adds	r7, #20
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr
 800c468:	e000ed00 	.word	0xe000ed00

0800c46c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c470:	4b04      	ldr	r3, [pc, #16]	; (800c484 <__NVIC_GetPriorityGrouping+0x18>)
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	0a1b      	lsrs	r3, r3, #8
 800c476:	f003 0307 	and.w	r3, r3, #7
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	e000ed00 	.word	0xe000ed00

0800c488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c496:	2b00      	cmp	r3, #0
 800c498:	db0b      	blt.n	800c4b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	f003 021f 	and.w	r2, r3, #31
 800c4a0:	4907      	ldr	r1, [pc, #28]	; (800c4c0 <__NVIC_EnableIRQ+0x38>)
 800c4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4a6:	095b      	lsrs	r3, r3, #5
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	fa00 f202 	lsl.w	r2, r0, r2
 800c4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c4b2:	bf00      	nop
 800c4b4:	370c      	adds	r7, #12
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e000e100 	.word	0xe000e100

0800c4c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	db10      	blt.n	800c4f8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c4d6:	79fb      	ldrb	r3, [r7, #7]
 800c4d8:	f003 021f 	and.w	r2, r3, #31
 800c4dc:	4909      	ldr	r1, [pc, #36]	; (800c504 <__NVIC_DisableIRQ+0x40>)
 800c4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4e2:	095b      	lsrs	r3, r3, #5
 800c4e4:	2001      	movs	r0, #1
 800c4e6:	fa00 f202 	lsl.w	r2, r0, r2
 800c4ea:	3320      	adds	r3, #32
 800c4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c4f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c4f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	e000e100 	.word	0xe000e100

0800c508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	db0a      	blt.n	800c532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	490c      	ldr	r1, [pc, #48]	; (800c554 <__NVIC_SetPriority+0x4c>)
 800c522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c526:	0112      	lsls	r2, r2, #4
 800c528:	b2d2      	uxtb	r2, r2
 800c52a:	440b      	add	r3, r1
 800c52c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c530:	e00a      	b.n	800c548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	b2da      	uxtb	r2, r3
 800c536:	4908      	ldr	r1, [pc, #32]	; (800c558 <__NVIC_SetPriority+0x50>)
 800c538:	79fb      	ldrb	r3, [r7, #7]
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	3b04      	subs	r3, #4
 800c540:	0112      	lsls	r2, r2, #4
 800c542:	b2d2      	uxtb	r2, r2
 800c544:	440b      	add	r3, r1
 800c546:	761a      	strb	r2, [r3, #24]
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	e000e100 	.word	0xe000e100
 800c558:	e000ed00 	.word	0xe000ed00

0800c55c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b089      	sub	sp, #36	; 0x24
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	f1c3 0307 	rsb	r3, r3, #7
 800c576:	2b04      	cmp	r3, #4
 800c578:	bf28      	it	cs
 800c57a:	2304      	movcs	r3, #4
 800c57c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	3304      	adds	r3, #4
 800c582:	2b06      	cmp	r3, #6
 800c584:	d902      	bls.n	800c58c <NVIC_EncodePriority+0x30>
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	3b03      	subs	r3, #3
 800c58a:	e000      	b.n	800c58e <NVIC_EncodePriority+0x32>
 800c58c:	2300      	movs	r3, #0
 800c58e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c590:	f04f 32ff 	mov.w	r2, #4294967295
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	43da      	mvns	r2, r3
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	401a      	ands	r2, r3
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c5a4:	f04f 31ff 	mov.w	r1, #4294967295
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ae:	43d9      	mvns	r1, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5b4:	4313      	orrs	r3, r2
         );
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3724      	adds	r7, #36	; 0x24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
	...

0800c5c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5d4:	d301      	bcc.n	800c5da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e00f      	b.n	800c5fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c5da:	4a0a      	ldr	r2, [pc, #40]	; (800c604 <SysTick_Config+0x40>)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c5e2:	210f      	movs	r1, #15
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	f7ff ff8e 	bl	800c508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c5ec:	4b05      	ldr	r3, [pc, #20]	; (800c604 <SysTick_Config+0x40>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c5f2:	4b04      	ldr	r3, [pc, #16]	; (800c604 <SysTick_Config+0x40>)
 800c5f4:	2207      	movs	r2, #7
 800c5f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	e000e010 	.word	0xe000e010

0800c608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff ff07 	bl	800c424 <__NVIC_SetPriorityGrouping>
}
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c61e:	b580      	push	{r7, lr}
 800c620:	b086      	sub	sp, #24
 800c622:	af00      	add	r7, sp, #0
 800c624:	4603      	mov	r3, r0
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	607a      	str	r2, [r7, #4]
 800c62a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c630:	f7ff ff1c 	bl	800c46c <__NVIC_GetPriorityGrouping>
 800c634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	68b9      	ldr	r1, [r7, #8]
 800c63a:	6978      	ldr	r0, [r7, #20]
 800c63c:	f7ff ff8e 	bl	800c55c <NVIC_EncodePriority>
 800c640:	4602      	mov	r2, r0
 800c642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c646:	4611      	mov	r1, r2
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff ff5d 	bl	800c508 <__NVIC_SetPriority>
}
 800c64e:	bf00      	nop
 800c650:	3718      	adds	r7, #24
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b082      	sub	sp, #8
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	4603      	mov	r3, r0
 800c65e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff ff0f 	bl	800c488 <__NVIC_EnableIRQ>
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b082      	sub	sp, #8
 800c676:	af00      	add	r7, sp, #0
 800c678:	4603      	mov	r3, r0
 800c67a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff ff1f 	bl	800c4c4 <__NVIC_DisableIRQ>
}
 800c686:	bf00      	nop
 800c688:	3708      	adds	r7, #8
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b082      	sub	sp, #8
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff ff94 	bl	800c5c4 <SysTick_Config>
 800c69c:	4603      	mov	r3, r0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c6b4:	f7ff fa9e 	bl	800bbf4 <HAL_GetTick>
 800c6b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e099      	b.n	800c7f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f022 0201 	bic.w	r2, r2, #1
 800c6e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c6e4:	e00f      	b.n	800c706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6e6:	f7ff fa85 	bl	800bbf4 <HAL_GetTick>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	2b05      	cmp	r3, #5
 800c6f2:	d908      	bls.n	800c706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2220      	movs	r2, #32
 800c6f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2203      	movs	r2, #3
 800c6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e078      	b.n	800c7f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1e8      	bne.n	800c6e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	4b38      	ldr	r3, [pc, #224]	; (800c800 <HAL_DMA_Init+0x158>)
 800c720:	4013      	ands	r3, r2
 800c722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c73e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c74a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a1b      	ldr	r3, [r3, #32]
 800c750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d107      	bne.n	800c770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c768:	4313      	orrs	r3, r2
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f023 0307 	bic.w	r3, r3, #7
 800c786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4313      	orrs	r3, r2
 800c790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c796:	2b04      	cmp	r3, #4
 800c798:	d117      	bne.n	800c7ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00e      	beq.n	800c7ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fafb 	bl	800cda8 <DMA_CheckFifoParam>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d008      	beq.n	800c7ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2240      	movs	r2, #64	; 0x40
 800c7bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e016      	b.n	800c7f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fab2 	bl	800cd3c <DMA_CalcBaseAndBitshift>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7e0:	223f      	movs	r2, #63	; 0x3f
 800c7e2:	409a      	lsls	r2, r3
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	f010803f 	.word	0xf010803f

0800c804 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e050      	b.n	800c8b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d101      	bne.n	800c826 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800c822:	2302      	movs	r3, #2
 800c824:	e048      	b.n	800c8b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f022 0201 	bic.w	r2, r2, #1
 800c834:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2200      	movs	r2, #0
 800c844:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2200      	movs	r2, #0
 800c84c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2200      	movs	r2, #0
 800c854:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2200      	movs	r2, #0
 800c85c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2221      	movs	r2, #33	; 0x21
 800c864:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fa68 	bl	800cd3c <DMA_CalcBaseAndBitshift>
 800c86c:	4603      	mov	r3, r0
 800c86e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c898:	223f      	movs	r2, #63	; 0x3f
 800c89a:	409a      	lsls	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3710      	adds	r7, #16
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d101      	bne.n	800c8e6 <HAL_DMA_Start_IT+0x26>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	e040      	b.n	800c968 <HAL_DMA_Start_IT+0xa8>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d12f      	bne.n	800c95a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 f9e6 	bl	800cce0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c918:	223f      	movs	r2, #63	; 0x3f
 800c91a:	409a      	lsls	r2, r3
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f042 0216 	orr.w	r2, r2, #22
 800c92e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c934:	2b00      	cmp	r3, #0
 800c936:	d007      	beq.n	800c948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0208 	orr.w	r2, r2, #8
 800c946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f042 0201 	orr.w	r2, r2, #1
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	e005      	b.n	800c966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c962:	2302      	movs	r3, #2
 800c964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b02      	cmp	r3, #2
 800c982:	d004      	beq.n	800c98e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2280      	movs	r2, #128	; 0x80
 800c988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e00c      	b.n	800c9a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2205      	movs	r2, #5
 800c992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f022 0201 	bic.w	r2, r2, #1
 800c9a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c9c0:	4b92      	ldr	r3, [pc, #584]	; (800cc0c <HAL_DMA_IRQHandler+0x258>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a92      	ldr	r2, [pc, #584]	; (800cc10 <HAL_DMA_IRQHandler+0x25c>)
 800c9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ca:	0a9b      	lsrs	r3, r3, #10
 800c9cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9de:	2208      	movs	r2, #8
 800c9e0:	409a      	lsls	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d01a      	beq.n	800ca20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0304 	and.w	r3, r3, #4
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d013      	beq.n	800ca20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 0204 	bic.w	r2, r2, #4
 800ca06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	409a      	lsls	r2, r3
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca18:	f043 0201 	orr.w	r2, r3, #1
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca24:	2201      	movs	r2, #1
 800ca26:	409a      	lsls	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d012      	beq.n	800ca56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00b      	beq.n	800ca56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca42:	2201      	movs	r2, #1
 800ca44:	409a      	lsls	r2, r3
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4e:	f043 0202 	orr.w	r2, r3, #2
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca5a:	2204      	movs	r2, #4
 800ca5c:	409a      	lsls	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	4013      	ands	r3, r2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d012      	beq.n	800ca8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00b      	beq.n	800ca8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca78:	2204      	movs	r2, #4
 800ca7a:	409a      	lsls	r2, r3
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca84:	f043 0204 	orr.w	r2, r3, #4
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca90:	2210      	movs	r2, #16
 800ca92:	409a      	lsls	r2, r3
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d043      	beq.n	800cb24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f003 0308 	and.w	r3, r3, #8
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d03c      	beq.n	800cb24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800caae:	2210      	movs	r2, #16
 800cab0:	409a      	lsls	r2, r3
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d018      	beq.n	800caf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d108      	bne.n	800cae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d024      	beq.n	800cb24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	4798      	blx	r3
 800cae2:	e01f      	b.n	800cb24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01b      	beq.n	800cb24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	4798      	blx	r3
 800caf4:	e016      	b.n	800cb24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d107      	bne.n	800cb14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f022 0208 	bic.w	r2, r2, #8
 800cb12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb28:	2220      	movs	r2, #32
 800cb2a:	409a      	lsls	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4013      	ands	r3, r2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 808e 	beq.w	800cc52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0310 	and.w	r3, r3, #16
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 8086 	beq.w	800cc52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb4a:	2220      	movs	r2, #32
 800cb4c:	409a      	lsls	r2, r3
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b05      	cmp	r3, #5
 800cb5c:	d136      	bne.n	800cbcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f022 0216 	bic.w	r2, r2, #22
 800cb6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	695a      	ldr	r2, [r3, #20]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d103      	bne.n	800cb8e <HAL_DMA_IRQHandler+0x1da>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d007      	beq.n	800cb9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 0208 	bic.w	r2, r2, #8
 800cb9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cba2:	223f      	movs	r2, #63	; 0x3f
 800cba4:	409a      	lsls	r2, r3
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d07d      	beq.n	800ccbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
        }
        return;
 800cbca:	e078      	b.n	800ccbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01c      	beq.n	800cc14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d108      	bne.n	800cbfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d030      	beq.n	800cc52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	4798      	blx	r3
 800cbf8:	e02b      	b.n	800cc52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d027      	beq.n	800cc52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
 800cc0a:	e022      	b.n	800cc52 <HAL_DMA_IRQHandler+0x29e>
 800cc0c:	20000040 	.word	0x20000040
 800cc10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10f      	bne.n	800cc42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f022 0210 	bic.w	r2, r2, #16
 800cc30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d003      	beq.n	800cc52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d032      	beq.n	800ccc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d022      	beq.n	800ccac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2205      	movs	r2, #5
 800cc6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 0201 	bic.w	r2, r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	3301      	adds	r3, #1
 800cc82:	60bb      	str	r3, [r7, #8]
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d307      	bcc.n	800cc9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1f2      	bne.n	800cc7e <HAL_DMA_IRQHandler+0x2ca>
 800cc98:	e000      	b.n	800cc9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800cc9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
 800ccbc:	e000      	b.n	800ccc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ccbe:	bf00      	nop
    }
  }
}
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop

0800ccc8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ccfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	2b40      	cmp	r3, #64	; 0x40
 800cd0c:	d108      	bne.n	800cd20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cd1e:	e007      	b.n	800cd30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	60da      	str	r2, [r3, #12]
}
 800cd30:	bf00      	nop
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	3b10      	subs	r3, #16
 800cd4c:	4a14      	ldr	r2, [pc, #80]	; (800cda0 <DMA_CalcBaseAndBitshift+0x64>)
 800cd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd52:	091b      	lsrs	r3, r3, #4
 800cd54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cd56:	4a13      	ldr	r2, [pc, #76]	; (800cda4 <DMA_CalcBaseAndBitshift+0x68>)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d909      	bls.n	800cd7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cd72:	f023 0303 	bic.w	r3, r3, #3
 800cd76:	1d1a      	adds	r2, r3, #4
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	659a      	str	r2, [r3, #88]	; 0x58
 800cd7c:	e007      	b.n	800cd8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3714      	adds	r7, #20
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	aaaaaaab 	.word	0xaaaaaaab
 800cda4:	0801ebd8 	.word	0x0801ebd8

0800cda8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d11f      	bne.n	800ce02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d855      	bhi.n	800ce74 <DMA_CheckFifoParam+0xcc>
 800cdc8:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <DMA_CheckFifoParam+0x28>)
 800cdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdce:	bf00      	nop
 800cdd0:	0800cde1 	.word	0x0800cde1
 800cdd4:	0800cdf3 	.word	0x0800cdf3
 800cdd8:	0800cde1 	.word	0x0800cde1
 800cddc:	0800ce75 	.word	0x0800ce75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d045      	beq.n	800ce78 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdf0:	e042      	b.n	800ce78 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cdfa:	d13f      	bne.n	800ce7c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce00:	e03c      	b.n	800ce7c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	699b      	ldr	r3, [r3, #24]
 800ce06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce0a:	d121      	bne.n	800ce50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b03      	cmp	r3, #3
 800ce10:	d836      	bhi.n	800ce80 <DMA_CheckFifoParam+0xd8>
 800ce12:	a201      	add	r2, pc, #4	; (adr r2, 800ce18 <DMA_CheckFifoParam+0x70>)
 800ce14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce18:	0800ce29 	.word	0x0800ce29
 800ce1c:	0800ce2f 	.word	0x0800ce2f
 800ce20:	0800ce29 	.word	0x0800ce29
 800ce24:	0800ce41 	.word	0x0800ce41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2c:	e02f      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d024      	beq.n	800ce84 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce3e:	e021      	b.n	800ce84 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ce48:	d11e      	bne.n	800ce88 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ce4e:	e01b      	b.n	800ce88 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d902      	bls.n	800ce5c <DMA_CheckFifoParam+0xb4>
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d003      	beq.n	800ce62 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ce5a:	e018      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ce60:	e015      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00e      	beq.n	800ce8c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	73fb      	strb	r3, [r7, #15]
      break;
 800ce72:	e00b      	b.n	800ce8c <DMA_CheckFifoParam+0xe4>
      break;
 800ce74:	bf00      	nop
 800ce76:	e00a      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;
 800ce78:	bf00      	nop
 800ce7a:	e008      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;
 800ce7c:	bf00      	nop
 800ce7e:	e006      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;
 800ce80:	bf00      	nop
 800ce82:	e004      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;
 800ce84:	bf00      	nop
 800ce86:	e002      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;   
 800ce88:	bf00      	nop
 800ce8a:	e000      	b.n	800ce8e <DMA_CheckFifoParam+0xe6>
      break;
 800ce8c:	bf00      	nop
    }
  } 
  
  return status; 
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ceae:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <HAL_FLASH_Program+0xa0>)
 800ceb0:	7e1b      	ldrb	r3, [r3, #24]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d101      	bne.n	800ceba <HAL_FLASH_Program+0x1e>
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	e03b      	b.n	800cf32 <HAL_FLASH_Program+0x96>
 800ceba:	4b20      	ldr	r3, [pc, #128]	; (800cf3c <HAL_FLASH_Program+0xa0>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cec4:	f000 f860 	bl	800cf88 <FLASH_WaitForLastOperation>
 800cec8:	4603      	mov	r3, r0
 800ceca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d12b      	bne.n	800cf2a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d105      	bne.n	800cee4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ced8:	783b      	ldrb	r3, [r7, #0]
 800ceda:	4619      	mov	r1, r3
 800cedc:	68b8      	ldr	r0, [r7, #8]
 800cede:	f000 f909 	bl	800d0f4 <FLASH_Program_Byte>
 800cee2:	e016      	b.n	800cf12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d105      	bne.n	800cef6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ceea:	883b      	ldrh	r3, [r7, #0]
 800ceec:	4619      	mov	r1, r3
 800ceee:	68b8      	ldr	r0, [r7, #8]
 800cef0:	f000 f8dc 	bl	800d0ac <FLASH_Program_HalfWord>
 800cef4:	e00d      	b.n	800cf12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d105      	bne.n	800cf08 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	4619      	mov	r1, r3
 800cf00:	68b8      	ldr	r0, [r7, #8]
 800cf02:	f000 f8b1 	bl	800d068 <FLASH_Program_Word>
 800cf06:	e004      	b.n	800cf12 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800cf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf0c:	68b8      	ldr	r0, [r7, #8]
 800cf0e:	f000 f87b 	bl	800d008 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cf12:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cf16:	f000 f837 	bl	800cf88 <FLASH_WaitForLastOperation>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800cf1e:	4b08      	ldr	r3, [pc, #32]	; (800cf40 <HAL_FLASH_Program+0xa4>)
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	4a07      	ldr	r2, [pc, #28]	; (800cf40 <HAL_FLASH_Program+0xa4>)
 800cf24:	f023 0301 	bic.w	r3, r3, #1
 800cf28:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cf2a:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <HAL_FLASH_Program+0xa0>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	761a      	strb	r2, [r3, #24]
  
  return status;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20000a44 	.word	0x20000a44
 800cf40:	40023c00 	.word	0x40023c00

0800cf44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cf4e:	4b0b      	ldr	r3, [pc, #44]	; (800cf7c <HAL_FLASH_Unlock+0x38>)
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	da0b      	bge.n	800cf6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cf56:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <HAL_FLASH_Unlock+0x38>)
 800cf58:	4a09      	ldr	r2, [pc, #36]	; (800cf80 <HAL_FLASH_Unlock+0x3c>)
 800cf5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cf5c:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <HAL_FLASH_Unlock+0x38>)
 800cf5e:	4a09      	ldr	r2, [pc, #36]	; (800cf84 <HAL_FLASH_Unlock+0x40>)
 800cf60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800cf62:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <HAL_FLASH_Unlock+0x38>)
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	da01      	bge.n	800cf6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	40023c00 	.word	0x40023c00
 800cf80:	45670123 	.word	0x45670123
 800cf84:	cdef89ab 	.word	0xcdef89ab

0800cf88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf90:	2300      	movs	r3, #0
 800cf92:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cf94:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <FLASH_WaitForLastOperation+0x78>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800cf9a:	f7fe fe2b 	bl	800bbf4 <HAL_GetTick>
 800cf9e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cfa0:	e010      	b.n	800cfc4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa8:	d00c      	beq.n	800cfc4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d007      	beq.n	800cfc0 <FLASH_WaitForLastOperation+0x38>
 800cfb0:	f7fe fe20 	bl	800bbf4 <HAL_GetTick>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d201      	bcs.n	800cfc4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e019      	b.n	800cff8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800cfc4:	4b0f      	ldr	r3, [pc, #60]	; (800d004 <FLASH_WaitForLastOperation+0x7c>)
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e8      	bne.n	800cfa2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800cfd0:	4b0c      	ldr	r3, [pc, #48]	; (800d004 <FLASH_WaitForLastOperation+0x7c>)
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	f003 0301 	and.w	r3, r3, #1
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cfdc:	4b09      	ldr	r3, [pc, #36]	; (800d004 <FLASH_WaitForLastOperation+0x7c>)
 800cfde:	2201      	movs	r2, #1
 800cfe0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800cfe2:	4b08      	ldr	r3, [pc, #32]	; (800d004 <FLASH_WaitForLastOperation+0x7c>)
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800cfee:	f000 f8a3 	bl	800d138 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
  
}  
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	20000a44 	.word	0x20000a44
 800d004:	40023c00 	.word	0x40023c00

0800d008 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d008:	b490      	push	{r4, r7}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d014:	4b13      	ldr	r3, [pc, #76]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	4a12      	ldr	r2, [pc, #72]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d01e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800d020:	4b10      	ldr	r3, [pc, #64]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	4a0f      	ldr	r2, [pc, #60]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d026:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d02a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d02c:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	4a0c      	ldr	r2, [pc, #48]	; (800d064 <FLASH_Program_DoubleWord+0x5c>)
 800d032:	f043 0301 	orr.w	r3, r3, #1
 800d036:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	683a      	ldr	r2, [r7, #0]
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800d042:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d046:	f04f 0300 	mov.w	r3, #0
 800d04a:	f04f 0400 	mov.w	r4, #0
 800d04e:	0013      	movs	r3, r2
 800d050:	2400      	movs	r4, #0
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	3204      	adds	r2, #4
 800d056:	6013      	str	r3, [r2, #0]
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bc90      	pop	{r4, r7}
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	40023c00 	.word	0x40023c00

0800d068 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d072:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	4a0c      	ldr	r2, [pc, #48]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d07c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800d07e:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	4a09      	ldr	r2, [pc, #36]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d088:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d08a:	4b07      	ldr	r3, [pc, #28]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	4a06      	ldr	r2, [pc, #24]	; (800d0a8 <FLASH_Program_Word+0x40>)
 800d090:	f043 0301 	orr.w	r3, r3, #1
 800d094:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	601a      	str	r2, [r3, #0]
}
 800d09c:	bf00      	nop
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	40023c00 	.word	0x40023c00

0800d0ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0ba:	691b      	ldr	r3, [r3, #16]
 800d0bc:	4a0c      	ldr	r2, [pc, #48]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800d0c4:	4b0a      	ldr	r3, [pc, #40]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	4a09      	ldr	r2, [pc, #36]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d0d0:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0d2:	691b      	ldr	r3, [r3, #16]
 800d0d4:	4a06      	ldr	r2, [pc, #24]	; (800d0f0 <FLASH_Program_HalfWord+0x44>)
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	887a      	ldrh	r2, [r7, #2]
 800d0e0:	801a      	strh	r2, [r3, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	40023c00 	.word	0x40023c00

0800d0f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d100:	4b0c      	ldr	r3, [pc, #48]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	4a0b      	ldr	r2, [pc, #44]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d10a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800d10c:	4b09      	ldr	r3, [pc, #36]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d10e:	4a09      	ldr	r2, [pc, #36]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800d114:	4b07      	ldr	r3, [pc, #28]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d116:	691b      	ldr	r3, [r3, #16]
 800d118:	4a06      	ldr	r2, [pc, #24]	; (800d134 <FLASH_Program_Byte+0x40>)
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	78fa      	ldrb	r2, [r7, #3]
 800d124:	701a      	strb	r2, [r3, #0]
}
 800d126:	bf00      	nop
 800d128:	370c      	adds	r7, #12
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	40023c00 	.word	0x40023c00

0800d138 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800d138:	b480      	push	{r7}
 800d13a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800d13c:	4b27      	ldr	r3, [pc, #156]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	f003 0310 	and.w	r3, r3, #16
 800d144:	2b00      	cmp	r3, #0
 800d146:	d008      	beq.n	800d15a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800d148:	4b25      	ldr	r3, [pc, #148]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	f043 0310 	orr.w	r3, r3, #16
 800d150:	4a23      	ldr	r2, [pc, #140]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d152:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800d154:	4b21      	ldr	r3, [pc, #132]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d156:	2210      	movs	r2, #16
 800d158:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800d15a:	4b20      	ldr	r3, [pc, #128]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f003 0320 	and.w	r3, r3, #32
 800d162:	2b00      	cmp	r3, #0
 800d164:	d008      	beq.n	800d178 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800d166:	4b1e      	ldr	r3, [pc, #120]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	f043 0308 	orr.w	r3, r3, #8
 800d16e:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d170:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800d172:	4b1a      	ldr	r3, [pc, #104]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d174:	2220      	movs	r2, #32
 800d176:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800d178:	4b18      	ldr	r3, [pc, #96]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d180:	2b00      	cmp	r3, #0
 800d182:	d008      	beq.n	800d196 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800d184:	4b16      	ldr	r3, [pc, #88]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d186:	69db      	ldr	r3, [r3, #28]
 800d188:	f043 0304 	orr.w	r3, r3, #4
 800d18c:	4a14      	ldr	r2, [pc, #80]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d18e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800d190:	4b12      	ldr	r3, [pc, #72]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d192:	2240      	movs	r2, #64	; 0x40
 800d194:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800d196:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d008      	beq.n	800d1b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800d1a2:	4b0f      	ldr	r3, [pc, #60]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d1a4:	69db      	ldr	r3, [r3, #28]
 800d1a6:	f043 0302 	orr.w	r3, r3, #2
 800d1aa:	4a0d      	ldr	r2, [pc, #52]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d1ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d1b0:	2280      	movs	r2, #128	; 0x80
 800d1b2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f003 0302 	and.w	r3, r3, #2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d008      	beq.n	800d1d2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d1c2:	69db      	ldr	r3, [r3, #28]
 800d1c4:	f043 0320 	orr.w	r3, r3, #32
 800d1c8:	4a05      	ldr	r2, [pc, #20]	; (800d1e0 <FLASH_SetErrorCode+0xa8>)
 800d1ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800d1cc:	4b03      	ldr	r3, [pc, #12]	; (800d1dc <FLASH_SetErrorCode+0xa4>)
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	60da      	str	r2, [r3, #12]
  }
}
 800d1d2:	bf00      	nop
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	40023c00 	.word	0x40023c00
 800d1e0:	20000a44 	.word	0x20000a44

0800d1e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d1f6:	4b31      	ldr	r3, [pc, #196]	; (800d2bc <HAL_FLASHEx_Erase+0xd8>)
 800d1f8:	7e1b      	ldrb	r3, [r3, #24]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d101      	bne.n	800d202 <HAL_FLASHEx_Erase+0x1e>
 800d1fe:	2302      	movs	r3, #2
 800d200:	e058      	b.n	800d2b4 <HAL_FLASHEx_Erase+0xd0>
 800d202:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <HAL_FLASHEx_Erase+0xd8>)
 800d204:	2201      	movs	r2, #1
 800d206:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d208:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d20c:	f7ff febc 	bl	800cf88 <FLASH_WaitForLastOperation>
 800d210:	4603      	mov	r3, r0
 800d212:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d148      	bne.n	800d2ac <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	f04f 32ff 	mov.w	r2, #4294967295
 800d220:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b01      	cmp	r3, #1
 800d228:	d115      	bne.n	800d256 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f000 f844 	bl	800d2c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d23c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d240:	f7ff fea2 	bl	800cf88 <FLASH_WaitForLastOperation>
 800d244:	4603      	mov	r3, r0
 800d246:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800d248:	4b1d      	ldr	r3, [pc, #116]	; (800d2c0 <HAL_FLASHEx_Erase+0xdc>)
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	4a1c      	ldr	r2, [pc, #112]	; (800d2c0 <HAL_FLASHEx_Erase+0xdc>)
 800d24e:	f023 0304 	bic.w	r3, r3, #4
 800d252:	6113      	str	r3, [r2, #16]
 800d254:	e028      	b.n	800d2a8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	60bb      	str	r3, [r7, #8]
 800d25c:	e01c      	b.n	800d298 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	4619      	mov	r1, r3
 800d266:	68b8      	ldr	r0, [r7, #8]
 800d268:	f000 f850 	bl	800d30c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d26c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800d270:	f7ff fe8a 	bl	800cf88 <FLASH_WaitForLastOperation>
 800d274:	4603      	mov	r3, r0
 800d276:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800d278:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <HAL_FLASHEx_Erase+0xdc>)
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	4a10      	ldr	r2, [pc, #64]	; (800d2c0 <HAL_FLASHEx_Erase+0xdc>)
 800d27e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800d282:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	601a      	str	r2, [r3, #0]
          break;
 800d290:	e00a      	b.n	800d2a8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	3301      	adds	r3, #1
 800d296:	60bb      	str	r3, [r7, #8]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d3da      	bcc.n	800d25e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800d2a8:	f000 f878 	bl	800d39c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d2ac:	4b03      	ldr	r3, [pc, #12]	; (800d2bc <HAL_FLASHEx_Erase+0xd8>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	761a      	strb	r2, [r3, #24]

  return status;
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000a44 	.word	0x20000a44
 800d2c0:	40023c00 	.word	0x40023c00

0800d2c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d2d0:	4b0d      	ldr	r3, [pc, #52]	; (800d308 <FLASH_MassErase+0x44>)
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	4a0c      	ldr	r2, [pc, #48]	; (800d308 <FLASH_MassErase+0x44>)
 800d2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <FLASH_MassErase+0x44>)
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	4a09      	ldr	r2, [pc, #36]	; (800d308 <FLASH_MassErase+0x44>)
 800d2e2:	f043 0304 	orr.w	r3, r3, #4
 800d2e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <FLASH_MassErase+0x44>)
 800d2ea:	691a      	ldr	r2, [r3, #16]
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	021b      	lsls	r3, r3, #8
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	4a05      	ldr	r2, [pc, #20]	; (800d308 <FLASH_MassErase+0x44>)
 800d2f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2f8:	6113      	str	r3, [r2, #16]
}
 800d2fa:	bf00      	nop
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	40023c00 	.word	0x40023c00

0800d30c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d102      	bne.n	800d328 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800d322:	2300      	movs	r3, #0
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e010      	b.n	800d34a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800d328:	78fb      	ldrb	r3, [r7, #3]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d103      	bne.n	800d336 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800d32e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d332:	60fb      	str	r3, [r7, #12]
 800d334:	e009      	b.n	800d34a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800d336:	78fb      	ldrb	r3, [r7, #3]
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d103      	bne.n	800d344 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800d33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d340:	60fb      	str	r3, [r7, #12]
 800d342:	e002      	b.n	800d34a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800d344:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d348:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800d34a:	4b13      	ldr	r3, [pc, #76]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	4a12      	ldr	r2, [pc, #72]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d354:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800d356:	4b10      	ldr	r3, [pc, #64]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d358:	691a      	ldr	r2, [r3, #16]
 800d35a:	490f      	ldr	r1, [pc, #60]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4313      	orrs	r3, r2
 800d360:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	4a0c      	ldr	r2, [pc, #48]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d368:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d36c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800d36e:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d370:	691a      	ldr	r2, [r3, #16]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	4313      	orrs	r3, r2
 800d378:	4a07      	ldr	r2, [pc, #28]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d37a:	f043 0302 	orr.w	r3, r3, #2
 800d37e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800d380:	4b05      	ldr	r3, [pc, #20]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	4a04      	ldr	r2, [pc, #16]	; (800d398 <FLASH_Erase_Sector+0x8c>)
 800d386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d38a:	6113      	str	r3, [r2, #16]
}
 800d38c:	bf00      	nop
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	40023c00 	.word	0x40023c00

0800d39c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800d3a0:	4b20      	ldr	r3, [pc, #128]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d017      	beq.n	800d3dc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d3ac:	4b1d      	ldr	r3, [pc, #116]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a1c      	ldr	r2, [pc, #112]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3b6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d3b8:	4b1a      	ldr	r3, [pc, #104]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a19      	ldr	r2, [pc, #100]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	4b17      	ldr	r3, [pc, #92]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a16      	ldr	r2, [pc, #88]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3ce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d3d0:	4b14      	ldr	r3, [pc, #80]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a13      	ldr	r2, [pc, #76]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d3da:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800d3dc:	4b11      	ldr	r3, [pc, #68]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d017      	beq.n	800d418 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800d3e8:	4b0e      	ldr	r3, [pc, #56]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a0d      	ldr	r2, [pc, #52]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a0a      	ldr	r2, [pc, #40]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d3fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3fe:	6013      	str	r3, [r2, #0]
 800d400:	4b08      	ldr	r3, [pc, #32]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a07      	ldr	r2, [pc, #28]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d40a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d40c:	4b05      	ldr	r3, [pc, #20]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a04      	ldr	r2, [pc, #16]	; (800d424 <FLASH_FlushCaches+0x88>)
 800d412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d416:	6013      	str	r3, [r2, #0]
  }
}
 800d418:	bf00      	nop
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	40023c00 	.word	0x40023c00

0800d428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d428:	b480      	push	{r7}
 800d42a:	b089      	sub	sp, #36	; 0x24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d436:	2300      	movs	r3, #0
 800d438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d43e:	2300      	movs	r3, #0
 800d440:	61fb      	str	r3, [r7, #28]
 800d442:	e16b      	b.n	800d71c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d444:	2201      	movs	r2, #1
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	fa02 f303 	lsl.w	r3, r2, r3
 800d44c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	4013      	ands	r3, r2
 800d456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d458:	693a      	ldr	r2, [r7, #16]
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	f040 815a 	bne.w	800d716 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d00b      	beq.n	800d482 <HAL_GPIO_Init+0x5a>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d007      	beq.n	800d482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d476:	2b11      	cmp	r3, #17
 800d478:	d003      	beq.n	800d482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	2b12      	cmp	r3, #18
 800d480:	d130      	bne.n	800d4e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	2203      	movs	r2, #3
 800d48e:	fa02 f303 	lsl.w	r3, r2, r3
 800d492:	43db      	mvns	r3, r3
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	4013      	ands	r3, r2
 800d498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	68da      	ldr	r2, [r3, #12]
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	69ba      	ldr	r2, [r7, #24]
 800d4b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c0:	43db      	mvns	r3, r3
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	091b      	lsrs	r3, r3, #4
 800d4ce:	f003 0201 	and.w	r2, r3, #1
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	69ba      	ldr	r2, [r7, #24]
 800d4e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	2203      	movs	r2, #3
 800d4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f4:	43db      	mvns	r3, r3
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	689a      	ldr	r2, [r3, #8]
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	fa02 f303 	lsl.w	r3, r2, r3
 800d508:	69ba      	ldr	r2, [r7, #24]
 800d50a:	4313      	orrs	r3, r2
 800d50c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	69ba      	ldr	r2, [r7, #24]
 800d512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d003      	beq.n	800d524 <HAL_GPIO_Init+0xfc>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	2b12      	cmp	r3, #18
 800d522:	d123      	bne.n	800d56c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	08da      	lsrs	r2, r3, #3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	3208      	adds	r2, #8
 800d52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	f003 0307 	and.w	r3, r3, #7
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	220f      	movs	r2, #15
 800d53c:	fa02 f303 	lsl.w	r3, r2, r3
 800d540:	43db      	mvns	r3, r3
 800d542:	69ba      	ldr	r2, [r7, #24]
 800d544:	4013      	ands	r3, r2
 800d546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	691a      	ldr	r2, [r3, #16]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	f003 0307 	and.w	r3, r3, #7
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	4313      	orrs	r3, r2
 800d55c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	08da      	lsrs	r2, r3, #3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3208      	adds	r2, #8
 800d566:	69b9      	ldr	r1, [r7, #24]
 800d568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	2203      	movs	r2, #3
 800d578:	fa02 f303 	lsl.w	r3, r2, r3
 800d57c:	43db      	mvns	r3, r3
 800d57e:	69ba      	ldr	r2, [r7, #24]
 800d580:	4013      	ands	r3, r2
 800d582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f003 0203 	and.w	r2, r3, #3
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	fa02 f303 	lsl.w	r3, r2, r3
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	4313      	orrs	r3, r2
 800d598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	69ba      	ldr	r2, [r7, #24]
 800d59e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 80b4 	beq.w	800d716 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60fb      	str	r3, [r7, #12]
 800d5b2:	4b5f      	ldr	r3, [pc, #380]	; (800d730 <HAL_GPIO_Init+0x308>)
 800d5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b6:	4a5e      	ldr	r2, [pc, #376]	; (800d730 <HAL_GPIO_Init+0x308>)
 800d5b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5bc:	6453      	str	r3, [r2, #68]	; 0x44
 800d5be:	4b5c      	ldr	r3, [pc, #368]	; (800d730 <HAL_GPIO_Init+0x308>)
 800d5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d5ca:	4a5a      	ldr	r2, [pc, #360]	; (800d734 <HAL_GPIO_Init+0x30c>)
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	089b      	lsrs	r3, r3, #2
 800d5d0:	3302      	adds	r3, #2
 800d5d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	f003 0303 	and.w	r3, r3, #3
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	220f      	movs	r2, #15
 800d5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e6:	43db      	mvns	r3, r3
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a51      	ldr	r2, [pc, #324]	; (800d738 <HAL_GPIO_Init+0x310>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d02b      	beq.n	800d64e <HAL_GPIO_Init+0x226>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a50      	ldr	r2, [pc, #320]	; (800d73c <HAL_GPIO_Init+0x314>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d025      	beq.n	800d64a <HAL_GPIO_Init+0x222>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4a4f      	ldr	r2, [pc, #316]	; (800d740 <HAL_GPIO_Init+0x318>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d01f      	beq.n	800d646 <HAL_GPIO_Init+0x21e>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a4e      	ldr	r2, [pc, #312]	; (800d744 <HAL_GPIO_Init+0x31c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d019      	beq.n	800d642 <HAL_GPIO_Init+0x21a>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a4d      	ldr	r2, [pc, #308]	; (800d748 <HAL_GPIO_Init+0x320>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d013      	beq.n	800d63e <HAL_GPIO_Init+0x216>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a4c      	ldr	r2, [pc, #304]	; (800d74c <HAL_GPIO_Init+0x324>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d00d      	beq.n	800d63a <HAL_GPIO_Init+0x212>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a4b      	ldr	r2, [pc, #300]	; (800d750 <HAL_GPIO_Init+0x328>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d007      	beq.n	800d636 <HAL_GPIO_Init+0x20e>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a4a      	ldr	r2, [pc, #296]	; (800d754 <HAL_GPIO_Init+0x32c>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d101      	bne.n	800d632 <HAL_GPIO_Init+0x20a>
 800d62e:	2307      	movs	r3, #7
 800d630:	e00e      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d632:	2308      	movs	r3, #8
 800d634:	e00c      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d636:	2306      	movs	r3, #6
 800d638:	e00a      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d63a:	2305      	movs	r3, #5
 800d63c:	e008      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d63e:	2304      	movs	r3, #4
 800d640:	e006      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d642:	2303      	movs	r3, #3
 800d644:	e004      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d646:	2302      	movs	r3, #2
 800d648:	e002      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d64a:	2301      	movs	r3, #1
 800d64c:	e000      	b.n	800d650 <HAL_GPIO_Init+0x228>
 800d64e:	2300      	movs	r3, #0
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	f002 0203 	and.w	r2, r2, #3
 800d656:	0092      	lsls	r2, r2, #2
 800d658:	4093      	lsls	r3, r2
 800d65a:	69ba      	ldr	r2, [r7, #24]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d660:	4934      	ldr	r1, [pc, #208]	; (800d734 <HAL_GPIO_Init+0x30c>)
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	089b      	lsrs	r3, r3, #2
 800d666:	3302      	adds	r3, #2
 800d668:	69ba      	ldr	r2, [r7, #24]
 800d66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d66e:	4b3a      	ldr	r3, [pc, #232]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	43db      	mvns	r3, r3
 800d678:	69ba      	ldr	r2, [r7, #24]
 800d67a:	4013      	ands	r3, r2
 800d67c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d003      	beq.n	800d692 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800d68a:	69ba      	ldr	r2, [r7, #24]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	4313      	orrs	r3, r2
 800d690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800d692:	4a31      	ldr	r2, [pc, #196]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800d698:	4b2f      	ldr	r3, [pc, #188]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	43db      	mvns	r3, r3
 800d6a2:	69ba      	ldr	r2, [r7, #24]
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800d6b4:	69ba      	ldr	r2, [r7, #24]
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800d6bc:	4a26      	ldr	r2, [pc, #152]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d6c2:	4b25      	ldr	r3, [pc, #148]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	43db      	mvns	r3, r3
 800d6cc:	69ba      	ldr	r2, [r7, #24]
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800d6de:	69ba      	ldr	r2, [r7, #24]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800d6e6:	4a1c      	ldr	r2, [pc, #112]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800d6ec:	4b1a      	ldr	r3, [pc, #104]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	43db      	mvns	r3, r3
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	4013      	ands	r3, r2
 800d6fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800d710:	4a11      	ldr	r2, [pc, #68]	; (800d758 <HAL_GPIO_Init+0x330>)
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	3301      	adds	r3, #1
 800d71a:	61fb      	str	r3, [r7, #28]
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b0f      	cmp	r3, #15
 800d720:	f67f ae90 	bls.w	800d444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800d724:	bf00      	nop
 800d726:	3724      	adds	r7, #36	; 0x24
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr
 800d730:	40023800 	.word	0x40023800
 800d734:	40013800 	.word	0x40013800
 800d738:	40020000 	.word	0x40020000
 800d73c:	40020400 	.word	0x40020400
 800d740:	40020800 	.word	0x40020800
 800d744:	40020c00 	.word	0x40020c00
 800d748:	40021000 	.word	0x40021000
 800d74c:	40021400 	.word	0x40021400
 800d750:	40021800 	.word	0x40021800
 800d754:	40021c00 	.word	0x40021c00
 800d758:	40013c00 	.word	0x40013c00

0800d75c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d766:	2300      	movs	r3, #0
 800d768:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800d76a:	2300      	movs	r3, #0
 800d76c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d76e:	2300      	movs	r3, #0
 800d770:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	e0cd      	b.n	800d914 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d778:	2201      	movs	r2, #1
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	fa02 f303 	lsl.w	r3, r2, r3
 800d780:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	4013      	ands	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	429a      	cmp	r2, r3
 800d790:	f040 80bd 	bne.w	800d90e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d794:	4a64      	ldr	r2, [pc, #400]	; (800d928 <HAL_GPIO_DeInit+0x1cc>)
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	089b      	lsrs	r3, r3, #2
 800d79a:	3302      	adds	r3, #2
 800d79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	f003 0303 	and.w	r3, r3, #3
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	220f      	movs	r2, #15
 800d7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b0:	68ba      	ldr	r2, [r7, #8]
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a5c      	ldr	r2, [pc, #368]	; (800d92c <HAL_GPIO_DeInit+0x1d0>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d02b      	beq.n	800d816 <HAL_GPIO_DeInit+0xba>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a5b      	ldr	r2, [pc, #364]	; (800d930 <HAL_GPIO_DeInit+0x1d4>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d025      	beq.n	800d812 <HAL_GPIO_DeInit+0xb6>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a5a      	ldr	r2, [pc, #360]	; (800d934 <HAL_GPIO_DeInit+0x1d8>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d01f      	beq.n	800d80e <HAL_GPIO_DeInit+0xb2>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a59      	ldr	r2, [pc, #356]	; (800d938 <HAL_GPIO_DeInit+0x1dc>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d019      	beq.n	800d80a <HAL_GPIO_DeInit+0xae>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a58      	ldr	r2, [pc, #352]	; (800d93c <HAL_GPIO_DeInit+0x1e0>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d013      	beq.n	800d806 <HAL_GPIO_DeInit+0xaa>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a57      	ldr	r2, [pc, #348]	; (800d940 <HAL_GPIO_DeInit+0x1e4>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d00d      	beq.n	800d802 <HAL_GPIO_DeInit+0xa6>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a56      	ldr	r2, [pc, #344]	; (800d944 <HAL_GPIO_DeInit+0x1e8>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d007      	beq.n	800d7fe <HAL_GPIO_DeInit+0xa2>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a55      	ldr	r2, [pc, #340]	; (800d948 <HAL_GPIO_DeInit+0x1ec>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d101      	bne.n	800d7fa <HAL_GPIO_DeInit+0x9e>
 800d7f6:	2307      	movs	r3, #7
 800d7f8:	e00e      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d7fa:	2308      	movs	r3, #8
 800d7fc:	e00c      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d7fe:	2306      	movs	r3, #6
 800d800:	e00a      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d802:	2305      	movs	r3, #5
 800d804:	e008      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d806:	2304      	movs	r3, #4
 800d808:	e006      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d80a:	2303      	movs	r3, #3
 800d80c:	e004      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d80e:	2302      	movs	r3, #2
 800d810:	e002      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d812:	2301      	movs	r3, #1
 800d814:	e000      	b.n	800d818 <HAL_GPIO_DeInit+0xbc>
 800d816:	2300      	movs	r3, #0
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	f002 0203 	and.w	r2, r2, #3
 800d81e:	0092      	lsls	r2, r2, #2
 800d820:	4093      	lsls	r3, r2
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	429a      	cmp	r2, r3
 800d826:	d132      	bne.n	800d88e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d828:	4b48      	ldr	r3, [pc, #288]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	43db      	mvns	r3, r3
 800d830:	4946      	ldr	r1, [pc, #280]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d832:	4013      	ands	r3, r2
 800d834:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d836:	4b45      	ldr	r3, [pc, #276]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	43db      	mvns	r3, r3
 800d83e:	4943      	ldr	r1, [pc, #268]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d840:	4013      	ands	r3, r2
 800d842:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d844:	4b41      	ldr	r3, [pc, #260]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d846:	689a      	ldr	r2, [r3, #8]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	43db      	mvns	r3, r3
 800d84c:	493f      	ldr	r1, [pc, #252]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d84e:	4013      	ands	r3, r2
 800d850:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d852:	4b3e      	ldr	r3, [pc, #248]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d854:	68da      	ldr	r2, [r3, #12]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	43db      	mvns	r3, r3
 800d85a:	493c      	ldr	r1, [pc, #240]	; (800d94c <HAL_GPIO_DeInit+0x1f0>)
 800d85c:	4013      	ands	r3, r2
 800d85e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f003 0303 	and.w	r3, r3, #3
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	220f      	movs	r2, #15
 800d86a:	fa02 f303 	lsl.w	r3, r2, r3
 800d86e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d870:	4a2d      	ldr	r2, [pc, #180]	; (800d928 <HAL_GPIO_DeInit+0x1cc>)
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	089b      	lsrs	r3, r3, #2
 800d876:	3302      	adds	r3, #2
 800d878:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	43da      	mvns	r2, r3
 800d880:	4829      	ldr	r0, [pc, #164]	; (800d928 <HAL_GPIO_DeInit+0x1cc>)
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	089b      	lsrs	r3, r3, #2
 800d886:	400a      	ands	r2, r1
 800d888:	3302      	adds	r3, #2
 800d88a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	2103      	movs	r1, #3
 800d898:	fa01 f303 	lsl.w	r3, r1, r3
 800d89c:	43db      	mvns	r3, r3
 800d89e:	401a      	ands	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	08da      	lsrs	r2, r3, #3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3208      	adds	r2, #8
 800d8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	220f      	movs	r2, #15
 800d8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d8be:	43db      	mvns	r3, r3
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	08d2      	lsrs	r2, r2, #3
 800d8c4:	4019      	ands	r1, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	3208      	adds	r2, #8
 800d8ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	2103      	movs	r1, #3
 800d8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8dc:	43db      	mvns	r3, r3
 800d8de:	401a      	ands	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d8f0:	43db      	mvns	r3, r3
 800d8f2:	401a      	ands	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	689a      	ldr	r2, [r3, #8]
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	2103      	movs	r1, #3
 800d902:	fa01 f303 	lsl.w	r3, r1, r3
 800d906:	43db      	mvns	r3, r3
 800d908:	401a      	ands	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	3301      	adds	r3, #1
 800d912:	617b      	str	r3, [r7, #20]
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	2b0f      	cmp	r3, #15
 800d918:	f67f af2e 	bls.w	800d778 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d91c:	bf00      	nop
 800d91e:	371c      	adds	r7, #28
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	40013800 	.word	0x40013800
 800d92c:	40020000 	.word	0x40020000
 800d930:	40020400 	.word	0x40020400
 800d934:	40020800 	.word	0x40020800
 800d938:	40020c00 	.word	0x40020c00
 800d93c:	40021000 	.word	0x40021000
 800d940:	40021400 	.word	0x40021400
 800d944:	40021800 	.word	0x40021800
 800d948:	40021c00 	.word	0x40021c00
 800d94c:	40013c00 	.word	0x40013c00

0800d950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	691a      	ldr	r2, [r3, #16]
 800d960:	887b      	ldrh	r3, [r7, #2]
 800d962:	4013      	ands	r3, r2
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d968:	2301      	movs	r3, #1
 800d96a:	73fb      	strb	r3, [r7, #15]
 800d96c:	e001      	b.n	800d972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d96e:	2300      	movs	r3, #0
 800d970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d972:	7bfb      	ldrb	r3, [r7, #15]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	807b      	strh	r3, [r7, #2]
 800d98c:	4613      	mov	r3, r2
 800d98e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d990:	787b      	ldrb	r3, [r7, #1]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d996:	887a      	ldrh	r2, [r7, #2]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d99c:	e003      	b.n	800d9a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d99e:	887b      	ldrh	r3, [r7, #2]
 800d9a0:	041a      	lsls	r2, r3, #16
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	619a      	str	r2, [r3, #24]
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
	...

0800d9b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e11f      	b.n	800dc06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d106      	bne.n	800d9e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f7f5 f9ac 	bl	8002d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2224      	movs	r2, #36	; 0x24
 800d9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f022 0201 	bic.w	r2, r2, #1
 800d9f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800da06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800da18:	f002 fd34 	bl	8010484 <HAL_RCC_GetPCLK1Freq>
 800da1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	4a7b      	ldr	r2, [pc, #492]	; (800dc10 <HAL_I2C_Init+0x25c>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d807      	bhi.n	800da38 <HAL_I2C_Init+0x84>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	4a7a      	ldr	r2, [pc, #488]	; (800dc14 <HAL_I2C_Init+0x260>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	bf94      	ite	ls
 800da30:	2301      	movls	r3, #1
 800da32:	2300      	movhi	r3, #0
 800da34:	b2db      	uxtb	r3, r3
 800da36:	e006      	b.n	800da46 <HAL_I2C_Init+0x92>
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	4a77      	ldr	r2, [pc, #476]	; (800dc18 <HAL_I2C_Init+0x264>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	bf94      	ite	ls
 800da40:	2301      	movls	r3, #1
 800da42:	2300      	movhi	r3, #0
 800da44:	b2db      	uxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e0db      	b.n	800dc06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	4a72      	ldr	r2, [pc, #456]	; (800dc1c <HAL_I2C_Init+0x268>)
 800da52:	fba2 2303 	umull	r2, r3, r2, r3
 800da56:	0c9b      	lsrs	r3, r3, #18
 800da58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	68ba      	ldr	r2, [r7, #8]
 800da6a:	430a      	orrs	r2, r1
 800da6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	4a64      	ldr	r2, [pc, #400]	; (800dc10 <HAL_I2C_Init+0x25c>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d802      	bhi.n	800da88 <HAL_I2C_Init+0xd4>
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	3301      	adds	r3, #1
 800da86:	e009      	b.n	800da9c <HAL_I2C_Init+0xe8>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800da8e:	fb02 f303 	mul.w	r3, r2, r3
 800da92:	4a63      	ldr	r2, [pc, #396]	; (800dc20 <HAL_I2C_Init+0x26c>)
 800da94:	fba2 2303 	umull	r2, r3, r2, r3
 800da98:	099b      	lsrs	r3, r3, #6
 800da9a:	3301      	adds	r3, #1
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	6812      	ldr	r2, [r2, #0]
 800daa0:	430b      	orrs	r3, r1
 800daa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800daae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	4956      	ldr	r1, [pc, #344]	; (800dc10 <HAL_I2C_Init+0x25c>)
 800dab8:	428b      	cmp	r3, r1
 800daba:	d80d      	bhi.n	800dad8 <HAL_I2C_Init+0x124>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	1e59      	subs	r1, r3, #1
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	fbb1 f3f3 	udiv	r3, r1, r3
 800daca:	3301      	adds	r3, #1
 800dacc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dad0:	2b04      	cmp	r3, #4
 800dad2:	bf38      	it	cc
 800dad4:	2304      	movcc	r3, #4
 800dad6:	e04f      	b.n	800db78 <HAL_I2C_Init+0x1c4>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d111      	bne.n	800db04 <HAL_I2C_Init+0x150>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	1e58      	subs	r0, r3, #1
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6859      	ldr	r1, [r3, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	440b      	add	r3, r1
 800daee:	fbb0 f3f3 	udiv	r3, r0, r3
 800daf2:	3301      	adds	r3, #1
 800daf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	bf0c      	ite	eq
 800dafc:	2301      	moveq	r3, #1
 800dafe:	2300      	movne	r3, #0
 800db00:	b2db      	uxtb	r3, r3
 800db02:	e012      	b.n	800db2a <HAL_I2C_Init+0x176>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	1e58      	subs	r0, r3, #1
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6859      	ldr	r1, [r3, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	440b      	add	r3, r1
 800db12:	0099      	lsls	r1, r3, #2
 800db14:	440b      	add	r3, r1
 800db16:	fbb0 f3f3 	udiv	r3, r0, r3
 800db1a:	3301      	adds	r3, #1
 800db1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db20:	2b00      	cmp	r3, #0
 800db22:	bf0c      	ite	eq
 800db24:	2301      	moveq	r3, #1
 800db26:	2300      	movne	r3, #0
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d001      	beq.n	800db32 <HAL_I2C_Init+0x17e>
 800db2e:	2301      	movs	r3, #1
 800db30:	e022      	b.n	800db78 <HAL_I2C_Init+0x1c4>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10e      	bne.n	800db58 <HAL_I2C_Init+0x1a4>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1e58      	subs	r0, r3, #1
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6859      	ldr	r1, [r3, #4]
 800db42:	460b      	mov	r3, r1
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	440b      	add	r3, r1
 800db48:	fbb0 f3f3 	udiv	r3, r0, r3
 800db4c:	3301      	adds	r3, #1
 800db4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db56:	e00f      	b.n	800db78 <HAL_I2C_Init+0x1c4>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	1e58      	subs	r0, r3, #1
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6859      	ldr	r1, [r3, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	440b      	add	r3, r1
 800db66:	0099      	lsls	r1, r3, #2
 800db68:	440b      	add	r3, r1
 800db6a:	fbb0 f3f3 	udiv	r3, r0, r3
 800db6e:	3301      	adds	r3, #1
 800db70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	6809      	ldr	r1, [r1, #0]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	69da      	ldr	r2, [r3, #28]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a1b      	ldr	r3, [r3, #32]
 800db92:	431a      	orrs	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	430a      	orrs	r2, r1
 800db9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800dba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	6911      	ldr	r1, [r2, #16]
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	68d2      	ldr	r2, [r2, #12]
 800dbb2:	4311      	orrs	r1, r2
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	6812      	ldr	r2, [r2, #0]
 800dbb8:	430b      	orrs	r3, r1
 800dbba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	695a      	ldr	r2, [r3, #20]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	430a      	orrs	r2, r1
 800dbd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f042 0201 	orr.w	r2, r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	000186a0 	.word	0x000186a0
 800dc14:	001e847f 	.word	0x001e847f
 800dc18:	003d08ff 	.word	0x003d08ff
 800dc1c:	431bde83 	.word	0x431bde83
 800dc20:	10624dd3 	.word	0x10624dd3

0800dc24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af02      	add	r7, sp, #8
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	607a      	str	r2, [r7, #4]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	460b      	mov	r3, r1
 800dc32:	817b      	strh	r3, [r7, #10]
 800dc34:	4613      	mov	r3, r2
 800dc36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dc38:	f7fd ffdc 	bl	800bbf4 <HAL_GetTick>
 800dc3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b20      	cmp	r3, #32
 800dc48:	f040 80e0 	bne.w	800de0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	2319      	movs	r3, #25
 800dc52:	2201      	movs	r2, #1
 800dc54:	4970      	ldr	r1, [pc, #448]	; (800de18 <HAL_I2C_Master_Transmit+0x1f4>)
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f000 fc56 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800dc62:	2302      	movs	r3, #2
 800dc64:	e0d3      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d101      	bne.n	800dc74 <HAL_I2C_Master_Transmit+0x50>
 800dc70:	2302      	movs	r3, #2
 800dc72:	e0cc      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d007      	beq.n	800dc9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f042 0201 	orr.w	r2, r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dca8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2221      	movs	r2, #33	; 0x21
 800dcae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2210      	movs	r2, #16
 800dcb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	893a      	ldrh	r2, [r7, #8]
 800dcca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	4a50      	ldr	r2, [pc, #320]	; (800de1c <HAL_I2C_Master_Transmit+0x1f8>)
 800dcda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800dcdc:	8979      	ldrh	r1, [r7, #10]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	6a3a      	ldr	r2, [r7, #32]
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f000 fac2 	bl	800e26c <I2C_MasterRequestWrite>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e08d      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	613b      	str	r3, [r7, #16]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	695b      	ldr	r3, [r3, #20]
 800dcfc:	613b      	str	r3, [r7, #16]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	613b      	str	r3, [r7, #16]
 800dd06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800dd08:	e066      	b.n	800ddd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	6a39      	ldr	r1, [r7, #32]
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f000 fcd0 	bl	800e6b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00d      	beq.n	800dd36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1e:	2b04      	cmp	r3, #4
 800dd20:	d107      	bne.n	800dd32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e06b      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	781a      	ldrb	r2, [r3, #0]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	3b01      	subs	r3, #1
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b04      	cmp	r3, #4
 800dd72:	d11b      	bne.n	800ddac <HAL_I2C_Master_Transmit+0x188>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d017      	beq.n	800ddac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd80:	781a      	ldrb	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	1c5a      	adds	r2, r3, #1
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda4:	3b01      	subs	r3, #1
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddac:	697a      	ldr	r2, [r7, #20]
 800ddae:	6a39      	ldr	r1, [r7, #32]
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 fcc0 	bl	800e736 <I2C_WaitOnBTFFlagUntilTimeout>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d00d      	beq.n	800ddd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc0:	2b04      	cmp	r3, #4
 800ddc2:	d107      	bne.n	800ddd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e01a      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d194      	bne.n	800dd0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2220      	movs	r2, #32
 800ddf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800de08:	2300      	movs	r3, #0
 800de0a:	e000      	b.n	800de0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800de0c:	2302      	movs	r3, #2
  }
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	00100002 	.word	0x00100002
 800de1c:	ffff0000 	.word	0xffff0000

0800de20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b08c      	sub	sp, #48	; 0x30
 800de24:	af02      	add	r7, sp, #8
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	607a      	str	r2, [r7, #4]
 800de2a:	461a      	mov	r2, r3
 800de2c:	460b      	mov	r3, r1
 800de2e:	817b      	strh	r3, [r7, #10]
 800de30:	4613      	mov	r3, r2
 800de32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800de34:	f7fd fede 	bl	800bbf4 <HAL_GetTick>
 800de38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de40:	b2db      	uxtb	r3, r3
 800de42:	2b20      	cmp	r3, #32
 800de44:	f040 820b 	bne.w	800e25e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	2319      	movs	r3, #25
 800de4e:	2201      	movs	r2, #1
 800de50:	497c      	ldr	r1, [pc, #496]	; (800e044 <HAL_I2C_Master_Receive+0x224>)
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f000 fb58 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d001      	beq.n	800de62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800de5e:	2302      	movs	r3, #2
 800de60:	e1fe      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d101      	bne.n	800de70 <HAL_I2C_Master_Receive+0x50>
 800de6c:	2302      	movs	r3, #2
 800de6e:	e1f7      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b01      	cmp	r3, #1
 800de84:	d007      	beq.n	800de96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f042 0201 	orr.w	r2, r2, #1
 800de94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2222      	movs	r2, #34	; 0x22
 800deaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2210      	movs	r2, #16
 800deb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	893a      	ldrh	r2, [r7, #8]
 800dec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800decc:	b29a      	uxth	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4a5c      	ldr	r2, [pc, #368]	; (800e048 <HAL_I2C_Master_Receive+0x228>)
 800ded6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ded8:	8979      	ldrh	r1, [r7, #10]
 800deda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 fa46 	bl	800e370 <I2C_MasterRequestRead>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e1b8      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800def2:	2b00      	cmp	r3, #0
 800def4:	d113      	bne.n	800df1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800def6:	2300      	movs	r3, #0
 800def8:	623b      	str	r3, [r7, #32]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	623b      	str	r3, [r7, #32]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	623b      	str	r3, [r7, #32]
 800df0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	e18c      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df22:	2b01      	cmp	r3, #1
 800df24:	d11b      	bne.n	800df5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	695b      	ldr	r3, [r3, #20]
 800df40:	61fb      	str	r3, [r7, #28]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	61fb      	str	r3, [r7, #28]
 800df4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	e16c      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df62:	2b02      	cmp	r3, #2
 800df64:	d11b      	bne.n	800df9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df86:	2300      	movs	r3, #0
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	61bb      	str	r3, [r7, #24]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	699b      	ldr	r3, [r3, #24]
 800df98:	61bb      	str	r3, [r7, #24]
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	e14c      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfae:	2300      	movs	r3, #0
 800dfb0:	617b      	str	r3, [r7, #20]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	617b      	str	r3, [r7, #20]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	617b      	str	r3, [r7, #20]
 800dfc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800dfc4:	e138      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	f200 80f1 	bhi.w	800e1b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d123      	bne.n	800e020 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dfd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f000 fbeb 	bl	800e7b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e139      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	691a      	ldr	r2, [r3, #16]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff6:	b2d2      	uxtb	r2, r2
 800dff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e008:	3b01      	subs	r3, #1
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e014:	b29b      	uxth	r3, r3
 800e016:	3b01      	subs	r3, #1
 800e018:	b29a      	uxth	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e01e:	e10b      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e024:	2b02      	cmp	r3, #2
 800e026:	d14e      	bne.n	800e0c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	2200      	movs	r2, #0
 800e030:	4906      	ldr	r1, [pc, #24]	; (800e04c <HAL_I2C_Master_Receive+0x22c>)
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f000 fa68 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d008      	beq.n	800e050 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e10e      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
 800e042:	bf00      	nop
 800e044:	00100002 	.word	0x00100002
 800e048:	ffff0000 	.word	0xffff0000
 800e04c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e05e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	691a      	ldr	r2, [r3, #16]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e088:	b29b      	uxth	r3, r3
 800e08a:	3b01      	subs	r3, #1
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	691a      	ldr	r2, [r3, #16]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09c:	b2d2      	uxtb	r2, r2
 800e09e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e0c4:	e0b8      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	4966      	ldr	r1, [pc, #408]	; (800e268 <HAL_I2C_Master_Receive+0x448>)
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f000 fa19 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	e0bf      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	691a      	ldr	r2, [r3, #16]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e10c:	3b01      	subs	r3, #1
 800e10e:	b29a      	uxth	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e118:	b29b      	uxth	r3, r3
 800e11a:	3b01      	subs	r3, #1
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e128:	2200      	movs	r2, #0
 800e12a:	494f      	ldr	r1, [pc, #316]	; (800e268 <HAL_I2C_Master_Receive+0x448>)
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 f9eb 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e091      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e14a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	691a      	ldr	r2, [r3, #16]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e156:	b2d2      	uxtb	r2, r2
 800e158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	1c5a      	adds	r2, r3, #1
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e168:	3b01      	subs	r3, #1
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e174:	b29b      	uxth	r3, r3
 800e176:	3b01      	subs	r3, #1
 800e178:	b29a      	uxth	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	691a      	ldr	r2, [r3, #16]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e19a:	3b01      	subs	r3, #1
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1b0:	e042      	b.n	800e238 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f000 fafe 	bl	800e7b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e04c      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	691a      	ldr	r2, [r3, #16]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	f003 0304 	and.w	r3, r3, #4
 800e202:	2b04      	cmp	r3, #4
 800e204:	d118      	bne.n	800e238 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691a      	ldr	r2, [r3, #16]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e210:	b2d2      	uxtb	r2, r2
 800e212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e218:	1c5a      	adds	r2, r3, #1
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e222:	3b01      	subs	r3, #1
 800e224:	b29a      	uxth	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	b29a      	uxth	r2, r3
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f47f aec2 	bne.w	800dfc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2220      	movs	r2, #32
 800e246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e25a:	2300      	movs	r3, #0
 800e25c:	e000      	b.n	800e260 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800e25e:	2302      	movs	r3, #2
  }
}
 800e260:	4618      	mov	r0, r3
 800e262:	3728      	adds	r7, #40	; 0x28
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	00010004 	.word	0x00010004

0800e26c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af02      	add	r7, sp, #8
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	460b      	mov	r3, r1
 800e27a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b08      	cmp	r3, #8
 800e286:	d006      	beq.n	800e296 <I2C_MasterRequestWrite+0x2a>
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d003      	beq.n	800e296 <I2C_MasterRequestWrite+0x2a>
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e294:	d108      	bne.n	800e2a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	e00b      	b.n	800e2c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ac:	2b12      	cmp	r3, #18
 800e2ae:	d107      	bne.n	800e2c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	9300      	str	r3, [sp, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 f91b 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00c      	beq.n	800e2f2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d003      	beq.n	800e2ee <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e035      	b.n	800e35e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2fa:	d108      	bne.n	800e30e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2fc:	897b      	ldrh	r3, [r7, #10]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	461a      	mov	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e30a:	611a      	str	r2, [r3, #16]
 800e30c:	e01b      	b.n	800e346 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e30e:	897b      	ldrh	r3, [r7, #10]
 800e310:	11db      	asrs	r3, r3, #7
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f003 0306 	and.w	r3, r3, #6
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	f063 030f 	orn	r3, r3, #15
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	490f      	ldr	r1, [pc, #60]	; (800e368 <I2C_MasterRequestWrite+0xfc>)
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f000 f942 	bl	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	e010      	b.n	800e35e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e33c:	897b      	ldrh	r3, [r7, #10]
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	4908      	ldr	r1, [pc, #32]	; (800e36c <I2C_MasterRequestWrite+0x100>)
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 f932 	bl	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	e000      	b.n	800e35e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	00010008 	.word	0x00010008
 800e36c:	00010002 	.word	0x00010002

0800e370 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b088      	sub	sp, #32
 800e374:	af02      	add	r7, sp, #8
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	607a      	str	r2, [r7, #4]
 800e37a:	603b      	str	r3, [r7, #0]
 800e37c:	460b      	mov	r3, r1
 800e37e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e384:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e394:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	2b08      	cmp	r3, #8
 800e39a:	d006      	beq.n	800e3aa <I2C_MasterRequestRead+0x3a>
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d003      	beq.n	800e3aa <I2C_MasterRequestRead+0x3a>
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e3a8:	d108      	bne.n	800e3bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	e00b      	b.n	800e3d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c0:	2b11      	cmp	r3, #17
 800e3c2:	d107      	bne.n	800e3d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f000 f891 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00c      	beq.n	800e406 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d003      	beq.n	800e402 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e400:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800e402:	2303      	movs	r3, #3
 800e404:	e078      	b.n	800e4f8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e40e:	d108      	bne.n	800e422 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e410:	897b      	ldrh	r3, [r7, #10]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f043 0301 	orr.w	r3, r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	611a      	str	r2, [r3, #16]
 800e420:	e05e      	b.n	800e4e0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e422:	897b      	ldrh	r3, [r7, #10]
 800e424:	11db      	asrs	r3, r3, #7
 800e426:	b2db      	uxtb	r3, r3
 800e428:	f003 0306 	and.w	r3, r3, #6
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	f063 030f 	orn	r3, r3, #15
 800e432:	b2da      	uxtb	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	4930      	ldr	r1, [pc, #192]	; (800e500 <I2C_MasterRequestRead+0x190>)
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	f000 f8b8 	bl	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e053      	b.n	800e4f8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e450:	897b      	ldrh	r3, [r7, #10]
 800e452:	b2da      	uxtb	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	4929      	ldr	r1, [pc, #164]	; (800e504 <I2C_MasterRequestRead+0x194>)
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f000 f8a8 	bl	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d001      	beq.n	800e470 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800e46c:	2301      	movs	r3, #1
 800e46e:	e043      	b.n	800e4f8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e470:	2300      	movs	r3, #0
 800e472:	613b      	str	r3, [r7, #16]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	613b      	str	r3, [r7, #16]
 800e484:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e494:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f000 f830 	bl	800e508 <I2C_WaitOnFlagUntilTimeout>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00c      	beq.n	800e4c8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e017      	b.n	800e4f8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e4c8:	897b      	ldrh	r3, [r7, #10]
 800e4ca:	11db      	asrs	r3, r3, #7
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 0306 	and.w	r3, r3, #6
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	f063 030e 	orn	r3, r3, #14
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4907      	ldr	r1, [pc, #28]	; (800e504 <I2C_MasterRequestRead+0x194>)
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f000 f865 	bl	800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	e000      	b.n	800e4f8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	00010008 	.word	0x00010008
 800e504:	00010002 	.word	0x00010002

0800e508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	603b      	str	r3, [r7, #0]
 800e514:	4613      	mov	r3, r2
 800e516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e518:	e025      	b.n	800e566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d021      	beq.n	800e566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e522:	f7fd fb67 	bl	800bbf4 <HAL_GetTick>
 800e526:	4602      	mov	r2, r0
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d302      	bcc.n	800e538 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d116      	bne.n	800e566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2220      	movs	r2, #32
 800e542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e552:	f043 0220 	orr.w	r2, r3, #32
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e023      	b.n	800e5ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	0c1b      	lsrs	r3, r3, #16
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d10d      	bne.n	800e58c <I2C_WaitOnFlagUntilTimeout+0x84>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	695b      	ldr	r3, [r3, #20]
 800e576:	43da      	mvns	r2, r3
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	4013      	ands	r3, r2
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	bf0c      	ite	eq
 800e582:	2301      	moveq	r3, #1
 800e584:	2300      	movne	r3, #0
 800e586:	b2db      	uxtb	r3, r3
 800e588:	461a      	mov	r2, r3
 800e58a:	e00c      	b.n	800e5a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	43da      	mvns	r2, r3
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	4013      	ands	r3, r2
 800e598:	b29b      	uxth	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bf0c      	ite	eq
 800e59e:	2301      	moveq	r3, #1
 800e5a0:	2300      	movne	r3, #0
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d0b6      	beq.n	800e51a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	60f8      	str	r0, [r7, #12]
 800e5be:	60b9      	str	r1, [r7, #8]
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e5c4:	e051      	b.n	800e66a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	695b      	ldr	r3, [r3, #20]
 800e5cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5d4:	d123      	bne.n	800e61e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e5ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2220      	movs	r2, #32
 800e5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e60a:	f043 0204 	orr.w	r2, r3, #4
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e046      	b.n	800e6ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d021      	beq.n	800e66a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e626:	f7fd fae5 	bl	800bbf4 <HAL_GetTick>
 800e62a:	4602      	mov	r2, r0
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	429a      	cmp	r2, r3
 800e634:	d302      	bcc.n	800e63c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d116      	bne.n	800e66a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2220      	movs	r2, #32
 800e646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e656:	f043 0220 	orr.w	r2, r3, #32
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e020      	b.n	800e6ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	0c1b      	lsrs	r3, r3, #16
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	d10c      	bne.n	800e68e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	695b      	ldr	r3, [r3, #20]
 800e67a:	43da      	mvns	r2, r3
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	4013      	ands	r3, r2
 800e680:	b29b      	uxth	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	bf14      	ite	ne
 800e686:	2301      	movne	r3, #1
 800e688:	2300      	moveq	r3, #0
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	e00b      	b.n	800e6a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	43da      	mvns	r2, r3
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	4013      	ands	r3, r2
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	bf14      	ite	ne
 800e6a0:	2301      	movne	r3, #1
 800e6a2:	2300      	moveq	r3, #0
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d18d      	bne.n	800e5c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6c0:	e02d      	b.n	800e71e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f000 f8ce 	bl	800e864 <I2C_IsAcknowledgeFailed>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e02d      	b.n	800e72e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d8:	d021      	beq.n	800e71e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6da:	f7fd fa8b 	bl	800bbf4 <HAL_GetTick>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d302      	bcc.n	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d116      	bne.n	800e71e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2220      	movs	r2, #32
 800e6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70a:	f043 0220 	orr.w	r2, r3, #32
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e007      	b.n	800e72e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	695b      	ldr	r3, [r3, #20]
 800e724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e728:	2b80      	cmp	r3, #128	; 0x80
 800e72a:	d1ca      	bne.n	800e6c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e72c:	2300      	movs	r3, #0
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	60f8      	str	r0, [r7, #12]
 800e73e:	60b9      	str	r1, [r7, #8]
 800e740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e742:	e02d      	b.n	800e7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f000 f88d 	bl	800e864 <I2C_IsAcknowledgeFailed>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e750:	2301      	movs	r3, #1
 800e752:	e02d      	b.n	800e7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75a:	d021      	beq.n	800e7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e75c:	f7fd fa4a 	bl	800bbf4 <HAL_GetTick>
 800e760:	4602      	mov	r2, r0
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d302      	bcc.n	800e772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d116      	bne.n	800e7a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2220      	movs	r2, #32
 800e77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e78c:	f043 0220 	orr.w	r2, r3, #32
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2200      	movs	r2, #0
 800e798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	e007      	b.n	800e7b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	695b      	ldr	r3, [r3, #20]
 800e7a6:	f003 0304 	and.w	r3, r3, #4
 800e7aa:	2b04      	cmp	r3, #4
 800e7ac:	d1ca      	bne.n	800e744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e7c4:	e042      	b.n	800e84c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	695b      	ldr	r3, [r3, #20]
 800e7cc:	f003 0310 	and.w	r3, r3, #16
 800e7d0:	2b10      	cmp	r3, #16
 800e7d2:	d119      	bne.n	800e808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f06f 0210 	mvn.w	r2, #16
 800e7dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2220      	movs	r2, #32
 800e7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	e029      	b.n	800e85c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e808:	f7fd f9f4 	bl	800bbf4 <HAL_GetTick>
 800e80c:	4602      	mov	r2, r0
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	429a      	cmp	r2, r3
 800e816:	d302      	bcc.n	800e81e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d116      	bne.n	800e84c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2220      	movs	r2, #32
 800e828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e838:	f043 0220 	orr.w	r2, r3, #32
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	e007      	b.n	800e85c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	695b      	ldr	r3, [r3, #20]
 800e852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e856:	2b40      	cmp	r3, #64	; 0x40
 800e858:	d1b5      	bne.n	800e7c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e87a:	d11b      	bne.n	800e8b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2200      	movs	r2, #0
 800e88a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2220      	movs	r2, #32
 800e890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a0:	f043 0204 	orr.w	r2, r3, #4
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e000      	b.n	800e8b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	370c      	adds	r7, #12
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b084      	sub	sp, #16
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d101      	bne.n	800e8d4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e02b      	b.n	800e92c <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e8dc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f245 5255 	movw	r2, #21845	; 0x5555
 800e8e6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	6852      	ldr	r2, [r2, #4]
 800e8f0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	6892      	ldr	r2, [r2, #8]
 800e8fa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e8fc:	f7fd f97a 	bl	800bbf4 <HAL_GetTick>
 800e900:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800e902:	e008      	b.n	800e916 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e904:	f7fd f976 	bl	800bbf4 <HAL_GetTick>
 800e908:	4602      	mov	r2, r0
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	1ad3      	subs	r3, r2, r3
 800e90e:	2b30      	cmp	r3, #48	; 0x30
 800e910:	d901      	bls.n	800e916 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800e912:	2303      	movs	r3, #3
 800e914:	e00a      	b.n	800e92c <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1f1      	bne.n	800e904 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e928:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e956:	b08f      	sub	sp, #60	; 0x3c
 800e958:	af0a      	add	r7, sp, #40	; 0x28
 800e95a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e962:	2301      	movs	r3, #1
 800e964:	e10f      	b.n	800eb86 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b00      	cmp	r3, #0
 800e976:	d106      	bne.n	800e986 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f00b f8f9 	bl	8019b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2203      	movs	r2, #3
 800e98a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f004 ff78 	bl	801389a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	603b      	str	r3, [r7, #0]
 800e9b0:	687e      	ldr	r6, [r7, #4]
 800e9b2:	466d      	mov	r5, sp
 800e9b4:	f106 0410 	add.w	r4, r6, #16
 800e9b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e9c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e9c4:	e885 0003 	stmia.w	r5, {r0, r1}
 800e9c8:	1d33      	adds	r3, r6, #4
 800e9ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9cc:	6838      	ldr	r0, [r7, #0]
 800e9ce:	f004 fe4f 	bl	8013670 <USB_CoreInit>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d005      	beq.n	800e9e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e0d0      	b.n	800eb86 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f004 ff66 	bl	80138bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	73fb      	strb	r3, [r7, #15]
 800e9f4:	e04a      	b.n	800ea8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e9f6:	7bfa      	ldrb	r2, [r7, #15]
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	1a9b      	subs	r3, r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	440b      	add	r3, r1
 800ea04:	333d      	adds	r3, #61	; 0x3d
 800ea06:	2201      	movs	r2, #1
 800ea08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ea0a:	7bfa      	ldrb	r2, [r7, #15]
 800ea0c:	6879      	ldr	r1, [r7, #4]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	1a9b      	subs	r3, r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	440b      	add	r3, r1
 800ea18:	333c      	adds	r3, #60	; 0x3c
 800ea1a:	7bfa      	ldrb	r2, [r7, #15]
 800ea1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ea1e:	7bfa      	ldrb	r2, [r7, #15]
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	b298      	uxth	r0, r3
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	4613      	mov	r3, r2
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	1a9b      	subs	r3, r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	440b      	add	r3, r1
 800ea30:	3342      	adds	r3, #66	; 0x42
 800ea32:	4602      	mov	r2, r0
 800ea34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ea36:	7bfa      	ldrb	r2, [r7, #15]
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	1a9b      	subs	r3, r3, r2
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	440b      	add	r3, r1
 800ea44:	333f      	adds	r3, #63	; 0x3f
 800ea46:	2200      	movs	r2, #0
 800ea48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ea4a:	7bfa      	ldrb	r2, [r7, #15]
 800ea4c:	6879      	ldr	r1, [r7, #4]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	00db      	lsls	r3, r3, #3
 800ea52:	1a9b      	subs	r3, r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	440b      	add	r3, r1
 800ea58:	3344      	adds	r3, #68	; 0x44
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ea5e:	7bfa      	ldrb	r2, [r7, #15]
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	4613      	mov	r3, r2
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	1a9b      	subs	r3, r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	440b      	add	r3, r1
 800ea6c:	3348      	adds	r3, #72	; 0x48
 800ea6e:	2200      	movs	r2, #0
 800ea70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ea72:	7bfa      	ldrb	r2, [r7, #15]
 800ea74:	6879      	ldr	r1, [r7, #4]
 800ea76:	4613      	mov	r3, r2
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	1a9b      	subs	r3, r3, r2
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	440b      	add	r3, r1
 800ea80:	3350      	adds	r3, #80	; 0x50
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	73fb      	strb	r3, [r7, #15]
 800ea8c:	7bfa      	ldrb	r2, [r7, #15]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d3af      	bcc.n	800e9f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ea96:	2300      	movs	r3, #0
 800ea98:	73fb      	strb	r3, [r7, #15]
 800ea9a:	e044      	b.n	800eb26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ea9c:	7bfa      	ldrb	r2, [r7, #15]
 800ea9e:	6879      	ldr	r1, [r7, #4]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	00db      	lsls	r3, r3, #3
 800eaa4:	1a9b      	subs	r3, r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	440b      	add	r3, r1
 800eaaa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800eab2:	7bfa      	ldrb	r2, [r7, #15]
 800eab4:	6879      	ldr	r1, [r7, #4]
 800eab6:	4613      	mov	r3, r2
 800eab8:	00db      	lsls	r3, r3, #3
 800eaba:	1a9b      	subs	r3, r3, r2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	440b      	add	r3, r1
 800eac0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800eac4:	7bfa      	ldrb	r2, [r7, #15]
 800eac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800eac8:	7bfa      	ldrb	r2, [r7, #15]
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	4613      	mov	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	1a9b      	subs	r3, r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	440b      	add	r3, r1
 800ead6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eada:	2200      	movs	r2, #0
 800eadc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800eade:	7bfa      	ldrb	r2, [r7, #15]
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	4613      	mov	r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	1a9b      	subs	r3, r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	440b      	add	r3, r1
 800eaec:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800eaf4:	7bfa      	ldrb	r2, [r7, #15]
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	1a9b      	subs	r3, r3, r2
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	440b      	add	r3, r1
 800eb02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800eb0a:	7bfa      	ldrb	r2, [r7, #15]
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	1a9b      	subs	r3, r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	440b      	add	r3, r1
 800eb18:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	3301      	adds	r3, #1
 800eb24:	73fb      	strb	r3, [r7, #15]
 800eb26:	7bfa      	ldrb	r2, [r7, #15]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d3b5      	bcc.n	800ea9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	603b      	str	r3, [r7, #0]
 800eb36:	687e      	ldr	r6, [r7, #4]
 800eb38:	466d      	mov	r5, sp
 800eb3a:	f106 0410 	add.w	r4, r6, #16
 800eb3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb46:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb4a:	e885 0003 	stmia.w	r5, {r0, r1}
 800eb4e:	1d33      	adds	r3, r6, #4
 800eb50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb52:	6838      	ldr	r0, [r7, #0]
 800eb54:	f004 fedc 	bl	8013910 <USB_DevInit>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d005      	beq.n	800eb6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2202      	movs	r2, #2
 800eb62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800eb66:	2301      	movs	r3, #1
 800eb68:	e00d      	b.n	800eb86 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f005 ff1b 	bl	80149ba <USB_DevDisconnect>

  return HAL_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d101      	bne.n	800ebaa <HAL_PCD_Start+0x1c>
 800eba6:	2302      	movs	r3, #2
 800eba8:	e020      	b.n	800ebec <HAL_PCD_Start+0x5e>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d109      	bne.n	800ebce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d005      	beq.n	800ebce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f005 fed9 	bl	801498a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f004 fe4b 	bl	8013878 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800ebea:	2300      	movs	r3, #0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b08d      	sub	sp, #52	; 0x34
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f005 ff80 	bl	8014b10 <USB_GetMode>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f040 839d 	bne.w	800f352 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f005 fee4 	bl	80149ea <USB_ReadInterrupts>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f000 8393 	beq.w	800f350 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f005 fedb 	bl	80149ea <USB_ReadInterrupts>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f003 0302 	and.w	r3, r3, #2
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d107      	bne.n	800ec4e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	695a      	ldr	r2, [r3, #20]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f002 0202 	and.w	r2, r2, #2
 800ec4c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f005 fec9 	bl	80149ea <USB_ReadInterrupts>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	f003 0310 	and.w	r3, r3, #16
 800ec5e:	2b10      	cmp	r3, #16
 800ec60:	d161      	bne.n	800ed26 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	699a      	ldr	r2, [r3, #24]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f022 0210 	bic.w	r2, r2, #16
 800ec70:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	f003 020f 	and.w	r2, r3, #15
 800ec7e:	4613      	mov	r3, r2
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	1a9b      	subs	r3, r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	3304      	adds	r3, #4
 800ec90:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	0c5b      	lsrs	r3, r3, #17
 800ec96:	f003 030f 	and.w	r3, r3, #15
 800ec9a:	2b02      	cmp	r3, #2
 800ec9c:	d124      	bne.n	800ece8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800ec9e:	69ba      	ldr	r2, [r7, #24]
 800eca0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800eca4:	4013      	ands	r3, r2
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d035      	beq.n	800ed16 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	091b      	lsrs	r3, r3, #4
 800ecb2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800ecb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	461a      	mov	r2, r3
 800ecbc:	6a38      	ldr	r0, [r7, #32]
 800ecbe:	f005 fd41 	bl	8014744 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	68da      	ldr	r2, [r3, #12]
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	091b      	lsrs	r3, r3, #4
 800ecca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ecce:	441a      	add	r2, r3
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	699a      	ldr	r2, [r3, #24]
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	091b      	lsrs	r3, r3, #4
 800ecdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ece0:	441a      	add	r2, r3
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	619a      	str	r2, [r3, #24]
 800ece6:	e016      	b.n	800ed16 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	0c5b      	lsrs	r3, r3, #17
 800ecec:	f003 030f 	and.w	r3, r3, #15
 800ecf0:	2b06      	cmp	r3, #6
 800ecf2:	d110      	bne.n	800ed16 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ecfa:	2208      	movs	r2, #8
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	6a38      	ldr	r0, [r7, #32]
 800ed00:	f005 fd20 	bl	8014744 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	699a      	ldr	r2, [r3, #24]
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	091b      	lsrs	r3, r3, #4
 800ed0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ed10:	441a      	add	r2, r3
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	699a      	ldr	r2, [r3, #24]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f042 0210 	orr.w	r2, r2, #16
 800ed24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f005 fe5d 	bl	80149ea <USB_ReadInterrupts>
 800ed30:	4603      	mov	r3, r0
 800ed32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ed36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ed3a:	d16e      	bne.n	800ee1a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f005 fe63 	bl	8014a10 <USB_ReadDevAllOutEpInterrupt>
 800ed4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ed4c:	e062      	b.n	800ee14 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed50:	f003 0301 	and.w	r3, r3, #1
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d057      	beq.n	800ee08 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed5e:	b2d2      	uxtb	r2, r2
 800ed60:	4611      	mov	r1, r2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f005 fe88 	bl	8014a78 <USB_ReadDevOutEPInterrupt>
 800ed68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00c      	beq.n	800ed8e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed80:	461a      	mov	r2, r3
 800ed82:	2301      	movs	r3, #1
 800ed84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800ed86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 fdb1 	bl	800f8f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f003 0308 	and.w	r3, r3, #8
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00c      	beq.n	800edb2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ed98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9a:	015a      	lsls	r2, r3, #5
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	4413      	add	r3, r2
 800eda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda4:	461a      	mov	r2, r3
 800eda6:	2308      	movs	r3, #8
 800eda8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800edaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 feab 	bl	800fb08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f003 0310 	and.w	r3, r3, #16
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d008      	beq.n	800edce <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	015a      	lsls	r2, r3, #5
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	4413      	add	r3, r2
 800edc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc8:	461a      	mov	r2, r3
 800edca:	2310      	movs	r3, #16
 800edcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f003 0320 	and.w	r3, r3, #32
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d008      	beq.n	800edea <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	015a      	lsls	r2, r3, #5
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	4413      	add	r3, r2
 800ede0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede4:	461a      	mov	r2, r3
 800ede6:	2320      	movs	r3, #32
 800ede8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d009      	beq.n	800ee08 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	015a      	lsls	r2, r3, #5
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee00:	461a      	mov	r2, r3
 800ee02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee06:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	085b      	lsrs	r3, r3, #1
 800ee12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800ee14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d199      	bne.n	800ed4e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f005 fde3 	bl	80149ea <USB_ReadInterrupts>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ee2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ee2e:	f040 80c0 	bne.w	800efb2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f005 fe04 	bl	8014a44 <USB_ReadDevAllInEpInterrupt>
 800ee3c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800ee42:	e0b2      	b.n	800efaa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f000 80a7 	beq.w	800ef9e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee56:	b2d2      	uxtb	r2, r2
 800ee58:	4611      	mov	r1, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f005 fe2a 	bl	8014ab4 <USB_ReadDevInEPInterrupt>
 800ee60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f003 0301 	and.w	r3, r3, #1
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d057      	beq.n	800ef1c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	f003 030f 	and.w	r3, r3, #15
 800ee72:	2201      	movs	r2, #1
 800ee74:	fa02 f303 	lsl.w	r3, r2, r3
 800ee78:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	43db      	mvns	r3, r3
 800ee86:	69f9      	ldr	r1, [r7, #28]
 800ee88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee8c:	4013      	ands	r3, r2
 800ee8e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	015a      	lsls	r2, r3, #5
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	4413      	add	r3, r2
 800ee98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	2301      	movs	r3, #1
 800eea0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d132      	bne.n	800ef10 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800eeaa:	6879      	ldr	r1, [r7, #4]
 800eeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeae:	4613      	mov	r3, r2
 800eeb0:	00db      	lsls	r3, r3, #3
 800eeb2:	1a9b      	subs	r3, r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	440b      	add	r3, r1
 800eeb8:	3348      	adds	r3, #72	; 0x48
 800eeba:	6819      	ldr	r1, [r3, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec0:	4613      	mov	r3, r2
 800eec2:	00db      	lsls	r3, r3, #3
 800eec4:	1a9b      	subs	r3, r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4403      	add	r3, r0
 800eeca:	3344      	adds	r3, #68	; 0x44
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4419      	add	r1, r3
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed4:	4613      	mov	r3, r2
 800eed6:	00db      	lsls	r3, r3, #3
 800eed8:	1a9b      	subs	r3, r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4403      	add	r3, r0
 800eede:	3348      	adds	r3, #72	; 0x48
 800eee0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d113      	bne.n	800ef10 <HAL_PCD_IRQHandler+0x31c>
 800eee8:	6879      	ldr	r1, [r7, #4]
 800eeea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeec:	4613      	mov	r3, r2
 800eeee:	00db      	lsls	r3, r3, #3
 800eef0:	1a9b      	subs	r3, r3, r2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	440b      	add	r3, r1
 800eef6:	3350      	adds	r3, #80	; 0x50
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d108      	bne.n	800ef10 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6818      	ldr	r0, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ef08:	461a      	mov	r2, r3
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	f005 fe32 	bl	8014b74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f00a febd 	bl	8019c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	f003 0308 	and.w	r3, r3, #8
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d008      	beq.n	800ef38 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	015a      	lsls	r2, r3, #5
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef32:	461a      	mov	r2, r3
 800ef34:	2308      	movs	r3, #8
 800ef36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	f003 0310 	and.w	r3, r3, #16
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d008      	beq.n	800ef54 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	015a      	lsls	r2, r3, #5
 800ef46:	69fb      	ldr	r3, [r7, #28]
 800ef48:	4413      	add	r3, r2
 800ef4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4e:	461a      	mov	r2, r3
 800ef50:	2310      	movs	r3, #16
 800ef52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d008      	beq.n	800ef70 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	015a      	lsls	r2, r3, #5
 800ef62:	69fb      	ldr	r3, [r7, #28]
 800ef64:	4413      	add	r3, r2
 800ef66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d008      	beq.n	800ef8c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	015a      	lsls	r2, r3, #5
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	4413      	add	r3, r2
 800ef82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef86:	461a      	mov	r2, r3
 800ef88:	2302      	movs	r3, #2
 800ef8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ef96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fc1b 	bl	800f7d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	3301      	adds	r3, #1
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800efa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa6:	085b      	lsrs	r3, r3, #1
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	2b00      	cmp	r3, #0
 800efae:	f47f af49 	bne.w	800ee44 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f005 fd17 	bl	80149ea <USB_ReadInterrupts>
 800efbc:	4603      	mov	r3, r0
 800efbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efc6:	d122      	bne.n	800f00e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	69fa      	ldr	r2, [r7, #28]
 800efd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efd6:	f023 0301 	bic.w	r3, r3, #1
 800efda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d108      	bne.n	800eff8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800efee:	2100      	movs	r1, #0
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fe27 	bl	800fc44 <HAL_PCDEx_LPM_Callback>
 800eff6:	e002      	b.n	800effe <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f00a fec3 	bl	8019d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	695a      	ldr	r2, [r3, #20]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f00c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4618      	mov	r0, r3
 800f014:	f005 fce9 	bl	80149ea <USB_ReadInterrupts>
 800f018:	4603      	mov	r3, r0
 800f01a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f01e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f022:	d112      	bne.n	800f04a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	f003 0301 	and.w	r3, r3, #1
 800f030:	2b01      	cmp	r3, #1
 800f032:	d102      	bne.n	800f03a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f00a fe7f 	bl	8019d38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	695a      	ldr	r2, [r3, #20]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f048:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4618      	mov	r0, r3
 800f050:	f005 fccb 	bl	80149ea <USB_ReadInterrupts>
 800f054:	4603      	mov	r3, r0
 800f056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f05a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f05e:	f040 80c7 	bne.w	800f1f0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	69fa      	ldr	r2, [r7, #28]
 800f06c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f070:	f023 0301 	bic.w	r3, r3, #1
 800f074:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2110      	movs	r1, #16
 800f07c:	4618      	mov	r0, r3
 800f07e:	f004 fdab 	bl	8013bd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f082:	2300      	movs	r3, #0
 800f084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f086:	e056      	b.n	800f136 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08a:	015a      	lsls	r2, r3, #5
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f094:	461a      	mov	r2, r3
 800f096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f09a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	015a      	lsls	r2, r3, #5
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0ac:	0151      	lsls	r1, r2, #5
 800f0ae:	69fa      	ldr	r2, [r7, #28]
 800f0b0:	440a      	add	r2, r1
 800f0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0ba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0cc:	0151      	lsls	r1, r2, #5
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	440a      	add	r2, r1
 800f0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	015a      	lsls	r2, r3, #5
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f0ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f100:	0151      	lsls	r1, r2, #5
 800f102:	69fa      	ldr	r2, [r7, #28]
 800f104:	440a      	add	r2, r1
 800f106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f10a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f10e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	015a      	lsls	r2, r3, #5
 800f114:	69fb      	ldr	r3, [r7, #28]
 800f116:	4413      	add	r3, r2
 800f118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f120:	0151      	lsls	r1, r2, #5
 800f122:	69fa      	ldr	r2, [r7, #28]
 800f124:	440a      	add	r2, r1
 800f126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f12a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f12e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	3301      	adds	r3, #1
 800f134:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d3a3      	bcc.n	800f088 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f146:	69db      	ldr	r3, [r3, #28]
 800f148:	69fa      	ldr	r2, [r7, #28]
 800f14a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f14e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f152:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d016      	beq.n	800f18a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f16c:	f043 030b 	orr.w	r3, r3, #11
 800f170:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f17c:	69fa      	ldr	r2, [r7, #28]
 800f17e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f182:	f043 030b 	orr.w	r3, r3, #11
 800f186:	6453      	str	r3, [r2, #68]	; 0x44
 800f188:	e015      	b.n	800f1b6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f19c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f1a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	69fa      	ldr	r2, [r7, #28]
 800f1ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1b0:	f043 030b 	orr.w	r3, r3, #11
 800f1b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f1c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f1da:	461a      	mov	r2, r3
 800f1dc:	f005 fcca 	bl	8014b74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	695a      	ldr	r2, [r3, #20]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f1ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f005 fbf8 	bl	80149ea <USB_ReadInterrupts>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f204:	d124      	bne.n	800f250 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f005 fc8e 	bl	8014b2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4618      	mov	r0, r3
 800f216:	f004 fd40 	bl	8013c9a <USB_GetDevSpeed>
 800f21a:	4603      	mov	r3, r0
 800f21c:	461a      	mov	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681c      	ldr	r4, [r3, #0]
 800f226:	f001 f921 	bl	801046c <HAL_RCC_GetHCLKFreq>
 800f22a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f230:	b2db      	uxtb	r3, r3
 800f232:	461a      	mov	r2, r3
 800f234:	4620      	mov	r0, r4
 800f236:	f004 fa7d 	bl	8013734 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f00a fd53 	bl	8019ce6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	695a      	ldr	r2, [r3, #20]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f24e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4618      	mov	r0, r3
 800f256:	f005 fbc8 	bl	80149ea <USB_ReadInterrupts>
 800f25a:	4603      	mov	r3, r0
 800f25c:	f003 0308 	and.w	r3, r3, #8
 800f260:	2b08      	cmp	r3, #8
 800f262:	d10a      	bne.n	800f27a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f00a fd30 	bl	8019cca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	695a      	ldr	r2, [r3, #20]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f002 0208 	and.w	r2, r2, #8
 800f278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4618      	mov	r0, r3
 800f280:	f005 fbb3 	bl	80149ea <USB_ReadInterrupts>
 800f284:	4603      	mov	r3, r0
 800f286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f28a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f28e:	d10f      	bne.n	800f2b0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f290:	2300      	movs	r3, #0
 800f292:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	b2db      	uxtb	r3, r3
 800f298:	4619      	mov	r1, r3
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f00a fd92 	bl	8019dc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	695a      	ldr	r2, [r3, #20]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f2ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f005 fb98 	bl	80149ea <USB_ReadInterrupts>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f2c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f2c4:	d10f      	bne.n	800f2e6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f00a fd65 	bl	8019da0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	695a      	ldr	r2, [r3, #20]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f2e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f005 fb7d 	bl	80149ea <USB_ReadInterrupts>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2fa:	d10a      	bne.n	800f312 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f00a fd73 	bl	8019de8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	695a      	ldr	r2, [r3, #20]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4618      	mov	r0, r3
 800f318:	f005 fb67 	bl	80149ea <USB_ReadInterrupts>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f003 0304 	and.w	r3, r3, #4
 800f322:	2b04      	cmp	r3, #4
 800f324:	d115      	bne.n	800f352 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f00a fd63 	bl	8019e04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	6859      	ldr	r1, [r3, #4]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	69ba      	ldr	r2, [r7, #24]
 800f34a:	430a      	orrs	r2, r1
 800f34c:	605a      	str	r2, [r3, #4]
 800f34e:	e000      	b.n	800f352 <HAL_PCD_IRQHandler+0x75e>
      return;
 800f350:	bf00      	nop
    }
  }
}
 800f352:	3734      	adds	r7, #52	; 0x34
 800f354:	46bd      	mov	sp, r7
 800f356:	bd90      	pop	{r4, r7, pc}

0800f358 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	460b      	mov	r3, r1
 800f362:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d101      	bne.n	800f372 <HAL_PCD_SetAddress+0x1a>
 800f36e:	2302      	movs	r3, #2
 800f370:	e013      	b.n	800f39a <HAL_PCD_SetAddress+0x42>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	78fa      	ldrb	r2, [r7, #3]
 800f37e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	78fa      	ldrb	r2, [r7, #3]
 800f388:	4611      	mov	r1, r2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f005 fad7 	bl	801493e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3708      	adds	r7, #8
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
 800f3aa:	4608      	mov	r0, r1
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	70fb      	strb	r3, [r7, #3]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	803b      	strh	r3, [r7, #0]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f3c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	da0f      	bge.n	800f3e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f3c8:	78fb      	ldrb	r3, [r7, #3]
 800f3ca:	f003 020f 	and.w	r2, r3, #15
 800f3ce:	4613      	mov	r3, r2
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	1a9b      	subs	r3, r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	3338      	adds	r3, #56	; 0x38
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	4413      	add	r3, r2
 800f3dc:	3304      	adds	r3, #4
 800f3de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	705a      	strb	r2, [r3, #1]
 800f3e6:	e00f      	b.n	800f408 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f3e8:	78fb      	ldrb	r3, [r7, #3]
 800f3ea:	f003 020f 	and.w	r2, r3, #15
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	1a9b      	subs	r3, r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	3304      	adds	r3, #4
 800f400:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f408:	78fb      	ldrb	r3, [r7, #3]
 800f40a:	f003 030f 	and.w	r3, r3, #15
 800f40e:	b2da      	uxtb	r2, r3
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f414:	883a      	ldrh	r2, [r7, #0]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	78ba      	ldrb	r2, [r7, #2]
 800f41e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	785b      	ldrb	r3, [r3, #1]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d004      	beq.n	800f432 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f432:	78bb      	ldrb	r3, [r7, #2]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d102      	bne.n	800f43e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2200      	movs	r2, #0
 800f43c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f444:	2b01      	cmp	r3, #1
 800f446:	d101      	bne.n	800f44c <HAL_PCD_EP_Open+0xaa>
 800f448:	2302      	movs	r3, #2
 800f44a:	e00e      	b.n	800f46a <HAL_PCD_EP_Open+0xc8>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68f9      	ldr	r1, [r7, #12]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f004 fc42 	bl	8013ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800f468:	7afb      	ldrb	r3, [r7, #11]
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b084      	sub	sp, #16
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
 800f47a:	460b      	mov	r3, r1
 800f47c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f47e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f482:	2b00      	cmp	r3, #0
 800f484:	da0f      	bge.n	800f4a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f486:	78fb      	ldrb	r3, [r7, #3]
 800f488:	f003 020f 	and.w	r2, r3, #15
 800f48c:	4613      	mov	r3, r2
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	1a9b      	subs	r3, r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	3338      	adds	r3, #56	; 0x38
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	4413      	add	r3, r2
 800f49a:	3304      	adds	r3, #4
 800f49c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	705a      	strb	r2, [r3, #1]
 800f4a4:	e00f      	b.n	800f4c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f4a6:	78fb      	ldrb	r3, [r7, #3]
 800f4a8:	f003 020f 	and.w	r2, r3, #15
 800f4ac:	4613      	mov	r3, r2
 800f4ae:	00db      	lsls	r3, r3, #3
 800f4b0:	1a9b      	subs	r3, r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	3304      	adds	r3, #4
 800f4be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f4c6:	78fb      	ldrb	r3, [r7, #3]
 800f4c8:	f003 030f 	and.w	r3, r3, #15
 800f4cc:	b2da      	uxtb	r2, r3
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d101      	bne.n	800f4e0 <HAL_PCD_EP_Close+0x6e>
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e00e      	b.n	800f4fe <HAL_PCD_EP_Close+0x8c>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68f9      	ldr	r1, [r7, #12]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f004 fc80 	bl	8013df4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}

0800f506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b086      	sub	sp, #24
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	60f8      	str	r0, [r7, #12]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
 800f512:	460b      	mov	r3, r1
 800f514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	f003 020f 	and.w	r2, r3, #15
 800f51c:	4613      	mov	r3, r2
 800f51e:	00db      	lsls	r3, r3, #3
 800f520:	1a9b      	subs	r3, r3, r2
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4413      	add	r3, r2
 800f52c:	3304      	adds	r3, #4
 800f52e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2200      	movs	r2, #0
 800f540:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	2200      	movs	r2, #0
 800f546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f548:	7afb      	ldrb	r3, [r7, #11]
 800f54a:	f003 030f 	and.w	r3, r3, #15
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d102      	bne.n	800f562 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f562:	7afb      	ldrb	r3, [r7, #11]
 800f564:	f003 030f 	and.w	r3, r3, #15
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d109      	bne.n	800f580 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	b2db      	uxtb	r3, r3
 800f576:	461a      	mov	r2, r3
 800f578:	6979      	ldr	r1, [r7, #20]
 800f57a:	f004 ff5b 	bl	8014434 <USB_EP0StartXfer>
 800f57e:	e008      	b.n	800f592 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6818      	ldr	r0, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	461a      	mov	r2, r3
 800f58c:	6979      	ldr	r1, [r7, #20]
 800f58e:	f004 fd0d 	bl	8013fac <USB_EPStartXfer>
  }

  return HAL_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3718      	adds	r7, #24
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	f003 020f 	and.w	r2, r3, #15
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	1a9b      	subs	r3, r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	440b      	add	r3, r1
 800f5ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f5be:	681b      	ldr	r3, [r3, #0]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	607a      	str	r2, [r7, #4]
 800f5d6:	603b      	str	r3, [r7, #0]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f5dc:	7afb      	ldrb	r3, [r7, #11]
 800f5de:	f003 020f 	and.w	r2, r3, #15
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	00db      	lsls	r3, r3, #3
 800f5e6:	1a9b      	subs	r3, r3, r2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	3338      	adds	r3, #56	; 0x38
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	3304      	adds	r3, #4
 800f5f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	2200      	movs	r2, #0
 800f604:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	2201      	movs	r2, #1
 800f60a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f60c:	7afb      	ldrb	r3, [r7, #11]
 800f60e:	f003 030f 	and.w	r3, r3, #15
 800f612:	b2da      	uxtb	r2, r3
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d102      	bne.n	800f626 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f626:	7afb      	ldrb	r3, [r7, #11]
 800f628:	f003 030f 	and.w	r3, r3, #15
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d109      	bne.n	800f644 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6818      	ldr	r0, [r3, #0]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	461a      	mov	r2, r3
 800f63c:	6979      	ldr	r1, [r7, #20]
 800f63e:	f004 fef9 	bl	8014434 <USB_EP0StartXfer>
 800f642:	e008      	b.n	800f656 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6818      	ldr	r0, [r3, #0]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	461a      	mov	r2, r3
 800f650:	6979      	ldr	r1, [r7, #20]
 800f652:	f004 fcab 	bl	8013fac <USB_EPStartXfer>
  }

  return HAL_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	f003 020f 	and.w	r2, r3, #15
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	429a      	cmp	r2, r3
 800f678:	d901      	bls.n	800f67e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f67a:	2301      	movs	r3, #1
 800f67c:	e050      	b.n	800f720 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f67e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f682:	2b00      	cmp	r3, #0
 800f684:	da0f      	bge.n	800f6a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f686:	78fb      	ldrb	r3, [r7, #3]
 800f688:	f003 020f 	and.w	r2, r3, #15
 800f68c:	4613      	mov	r3, r2
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	1a9b      	subs	r3, r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	3338      	adds	r3, #56	; 0x38
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	4413      	add	r3, r2
 800f69a:	3304      	adds	r3, #4
 800f69c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	705a      	strb	r2, [r3, #1]
 800f6a4:	e00d      	b.n	800f6c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f6a6:	78fa      	ldrb	r2, [r7, #3]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	00db      	lsls	r3, r3, #3
 800f6ac:	1a9b      	subs	r3, r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	f003 030f 	and.w	r3, r3, #15
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d101      	bne.n	800f6e2 <HAL_PCD_EP_SetStall+0x82>
 800f6de:	2302      	movs	r3, #2
 800f6e0:	e01e      	b.n	800f720 <HAL_PCD_EP_SetStall+0xc0>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	68f9      	ldr	r1, [r7, #12]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f005 f850 	bl	8014796 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f6f6:	78fb      	ldrb	r3, [r7, #3]
 800f6f8:	f003 030f 	and.w	r3, r3, #15
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6818      	ldr	r0, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	691b      	ldr	r3, [r3, #16]
 800f708:	b2d9      	uxtb	r1, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f710:	461a      	mov	r2, r3
 800f712:	f005 fa2f 	bl	8014b74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3710      	adds	r7, #16
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}

0800f728 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	460b      	mov	r3, r1
 800f732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f734:	78fb      	ldrb	r3, [r7, #3]
 800f736:	f003 020f 	and.w	r2, r3, #15
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d901      	bls.n	800f746 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f742:	2301      	movs	r3, #1
 800f744:	e042      	b.n	800f7cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f746:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	da0f      	bge.n	800f76e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f74e:	78fb      	ldrb	r3, [r7, #3]
 800f750:	f003 020f 	and.w	r2, r3, #15
 800f754:	4613      	mov	r3, r2
 800f756:	00db      	lsls	r3, r3, #3
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	3338      	adds	r3, #56	; 0x38
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	4413      	add	r3, r2
 800f762:	3304      	adds	r3, #4
 800f764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2201      	movs	r2, #1
 800f76a:	705a      	strb	r2, [r3, #1]
 800f76c:	e00f      	b.n	800f78e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	f003 020f 	and.w	r2, r3, #15
 800f774:	4613      	mov	r3, r2
 800f776:	00db      	lsls	r3, r3, #3
 800f778:	1a9b      	subs	r3, r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	4413      	add	r3, r2
 800f784:	3304      	adds	r3, #4
 800f786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f794:	78fb      	ldrb	r3, [r7, #3]
 800f796:	f003 030f 	and.w	r3, r3, #15
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d101      	bne.n	800f7ae <HAL_PCD_EP_ClrStall+0x86>
 800f7aa:	2302      	movs	r3, #2
 800f7ac:	e00e      	b.n	800f7cc <HAL_PCD_EP_ClrStall+0xa4>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68f9      	ldr	r1, [r7, #12]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f005 f858 	bl	8014872 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f7ca:	2300      	movs	r3, #0
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08a      	sub	sp, #40	; 0x28
 800f7d8:	af02      	add	r7, sp, #8
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	1a9b      	subs	r3, r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	3338      	adds	r3, #56	; 0x38
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	699a      	ldr	r2, [r3, #24]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	429a      	cmp	r2, r3
 800f806:	d901      	bls.n	800f80c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	e06c      	b.n	800f8e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	695a      	ldr	r2, [r3, #20]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	699b      	ldr	r3, [r3, #24]
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	69fa      	ldr	r2, [r7, #28]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d902      	bls.n	800f828 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	3303      	adds	r3, #3
 800f82c:	089b      	lsrs	r3, r3, #2
 800f82e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f830:	e02b      	b.n	800f88a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	695a      	ldr	r2, [r3, #20]
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	689b      	ldr	r3, [r3, #8]
 800f842:	69fa      	ldr	r2, [r7, #28]
 800f844:	429a      	cmp	r2, r3
 800f846:	d902      	bls.n	800f84e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	689b      	ldr	r3, [r3, #8]
 800f84c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3303      	adds	r3, #3
 800f852:	089b      	lsrs	r3, r3, #2
 800f854:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	68d9      	ldr	r1, [r3, #12]
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800f866:	b2db      	uxtb	r3, r3
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	4603      	mov	r3, r0
 800f86c:	6978      	ldr	r0, [r7, #20]
 800f86e:	f004 ff34 	bl	80146da <USB_WritePacket>

    ep->xfer_buff  += len;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	68da      	ldr	r2, [r3, #12]
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	441a      	add	r2, r3
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	699a      	ldr	r2, [r3, #24]
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	441a      	add	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	015a      	lsls	r2, r3, #5
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	4413      	add	r3, r2
 800f892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	b29b      	uxth	r3, r3
 800f89a:	69ba      	ldr	r2, [r7, #24]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d809      	bhi.n	800f8b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	699a      	ldr	r2, [r3, #24]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d203      	bcs.n	800f8b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	695b      	ldr	r3, [r3, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1be      	bne.n	800f832 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	695a      	ldr	r2, [r3, #20]
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d811      	bhi.n	800f8e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	f003 030f 	and.w	r3, r3, #15
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	43db      	mvns	r3, r3
 800f8da:	6939      	ldr	r1, [r7, #16]
 800f8dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3720      	adds	r7, #32
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
	...

0800f8f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	333c      	adds	r3, #60	; 0x3c
 800f908:	3304      	adds	r3, #4
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	015a      	lsls	r2, r3, #5
 800f912:	693b      	ldr	r3, [r7, #16]
 800f914:	4413      	add	r3, r2
 800f916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	2b01      	cmp	r3, #1
 800f924:	f040 80a0 	bne.w	800fa68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	f003 0308 	and.w	r3, r3, #8
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d015      	beq.n	800f95e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4a72      	ldr	r2, [pc, #456]	; (800fb00 <PCD_EP_OutXfrComplete_int+0x210>)
 800f936:	4293      	cmp	r3, r2
 800f938:	f240 80dd 	bls.w	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 80d7 	beq.w	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	015a      	lsls	r2, r3, #5
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	4413      	add	r3, r2
 800f950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f954:	461a      	mov	r2, r3
 800f956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f95a:	6093      	str	r3, [r2, #8]
 800f95c:	e0cb      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	f003 0320 	and.w	r3, r3, #32
 800f964:	2b00      	cmp	r3, #0
 800f966:	d009      	beq.n	800f97c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	015a      	lsls	r2, r3, #5
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	4413      	add	r3, r2
 800f970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f974:	461a      	mov	r2, r3
 800f976:	2320      	movs	r3, #32
 800f978:	6093      	str	r3, [r2, #8]
 800f97a:	e0bc      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f982:	2b00      	cmp	r3, #0
 800f984:	f040 80b7 	bne.w	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	4a5d      	ldr	r2, [pc, #372]	; (800fb00 <PCD_EP_OutXfrComplete_int+0x210>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d90f      	bls.n	800f9b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00a      	beq.n	800f9b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9ac:	6093      	str	r3, [r2, #8]
 800f9ae:	e0a2      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	683a      	ldr	r2, [r7, #0]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	00db      	lsls	r3, r3, #3
 800f9b8:	1a9b      	subs	r3, r3, r2
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	440b      	add	r3, r1
 800f9be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f9c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	0159      	lsls	r1, r3, #5
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	440b      	add	r3, r1
 800f9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d0:	691b      	ldr	r3, [r3, #16]
 800f9d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800f9d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	683a      	ldr	r2, [r7, #0]
 800f9dc:	4613      	mov	r3, r2
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	1a9b      	subs	r3, r3, r2
 800f9e2:	009b      	lsls	r3, r3, #2
 800f9e4:	4403      	add	r3, r0
 800f9e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f9ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	00db      	lsls	r3, r3, #3
 800f9f4:	1a9b      	subs	r3, r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	440b      	add	r3, r1
 800f9fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f9fe:	6819      	ldr	r1, [r3, #0]
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	4613      	mov	r3, r2
 800fa06:	00db      	lsls	r3, r3, #3
 800fa08:	1a9b      	subs	r3, r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4403      	add	r3, r0
 800fa0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4419      	add	r1, r3
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	683a      	ldr	r2, [r7, #0]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	00db      	lsls	r3, r3, #3
 800fa1e:	1a9b      	subs	r3, r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4403      	add	r3, r0
 800fa24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fa28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d114      	bne.n	800fa5a <PCD_EP_OutXfrComplete_int+0x16a>
 800fa30:	6879      	ldr	r1, [r7, #4]
 800fa32:	683a      	ldr	r2, [r7, #0]
 800fa34:	4613      	mov	r3, r2
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	1a9b      	subs	r3, r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	440b      	add	r3, r1
 800fa3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d108      	bne.n	800fa5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6818      	ldr	r0, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fa52:	461a      	mov	r2, r3
 800fa54:	2101      	movs	r1, #1
 800fa56:	f005 f88d 	bl	8014b74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f00a f8fd 	bl	8019c60 <HAL_PCD_DataOutStageCallback>
 800fa66:	e046      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4a26      	ldr	r2, [pc, #152]	; (800fb04 <PCD_EP_OutXfrComplete_int+0x214>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d124      	bne.n	800faba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00a      	beq.n	800fa90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa86:	461a      	mov	r2, r3
 800fa88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa8c:	6093      	str	r3, [r2, #8]
 800fa8e:	e032      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d008      	beq.n	800faac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	015a      	lsls	r2, r3, #5
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	4413      	add	r3, r2
 800faa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faa6:	461a      	mov	r2, r3
 800faa8:	2320      	movs	r3, #32
 800faaa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f00a f8d4 	bl	8019c60 <HAL_PCD_DataOutStageCallback>
 800fab8:	e01d      	b.n	800faf6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d114      	bne.n	800faea <PCD_EP_OutXfrComplete_int+0x1fa>
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	683a      	ldr	r2, [r7, #0]
 800fac4:	4613      	mov	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	1a9b      	subs	r3, r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	440b      	add	r3, r1
 800face:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d108      	bne.n	800faea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6818      	ldr	r0, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fae2:	461a      	mov	r2, r3
 800fae4:	2100      	movs	r1, #0
 800fae6:	f005 f845 	bl	8014b74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	b2db      	uxtb	r3, r3
 800faee:	4619      	mov	r1, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f00a f8b5 	bl	8019c60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3718      	adds	r7, #24
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}
 800fb00:	4f54300a 	.word	0x4f54300a
 800fb04:	4f54310a 	.word	0x4f54310a

0800fb08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b086      	sub	sp, #24
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	333c      	adds	r3, #60	; 0x3c
 800fb20:	3304      	adds	r3, #4
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	015a      	lsls	r2, r3, #5
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	4a15      	ldr	r2, [pc, #84]	; (800fb90 <PCD_EP_OutSetupPacket_int+0x88>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d90e      	bls.n	800fb5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d009      	beq.n	800fb5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	015a      	lsls	r2, r3, #5
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	4413      	add	r3, r2
 800fb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb54:	461a      	mov	r2, r3
 800fb56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f00a f86d 	bl	8019c3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	4a0a      	ldr	r2, [pc, #40]	; (800fb90 <PCD_EP_OutSetupPacket_int+0x88>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d90c      	bls.n	800fb84 <PCD_EP_OutSetupPacket_int+0x7c>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d108      	bne.n	800fb84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6818      	ldr	r0, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	2101      	movs	r1, #1
 800fb80:	f004 fff8 	bl	8014b74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3718      	adds	r7, #24
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop
 800fb90:	4f54300a 	.word	0x4f54300a

0800fb94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b085      	sub	sp, #20
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	70fb      	strb	r3, [r7, #3]
 800fba0:	4613      	mov	r3, r2
 800fba2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800fbac:	78fb      	ldrb	r3, [r7, #3]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d107      	bne.n	800fbc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800fbb2:	883b      	ldrh	r3, [r7, #0]
 800fbb4:	0419      	lsls	r1, r3, #16
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	68ba      	ldr	r2, [r7, #8]
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	629a      	str	r2, [r3, #40]	; 0x28
 800fbc0:	e028      	b.n	800fc14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc8:	0c1b      	lsrs	r3, r3, #16
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	4413      	add	r3, r2
 800fbce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73fb      	strb	r3, [r7, #15]
 800fbd4:	e00d      	b.n	800fbf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	3340      	adds	r3, #64	; 0x40
 800fbde:	009b      	lsls	r3, r3, #2
 800fbe0:	4413      	add	r3, r2
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	0c1b      	lsrs	r3, r3, #16
 800fbe6:	68ba      	ldr	r2, [r7, #8]
 800fbe8:	4413      	add	r3, r2
 800fbea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	73fb      	strb	r3, [r7, #15]
 800fbf2:	7bfa      	ldrb	r2, [r7, #15]
 800fbf4:	78fb      	ldrb	r3, [r7, #3]
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d3ec      	bcc.n	800fbd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800fbfc:	883b      	ldrh	r3, [r7, #0]
 800fbfe:	0418      	lsls	r0, r3, #16
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6819      	ldr	r1, [r3, #0]
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	4302      	orrs	r2, r0
 800fc0c:	3340      	adds	r3, #64	; 0x40
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	440b      	add	r3, r1
 800fc12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3714      	adds	r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr

0800fc22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	887a      	ldrh	r2, [r7, #2]
 800fc34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr

0800fc44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b086      	sub	sp, #24
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d101      	bne.n	800fc6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e25b      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d075      	beq.n	800fd66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc7a:	4ba3      	ldr	r3, [pc, #652]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	f003 030c 	and.w	r3, r3, #12
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d00c      	beq.n	800fca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fc86:	4ba0      	ldr	r3, [pc, #640]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800fc8e:	2b08      	cmp	r3, #8
 800fc90:	d112      	bne.n	800fcb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800fc92:	4b9d      	ldr	r3, [pc, #628]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc9e:	d10b      	bne.n	800fcb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fca0:	4b99      	ldr	r3, [pc, #612]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d05b      	beq.n	800fd64 <HAL_RCC_OscConfig+0x108>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d157      	bne.n	800fd64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e236      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcc0:	d106      	bne.n	800fcd0 <HAL_RCC_OscConfig+0x74>
 800fcc2:	4b91      	ldr	r3, [pc, #580]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4a90      	ldr	r2, [pc, #576]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fccc:	6013      	str	r3, [r2, #0]
 800fcce:	e01d      	b.n	800fd0c <HAL_RCC_OscConfig+0xb0>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fcd8:	d10c      	bne.n	800fcf4 <HAL_RCC_OscConfig+0x98>
 800fcda:	4b8b      	ldr	r3, [pc, #556]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a8a      	ldr	r2, [pc, #552]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	4b88      	ldr	r3, [pc, #544]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a87      	ldr	r2, [pc, #540]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fcf0:	6013      	str	r3, [r2, #0]
 800fcf2:	e00b      	b.n	800fd0c <HAL_RCC_OscConfig+0xb0>
 800fcf4:	4b84      	ldr	r3, [pc, #528]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a83      	ldr	r2, [pc, #524]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fcfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	4b81      	ldr	r3, [pc, #516]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a80      	ldr	r2, [pc, #512]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d013      	beq.n	800fd3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd14:	f7fb ff6e 	bl	800bbf4 <HAL_GetTick>
 800fd18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd1a:	e008      	b.n	800fd2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fd1c:	f7fb ff6a 	bl	800bbf4 <HAL_GetTick>
 800fd20:	4602      	mov	r2, r0
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	2b64      	cmp	r3, #100	; 0x64
 800fd28:	d901      	bls.n	800fd2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	e1fb      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd2e:	4b76      	ldr	r3, [pc, #472]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d0f0      	beq.n	800fd1c <HAL_RCC_OscConfig+0xc0>
 800fd3a:	e014      	b.n	800fd66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd3c:	f7fb ff5a 	bl	800bbf4 <HAL_GetTick>
 800fd40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fd42:	e008      	b.n	800fd56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fd44:	f7fb ff56 	bl	800bbf4 <HAL_GetTick>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	2b64      	cmp	r3, #100	; 0x64
 800fd50:	d901      	bls.n	800fd56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fd52:	2303      	movs	r3, #3
 800fd54:	e1e7      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fd56:	4b6c      	ldr	r3, [pc, #432]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1f0      	bne.n	800fd44 <HAL_RCC_OscConfig+0xe8>
 800fd62:	e000      	b.n	800fd66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f003 0302 	and.w	r3, r3, #2
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d063      	beq.n	800fe3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd72:	4b65      	ldr	r3, [pc, #404]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd74:	689b      	ldr	r3, [r3, #8]
 800fd76:	f003 030c 	and.w	r3, r3, #12
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00b      	beq.n	800fd96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fd7e:	4b62      	ldr	r3, [pc, #392]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800fd86:	2b08      	cmp	r3, #8
 800fd88:	d11c      	bne.n	800fdc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800fd8a:	4b5f      	ldr	r3, [pc, #380]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd8c:	685b      	ldr	r3, [r3, #4]
 800fd8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d116      	bne.n	800fdc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd96:	4b5c      	ldr	r3, [pc, #368]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f003 0302 	and.w	r3, r3, #2
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d005      	beq.n	800fdae <HAL_RCC_OscConfig+0x152>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d001      	beq.n	800fdae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e1bb      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fdae:	4b56      	ldr	r3, [pc, #344]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	691b      	ldr	r3, [r3, #16]
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	4952      	ldr	r1, [pc, #328]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fdc2:	e03a      	b.n	800fe3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d020      	beq.n	800fe0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fdcc:	4b4f      	ldr	r3, [pc, #316]	; (800ff0c <HAL_RCC_OscConfig+0x2b0>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdd2:	f7fb ff0f 	bl	800bbf4 <HAL_GetTick>
 800fdd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdd8:	e008      	b.n	800fdec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fdda:	f7fb ff0b 	bl	800bbf4 <HAL_GetTick>
 800fdde:	4602      	mov	r2, r0
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	2b02      	cmp	r3, #2
 800fde6:	d901      	bls.n	800fdec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800fde8:	2303      	movs	r3, #3
 800fdea:	e19c      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdec:	4b46      	ldr	r3, [pc, #280]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	f003 0302 	and.w	r3, r3, #2
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d0f0      	beq.n	800fdda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fdf8:	4b43      	ldr	r3, [pc, #268]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	4940      	ldr	r1, [pc, #256]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	600b      	str	r3, [r1, #0]
 800fe0c:	e015      	b.n	800fe3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fe0e:	4b3f      	ldr	r3, [pc, #252]	; (800ff0c <HAL_RCC_OscConfig+0x2b0>)
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe14:	f7fb feee 	bl	800bbf4 <HAL_GetTick>
 800fe18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe1a:	e008      	b.n	800fe2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fe1c:	f7fb feea 	bl	800bbf4 <HAL_GetTick>
 800fe20:	4602      	mov	r2, r0
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d901      	bls.n	800fe2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	e17b      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe2e:	4b36      	ldr	r3, [pc, #216]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f003 0302 	and.w	r3, r3, #2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1f0      	bne.n	800fe1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 0308 	and.w	r3, r3, #8
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d030      	beq.n	800fea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d016      	beq.n	800fe7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fe4e:	4b30      	ldr	r3, [pc, #192]	; (800ff10 <HAL_RCC_OscConfig+0x2b4>)
 800fe50:	2201      	movs	r2, #1
 800fe52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe54:	f7fb fece 	bl	800bbf4 <HAL_GetTick>
 800fe58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe5a:	e008      	b.n	800fe6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe5c:	f7fb feca 	bl	800bbf4 <HAL_GetTick>
 800fe60:	4602      	mov	r2, r0
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	d901      	bls.n	800fe6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800fe6a:	2303      	movs	r3, #3
 800fe6c:	e15b      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe6e:	4b26      	ldr	r3, [pc, #152]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fe70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe72:	f003 0302 	and.w	r3, r3, #2
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d0f0      	beq.n	800fe5c <HAL_RCC_OscConfig+0x200>
 800fe7a:	e015      	b.n	800fea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fe7c:	4b24      	ldr	r3, [pc, #144]	; (800ff10 <HAL_RCC_OscConfig+0x2b4>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe82:	f7fb feb7 	bl	800bbf4 <HAL_GetTick>
 800fe86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe88:	e008      	b.n	800fe9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe8a:	f7fb feb3 	bl	800bbf4 <HAL_GetTick>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d901      	bls.n	800fe9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	e144      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe9c:	4b1a      	ldr	r3, [pc, #104]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fe9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fea0:	f003 0302 	and.w	r3, r3, #2
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1f0      	bne.n	800fe8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f003 0304 	and.w	r3, r3, #4
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	f000 80a0 	beq.w	800fff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800feb6:	2300      	movs	r3, #0
 800feb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800feba:	4b13      	ldr	r3, [pc, #76]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800febc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800febe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d10f      	bne.n	800fee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fec6:	2300      	movs	r3, #0
 800fec8:	60bb      	str	r3, [r7, #8]
 800feca:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fece:	4a0e      	ldr	r2, [pc, #56]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fed4:	6413      	str	r3, [r2, #64]	; 0x40
 800fed6:	4b0c      	ldr	r3, [pc, #48]	; (800ff08 <HAL_RCC_OscConfig+0x2ac>)
 800fed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fede:	60bb      	str	r3, [r7, #8]
 800fee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fee2:	2301      	movs	r3, #1
 800fee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fee6:	4b0b      	ldr	r3, [pc, #44]	; (800ff14 <HAL_RCC_OscConfig+0x2b8>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d121      	bne.n	800ff36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fef2:	4b08      	ldr	r3, [pc, #32]	; (800ff14 <HAL_RCC_OscConfig+0x2b8>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a07      	ldr	r2, [pc, #28]	; (800ff14 <HAL_RCC_OscConfig+0x2b8>)
 800fef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fefc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fefe:	f7fb fe79 	bl	800bbf4 <HAL_GetTick>
 800ff02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ff04:	e011      	b.n	800ff2a <HAL_RCC_OscConfig+0x2ce>
 800ff06:	bf00      	nop
 800ff08:	40023800 	.word	0x40023800
 800ff0c:	42470000 	.word	0x42470000
 800ff10:	42470e80 	.word	0x42470e80
 800ff14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ff18:	f7fb fe6c 	bl	800bbf4 <HAL_GetTick>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d901      	bls.n	800ff2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ff26:	2303      	movs	r3, #3
 800ff28:	e0fd      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ff2a:	4b81      	ldr	r3, [pc, #516]	; (8010130 <HAL_RCC_OscConfig+0x4d4>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d0f0      	beq.n	800ff18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	689b      	ldr	r3, [r3, #8]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d106      	bne.n	800ff4c <HAL_RCC_OscConfig+0x2f0>
 800ff3e:	4b7d      	ldr	r3, [pc, #500]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff42:	4a7c      	ldr	r2, [pc, #496]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff44:	f043 0301 	orr.w	r3, r3, #1
 800ff48:	6713      	str	r3, [r2, #112]	; 0x70
 800ff4a:	e01c      	b.n	800ff86 <HAL_RCC_OscConfig+0x32a>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	2b05      	cmp	r3, #5
 800ff52:	d10c      	bne.n	800ff6e <HAL_RCC_OscConfig+0x312>
 800ff54:	4b77      	ldr	r3, [pc, #476]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff58:	4a76      	ldr	r2, [pc, #472]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff5a:	f043 0304 	orr.w	r3, r3, #4
 800ff5e:	6713      	str	r3, [r2, #112]	; 0x70
 800ff60:	4b74      	ldr	r3, [pc, #464]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff64:	4a73      	ldr	r2, [pc, #460]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff66:	f043 0301 	orr.w	r3, r3, #1
 800ff6a:	6713      	str	r3, [r2, #112]	; 0x70
 800ff6c:	e00b      	b.n	800ff86 <HAL_RCC_OscConfig+0x32a>
 800ff6e:	4b71      	ldr	r3, [pc, #452]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff72:	4a70      	ldr	r2, [pc, #448]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff74:	f023 0301 	bic.w	r3, r3, #1
 800ff78:	6713      	str	r3, [r2, #112]	; 0x70
 800ff7a:	4b6e      	ldr	r3, [pc, #440]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff7e:	4a6d      	ldr	r2, [pc, #436]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ff80:	f023 0304 	bic.w	r3, r3, #4
 800ff84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d015      	beq.n	800ffba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff8e:	f7fb fe31 	bl	800bbf4 <HAL_GetTick>
 800ff92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff94:	e00a      	b.n	800ffac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff96:	f7fb fe2d 	bl	800bbf4 <HAL_GetTick>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d901      	bls.n	800ffac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ffa8:	2303      	movs	r3, #3
 800ffaa:	e0bc      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ffac:	4b61      	ldr	r3, [pc, #388]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ffae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffb0:	f003 0302 	and.w	r3, r3, #2
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d0ee      	beq.n	800ff96 <HAL_RCC_OscConfig+0x33a>
 800ffb8:	e014      	b.n	800ffe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ffba:	f7fb fe1b 	bl	800bbf4 <HAL_GetTick>
 800ffbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ffc0:	e00a      	b.n	800ffd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ffc2:	f7fb fe17 	bl	800bbf4 <HAL_GetTick>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d901      	bls.n	800ffd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ffd4:	2303      	movs	r3, #3
 800ffd6:	e0a6      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ffd8:	4b56      	ldr	r3, [pc, #344]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ffda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffdc:	f003 0302 	and.w	r3, r3, #2
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d1ee      	bne.n	800ffc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ffe4:	7dfb      	ldrb	r3, [r7, #23]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d105      	bne.n	800fff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ffea:	4b52      	ldr	r3, [pc, #328]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800ffec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffee:	4a51      	ldr	r2, [pc, #324]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 800fff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f000 8092 	beq.w	8010124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010000:	4b4c      	ldr	r3, [pc, #304]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	f003 030c 	and.w	r3, r3, #12
 8010008:	2b08      	cmp	r3, #8
 801000a:	d05c      	beq.n	80100c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	699b      	ldr	r3, [r3, #24]
 8010010:	2b02      	cmp	r3, #2
 8010012:	d141      	bne.n	8010098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010014:	4b48      	ldr	r3, [pc, #288]	; (8010138 <HAL_RCC_OscConfig+0x4dc>)
 8010016:	2200      	movs	r2, #0
 8010018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801001a:	f7fb fdeb 	bl	800bbf4 <HAL_GetTick>
 801001e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010020:	e008      	b.n	8010034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010022:	f7fb fde7 	bl	800bbf4 <HAL_GetTick>
 8010026:	4602      	mov	r2, r0
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	2b02      	cmp	r3, #2
 801002e:	d901      	bls.n	8010034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010030:	2303      	movs	r3, #3
 8010032:	e078      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010034:	4b3f      	ldr	r3, [pc, #252]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801003c:	2b00      	cmp	r3, #0
 801003e:	d1f0      	bne.n	8010022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	69da      	ldr	r2, [r3, #28]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a1b      	ldr	r3, [r3, #32]
 8010048:	431a      	orrs	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004e:	019b      	lsls	r3, r3, #6
 8010050:	431a      	orrs	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010056:	085b      	lsrs	r3, r3, #1
 8010058:	3b01      	subs	r3, #1
 801005a:	041b      	lsls	r3, r3, #16
 801005c:	431a      	orrs	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010062:	061b      	lsls	r3, r3, #24
 8010064:	4933      	ldr	r1, [pc, #204]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 8010066:	4313      	orrs	r3, r2
 8010068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801006a:	4b33      	ldr	r3, [pc, #204]	; (8010138 <HAL_RCC_OscConfig+0x4dc>)
 801006c:	2201      	movs	r2, #1
 801006e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010070:	f7fb fdc0 	bl	800bbf4 <HAL_GetTick>
 8010074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010076:	e008      	b.n	801008a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010078:	f7fb fdbc 	bl	800bbf4 <HAL_GetTick>
 801007c:	4602      	mov	r2, r0
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	2b02      	cmp	r3, #2
 8010084:	d901      	bls.n	801008a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010086:	2303      	movs	r3, #3
 8010088:	e04d      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801008a:	4b2a      	ldr	r3, [pc, #168]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010092:	2b00      	cmp	r3, #0
 8010094:	d0f0      	beq.n	8010078 <HAL_RCC_OscConfig+0x41c>
 8010096:	e045      	b.n	8010124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010098:	4b27      	ldr	r3, [pc, #156]	; (8010138 <HAL_RCC_OscConfig+0x4dc>)
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801009e:	f7fb fda9 	bl	800bbf4 <HAL_GetTick>
 80100a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80100a4:	e008      	b.n	80100b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80100a6:	f7fb fda5 	bl	800bbf4 <HAL_GetTick>
 80100aa:	4602      	mov	r2, r0
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	2b02      	cmp	r3, #2
 80100b2:	d901      	bls.n	80100b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80100b4:	2303      	movs	r3, #3
 80100b6:	e036      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80100b8:	4b1e      	ldr	r3, [pc, #120]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d1f0      	bne.n	80100a6 <HAL_RCC_OscConfig+0x44a>
 80100c4:	e02e      	b.n	8010124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	699b      	ldr	r3, [r3, #24]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d101      	bne.n	80100d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e029      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80100d2:	4b18      	ldr	r3, [pc, #96]	; (8010134 <HAL_RCC_OscConfig+0x4d8>)
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	69db      	ldr	r3, [r3, #28]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d11c      	bne.n	8010120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d115      	bne.n	8010120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80100f4:	68fa      	ldr	r2, [r7, #12]
 80100f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80100fa:	4013      	ands	r3, r2
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8010100:	4293      	cmp	r3, r2
 8010102:	d10d      	bne.n	8010120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801010e:	429a      	cmp	r2, r3
 8010110:	d106      	bne.n	8010120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801011c:	429a      	cmp	r2, r3
 801011e:	d001      	beq.n	8010124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	e000      	b.n	8010126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8010124:	2300      	movs	r3, #0
}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	40007000 	.word	0x40007000
 8010134:	40023800 	.word	0x40023800
 8010138:	42470060 	.word	0x42470060

0801013c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b084      	sub	sp, #16
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d101      	bne.n	8010150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801014c:	2301      	movs	r3, #1
 801014e:	e0cc      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010150:	4b68      	ldr	r3, [pc, #416]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f003 030f 	and.w	r3, r3, #15
 8010158:	683a      	ldr	r2, [r7, #0]
 801015a:	429a      	cmp	r2, r3
 801015c:	d90c      	bls.n	8010178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801015e:	4b65      	ldr	r3, [pc, #404]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 8010160:	683a      	ldr	r2, [r7, #0]
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010166:	4b63      	ldr	r3, [pc, #396]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f003 030f 	and.w	r3, r3, #15
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	429a      	cmp	r2, r3
 8010172:	d001      	beq.n	8010178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010174:	2301      	movs	r3, #1
 8010176:	e0b8      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f003 0302 	and.w	r3, r3, #2
 8010180:	2b00      	cmp	r3, #0
 8010182:	d020      	beq.n	80101c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f003 0304 	and.w	r3, r3, #4
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010190:	4b59      	ldr	r3, [pc, #356]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	4a58      	ldr	r2, [pc, #352]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 8010196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801019a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f003 0308 	and.w	r3, r3, #8
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d005      	beq.n	80101b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80101a8:	4b53      	ldr	r3, [pc, #332]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	4a52      	ldr	r2, [pc, #328]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80101b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101b4:	4b50      	ldr	r3, [pc, #320]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	494d      	ldr	r1, [pc, #308]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101c2:	4313      	orrs	r3, r2
 80101c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d044      	beq.n	801025c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d107      	bne.n	80101ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80101da:	4b47      	ldr	r3, [pc, #284]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d119      	bne.n	801021a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80101e6:	2301      	movs	r3, #1
 80101e8:	e07f      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d003      	beq.n	80101fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d107      	bne.n	801020a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101fa:	4b3f      	ldr	r3, [pc, #252]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010202:	2b00      	cmp	r3, #0
 8010204:	d109      	bne.n	801021a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e06f      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801020a:	4b3b      	ldr	r3, [pc, #236]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e067      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801021a:	4b37      	ldr	r3, [pc, #220]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	f023 0203 	bic.w	r2, r3, #3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	4934      	ldr	r1, [pc, #208]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 8010228:	4313      	orrs	r3, r2
 801022a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801022c:	f7fb fce2 	bl	800bbf4 <HAL_GetTick>
 8010230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010232:	e00a      	b.n	801024a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010234:	f7fb fcde 	bl	800bbf4 <HAL_GetTick>
 8010238:	4602      	mov	r2, r0
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	1ad3      	subs	r3, r2, r3
 801023e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010242:	4293      	cmp	r3, r2
 8010244:	d901      	bls.n	801024a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010246:	2303      	movs	r3, #3
 8010248:	e04f      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801024a:	4b2b      	ldr	r3, [pc, #172]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	f003 020c 	and.w	r2, r3, #12
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	429a      	cmp	r2, r3
 801025a:	d1eb      	bne.n	8010234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801025c:	4b25      	ldr	r3, [pc, #148]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f003 030f 	and.w	r3, r3, #15
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d20c      	bcs.n	8010284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801026a:	4b22      	ldr	r3, [pc, #136]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 801026c:	683a      	ldr	r2, [r7, #0]
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010272:	4b20      	ldr	r3, [pc, #128]	; (80102f4 <HAL_RCC_ClockConfig+0x1b8>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f003 030f 	and.w	r3, r3, #15
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d001      	beq.n	8010284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	e032      	b.n	80102ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f003 0304 	and.w	r3, r3, #4
 801028c:	2b00      	cmp	r3, #0
 801028e:	d008      	beq.n	80102a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010290:	4b19      	ldr	r3, [pc, #100]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	4916      	ldr	r1, [pc, #88]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 801029e:	4313      	orrs	r3, r2
 80102a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f003 0308 	and.w	r3, r3, #8
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d009      	beq.n	80102c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80102ae:	4b12      	ldr	r3, [pc, #72]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	691b      	ldr	r3, [r3, #16]
 80102ba:	00db      	lsls	r3, r3, #3
 80102bc:	490e      	ldr	r1, [pc, #56]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80102be:	4313      	orrs	r3, r2
 80102c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80102c2:	f000 f821 	bl	8010308 <HAL_RCC_GetSysClockFreq>
 80102c6:	4601      	mov	r1, r0
 80102c8:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <HAL_RCC_ClockConfig+0x1bc>)
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	091b      	lsrs	r3, r3, #4
 80102ce:	f003 030f 	and.w	r3, r3, #15
 80102d2:	4a0a      	ldr	r2, [pc, #40]	; (80102fc <HAL_RCC_ClockConfig+0x1c0>)
 80102d4:	5cd3      	ldrb	r3, [r2, r3]
 80102d6:	fa21 f303 	lsr.w	r3, r1, r3
 80102da:	4a09      	ldr	r2, [pc, #36]	; (8010300 <HAL_RCC_ClockConfig+0x1c4>)
 80102dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80102de:	4b09      	ldr	r3, [pc, #36]	; (8010304 <HAL_RCC_ClockConfig+0x1c8>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fb fc42 	bl	800bb6c <HAL_InitTick>

  return HAL_OK;
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
 80102f2:	bf00      	nop
 80102f4:	40023c00 	.word	0x40023c00
 80102f8:	40023800 	.word	0x40023800
 80102fc:	0801ebc0 	.word	0x0801ebc0
 8010300:	20000040 	.word	0x20000040
 8010304:	20000048 	.word	0x20000048

08010308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030a:	b085      	sub	sp, #20
 801030c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801030e:	2300      	movs	r3, #0
 8010310:	607b      	str	r3, [r7, #4]
 8010312:	2300      	movs	r3, #0
 8010314:	60fb      	str	r3, [r7, #12]
 8010316:	2300      	movs	r3, #0
 8010318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801031a:	2300      	movs	r3, #0
 801031c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801031e:	4b50      	ldr	r3, [pc, #320]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	f003 030c 	and.w	r3, r3, #12
 8010326:	2b04      	cmp	r3, #4
 8010328:	d007      	beq.n	801033a <HAL_RCC_GetSysClockFreq+0x32>
 801032a:	2b08      	cmp	r3, #8
 801032c:	d008      	beq.n	8010340 <HAL_RCC_GetSysClockFreq+0x38>
 801032e:	2b00      	cmp	r3, #0
 8010330:	f040 808d 	bne.w	801044e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010334:	4b4b      	ldr	r3, [pc, #300]	; (8010464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8010336:	60bb      	str	r3, [r7, #8]
       break;
 8010338:	e08c      	b.n	8010454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801033a:	4b4b      	ldr	r3, [pc, #300]	; (8010468 <HAL_RCC_GetSysClockFreq+0x160>)
 801033c:	60bb      	str	r3, [r7, #8]
      break;
 801033e:	e089      	b.n	8010454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010340:	4b47      	ldr	r3, [pc, #284]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801034a:	4b45      	ldr	r3, [pc, #276]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010352:	2b00      	cmp	r3, #0
 8010354:	d023      	beq.n	801039e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010356:	4b42      	ldr	r3, [pc, #264]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	099b      	lsrs	r3, r3, #6
 801035c:	f04f 0400 	mov.w	r4, #0
 8010360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010364:	f04f 0200 	mov.w	r2, #0
 8010368:	ea03 0501 	and.w	r5, r3, r1
 801036c:	ea04 0602 	and.w	r6, r4, r2
 8010370:	4a3d      	ldr	r2, [pc, #244]	; (8010468 <HAL_RCC_GetSysClockFreq+0x160>)
 8010372:	fb02 f106 	mul.w	r1, r2, r6
 8010376:	2200      	movs	r2, #0
 8010378:	fb02 f205 	mul.w	r2, r2, r5
 801037c:	440a      	add	r2, r1
 801037e:	493a      	ldr	r1, [pc, #232]	; (8010468 <HAL_RCC_GetSysClockFreq+0x160>)
 8010380:	fba5 0101 	umull	r0, r1, r5, r1
 8010384:	1853      	adds	r3, r2, r1
 8010386:	4619      	mov	r1, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f04f 0400 	mov.w	r4, #0
 801038e:	461a      	mov	r2, r3
 8010390:	4623      	mov	r3, r4
 8010392:	f7f0 fc79 	bl	8000c88 <__aeabi_uldivmod>
 8010396:	4603      	mov	r3, r0
 8010398:	460c      	mov	r4, r1
 801039a:	60fb      	str	r3, [r7, #12]
 801039c:	e049      	b.n	8010432 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801039e:	4b30      	ldr	r3, [pc, #192]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	099b      	lsrs	r3, r3, #6
 80103a4:	f04f 0400 	mov.w	r4, #0
 80103a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80103ac:	f04f 0200 	mov.w	r2, #0
 80103b0:	ea03 0501 	and.w	r5, r3, r1
 80103b4:	ea04 0602 	and.w	r6, r4, r2
 80103b8:	4629      	mov	r1, r5
 80103ba:	4632      	mov	r2, r6
 80103bc:	f04f 0300 	mov.w	r3, #0
 80103c0:	f04f 0400 	mov.w	r4, #0
 80103c4:	0154      	lsls	r4, r2, #5
 80103c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80103ca:	014b      	lsls	r3, r1, #5
 80103cc:	4619      	mov	r1, r3
 80103ce:	4622      	mov	r2, r4
 80103d0:	1b49      	subs	r1, r1, r5
 80103d2:	eb62 0206 	sbc.w	r2, r2, r6
 80103d6:	f04f 0300 	mov.w	r3, #0
 80103da:	f04f 0400 	mov.w	r4, #0
 80103de:	0194      	lsls	r4, r2, #6
 80103e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80103e4:	018b      	lsls	r3, r1, #6
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	eb64 0402 	sbc.w	r4, r4, r2
 80103ec:	f04f 0100 	mov.w	r1, #0
 80103f0:	f04f 0200 	mov.w	r2, #0
 80103f4:	00e2      	lsls	r2, r4, #3
 80103f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80103fa:	00d9      	lsls	r1, r3, #3
 80103fc:	460b      	mov	r3, r1
 80103fe:	4614      	mov	r4, r2
 8010400:	195b      	adds	r3, r3, r5
 8010402:	eb44 0406 	adc.w	r4, r4, r6
 8010406:	f04f 0100 	mov.w	r1, #0
 801040a:	f04f 0200 	mov.w	r2, #0
 801040e:	02a2      	lsls	r2, r4, #10
 8010410:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8010414:	0299      	lsls	r1, r3, #10
 8010416:	460b      	mov	r3, r1
 8010418:	4614      	mov	r4, r2
 801041a:	4618      	mov	r0, r3
 801041c:	4621      	mov	r1, r4
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f04f 0400 	mov.w	r4, #0
 8010424:	461a      	mov	r2, r3
 8010426:	4623      	mov	r3, r4
 8010428:	f7f0 fc2e 	bl	8000c88 <__aeabi_uldivmod>
 801042c:	4603      	mov	r3, r0
 801042e:	460c      	mov	r4, r1
 8010430:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010432:	4b0b      	ldr	r3, [pc, #44]	; (8010460 <HAL_RCC_GetSysClockFreq+0x158>)
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	0c1b      	lsrs	r3, r3, #16
 8010438:	f003 0303 	and.w	r3, r3, #3
 801043c:	3301      	adds	r3, #1
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	fbb2 f3f3 	udiv	r3, r2, r3
 801044a:	60bb      	str	r3, [r7, #8]
      break;
 801044c:	e002      	b.n	8010454 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801044e:	4b05      	ldr	r3, [pc, #20]	; (8010464 <HAL_RCC_GetSysClockFreq+0x15c>)
 8010450:	60bb      	str	r3, [r7, #8]
      break;
 8010452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010454:	68bb      	ldr	r3, [r7, #8]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801045e:	bf00      	nop
 8010460:	40023800 	.word	0x40023800
 8010464:	00f42400 	.word	0x00f42400
 8010468:	017d7840 	.word	0x017d7840

0801046c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010470:	4b03      	ldr	r3, [pc, #12]	; (8010480 <HAL_RCC_GetHCLKFreq+0x14>)
 8010472:	681b      	ldr	r3, [r3, #0]
}
 8010474:	4618      	mov	r0, r3
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	20000040 	.word	0x20000040

08010484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010488:	f7ff fff0 	bl	801046c <HAL_RCC_GetHCLKFreq>
 801048c:	4601      	mov	r1, r0
 801048e:	4b05      	ldr	r3, [pc, #20]	; (80104a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	0a9b      	lsrs	r3, r3, #10
 8010494:	f003 0307 	and.w	r3, r3, #7
 8010498:	4a03      	ldr	r2, [pc, #12]	; (80104a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801049a:	5cd3      	ldrb	r3, [r2, r3]
 801049c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	bd80      	pop	{r7, pc}
 80104a4:	40023800 	.word	0x40023800
 80104a8:	0801ebd0 	.word	0x0801ebd0

080104ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80104b4:	2300      	movs	r3, #0
 80104b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80104b8:	2300      	movs	r3, #0
 80104ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d105      	bne.n	80104d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d035      	beq.n	8010540 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80104d4:	4b62      	ldr	r3, [pc, #392]	; (8010660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80104da:	f7fb fb8b 	bl	800bbf4 <HAL_GetTick>
 80104de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80104e0:	e008      	b.n	80104f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80104e2:	f7fb fb87 	bl	800bbf4 <HAL_GetTick>
 80104e6:	4602      	mov	r2, r0
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	2b02      	cmp	r3, #2
 80104ee:	d901      	bls.n	80104f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80104f0:	2303      	movs	r3, #3
 80104f2:	e0b0      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80104f4:	4b5b      	ldr	r3, [pc, #364]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d1f0      	bne.n	80104e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	019a      	lsls	r2, r3, #6
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	071b      	lsls	r3, r3, #28
 801050c:	4955      	ldr	r1, [pc, #340]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801050e:	4313      	orrs	r3, r2
 8010510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8010514:	4b52      	ldr	r3, [pc, #328]	; (8010660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8010516:	2201      	movs	r2, #1
 8010518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801051a:	f7fb fb6b 	bl	800bbf4 <HAL_GetTick>
 801051e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010520:	e008      	b.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8010522:	f7fb fb67 	bl	800bbf4 <HAL_GetTick>
 8010526:	4602      	mov	r2, r0
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	2b02      	cmp	r3, #2
 801052e:	d901      	bls.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8010530:	2303      	movs	r3, #3
 8010532:	e090      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8010534:	4b4b      	ldr	r3, [pc, #300]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801053c:	2b00      	cmp	r3, #0
 801053e:	d0f0      	beq.n	8010522 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f003 0302 	and.w	r3, r3, #2
 8010548:	2b00      	cmp	r3, #0
 801054a:	f000 8083 	beq.w	8010654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801054e:	2300      	movs	r3, #0
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	4b44      	ldr	r3, [pc, #272]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010556:	4a43      	ldr	r2, [pc, #268]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801055c:	6413      	str	r3, [r2, #64]	; 0x40
 801055e:	4b41      	ldr	r3, [pc, #260]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010566:	60fb      	str	r3, [r7, #12]
 8010568:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801056a:	4b3f      	ldr	r3, [pc, #252]	; (8010668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4a3e      	ldr	r2, [pc, #248]	; (8010668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8010570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010576:	f7fb fb3d 	bl	800bbf4 <HAL_GetTick>
 801057a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801057c:	e008      	b.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801057e:	f7fb fb39 	bl	800bbf4 <HAL_GetTick>
 8010582:	4602      	mov	r2, r0
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	2b02      	cmp	r3, #2
 801058a:	d901      	bls.n	8010590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 801058c:	2303      	movs	r3, #3
 801058e:	e062      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8010590:	4b35      	ldr	r3, [pc, #212]	; (8010668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010598:	2b00      	cmp	r3, #0
 801059a:	d0f0      	beq.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801059c:	4b31      	ldr	r3, [pc, #196]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801059e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d02f      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105b4:	693a      	ldr	r2, [r7, #16]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d028      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80105ba:	4b2a      	ldr	r3, [pc, #168]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80105bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80105c4:	4b29      	ldr	r3, [pc, #164]	; (801066c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80105c6:	2201      	movs	r2, #1
 80105c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80105ca:	4b28      	ldr	r3, [pc, #160]	; (801066c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80105d0:	4a24      	ldr	r2, [pc, #144]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80105d6:	4b23      	ldr	r3, [pc, #140]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80105d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105da:	f003 0301 	and.w	r3, r3, #1
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d114      	bne.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80105e2:	f7fb fb07 	bl	800bbf4 <HAL_GetTick>
 80105e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80105e8:	e00a      	b.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80105ea:	f7fb fb03 	bl	800bbf4 <HAL_GetTick>
 80105ee:	4602      	mov	r2, r0
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	1ad3      	subs	r3, r2, r3
 80105f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d901      	bls.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80105fc:	2303      	movs	r3, #3
 80105fe:	e02a      	b.n	8010656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010600:	4b18      	ldr	r3, [pc, #96]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010604:	f003 0302 	and.w	r3, r3, #2
 8010608:	2b00      	cmp	r3, #0
 801060a:	d0ee      	beq.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010618:	d10d      	bne.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 801061a:	4b12      	ldr	r3, [pc, #72]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801062a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801062e:	490d      	ldr	r1, [pc, #52]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010630:	4313      	orrs	r3, r2
 8010632:	608b      	str	r3, [r1, #8]
 8010634:	e005      	b.n	8010642 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010636:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	4a0a      	ldr	r2, [pc, #40]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801063c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8010640:	6093      	str	r3, [r2, #8]
 8010642:	4b08      	ldr	r3, [pc, #32]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801064e:	4905      	ldr	r1, [pc, #20]	; (8010664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8010650:	4313      	orrs	r3, r2
 8010652:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3718      	adds	r7, #24
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	42470068 	.word	0x42470068
 8010664:	40023800 	.word	0x40023800
 8010668:	40007000 	.word	0x40007000
 801066c:	42470e40 	.word	0x42470e40

08010670 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 801067e:	2301      	movs	r3, #1
 8010680:	e083      	b.n	801078a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	7f5b      	ldrb	r3, [r3, #29]
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d105      	bne.n	8010698 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7f9 fd2a 	bl	800a0ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2202      	movs	r2, #2
 801069c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	22ca      	movs	r2, #202	; 0xca
 80106a4:	625a      	str	r2, [r3, #36]	; 0x24
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2253      	movs	r2, #83	; 0x53
 80106ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 faa8 	bl	8010c04 <RTC_EnterInitMode>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d008      	beq.n	80106cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	22ff      	movs	r2, #255	; 0xff
 80106c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2204      	movs	r2, #4
 80106c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	e05e      	b.n	801078a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	689b      	ldr	r3, [r3, #8]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	6812      	ldr	r2, [r2, #0]
 80106d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80106da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	6899      	ldr	r1, [r3, #8]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	685a      	ldr	r2, [r3, #4]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	691b      	ldr	r3, [r3, #16]
 80106ee:	431a      	orrs	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	695b      	ldr	r3, [r3, #20]
 80106f4:	431a      	orrs	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	430a      	orrs	r2, r1
 80106fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	68d2      	ldr	r2, [r2, #12]
 8010706:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	6919      	ldr	r1, [r3, #16]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	041a      	lsls	r2, r3, #16
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	430a      	orrs	r2, r1
 801071a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68da      	ldr	r2, [r3, #12]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801072a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	689b      	ldr	r3, [r3, #8]
 8010732:	f003 0320 	and.w	r3, r3, #32
 8010736:	2b00      	cmp	r3, #0
 8010738:	d10e      	bne.n	8010758 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 fa3a 	bl	8010bb4 <HAL_RTC_WaitForSynchro>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d008      	beq.n	8010758 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	22ff      	movs	r2, #255	; 0xff
 801074c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2204      	movs	r2, #4
 8010752:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8010754:	2301      	movs	r3, #1
 8010756:	e018      	b.n	801078a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010766:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	699a      	ldr	r2, [r3, #24]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	430a      	orrs	r2, r1
 8010778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	22ff      	movs	r2, #255	; 0xff
 8010780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8010788:	2300      	movs	r3, #0
  }
}
 801078a:	4618      	mov	r0, r3
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}

08010792 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010792:	b590      	push	{r4, r7, lr}
 8010794:	b087      	sub	sp, #28
 8010796:	af00      	add	r7, sp, #0
 8010798:	60f8      	str	r0, [r7, #12]
 801079a:	60b9      	str	r1, [r7, #8]
 801079c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801079e:	2300      	movs	r3, #0
 80107a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	7f1b      	ldrb	r3, [r3, #28]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d101      	bne.n	80107ae <HAL_RTC_SetTime+0x1c>
 80107aa:	2302      	movs	r3, #2
 80107ac:	e0aa      	b.n	8010904 <HAL_RTC_SetTime+0x172>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2201      	movs	r2, #1
 80107b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2202      	movs	r2, #2
 80107b8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d126      	bne.n	801080e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	689b      	ldr	r3, [r3, #8]
 80107c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d102      	bne.n	80107d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2200      	movs	r2, #0
 80107d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	4618      	mov	r0, r3
 80107da:	f000 fa3f 	bl	8010c5c <RTC_ByteToBcd2>
 80107de:	4603      	mov	r3, r0
 80107e0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	785b      	ldrb	r3, [r3, #1]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 fa38 	bl	8010c5c <RTC_ByteToBcd2>
 80107ec:	4603      	mov	r3, r0
 80107ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80107f0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	789b      	ldrb	r3, [r3, #2]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 fa30 	bl	8010c5c <RTC_ByteToBcd2>
 80107fc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80107fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	78db      	ldrb	r3, [r3, #3]
 8010806:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010808:	4313      	orrs	r3, r2
 801080a:	617b      	str	r3, [r7, #20]
 801080c:	e018      	b.n	8010840 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	689b      	ldr	r3, [r3, #8]
 8010814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010818:	2b00      	cmp	r3, #0
 801081a:	d102      	bne.n	8010822 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2200      	movs	r2, #0
 8010820:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	785b      	ldrb	r3, [r3, #1]
 801082c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801082e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010834:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	78db      	ldrb	r3, [r3, #3]
 801083a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801083c:	4313      	orrs	r3, r2
 801083e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	22ca      	movs	r2, #202	; 0xca
 8010846:	625a      	str	r2, [r3, #36]	; 0x24
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2253      	movs	r2, #83	; 0x53
 801084e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f000 f9d7 	bl	8010c04 <RTC_EnterInitMode>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00b      	beq.n	8010874 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	22ff      	movs	r2, #255	; 0xff
 8010862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2204      	movs	r2, #4
 8010868:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8010870:	2301      	movs	r3, #1
 8010872:	e047      	b.n	8010904 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801087e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010882:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	689a      	ldr	r2, [r3, #8]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010892:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	6899      	ldr	r1, [r3, #8]
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	68da      	ldr	r2, [r3, #12]
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	431a      	orrs	r2, r3
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	430a      	orrs	r2, r1
 80108aa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	68da      	ldr	r2, [r3, #12]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80108ba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	f003 0320 	and.w	r3, r3, #32
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d111      	bne.n	80108ee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f000 f972 	bl	8010bb4 <HAL_RTC_WaitForSynchro>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00b      	beq.n	80108ee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	22ff      	movs	r2, #255	; 0xff
 80108dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2204      	movs	r2, #4
 80108e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2200      	movs	r2, #0
 80108e8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80108ea:	2301      	movs	r3, #1
 80108ec:	e00a      	b.n	8010904 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	22ff      	movs	r2, #255	; 0xff
 80108f4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2201      	movs	r2, #1
 80108fa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8010902:	2300      	movs	r3, #0
  }
}
 8010904:	4618      	mov	r0, r3
 8010906:	371c      	adds	r7, #28
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}

0801090c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b086      	sub	sp, #24
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010918:	2300      	movs	r3, #0
 801091a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	691b      	ldr	r3, [r3, #16]
 801092c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801093e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010942:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	0c1b      	lsrs	r3, r3, #16
 8010948:	b2db      	uxtb	r3, r3
 801094a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801094e:	b2da      	uxtb	r2, r3
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	0a1b      	lsrs	r3, r3, #8
 8010958:	b2db      	uxtb	r3, r3
 801095a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801095e:	b2da      	uxtb	r2, r3
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801096c:	b2da      	uxtb	r2, r3
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	0c1b      	lsrs	r3, r3, #16
 8010976:	b2db      	uxtb	r3, r3
 8010978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801097c:	b2da      	uxtb	r2, r3
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d11a      	bne.n	80109be <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 f983 	bl	8010c98 <RTC_Bcd2ToByte>
 8010992:	4603      	mov	r3, r0
 8010994:	461a      	mov	r2, r3
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	785b      	ldrb	r3, [r3, #1]
 801099e:	4618      	mov	r0, r3
 80109a0:	f000 f97a 	bl	8010c98 <RTC_Bcd2ToByte>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	789b      	ldrb	r3, [r3, #2]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 f971 	bl	8010c98 <RTC_Bcd2ToByte>
 80109b6:	4603      	mov	r3, r0
 80109b8:	461a      	mov	r2, r3
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80109be:	2300      	movs	r3, #0
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80109c8:	b590      	push	{r4, r7, lr}
 80109ca:	b087      	sub	sp, #28
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80109d4:	2300      	movs	r3, #0
 80109d6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	7f1b      	ldrb	r3, [r3, #28]
 80109dc:	2b01      	cmp	r3, #1
 80109de:	d101      	bne.n	80109e4 <HAL_RTC_SetDate+0x1c>
 80109e0:	2302      	movs	r3, #2
 80109e2:	e094      	b.n	8010b0e <HAL_RTC_SetDate+0x146>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2201      	movs	r2, #1
 80109e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2202      	movs	r2, #2
 80109ee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d10e      	bne.n	8010a14 <HAL_RTC_SetDate+0x4c>
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	785b      	ldrb	r3, [r3, #1]
 80109fa:	f003 0310 	and.w	r3, r3, #16
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d008      	beq.n	8010a14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	785b      	ldrb	r3, [r3, #1]
 8010a06:	f023 0310 	bic.w	r3, r3, #16
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	330a      	adds	r3, #10
 8010a0e:	b2da      	uxtb	r2, r3
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d11c      	bne.n	8010a54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	78db      	ldrb	r3, [r3, #3]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f000 f91c 	bl	8010c5c <RTC_ByteToBcd2>
 8010a24:	4603      	mov	r3, r0
 8010a26:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	785b      	ldrb	r3, [r3, #1]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f000 f915 	bl	8010c5c <RTC_ByteToBcd2>
 8010a32:	4603      	mov	r3, r0
 8010a34:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010a36:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	789b      	ldrb	r3, [r3, #2]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f000 f90d 	bl	8010c5c <RTC_ByteToBcd2>
 8010a42:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8010a44:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	617b      	str	r3, [r7, #20]
 8010a52:	e00e      	b.n	8010a72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	78db      	ldrb	r3, [r3, #3]
 8010a58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	785b      	ldrb	r3, [r3, #1]
 8010a5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010a60:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8010a66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	22ca      	movs	r2, #202	; 0xca
 8010a78:	625a      	str	r2, [r3, #36]	; 0x24
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2253      	movs	r2, #83	; 0x53
 8010a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 f8be 	bl	8010c04 <RTC_EnterInitMode>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d00b      	beq.n	8010aa6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	22ff      	movs	r2, #255	; 0xff
 8010a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2204      	movs	r2, #4
 8010a9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e033      	b.n	8010b0e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010ab0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010ab4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010ac4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	f003 0320 	and.w	r3, r3, #32
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d111      	bne.n	8010af8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f000 f86d 	bl	8010bb4 <HAL_RTC_WaitForSynchro>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00b      	beq.n	8010af8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	22ff      	movs	r2, #255	; 0xff
 8010ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2204      	movs	r2, #4
 8010aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8010af4:	2301      	movs	r3, #1
 8010af6:	e00a      	b.n	8010b0e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	22ff      	movs	r2, #255	; 0xff
 8010afe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2201      	movs	r2, #1
 8010b04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8010b0c:	2300      	movs	r3, #0
  }
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	371c      	adds	r7, #28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd90      	pop	{r4, r7, pc}

08010b16 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b086      	sub	sp, #24
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	60f8      	str	r0, [r7, #12]
 8010b1e:	60b9      	str	r1, [r7, #8]
 8010b20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010b34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	0c1b      	lsrs	r3, r3, #16
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	0a1b      	lsrs	r3, r3, #8
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	f003 031f 	and.w	r3, r3, #31
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	0b5b      	lsrs	r3, r3, #13
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 0307 	and.w	r3, r3, #7
 8010b68:	b2da      	uxtb	r2, r3
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d11a      	bne.n	8010baa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	78db      	ldrb	r3, [r3, #3]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 f88d 	bl	8010c98 <RTC_Bcd2ToByte>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	461a      	mov	r2, r3
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	785b      	ldrb	r3, [r3, #1]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f000 f884 	bl	8010c98 <RTC_Bcd2ToByte>
 8010b90:	4603      	mov	r3, r0
 8010b92:	461a      	mov	r2, r3
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	789b      	ldrb	r3, [r3, #2]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f000 f87b 	bl	8010c98 <RTC_Bcd2ToByte>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010baa:	2300      	movs	r3, #0
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68da      	ldr	r2, [r3, #12]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010bce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010bd0:	f7fb f810 	bl	800bbf4 <HAL_GetTick>
 8010bd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010bd6:	e009      	b.n	8010bec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8010bd8:	f7fb f80c 	bl	800bbf4 <HAL_GetTick>
 8010bdc:	4602      	mov	r2, r0
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010be6:	d901      	bls.n	8010bec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8010be8:	2303      	movs	r3, #3
 8010bea:	e007      	b.n	8010bfc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	f003 0320 	and.w	r3, r3, #32
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d0ee      	beq.n	8010bd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8010bfa:	2300      	movs	r3, #0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3710      	adds	r7, #16
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d119      	bne.n	8010c52 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f04f 32ff 	mov.w	r2, #4294967295
 8010c26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010c28:	f7fa ffe4 	bl	800bbf4 <HAL_GetTick>
 8010c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010c2e:	e009      	b.n	8010c44 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8010c30:	f7fa ffe0 	bl	800bbf4 <HAL_GetTick>
 8010c34:	4602      	mov	r2, r0
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	1ad3      	subs	r3, r2, r3
 8010c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010c3e:	d901      	bls.n	8010c44 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8010c40:	2303      	movs	r3, #3
 8010c42:	e007      	b.n	8010c54 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d0ee      	beq.n	8010c30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8010c52:	2300      	movs	r3, #0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3710      	adds	r7, #16
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b085      	sub	sp, #20
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010c66:	2300      	movs	r3, #0
 8010c68:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8010c6a:	e005      	b.n	8010c78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	3b0a      	subs	r3, #10
 8010c76:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8010c78:	79fb      	ldrb	r3, [r7, #7]
 8010c7a:	2b09      	cmp	r3, #9
 8010c7c:	d8f6      	bhi.n	8010c6c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	011b      	lsls	r3, r3, #4
 8010c84:	b2da      	uxtb	r2, r3
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	b2db      	uxtb	r3, r3
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3714      	adds	r7, #20
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8010ca6:	79fb      	ldrb	r3, [r7, #7]
 8010ca8:	091b      	lsrs	r3, r3, #4
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	461a      	mov	r2, r3
 8010cae:	4613      	mov	r3, r2
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4413      	add	r3, r2
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8010cb8:	79fb      	ldrb	r3, [r7, #7]
 8010cba:	f003 030f 	and.w	r3, r3, #15
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	4413      	add	r3, r2
 8010cc6:	b2db      	uxtb	r3, r3
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3714      	adds	r7, #20
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b087      	sub	sp, #28
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	7f1b      	ldrb	r3, [r3, #28]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d101      	bne.n	8010cec <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8010ce8:	2302      	movs	r3, #2
 8010cea:	e0a6      	b.n	8010e3a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	22ca      	movs	r2, #202	; 0xca
 8010cfe:	625a      	str	r2, [r3, #36]	; 0x24
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2253      	movs	r2, #83	; 0x53
 8010d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	689b      	ldr	r3, [r3, #8]
 8010d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d022      	beq.n	8010d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8010d16:	4b4c      	ldr	r3, [pc, #304]	; (8010e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a4c      	ldr	r2, [pc, #304]	; (8010e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8010d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d20:	0adb      	lsrs	r3, r3, #11
 8010d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d26:	fb02 f303 	mul.w	r3, r2, r3
 8010d2a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	1e5a      	subs	r2, r3, #1
 8010d30:	617a      	str	r2, [r7, #20]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10b      	bne.n	8010d4e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	22ff      	movs	r2, #255	; 0xff
 8010d3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2203      	movs	r2, #3
 8010d42:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2200      	movs	r2, #0
 8010d48:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8010d4a:	2303      	movs	r3, #3
 8010d4c:	e075      	b.n	8010e3a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	f003 0304 	and.w	r3, r3, #4
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1e7      	bne.n	8010d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689a      	ldr	r2, [r3, #8]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d6a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8010d6c:	4b36      	ldr	r3, [pc, #216]	; (8010e48 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a36      	ldr	r2, [pc, #216]	; (8010e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8010d72:	fba2 2303 	umull	r2, r3, r2, r3
 8010d76:	0adb      	lsrs	r3, r3, #11
 8010d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d7c:	fb02 f303 	mul.w	r3, r2, r3
 8010d80:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	1e5a      	subs	r2, r3, #1
 8010d86:	617a      	str	r2, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10b      	bne.n	8010da4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	22ff      	movs	r2, #255	; 0xff
 8010d92:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2203      	movs	r2, #3
 8010d98:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8010da0:	2303      	movs	r3, #3
 8010da2:	e04a      	b.n	8010e3a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	f003 0304 	and.w	r3, r3, #4
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d0e7      	beq.n	8010d82 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	689a      	ldr	r2, [r3, #8]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	f022 0207 	bic.w	r2, r2, #7
 8010dc8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	6899      	ldr	r1, [r3, #8]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	430a      	orrs	r2, r1
 8010dd8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8010dda:	4b1d      	ldr	r3, [pc, #116]	; (8010e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4a1c      	ldr	r2, [pc, #112]	; (8010e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8010de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010de4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8010de6:	4b1a      	ldr	r3, [pc, #104]	; (8010e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	4a19      	ldr	r2, [pc, #100]	; (8010e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8010dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010df0:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	b2da      	uxtb	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8010e02:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	689a      	ldr	r2, [r3, #8]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010e12:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	689a      	ldr	r2, [r3, #8]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	22ff      	movs	r2, #255	; 0xff
 8010e2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8010e38:	2300      	movs	r3, #0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	371c      	adds	r7, #28
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	20000040 	.word	0x20000040
 8010e4c:	10624dd3 	.word	0x10624dd3
 8010e50:	40013c00 	.word	0x40013c00

08010e54 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00b      	beq.n	8010e82 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f7f2 fa22 	bl	80032b4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8010e80:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8010e82:	4b05      	ldr	r3, [pc, #20]	; (8010e98 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8010e84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8010e88:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	775a      	strb	r2, [r3, #29]
}
 8010e90:	bf00      	nop
 8010e92:	3708      	adds	r7, #8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	40013c00 	.word	0x40013c00

08010e9c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b087      	sub	sp, #28
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3350      	adds	r3, #80	; 0x50
 8010eb2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	697a      	ldr	r2, [r7, #20]
 8010eba:	4413      	add	r3, r2
 8010ebc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	601a      	str	r2, [r3, #0]
}
 8010ec4:	bf00      	nop
 8010ec6:	371c      	adds	r7, #28
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8010eda:	2300      	movs	r3, #0
 8010edc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3350      	adds	r3, #80	; 0x50
 8010ee4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	4413      	add	r3, r2
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3714      	adds	r7, #20
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr

08010f00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e022      	b.n	8010f58 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d105      	bne.n	8010f2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f7f9 f91d 	bl	800a164 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2203      	movs	r2, #3
 8010f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f814 	bl	8010f60 <HAL_SD_InitCard>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d001      	beq.n	8010f42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e00a      	b.n	8010f58 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2200      	movs	r2, #0
 8010f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2201      	movs	r2, #1
 8010f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010f60:	b5b0      	push	{r4, r5, r7, lr}
 8010f62:	b08e      	sub	sp, #56	; 0x38
 8010f64:	af04      	add	r7, sp, #16
 8010f66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8010f70:	2300      	movs	r3, #0
 8010f72:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8010f74:	2300      	movs	r3, #0
 8010f76:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8010f7c:	2376      	movs	r3, #118	; 0x76
 8010f7e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681d      	ldr	r5, [r3, #0]
 8010f84:	466c      	mov	r4, sp
 8010f86:	f107 0314 	add.w	r3, r7, #20
 8010f8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010f92:	f107 0308 	add.w	r3, r7, #8
 8010f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f001 fe38 	bl	8012c0e <SDIO_Init>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8010fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	e031      	b.n	8011014 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8010fb0:	4b1a      	ldr	r3, [pc, #104]	; (801101c <HAL_SD_InitCard+0xbc>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f001 fe70 	bl	8012ca0 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8010fc0:	4b16      	ldr	r3, [pc, #88]	; (801101c <HAL_SD_InitCard+0xbc>)
 8010fc2:	2201      	movs	r2, #1
 8010fc4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 ff80 	bl	8011ecc <SD_PowerON>
 8010fcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010fce:	6a3b      	ldr	r3, [r7, #32]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d00b      	beq.n	8010fec <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fe0:	6a3b      	ldr	r3, [r7, #32]
 8010fe2:	431a      	orrs	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	e013      	b.n	8011014 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fe9f 	bl	8011d30 <SD_InitCard>
 8010ff2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010ff4:	6a3b      	ldr	r3, [r7, #32]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011006:	6a3b      	ldr	r3, [r7, #32]
 8011008:	431a      	orrs	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801100e:	2301      	movs	r3, #1
 8011010:	e000      	b.n	8011014 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	3728      	adds	r7, #40	; 0x28
 8011018:	46bd      	mov	sp, r7
 801101a:	bdb0      	pop	{r4, r5, r7, pc}
 801101c:	422580a0 	.word	0x422580a0

08011020 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d101      	bne.n	8011032 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 801102e:	2301      	movs	r3, #1
 8011030:	e011      	b.n	8011056 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDIO_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2203      	movs	r2, #3
 8011036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 ffd4 	bl	8011fe8 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7f9 f97f 	bl	800a344 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
	...

08011060 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b08c      	sub	sp, #48	; 0x30
 8011064:	af00      	add	r7, sp, #0
 8011066:	60f8      	str	r0, [r7, #12]
 8011068:	60b9      	str	r1, [r7, #8]
 801106a:	607a      	str	r2, [r7, #4]
 801106c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d107      	bne.n	8011088 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801107c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	e0c9      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b01      	cmp	r3, #1
 8011092:	f040 80c2 	bne.w	801121a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801109c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	441a      	add	r2, r3
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d907      	bls.n	80110ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e0b0      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2203      	movs	r2, #3
 80110be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2200      	movs	r2, #0
 80110c8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	6812      	ldr	r2, [r2, #0]
 80110d4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80110d8:	f043 0302 	orr.w	r3, r3, #2
 80110dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e2:	4a50      	ldr	r2, [pc, #320]	; (8011224 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80110e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ea:	4a4f      	ldr	r2, [pc, #316]	; (8011228 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80110ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	2200      	movs	r2, #0
 80110f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	3380      	adds	r3, #128	; 0x80
 8011100:	4619      	mov	r1, r3
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	025b      	lsls	r3, r3, #9
 8011108:	089b      	lsrs	r3, r3, #2
 801110a:	f7fb fbd9 	bl	800c8c0 <HAL_DMA_Start_IT>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d017      	beq.n	8011144 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8011122:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4a40      	ldr	r2, [pc, #256]	; (801122c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 801112a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2201      	movs	r2, #1
 801113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8011140:	2301      	movs	r3, #1
 8011142:	e06b      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8011144:	4b3a      	ldr	r3, [pc, #232]	; (8011230 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8011146:	2201      	movs	r2, #1
 8011148:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801114e:	2b01      	cmp	r3, #1
 8011150:	d002      	beq.n	8011158 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8011152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011154:	025b      	lsls	r3, r3, #9
 8011156:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011160:	4618      	mov	r0, r3
 8011162:	f001 fe3e 	bl	8012de2 <SDMMC_CmdBlockLength>
 8011166:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8011168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00f      	beq.n	801118e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a2e      	ldr	r2, [pc, #184]	; (801122c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8011174:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	431a      	orrs	r2, r3
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2201      	movs	r2, #1
 8011186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 801118a:	2301      	movs	r3, #1
 801118c:	e046      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801118e:	f04f 33ff 	mov.w	r3, #4294967295
 8011192:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	025b      	lsls	r3, r3, #9
 8011198:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 801119a:	2390      	movs	r3, #144	; 0x90
 801119c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 801119e:	2302      	movs	r3, #2
 80111a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80111a2:	2300      	movs	r3, #0
 80111a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80111a6:	2301      	movs	r3, #1
 80111a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f107 0210 	add.w	r2, r7, #16
 80111b2:	4611      	mov	r1, r2
 80111b4:	4618      	mov	r0, r3
 80111b6:	f001 fde8 	bl	8012d8a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d90a      	bls.n	80111d6 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2282      	movs	r2, #130	; 0x82
 80111c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111cc:	4618      	mov	r0, r3
 80111ce:	f001 fe4c 	bl	8012e6a <SDMMC_CmdReadMultiBlock>
 80111d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80111d4:	e009      	b.n	80111ea <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2281      	movs	r2, #129	; 0x81
 80111da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111e2:	4618      	mov	r0, r3
 80111e4:	f001 fe1f 	bl	8012e26 <SDMMC_CmdReadSingleBlock>
 80111e8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d012      	beq.n	8011216 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a0d      	ldr	r2, [pc, #52]	; (801122c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80111f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	431a      	orrs	r2, r3
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2201      	movs	r2, #1
 8011208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2200      	movs	r2, #0
 8011210:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e002      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8011216:	2300      	movs	r3, #0
 8011218:	e000      	b.n	801121c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 801121a:	2302      	movs	r3, #2
  }
}
 801121c:	4618      	mov	r0, r3
 801121e:	3730      	adds	r7, #48	; 0x30
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	08011b3f 	.word	0x08011b3f
 8011228:	08011bb1 	.word	0x08011bb1
 801122c:	004005ff 	.word	0x004005ff
 8011230:	4225858c 	.word	0x4225858c

08011234 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b08c      	sub	sp, #48	; 0x30
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
 8011240:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d107      	bne.n	801125c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011250:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011258:	2301      	movs	r3, #1
 801125a:	e0ce      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011262:	b2db      	uxtb	r3, r3
 8011264:	2b01      	cmp	r3, #1
 8011266:	f040 80c7 	bne.w	80113f8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2200      	movs	r2, #0
 801126e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	441a      	add	r2, r3
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801127a:	429a      	cmp	r2, r3
 801127c:	d907      	bls.n	801128e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011282:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801128a:	2301      	movs	r3, #1
 801128c:	e0b5      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2203      	movs	r2, #3
 8011292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2200      	movs	r2, #0
 801129c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	6812      	ldr	r2, [r2, #0]
 80112a8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80112ac:	f043 0302 	orr.w	r3, r3, #2
 80112b0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b6:	4a53      	ldr	r2, [pc, #332]	; (8011404 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80112b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112be:	4a52      	ldr	r2, [pc, #328]	; (8011408 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80112c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112c6:	2200      	movs	r2, #0
 80112c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d002      	beq.n	80112d8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	025b      	lsls	r3, r3, #9
 80112d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80112e0:	4618      	mov	r0, r3
 80112e2:	f001 fd7e 	bl	8012de2 <SDMMC_CmdBlockLength>
 80112e6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d00f      	beq.n	801130e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	4a46      	ldr	r2, [pc, #280]	; (801140c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80112f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fc:	431a      	orrs	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2201      	movs	r2, #1
 8011306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 801130a:	2301      	movs	r3, #1
 801130c:	e075      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2b01      	cmp	r3, #1
 8011312:	d90a      	bls.n	801132a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	22a0      	movs	r2, #160	; 0xa0
 8011318:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011320:	4618      	mov	r0, r3
 8011322:	f001 fde6 	bl	8012ef2 <SDMMC_CmdWriteMultiBlock>
 8011326:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011328:	e009      	b.n	801133e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2290      	movs	r2, #144	; 0x90
 801132e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011336:	4618      	mov	r0, r3
 8011338:	f001 fdb9 	bl	8012eae <SDMMC_CmdWriteSingleBlock>
 801133c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011340:	2b00      	cmp	r3, #0
 8011342:	d012      	beq.n	801136a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4a30      	ldr	r2, [pc, #192]	; (801140c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 801134a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	431a      	orrs	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2200      	movs	r2, #0
 8011364:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8011366:	2301      	movs	r3, #1
 8011368:	e047      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 801136a:	4b29      	ldr	r3, [pc, #164]	; (8011410 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 801136c:	2201      	movs	r2, #1
 801136e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011374:	68b9      	ldr	r1, [r7, #8]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	3380      	adds	r3, #128	; 0x80
 801137c:	461a      	mov	r2, r3
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	025b      	lsls	r3, r3, #9
 8011382:	089b      	lsrs	r3, r3, #2
 8011384:	f7fb fa9c 	bl	800c8c0 <HAL_DMA_Start_IT>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d01c      	beq.n	80113c8 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	6812      	ldr	r2, [r2, #0]
 8011398:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 801139c:	f023 0302 	bic.w	r3, r3, #2
 80113a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4a19      	ldr	r2, [pc, #100]	; (801140c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80113a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2201      	movs	r2, #1
 80113ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2200      	movs	r2, #0
 80113c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e018      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80113c8:	f04f 33ff 	mov.w	r3, #4294967295
 80113cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	025b      	lsls	r3, r3, #9
 80113d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80113d4:	2390      	movs	r3, #144	; 0x90
 80113d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80113d8:	2300      	movs	r3, #0
 80113da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80113dc:	2300      	movs	r3, #0
 80113de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80113e0:	2301      	movs	r3, #1
 80113e2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f107 0210 	add.w	r2, r7, #16
 80113ec:	4611      	mov	r1, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 fccb 	bl	8012d8a <SDIO_ConfigData>

      return HAL_OK;
 80113f4:	2300      	movs	r3, #0
 80113f6:	e000      	b.n	80113fa <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80113f8:	2302      	movs	r3, #2
  }
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3730      	adds	r7, #48	; 0x30
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	08011b15 	.word	0x08011b15
 8011408:	08011bb1 	.word	0x08011bb1
 801140c:	004005ff 	.word	0x004005ff
 8011410:	4225858c 	.word	0x4225858c

08011414 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011420:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801142c:	2b00      	cmp	r3, #0
 801142e:	d008      	beq.n	8011442 <HAL_SD_IRQHandler+0x2e>
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f003 0308 	and.w	r3, r3, #8
 8011436:	2b00      	cmp	r3, #0
 8011438:	d003      	beq.n	8011442 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fe09 	bl	8012052 <SD_Read_IT>
 8011440:	e165      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801144c:	2b00      	cmp	r3, #0
 801144e:	f000 808f 	beq.w	8011570 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f44f 7280 	mov.w	r2, #256	; 0x100
 801145a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	6812      	ldr	r2, [r2, #0]
 8011466:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 801146a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801146e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f022 0201 	bic.w	r2, r2, #1
 801147e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f003 0308 	and.w	r3, r3, #8
 8011486:	2b00      	cmp	r3, #0
 8011488:	d039      	beq.n	80114fe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	f003 0302 	and.w	r3, r3, #2
 8011490:	2b00      	cmp	r3, #0
 8011492:	d104      	bne.n	801149e <HAL_SD_IRQHandler+0x8a>
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f003 0320 	and.w	r3, r3, #32
 801149a:	2b00      	cmp	r3, #0
 801149c:	d011      	beq.n	80114c2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f001 fd48 	bl	8012f38 <SDMMC_CmdStopTransfer>
 80114a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d008      	beq.n	80114c2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	431a      	orrs	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f000 f92f 	bl	8011720 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80114ca:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2201      	movs	r2, #1
 80114d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	f003 0301 	and.w	r3, r3, #1
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d104      	bne.n	80114ee <HAL_SD_IRQHandler+0xda>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f003 0302 	and.w	r3, r3, #2
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d003      	beq.n	80114f6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f003 fc8a 	bl	8014e08 <HAL_SD_RxCpltCallback>
 80114f4:	e10b      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f003 fc7c 	bl	8014df4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80114fc:	e107      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 8102 	beq.w	801170e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f003 0320 	and.w	r3, r3, #32
 8011510:	2b00      	cmp	r3, #0
 8011512:	d011      	beq.n	8011538 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4618      	mov	r0, r3
 801151a:	f001 fd0d 	bl	8012f38 <SDMMC_CmdStopTransfer>
 801151e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d008      	beq.n	8011538 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	431a      	orrs	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f000 f8f4 	bl	8011720 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f003 0301 	and.w	r3, r3, #1
 801153e:	2b00      	cmp	r3, #0
 8011540:	f040 80e5 	bne.w	801170e <HAL_SD_IRQHandler+0x2fa>
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f003 0302 	and.w	r3, r3, #2
 801154a:	2b00      	cmp	r3, #0
 801154c:	f040 80df 	bne.w	801170e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f022 0208 	bic.w	r2, r2, #8
 801155e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2201      	movs	r2, #1
 8011564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f003 fc43 	bl	8014df4 <HAL_SD_TxCpltCallback>
}
 801156e:	e0ce      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801157a:	2b00      	cmp	r3, #0
 801157c:	d008      	beq.n	8011590 <HAL_SD_IRQHandler+0x17c>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f003 0308 	and.w	r3, r3, #8
 8011584:	2b00      	cmp	r3, #0
 8011586:	d003      	beq.n	8011590 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f000 fdb3 	bl	80120f4 <SD_Write_IT>
 801158e:	e0be      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011596:	f240 233a 	movw	r3, #570	; 0x23a
 801159a:	4013      	ands	r3, r2
 801159c:	2b00      	cmp	r3, #0
 801159e:	f000 80b6 	beq.w	801170e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115a8:	f003 0302 	and.w	r3, r3, #2
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d005      	beq.n	80115bc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b4:	f043 0202 	orr.w	r2, r3, #2
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115c2:	f003 0308 	and.w	r3, r3, #8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d005      	beq.n	80115d6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ce:	f043 0208 	orr.w	r2, r3, #8
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115dc:	f003 0320 	and.w	r3, r3, #32
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d005      	beq.n	80115f0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115e8:	f043 0220 	orr.w	r2, r3, #32
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115f6:	f003 0310 	and.w	r3, r3, #16
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d005      	beq.n	801160a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011602:	f043 0210 	orr.w	r2, r3, #16
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011614:	2b00      	cmp	r3, #0
 8011616:	d005      	beq.n	8011624 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801161c:	f043 0208 	orr.w	r2, r3, #8
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f240 723a 	movw	r2, #1850	; 0x73a
 801162c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	6812      	ldr	r2, [r2, #0]
 8011638:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 801163c:	f023 0302 	bic.w	r3, r3, #2
 8011640:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4618      	mov	r0, r3
 8011648:	f001 fc76 	bl	8012f38 <SDMMC_CmdStopTransfer>
 801164c:	4602      	mov	r2, r0
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011652:	431a      	orrs	r2, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	f003 0308 	and.w	r3, r3, #8
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00a      	beq.n	8011678 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2201      	movs	r2, #1
 8011666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f855 	bl	8011720 <HAL_SD_ErrorCallback>
}
 8011676:	e04a      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801167e:	2b00      	cmp	r3, #0
 8011680:	d045      	beq.n	801170e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f003 0310 	and.w	r3, r3, #16
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <HAL_SD_IRQHandler+0x282>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	d011      	beq.n	80116ba <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801169a:	4a1f      	ldr	r2, [pc, #124]	; (8011718 <HAL_SD_IRQHandler+0x304>)
 801169c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fb f964 	bl	800c970 <HAL_DMA_Abort_IT>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d02f      	beq.n	801170e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116b2:	4618      	mov	r0, r3
 80116b4:	f000 face 	bl	8011c54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80116b8:	e029      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d104      	bne.n	80116ce <HAL_SD_IRQHandler+0x2ba>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f003 0302 	and.w	r3, r3, #2
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d011      	beq.n	80116f2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d2:	4a12      	ldr	r2, [pc, #72]	; (801171c <HAL_SD_IRQHandler+0x308>)
 80116d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fb f948 	bl	800c970 <HAL_DMA_Abort_IT>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d013      	beq.n	801170e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116ea:	4618      	mov	r0, r3
 80116ec:	f000 fae9 	bl	8011cc2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80116f0:	e00d      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f003 fb6a 	bl	8014de0 <HAL_SD_AbortCallback>
}
 801170c:	e7ff      	b.n	801170e <HAL_SD_IRQHandler+0x2fa>
 801170e:	bf00      	nop
 8011710:	3710      	adds	r7, #16
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	08011c55 	.word	0x08011c55
 801171c:	08011cc3 	.word	0x08011cc3

08011720 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8011728:	bf00      	nop
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011742:	0f9b      	lsrs	r3, r3, #30
 8011744:	b2da      	uxtb	r2, r3
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801174e:	0e9b      	lsrs	r3, r3, #26
 8011750:	b2db      	uxtb	r3, r3
 8011752:	f003 030f 	and.w	r3, r3, #15
 8011756:	b2da      	uxtb	r2, r3
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011760:	0e1b      	lsrs	r3, r3, #24
 8011762:	b2db      	uxtb	r3, r3
 8011764:	f003 0303 	and.w	r3, r3, #3
 8011768:	b2da      	uxtb	r2, r3
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011772:	0c1b      	lsrs	r3, r3, #16
 8011774:	b2da      	uxtb	r2, r3
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801177e:	0a1b      	lsrs	r3, r3, #8
 8011780:	b2da      	uxtb	r2, r3
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801178a:	b2da      	uxtb	r2, r3
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011794:	0d1b      	lsrs	r3, r3, #20
 8011796:	b29a      	uxth	r2, r3
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117a0:	0c1b      	lsrs	r3, r3, #16
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	f003 030f 	and.w	r3, r3, #15
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117b2:	0bdb      	lsrs	r3, r3, #15
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	b2da      	uxtb	r2, r3
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117c4:	0b9b      	lsrs	r3, r3, #14
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117d6:	0b5b      	lsrs	r3, r3, #13
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	f003 0301 	and.w	r3, r3, #1
 80117de:	b2da      	uxtb	r2, r3
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117e8:	0b1b      	lsrs	r3, r3, #12
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	f003 0301 	and.w	r3, r3, #1
 80117f0:	b2da      	uxtb	r2, r3
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	2200      	movs	r2, #0
 80117fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011800:	2b00      	cmp	r3, #0
 8011802:	d163      	bne.n	80118cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011808:	009a      	lsls	r2, r3, #2
 801180a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801180e:	4013      	ands	r3, r2
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011814:	0f92      	lsrs	r2, r2, #30
 8011816:	431a      	orrs	r2, r3
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011820:	0edb      	lsrs	r3, r3, #27
 8011822:	b2db      	uxtb	r3, r3
 8011824:	f003 0307 	and.w	r3, r3, #7
 8011828:	b2da      	uxtb	r2, r3
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011832:	0e1b      	lsrs	r3, r3, #24
 8011834:	b2db      	uxtb	r3, r3
 8011836:	f003 0307 	and.w	r3, r3, #7
 801183a:	b2da      	uxtb	r2, r3
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011844:	0d5b      	lsrs	r3, r3, #21
 8011846:	b2db      	uxtb	r3, r3
 8011848:	f003 0307 	and.w	r3, r3, #7
 801184c:	b2da      	uxtb	r2, r3
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011856:	0c9b      	lsrs	r3, r3, #18
 8011858:	b2db      	uxtb	r3, r3
 801185a:	f003 0307 	and.w	r3, r3, #7
 801185e:	b2da      	uxtb	r2, r3
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011868:	0bdb      	lsrs	r3, r3, #15
 801186a:	b2db      	uxtb	r3, r3
 801186c:	f003 0307 	and.w	r3, r3, #7
 8011870:	b2da      	uxtb	r2, r3
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	691b      	ldr	r3, [r3, #16]
 801187a:	1c5a      	adds	r2, r3, #1
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	7e1b      	ldrb	r3, [r3, #24]
 8011884:	b2db      	uxtb	r3, r3
 8011886:	f003 0307 	and.w	r3, r3, #7
 801188a:	3302      	adds	r3, #2
 801188c:	2201      	movs	r2, #1
 801188e:	fa02 f303 	lsl.w	r3, r2, r3
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011896:	fb02 f203 	mul.w	r2, r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	7a1b      	ldrb	r3, [r3, #8]
 80118a2:	b2db      	uxtb	r3, r3
 80118a4:	f003 030f 	and.w	r3, r3, #15
 80118a8:	2201      	movs	r2, #1
 80118aa:	409a      	lsls	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80118b8:	0a52      	lsrs	r2, r2, #9
 80118ba:	fb02 f203 	mul.w	r2, r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118c8:	661a      	str	r2, [r3, #96]	; 0x60
 80118ca:	e031      	b.n	8011930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d11d      	bne.n	8011910 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118d8:	041b      	lsls	r3, r3, #16
 80118da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e2:	0c1b      	lsrs	r3, r3, #16
 80118e4:	431a      	orrs	r2, r3
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	691b      	ldr	r3, [r3, #16]
 80118ee:	3301      	adds	r3, #1
 80118f0:	029a      	lsls	r2, r3, #10
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011904:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	661a      	str	r2, [r3, #96]	; 0x60
 801190e:	e00f      	b.n	8011930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a58      	ldr	r2, [pc, #352]	; (8011a78 <HAL_SD_GetCardCSD+0x344>)
 8011916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801191c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801192c:	2301      	movs	r3, #1
 801192e:	e09d      	b.n	8011a6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011934:	0b9b      	lsrs	r3, r3, #14
 8011936:	b2db      	uxtb	r3, r3
 8011938:	f003 0301 	and.w	r3, r3, #1
 801193c:	b2da      	uxtb	r2, r3
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011946:	09db      	lsrs	r3, r3, #7
 8011948:	b2db      	uxtb	r3, r3
 801194a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801194e:	b2da      	uxtb	r2, r3
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011958:	b2db      	uxtb	r3, r3
 801195a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801195e:	b2da      	uxtb	r2, r3
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011968:	0fdb      	lsrs	r3, r3, #31
 801196a:	b2da      	uxtb	r2, r3
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011974:	0f5b      	lsrs	r3, r3, #29
 8011976:	b2db      	uxtb	r3, r3
 8011978:	f003 0303 	and.w	r3, r3, #3
 801197c:	b2da      	uxtb	r2, r3
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011986:	0e9b      	lsrs	r3, r3, #26
 8011988:	b2db      	uxtb	r3, r3
 801198a:	f003 0307 	and.w	r3, r3, #7
 801198e:	b2da      	uxtb	r2, r3
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011998:	0d9b      	lsrs	r3, r3, #22
 801199a:	b2db      	uxtb	r3, r3
 801199c:	f003 030f 	and.w	r3, r3, #15
 80119a0:	b2da      	uxtb	r2, r3
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119aa:	0d5b      	lsrs	r3, r3, #21
 80119ac:	b2db      	uxtb	r3, r3
 80119ae:	f003 0301 	and.w	r3, r3, #1
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2200      	movs	r2, #0
 80119be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c6:	0c1b      	lsrs	r3, r3, #16
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	f003 0301 	and.w	r3, r3, #1
 80119ce:	b2da      	uxtb	r2, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119da:	0bdb      	lsrs	r3, r3, #15
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	f003 0301 	and.w	r3, r3, #1
 80119e2:	b2da      	uxtb	r2, r3
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ee:	0b9b      	lsrs	r3, r3, #14
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a02:	0b5b      	lsrs	r3, r3, #13
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	f003 0301 	and.w	r3, r3, #1
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a16:	0b1b      	lsrs	r3, r3, #12
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a2a:	0a9b      	lsrs	r3, r3, #10
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	f003 0303 	and.w	r3, r3, #3
 8011a32:	b2da      	uxtb	r2, r3
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a3e:	0a1b      	lsrs	r3, r3, #8
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	f003 0303 	and.w	r3, r3, #3
 8011a46:	b2da      	uxtb	r2, r3
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a52:	085b      	lsrs	r3, r3, #1
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2201      	movs	r2, #1
 8011a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8011a6a:	2300      	movs	r3, #0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	004005ff 	.word	0x004005ff

08011a7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011ac6:	2300      	movs	r3, #0
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011ae0:	f107 030c 	add.w	r3, r7, #12
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 fa8b 	bl	8012002 <SD_SendStatus>
 8011aec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d005      	beq.n	8011b00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	0a5b      	lsrs	r3, r3, #9
 8011b04:	f003 030f 	and.w	r3, r3, #15
 8011b08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8011b0a:	693b      	ldr	r3, [r7, #16]
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3718      	adds	r7, #24
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b20:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b30:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8011b32:	bf00      	nop
 8011b34:	3714      	adds	r7, #20
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b084      	sub	sp, #16
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b4a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b50:	2b82      	cmp	r3, #130	; 0x82
 8011b52:	d111      	bne.n	8011b78 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f001 f9ed 	bl	8012f38 <SDMMC_CmdStopTransfer>
 8011b5e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d008      	beq.n	8011b78 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	431a      	orrs	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f7ff fdd4 	bl	8011720 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f022 0208 	bic.w	r2, r2, #8
 8011b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8011b90:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2201      	movs	r2, #1
 8011b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	f003 f931 	bl	8014e08 <HAL_SD_RxCpltCallback>
#endif
}
 8011ba6:	bf00      	nop
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
	...

08011bb0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bbc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f7fb f882 	bl	800ccc8 <HAL_DMA_GetError>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d03e      	beq.n	8011c48 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d002      	beq.n	8011be6 <SD_DMAError+0x36>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d12d      	bne.n	8011c42 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4a19      	ldr	r2, [pc, #100]	; (8011c50 <SD_DMAError+0xa0>)
 8011bec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8011bfc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8011c0a:	6978      	ldr	r0, [r7, #20]
 8011c0c:	f7ff ff62 	bl	8011ad4 <HAL_SD_GetCardState>
 8011c10:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b06      	cmp	r3, #6
 8011c16:	d002      	beq.n	8011c1e <SD_DMAError+0x6e>
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	2b05      	cmp	r3, #5
 8011c1c:	d10a      	bne.n	8011c34 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 f988 	bl	8012f38 <SDMMC_CmdStopTransfer>
 8011c28:	4602      	mov	r2, r0
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c2e:	431a      	orrs	r2, r3
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	2201      	movs	r2, #1
 8011c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8011c42:	6978      	ldr	r0, [r7, #20]
 8011c44:	f7ff fd6c 	bl	8011720 <HAL_SD_ErrorCallback>
#endif
  }
}
 8011c48:	bf00      	nop
 8011c4a:	3718      	adds	r7, #24
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	004005ff 	.word	0x004005ff

08011c54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f240 523a 	movw	r2, #1338	; 0x53a
 8011c6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff ff31 	bl	8011ad4 <HAL_SD_GetCardState>
 8011c72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2201      	movs	r2, #1
 8011c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2b06      	cmp	r3, #6
 8011c86:	d002      	beq.n	8011c8e <SD_DMATxAbort+0x3a>
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2b05      	cmp	r3, #5
 8011c8c:	d10a      	bne.n	8011ca4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f001 f950 	bl	8012f38 <SDMMC_CmdStopTransfer>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c9e:	431a      	orrs	r2, r3
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d103      	bne.n	8011cb4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f003 f897 	bl	8014de0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011cb2:	e002      	b.n	8011cba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f7ff fd33 	bl	8011720 <HAL_SD_ErrorCallback>
}
 8011cba:	bf00      	nop
 8011cbc:	3710      	adds	r7, #16
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b084      	sub	sp, #16
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8011cd8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f7ff fefa 	bl	8011ad4 <HAL_SD_GetCardState>
 8011ce0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2200      	movs	r2, #0
 8011cee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2b06      	cmp	r3, #6
 8011cf4:	d002      	beq.n	8011cfc <SD_DMARxAbort+0x3a>
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	2b05      	cmp	r3, #5
 8011cfa:	d10a      	bne.n	8011d12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4618      	mov	r0, r3
 8011d02:	f001 f919 	bl	8012f38 <SDMMC_CmdStopTransfer>
 8011d06:	4602      	mov	r2, r0
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d0c:	431a      	orrs	r2, r3
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d103      	bne.n	8011d22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f003 f860 	bl	8014de0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011d20:	e002      	b.n	8011d28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8011d22:	68f8      	ldr	r0, [r7, #12]
 8011d24:	f7ff fcfc 	bl	8011720 <HAL_SD_ErrorCallback>
}
 8011d28:	bf00      	nop
 8011d2a:	3710      	adds	r7, #16
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011d30:	b5b0      	push	{r4, r5, r7, lr}
 8011d32:	b094      	sub	sp, #80	; 0x50
 8011d34:	af04      	add	r7, sp, #16
 8011d36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 ffca 	bl	8012cda <SDIO_GetPowerState>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d102      	bne.n	8011d52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011d50:	e0b7      	b.n	8011ec2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d56:	2b03      	cmp	r3, #3
 8011d58:	d02f      	beq.n	8011dba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f001 f9b1 	bl	80130c6 <SDMMC_CmdSendCID>
 8011d64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d001      	beq.n	8011d70 <SD_InitCard+0x40>
    {
      return errorstate;
 8011d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d6e:	e0a8      	b.n	8011ec2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2100      	movs	r1, #0
 8011d76:	4618      	mov	r0, r3
 8011d78:	f000 fff4 	bl	8012d64 <SDIO_GetResponse>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2104      	movs	r1, #4
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 ffeb 	bl	8012d64 <SDIO_GetResponse>
 8011d8e:	4602      	mov	r2, r0
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2108      	movs	r1, #8
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 ffe2 	bl	8012d64 <SDIO_GetResponse>
 8011da0:	4602      	mov	r2, r0
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	210c      	movs	r1, #12
 8011dac:	4618      	mov	r0, r3
 8011dae:	f000 ffd9 	bl	8012d64 <SDIO_GetResponse>
 8011db2:	4602      	mov	r2, r0
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d00d      	beq.n	8011dde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f107 020e 	add.w	r2, r7, #14
 8011dca:	4611      	mov	r1, r2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f001 f9b7 	bl	8013140 <SDMMC_CmdSetRelAdd>
 8011dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d001      	beq.n	8011dde <SD_InitCard+0xae>
    {
      return errorstate;
 8011dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ddc:	e071      	b.n	8011ec2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d036      	beq.n	8011e54 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8011de6:	89fb      	ldrh	r3, [r7, #14]
 8011de8:	461a      	mov	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011df6:	041b      	lsls	r3, r3, #16
 8011df8:	4619      	mov	r1, r3
 8011dfa:	4610      	mov	r0, r2
 8011dfc:	f001 f981 	bl	8013102 <SDMMC_CmdSendCSD>
 8011e00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d001      	beq.n	8011e0c <SD_InitCard+0xdc>
    {
      return errorstate;
 8011e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e0a:	e05a      	b.n	8011ec2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2100      	movs	r1, #0
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 ffa6 	bl	8012d64 <SDIO_GetResponse>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2104      	movs	r1, #4
 8011e24:	4618      	mov	r0, r3
 8011e26:	f000 ff9d 	bl	8012d64 <SDIO_GetResponse>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2108      	movs	r1, #8
 8011e36:	4618      	mov	r0, r3
 8011e38:	f000 ff94 	bl	8012d64 <SDIO_GetResponse>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	210c      	movs	r1, #12
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 ff8b 	bl	8012d64 <SDIO_GetResponse>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	2104      	movs	r1, #4
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f000 ff82 	bl	8012d64 <SDIO_GetResponse>
 8011e60:	4603      	mov	r3, r0
 8011e62:	0d1a      	lsrs	r2, r3, #20
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011e68:	f107 0310 	add.w	r3, r7, #16
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff fc60 	bl	8011734 <HAL_SD_GetCardCSD>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d002      	beq.n	8011e80 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011e7e:	e020      	b.n	8011ec2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6819      	ldr	r1, [r3, #0]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e88:	041b      	lsls	r3, r3, #16
 8011e8a:	f04f 0400 	mov.w	r4, #0
 8011e8e:	461a      	mov	r2, r3
 8011e90:	4623      	mov	r3, r4
 8011e92:	4608      	mov	r0, r1
 8011e94:	f001 f872 	bl	8012f7c <SDMMC_CmdSelDesel>
 8011e98:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8011e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <SD_InitCard+0x174>
  {
    return errorstate;
 8011ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea2:	e00e      	b.n	8011ec2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681d      	ldr	r5, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	466c      	mov	r4, sp
 8011eac:	f103 0210 	add.w	r2, r3, #16
 8011eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8011eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eba:	4628      	mov	r0, r5
 8011ebc:	f000 fea7 	bl	8012c0e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8011ec0:	2300      	movs	r3, #0
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3740      	adds	r7, #64	; 0x40
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011ecc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b086      	sub	sp, #24
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	617b      	str	r3, [r7, #20]
 8011edc:	2300      	movs	r3, #0
 8011ede:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f001 f86c 	bl	8012fc2 <SDMMC_CmdGoIdleState>
 8011eea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	e072      	b.n	8011fdc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f001 f87f 	bl	8012ffe <SDMMC_CmdOperCond>
 8011f00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00d      	beq.n	8011f24 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4618      	mov	r0, r3
 8011f14:	f001 f855 	bl	8012fc2 <SDMMC_CmdGoIdleState>
 8011f18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d004      	beq.n	8011f2a <SD_PowerON+0x5e>
    {
      return errorstate;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	e05b      	b.n	8011fdc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2201      	movs	r2, #1
 8011f28:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d137      	bne.n	8011fa2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2100      	movs	r1, #0
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f001 f87f 	bl	801303c <SDMMC_CmdAppCommand>
 8011f3e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d02d      	beq.n	8011fa2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011f46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011f4a:	e047      	b.n	8011fdc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2100      	movs	r1, #0
 8011f52:	4618      	mov	r0, r3
 8011f54:	f001 f872 	bl	801303c <SDMMC_CmdAppCommand>
 8011f58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <SD_PowerON+0x98>
    {
      return errorstate;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	e03b      	b.n	8011fdc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	491e      	ldr	r1, [pc, #120]	; (8011fe4 <SD_PowerON+0x118>)
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f001 f888 	bl	8013080 <SDMMC_CmdAppOperCommand>
 8011f70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d002      	beq.n	8011f7e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011f7c:	e02e      	b.n	8011fdc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2100      	movs	r1, #0
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 feed 	bl	8012d64 <SDIO_GetResponse>
 8011f8a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	0fdb      	lsrs	r3, r3, #31
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d101      	bne.n	8011f98 <SD_PowerON+0xcc>
 8011f94:	2301      	movs	r3, #1
 8011f96:	e000      	b.n	8011f9a <SD_PowerON+0xce>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	613b      	str	r3, [r7, #16]

    count++;
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	3301      	adds	r3, #1
 8011fa0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d802      	bhi.n	8011fb2 <SD_PowerON+0xe6>
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d0cc      	beq.n	8011f4c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d902      	bls.n	8011fc2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011fc0:	e00c      	b.n	8011fdc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d003      	beq.n	8011fd4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8011fd2:	e002      	b.n	8011fda <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3718      	adds	r7, #24
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	c1100000 	.word	0xc1100000

08011fe8 <SD_PowerOFF>:
  * @brief  Turns the SDIO output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDIO_PowerState_OFF(hsd->Instance);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f000 fe62 	bl	8012cbe <SDIO_PowerState_OFF>
}
 8011ffa:	bf00      	nop
 8011ffc:	3708      	adds	r7, #8
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b084      	sub	sp, #16
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
 801200a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d102      	bne.n	8012018 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8012012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012016:	e018      	b.n	801204a <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012020:	041b      	lsls	r3, r3, #16
 8012022:	4619      	mov	r1, r3
 8012024:	4610      	mov	r0, r2
 8012026:	f001 f8ac 	bl	8013182 <SDMMC_CmdSendStatus>
 801202a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <SD_SendStatus+0x34>
  {
    return errorstate;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	e009      	b.n	801204a <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2100      	movs	r1, #0
 801203c:	4618      	mov	r0, r3
 801203e:	f000 fe91 	bl	8012d64 <SDIO_GetResponse>
 8012042:	4602      	mov	r2, r0
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8012048:	2300      	movs	r3, #0
}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b086      	sub	sp, #24
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801205e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012064:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d03f      	beq.n	80120ec <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 801206c:	2300      	movs	r3, #0
 801206e:	617b      	str	r3, [r7, #20]
 8012070:	e033      	b.n	80120da <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	4618      	mov	r0, r3
 8012078:	f000 fdf4 	bl	8012c64 <SDIO_ReadFIFO>
 801207c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	b2da      	uxtb	r2, r3
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	701a      	strb	r2, [r3, #0]
      tmp++;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	3301      	adds	r3, #1
 801208a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	3b01      	subs	r3, #1
 8012090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	0a1b      	lsrs	r3, r3, #8
 8012096:	b2da      	uxtb	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	3301      	adds	r3, #1
 80120a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	3b01      	subs	r3, #1
 80120a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	0c1b      	lsrs	r3, r3, #16
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	3301      	adds	r3, #1
 80120b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	3b01      	subs	r3, #1
 80120bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	0e1b      	lsrs	r3, r3, #24
 80120c2:	b2da      	uxtb	r2, r3
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	3301      	adds	r3, #1
 80120cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	3b01      	subs	r3, #1
 80120d2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	3301      	adds	r3, #1
 80120d8:	617b      	str	r3, [r7, #20]
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2b07      	cmp	r3, #7
 80120de:	d9c8      	bls.n	8012072 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	68fa      	ldr	r2, [r7, #12]
 80120e4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	693a      	ldr	r2, [r7, #16]
 80120ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80120ec:	bf00      	nop
 80120ee:	3718      	adds	r7, #24
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6a1b      	ldr	r3, [r3, #32]
 8012100:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012106:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d043      	beq.n	8012196 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801210e:	2300      	movs	r3, #0
 8012110:	617b      	str	r3, [r7, #20]
 8012112:	e037      	b.n	8012184 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	60bb      	str	r3, [r7, #8]
      tmp++;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	3301      	adds	r3, #1
 801211e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	3b01      	subs	r3, #1
 8012124:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	021a      	lsls	r2, r3, #8
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	4313      	orrs	r3, r2
 8012130:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3301      	adds	r3, #1
 8012136:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	3b01      	subs	r3, #1
 801213c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	041a      	lsls	r2, r3, #16
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	4313      	orrs	r3, r2
 8012148:	60bb      	str	r3, [r7, #8]
      tmp++;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	3301      	adds	r3, #1
 801214e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	3b01      	subs	r3, #1
 8012154:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	781b      	ldrb	r3, [r3, #0]
 801215a:	061a      	lsls	r2, r3, #24
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	4313      	orrs	r3, r2
 8012160:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	3301      	adds	r3, #1
 8012166:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	3b01      	subs	r3, #1
 801216c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f107 0208 	add.w	r2, r7, #8
 8012176:	4611      	mov	r1, r2
 8012178:	4618      	mov	r0, r3
 801217a:	f000 fd80 	bl	8012c7e <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	3301      	adds	r3, #1
 8012182:	617b      	str	r3, [r7, #20]
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2b07      	cmp	r3, #7
 8012188:	d9c4      	bls.n	8012114 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	68fa      	ldr	r2, [r7, #12]
 801218e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	693a      	ldr	r2, [r7, #16]
 8012194:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8012196:	bf00      	nop
 8012198:	3718      	adds	r7, #24
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b082      	sub	sp, #8
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d101      	bne.n	80121b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80121ac:	2301      	movs	r3, #1
 80121ae:	e01d      	b.n	80121ec <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d106      	bne.n	80121ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2200      	movs	r2, #0
 80121c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7f9 facb 	bl	800b760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2202      	movs	r2, #2
 80121ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	3304      	adds	r3, #4
 80121da:	4619      	mov	r1, r3
 80121dc:	4610      	mov	r0, r2
 80121de:	f000 fa8d 	bl	80126fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2201      	movs	r2, #1
 80121e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	68da      	ldr	r2, [r3, #12]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f042 0201 	orr.w	r2, r2, #1
 801220a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689b      	ldr	r3, [r3, #8]
 8012212:	f003 0307 	and.w	r3, r3, #7
 8012216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2b06      	cmp	r3, #6
 801221c:	d007      	beq.n	801222e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f042 0201 	orr.w	r2, r2, #1
 801222c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801222e:	2300      	movs	r3, #0
}
 8012230:	4618      	mov	r0, r3
 8012232:	3714      	adds	r7, #20
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr

0801223c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d101      	bne.n	801224e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801224a:	2301      	movs	r3, #1
 801224c:	e01d      	b.n	801228a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012254:	b2db      	uxtb	r3, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	d106      	bne.n	8012268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7f9 fa5a 	bl	800b71c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2202      	movs	r2, #2
 801226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681a      	ldr	r2, [r3, #0]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3304      	adds	r3, #4
 8012278:	4619      	mov	r1, r3
 801227a:	4610      	mov	r0, r2
 801227c:	f000 fa3e 	bl	80126fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2201      	movs	r2, #1
 8012284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
	...

08012294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2201      	movs	r2, #1
 80122a4:	6839      	ldr	r1, [r7, #0]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f000 fc78 	bl	8012b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4a15      	ldr	r2, [pc, #84]	; (8012308 <HAL_TIM_PWM_Start+0x74>)
 80122b2:	4293      	cmp	r3, r2
 80122b4:	d004      	beq.n	80122c0 <HAL_TIM_PWM_Start+0x2c>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4a14      	ldr	r2, [pc, #80]	; (801230c <HAL_TIM_PWM_Start+0x78>)
 80122bc:	4293      	cmp	r3, r2
 80122be:	d101      	bne.n	80122c4 <HAL_TIM_PWM_Start+0x30>
 80122c0:	2301      	movs	r3, #1
 80122c2:	e000      	b.n	80122c6 <HAL_TIM_PWM_Start+0x32>
 80122c4:	2300      	movs	r3, #0
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d007      	beq.n	80122da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80122d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	f003 0307 	and.w	r3, r3, #7
 80122e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2b06      	cmp	r3, #6
 80122ea:	d007      	beq.n	80122fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f042 0201 	orr.w	r2, r2, #1
 80122fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3710      	adds	r7, #16
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	40010000 	.word	0x40010000
 801230c:	40010400 	.word	0x40010400

08012310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	f003 0302 	and.w	r3, r3, #2
 8012322:	2b02      	cmp	r3, #2
 8012324:	d122      	bne.n	801236c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	f003 0302 	and.w	r3, r3, #2
 8012330:	2b02      	cmp	r3, #2
 8012332:	d11b      	bne.n	801236c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f06f 0202 	mvn.w	r2, #2
 801233c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2201      	movs	r2, #1
 8012342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	699b      	ldr	r3, [r3, #24]
 801234a:	f003 0303 	and.w	r3, r3, #3
 801234e:	2b00      	cmp	r3, #0
 8012350:	d003      	beq.n	801235a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f9b4 	bl	80126c0 <HAL_TIM_IC_CaptureCallback>
 8012358:	e005      	b.n	8012366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f9a6 	bl	80126ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 f9b7 	bl	80126d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2200      	movs	r2, #0
 801236a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	691b      	ldr	r3, [r3, #16]
 8012372:	f003 0304 	and.w	r3, r3, #4
 8012376:	2b04      	cmp	r3, #4
 8012378:	d122      	bne.n	80123c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	f003 0304 	and.w	r3, r3, #4
 8012384:	2b04      	cmp	r3, #4
 8012386:	d11b      	bne.n	80123c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	f06f 0204 	mvn.w	r2, #4
 8012390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2202      	movs	r2, #2
 8012396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	699b      	ldr	r3, [r3, #24]
 801239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d003      	beq.n	80123ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f98a 	bl	80126c0 <HAL_TIM_IC_CaptureCallback>
 80123ac:	e005      	b.n	80123ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 f97c 	bl	80126ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 f98d 	bl	80126d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2200      	movs	r2, #0
 80123be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	691b      	ldr	r3, [r3, #16]
 80123c6:	f003 0308 	and.w	r3, r3, #8
 80123ca:	2b08      	cmp	r3, #8
 80123cc:	d122      	bne.n	8012414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	f003 0308 	and.w	r3, r3, #8
 80123d8:	2b08      	cmp	r3, #8
 80123da:	d11b      	bne.n	8012414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f06f 0208 	mvn.w	r2, #8
 80123e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2204      	movs	r2, #4
 80123ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	69db      	ldr	r3, [r3, #28]
 80123f2:	f003 0303 	and.w	r3, r3, #3
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d003      	beq.n	8012402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f960 	bl	80126c0 <HAL_TIM_IC_CaptureCallback>
 8012400:	e005      	b.n	801240e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 f952 	bl	80126ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 f963 	bl	80126d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	f003 0310 	and.w	r3, r3, #16
 801241e:	2b10      	cmp	r3, #16
 8012420:	d122      	bne.n	8012468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	f003 0310 	and.w	r3, r3, #16
 801242c:	2b10      	cmp	r3, #16
 801242e:	d11b      	bne.n	8012468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f06f 0210 	mvn.w	r2, #16
 8012438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2208      	movs	r2, #8
 801243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	69db      	ldr	r3, [r3, #28]
 8012446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801244a:	2b00      	cmp	r3, #0
 801244c:	d003      	beq.n	8012456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f000 f936 	bl	80126c0 <HAL_TIM_IC_CaptureCallback>
 8012454:	e005      	b.n	8012462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f000 f928 	bl	80126ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f939 	bl	80126d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	691b      	ldr	r3, [r3, #16]
 801246e:	f003 0301 	and.w	r3, r3, #1
 8012472:	2b01      	cmp	r3, #1
 8012474:	d10e      	bne.n	8012494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	f003 0301 	and.w	r3, r3, #1
 8012480:	2b01      	cmp	r3, #1
 8012482:	d107      	bne.n	8012494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f06f 0201 	mvn.w	r2, #1
 801248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7f8 fd32 	bl	800aef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801249e:	2b80      	cmp	r3, #128	; 0x80
 80124a0:	d10e      	bne.n	80124c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124ac:	2b80      	cmp	r3, #128	; 0x80
 80124ae:	d107      	bne.n	80124c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80124b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fb9d 	bl	8012bfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124ca:	2b40      	cmp	r3, #64	; 0x40
 80124cc:	d10e      	bne.n	80124ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124d8:	2b40      	cmp	r3, #64	; 0x40
 80124da:	d107      	bne.n	80124ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80124e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 f8fe 	bl	80126e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	691b      	ldr	r3, [r3, #16]
 80124f2:	f003 0320 	and.w	r3, r3, #32
 80124f6:	2b20      	cmp	r3, #32
 80124f8:	d10e      	bne.n	8012518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	f003 0320 	and.w	r3, r3, #32
 8012504:	2b20      	cmp	r3, #32
 8012506:	d107      	bne.n	8012518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f06f 0220 	mvn.w	r2, #32
 8012510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 fb67 	bl	8012be6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b084      	sub	sp, #16
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012532:	2b01      	cmp	r3, #1
 8012534:	d101      	bne.n	801253a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8012536:	2302      	movs	r3, #2
 8012538:	e0b4      	b.n	80126a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2201      	movs	r2, #1
 801253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2202      	movs	r2, #2
 8012546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b0c      	cmp	r3, #12
 801254e:	f200 809f 	bhi.w	8012690 <HAL_TIM_PWM_ConfigChannel+0x170>
 8012552:	a201      	add	r2, pc, #4	; (adr r2, 8012558 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8012554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012558:	0801258d 	.word	0x0801258d
 801255c:	08012691 	.word	0x08012691
 8012560:	08012691 	.word	0x08012691
 8012564:	08012691 	.word	0x08012691
 8012568:	080125cd 	.word	0x080125cd
 801256c:	08012691 	.word	0x08012691
 8012570:	08012691 	.word	0x08012691
 8012574:	08012691 	.word	0x08012691
 8012578:	0801260f 	.word	0x0801260f
 801257c:	08012691 	.word	0x08012691
 8012580:	08012691 	.word	0x08012691
 8012584:	08012691 	.word	0x08012691
 8012588:	0801264f 	.word	0x0801264f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	68b9      	ldr	r1, [r7, #8]
 8012592:	4618      	mov	r0, r3
 8012594:	f000 f952 	bl	801283c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	699a      	ldr	r2, [r3, #24]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f042 0208 	orr.w	r2, r2, #8
 80125a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	699a      	ldr	r2, [r3, #24]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	f022 0204 	bic.w	r2, r2, #4
 80125b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	6999      	ldr	r1, [r3, #24]
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	691a      	ldr	r2, [r3, #16]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	430a      	orrs	r2, r1
 80125c8:	619a      	str	r2, [r3, #24]
      break;
 80125ca:	e062      	b.n	8012692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	68b9      	ldr	r1, [r7, #8]
 80125d2:	4618      	mov	r0, r3
 80125d4:	f000 f9a2 	bl	801291c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	699a      	ldr	r2, [r3, #24]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80125e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	699a      	ldr	r2, [r3, #24]
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80125f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	6999      	ldr	r1, [r3, #24]
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	021a      	lsls	r2, r3, #8
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	430a      	orrs	r2, r1
 801260a:	619a      	str	r2, [r3, #24]
      break;
 801260c:	e041      	b.n	8012692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	68b9      	ldr	r1, [r7, #8]
 8012614:	4618      	mov	r0, r3
 8012616:	f000 f9f7 	bl	8012a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	69da      	ldr	r2, [r3, #28]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f042 0208 	orr.w	r2, r2, #8
 8012628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	69da      	ldr	r2, [r3, #28]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f022 0204 	bic.w	r2, r2, #4
 8012638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	69d9      	ldr	r1, [r3, #28]
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	691a      	ldr	r2, [r3, #16]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	430a      	orrs	r2, r1
 801264a:	61da      	str	r2, [r3, #28]
      break;
 801264c:	e021      	b.n	8012692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	68b9      	ldr	r1, [r7, #8]
 8012654:	4618      	mov	r0, r3
 8012656:	f000 fa4b 	bl	8012af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	69da      	ldr	r2, [r3, #28]
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	69da      	ldr	r2, [r3, #28]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	69d9      	ldr	r1, [r3, #28]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	691b      	ldr	r3, [r3, #16]
 8012684:	021a      	lsls	r2, r3, #8
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	430a      	orrs	r2, r1
 801268c:	61da      	str	r2, [r3, #28]
      break;
 801268e:	e000      	b.n	8012692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8012690:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2201      	movs	r2, #1
 8012696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2200      	movs	r2, #0
 801269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80126b4:	bf00      	nop
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80126c8:	bf00      	nop
 80126ca:	370c      	adds	r7, #12
 80126cc:	46bd      	mov	sp, r7
 80126ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d2:	4770      	bx	lr

080126d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80126d4:	b480      	push	{r7}
 80126d6:	b083      	sub	sp, #12
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80126dc:	bf00      	nop
 80126de:	370c      	adds	r7, #12
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b083      	sub	sp, #12
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80126f0:	bf00      	nop
 80126f2:	370c      	adds	r7, #12
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr

080126fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80126fc:	b480      	push	{r7}
 80126fe:	b085      	sub	sp, #20
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4a40      	ldr	r2, [pc, #256]	; (8012810 <TIM_Base_SetConfig+0x114>)
 8012710:	4293      	cmp	r3, r2
 8012712:	d013      	beq.n	801273c <TIM_Base_SetConfig+0x40>
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801271a:	d00f      	beq.n	801273c <TIM_Base_SetConfig+0x40>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	4a3d      	ldr	r2, [pc, #244]	; (8012814 <TIM_Base_SetConfig+0x118>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d00b      	beq.n	801273c <TIM_Base_SetConfig+0x40>
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4a3c      	ldr	r2, [pc, #240]	; (8012818 <TIM_Base_SetConfig+0x11c>)
 8012728:	4293      	cmp	r3, r2
 801272a:	d007      	beq.n	801273c <TIM_Base_SetConfig+0x40>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	4a3b      	ldr	r2, [pc, #236]	; (801281c <TIM_Base_SetConfig+0x120>)
 8012730:	4293      	cmp	r3, r2
 8012732:	d003      	beq.n	801273c <TIM_Base_SetConfig+0x40>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	4a3a      	ldr	r2, [pc, #232]	; (8012820 <TIM_Base_SetConfig+0x124>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d108      	bne.n	801274e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	68fa      	ldr	r2, [r7, #12]
 801274a:	4313      	orrs	r3, r2
 801274c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4a2f      	ldr	r2, [pc, #188]	; (8012810 <TIM_Base_SetConfig+0x114>)
 8012752:	4293      	cmp	r3, r2
 8012754:	d02b      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801275c:	d027      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4a2c      	ldr	r2, [pc, #176]	; (8012814 <TIM_Base_SetConfig+0x118>)
 8012762:	4293      	cmp	r3, r2
 8012764:	d023      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4a2b      	ldr	r2, [pc, #172]	; (8012818 <TIM_Base_SetConfig+0x11c>)
 801276a:	4293      	cmp	r3, r2
 801276c:	d01f      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	4a2a      	ldr	r2, [pc, #168]	; (801281c <TIM_Base_SetConfig+0x120>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d01b      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4a29      	ldr	r2, [pc, #164]	; (8012820 <TIM_Base_SetConfig+0x124>)
 801277a:	4293      	cmp	r3, r2
 801277c:	d017      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4a28      	ldr	r2, [pc, #160]	; (8012824 <TIM_Base_SetConfig+0x128>)
 8012782:	4293      	cmp	r3, r2
 8012784:	d013      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4a27      	ldr	r2, [pc, #156]	; (8012828 <TIM_Base_SetConfig+0x12c>)
 801278a:	4293      	cmp	r3, r2
 801278c:	d00f      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4a26      	ldr	r2, [pc, #152]	; (801282c <TIM_Base_SetConfig+0x130>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d00b      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4a25      	ldr	r2, [pc, #148]	; (8012830 <TIM_Base_SetConfig+0x134>)
 801279a:	4293      	cmp	r3, r2
 801279c:	d007      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	4a24      	ldr	r2, [pc, #144]	; (8012834 <TIM_Base_SetConfig+0x138>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d003      	beq.n	80127ae <TIM_Base_SetConfig+0xb2>
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	4a23      	ldr	r2, [pc, #140]	; (8012838 <TIM_Base_SetConfig+0x13c>)
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d108      	bne.n	80127c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	4313      	orrs	r3, r2
 80127be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	695b      	ldr	r3, [r3, #20]
 80127ca:	4313      	orrs	r3, r2
 80127cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	689a      	ldr	r2, [r3, #8]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4a0a      	ldr	r2, [pc, #40]	; (8012810 <TIM_Base_SetConfig+0x114>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d003      	beq.n	80127f4 <TIM_Base_SetConfig+0xf8>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	4a0c      	ldr	r2, [pc, #48]	; (8012820 <TIM_Base_SetConfig+0x124>)
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d103      	bne.n	80127fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	691a      	ldr	r2, [r3, #16]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	615a      	str	r2, [r3, #20]
}
 8012802:	bf00      	nop
 8012804:	3714      	adds	r7, #20
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	40010000 	.word	0x40010000
 8012814:	40000400 	.word	0x40000400
 8012818:	40000800 	.word	0x40000800
 801281c:	40000c00 	.word	0x40000c00
 8012820:	40010400 	.word	0x40010400
 8012824:	40014000 	.word	0x40014000
 8012828:	40014400 	.word	0x40014400
 801282c:	40014800 	.word	0x40014800
 8012830:	40001800 	.word	0x40001800
 8012834:	40001c00 	.word	0x40001c00
 8012838:	40002000 	.word	0x40002000

0801283c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801283c:	b480      	push	{r7}
 801283e:	b087      	sub	sp, #28
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a1b      	ldr	r3, [r3, #32]
 801284a:	f023 0201 	bic.w	r2, r3, #1
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	699b      	ldr	r3, [r3, #24]
 8012862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801286a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f023 0303 	bic.w	r3, r3, #3
 8012872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	4313      	orrs	r3, r2
 801287c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	f023 0302 	bic.w	r3, r3, #2
 8012884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	697a      	ldr	r2, [r7, #20]
 801288c:	4313      	orrs	r3, r2
 801288e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4a20      	ldr	r2, [pc, #128]	; (8012914 <TIM_OC1_SetConfig+0xd8>)
 8012894:	4293      	cmp	r3, r2
 8012896:	d003      	beq.n	80128a0 <TIM_OC1_SetConfig+0x64>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4a1f      	ldr	r2, [pc, #124]	; (8012918 <TIM_OC1_SetConfig+0xdc>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d10c      	bne.n	80128ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	f023 0308 	bic.w	r3, r3, #8
 80128a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	697a      	ldr	r2, [r7, #20]
 80128ae:	4313      	orrs	r3, r2
 80128b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	f023 0304 	bic.w	r3, r3, #4
 80128b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4a15      	ldr	r2, [pc, #84]	; (8012914 <TIM_OC1_SetConfig+0xd8>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d003      	beq.n	80128ca <TIM_OC1_SetConfig+0x8e>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4a14      	ldr	r2, [pc, #80]	; (8012918 <TIM_OC1_SetConfig+0xdc>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d111      	bne.n	80128ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80128d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	695b      	ldr	r3, [r3, #20]
 80128de:	693a      	ldr	r2, [r7, #16]
 80128e0:	4313      	orrs	r3, r2
 80128e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	699b      	ldr	r3, [r3, #24]
 80128e8:	693a      	ldr	r2, [r7, #16]
 80128ea:	4313      	orrs	r3, r2
 80128ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	68fa      	ldr	r2, [r7, #12]
 80128f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	685a      	ldr	r2, [r3, #4]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	621a      	str	r2, [r3, #32]
}
 8012908:	bf00      	nop
 801290a:	371c      	adds	r7, #28
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	40010000 	.word	0x40010000
 8012918:	40010400 	.word	0x40010400

0801291c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801291c:	b480      	push	{r7}
 801291e:	b087      	sub	sp, #28
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a1b      	ldr	r3, [r3, #32]
 801292a:	f023 0210 	bic.w	r2, r3, #16
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6a1b      	ldr	r3, [r3, #32]
 8012936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801294a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	021b      	lsls	r3, r3, #8
 801295a:	68fa      	ldr	r2, [r7, #12]
 801295c:	4313      	orrs	r3, r2
 801295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	f023 0320 	bic.w	r3, r3, #32
 8012966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	011b      	lsls	r3, r3, #4
 801296e:	697a      	ldr	r2, [r7, #20]
 8012970:	4313      	orrs	r3, r2
 8012972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	4a22      	ldr	r2, [pc, #136]	; (8012a00 <TIM_OC2_SetConfig+0xe4>)
 8012978:	4293      	cmp	r3, r2
 801297a:	d003      	beq.n	8012984 <TIM_OC2_SetConfig+0x68>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	4a21      	ldr	r2, [pc, #132]	; (8012a04 <TIM_OC2_SetConfig+0xe8>)
 8012980:	4293      	cmp	r3, r2
 8012982:	d10d      	bne.n	80129a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801298a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	011b      	lsls	r3, r3, #4
 8012992:	697a      	ldr	r2, [r7, #20]
 8012994:	4313      	orrs	r3, r2
 8012996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801299e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4a17      	ldr	r2, [pc, #92]	; (8012a00 <TIM_OC2_SetConfig+0xe4>)
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d003      	beq.n	80129b0 <TIM_OC2_SetConfig+0x94>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4a16      	ldr	r2, [pc, #88]	; (8012a04 <TIM_OC2_SetConfig+0xe8>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d113      	bne.n	80129d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80129b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80129be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	695b      	ldr	r3, [r3, #20]
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	693a      	ldr	r2, [r7, #16]
 80129c8:	4313      	orrs	r3, r2
 80129ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	699b      	ldr	r3, [r3, #24]
 80129d0:	009b      	lsls	r3, r3, #2
 80129d2:	693a      	ldr	r2, [r7, #16]
 80129d4:	4313      	orrs	r3, r2
 80129d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	685a      	ldr	r2, [r3, #4]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	697a      	ldr	r2, [r7, #20]
 80129f0:	621a      	str	r2, [r3, #32]
}
 80129f2:	bf00      	nop
 80129f4:	371c      	adds	r7, #28
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	40010000 	.word	0x40010000
 8012a04:	40010400 	.word	0x40010400

08012a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b087      	sub	sp, #28
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6a1b      	ldr	r3, [r3, #32]
 8012a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	69db      	ldr	r3, [r3, #28]
 8012a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	f023 0303 	bic.w	r3, r3, #3
 8012a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	68fa      	ldr	r2, [r7, #12]
 8012a46:	4313      	orrs	r3, r2
 8012a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	689b      	ldr	r3, [r3, #8]
 8012a56:	021b      	lsls	r3, r3, #8
 8012a58:	697a      	ldr	r2, [r7, #20]
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	4a21      	ldr	r2, [pc, #132]	; (8012ae8 <TIM_OC3_SetConfig+0xe0>)
 8012a62:	4293      	cmp	r3, r2
 8012a64:	d003      	beq.n	8012a6e <TIM_OC3_SetConfig+0x66>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	4a20      	ldr	r2, [pc, #128]	; (8012aec <TIM_OC3_SetConfig+0xe4>)
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	d10d      	bne.n	8012a8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	021b      	lsls	r3, r3, #8
 8012a7c:	697a      	ldr	r2, [r7, #20]
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4a16      	ldr	r2, [pc, #88]	; (8012ae8 <TIM_OC3_SetConfig+0xe0>)
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	d003      	beq.n	8012a9a <TIM_OC3_SetConfig+0x92>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	4a15      	ldr	r2, [pc, #84]	; (8012aec <TIM_OC3_SetConfig+0xe4>)
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d113      	bne.n	8012ac2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	011b      	lsls	r3, r3, #4
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	699b      	ldr	r3, [r3, #24]
 8012aba:	011b      	lsls	r3, r3, #4
 8012abc:	693a      	ldr	r2, [r7, #16]
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	693a      	ldr	r2, [r7, #16]
 8012ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	68fa      	ldr	r2, [r7, #12]
 8012acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	685a      	ldr	r2, [r3, #4]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	697a      	ldr	r2, [r7, #20]
 8012ada:	621a      	str	r2, [r3, #32]
}
 8012adc:	bf00      	nop
 8012ade:	371c      	adds	r7, #28
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae6:	4770      	bx	lr
 8012ae8:	40010000 	.word	0x40010000
 8012aec:	40010400 	.word	0x40010400

08012af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b087      	sub	sp, #28
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6a1b      	ldr	r3, [r3, #32]
 8012b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	69db      	ldr	r3, [r3, #28]
 8012b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	021b      	lsls	r3, r3, #8
 8012b2e:	68fa      	ldr	r2, [r7, #12]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	031b      	lsls	r3, r3, #12
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	4313      	orrs	r3, r2
 8012b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4a12      	ldr	r2, [pc, #72]	; (8012b94 <TIM_OC4_SetConfig+0xa4>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d003      	beq.n	8012b58 <TIM_OC4_SetConfig+0x68>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	4a11      	ldr	r2, [pc, #68]	; (8012b98 <TIM_OC4_SetConfig+0xa8>)
 8012b54:	4293      	cmp	r3, r2
 8012b56:	d109      	bne.n	8012b6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	695b      	ldr	r3, [r3, #20]
 8012b64:	019b      	lsls	r3, r3, #6
 8012b66:	697a      	ldr	r2, [r7, #20]
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	697a      	ldr	r2, [r7, #20]
 8012b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	685a      	ldr	r2, [r3, #4]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	693a      	ldr	r2, [r7, #16]
 8012b84:	621a      	str	r2, [r3, #32]
}
 8012b86:	bf00      	nop
 8012b88:	371c      	adds	r7, #28
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	40010000 	.word	0x40010000
 8012b98:	40010400 	.word	0x40010400

08012b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b087      	sub	sp, #28
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	f003 031f 	and.w	r3, r3, #31
 8012bae:	2201      	movs	r2, #1
 8012bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8012bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	6a1a      	ldr	r2, [r3, #32]
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	43db      	mvns	r3, r3
 8012bbe:	401a      	ands	r2, r3
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	6a1a      	ldr	r2, [r3, #32]
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	f003 031f 	and.w	r3, r3, #31
 8012bce:	6879      	ldr	r1, [r7, #4]
 8012bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bd4:	431a      	orrs	r2, r3
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	621a      	str	r2, [r3, #32]
}
 8012bda:	bf00      	nop
 8012bdc:	371c      	adds	r7, #28
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr

08012be6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012be6:	b480      	push	{r7}
 8012be8:	b083      	sub	sp, #12
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012bee:	bf00      	nop
 8012bf0:	370c      	adds	r7, #12
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr

08012bfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012bfa:	b480      	push	{r7}
 8012bfc:	b083      	sub	sp, #12
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012c02:	bf00      	nop
 8012c04:	370c      	adds	r7, #12
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012c0e:	b084      	sub	sp, #16
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
 8012c18:	f107 001c 	add.w	r0, r7, #28
 8012c1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012c20:	2300      	movs	r3, #0
 8012c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012c24:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012c26:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012c28:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012c2c:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012c30:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012c34:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012c38:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8012c48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012c4c:	68fa      	ldr	r2, [r7, #12]
 8012c4e:	431a      	orrs	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012c54:	2300      	movs	r3, #0
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3714      	adds	r7, #20
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	b004      	add	sp, #16
 8012c62:	4770      	bx	lr

08012c64 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	370c      	adds	r7, #12
 8012c76:	46bd      	mov	sp, r7
 8012c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7c:	4770      	bx	lr

08012c7e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012c7e:	b480      	push	{r7}
 8012c80:	b083      	sub	sp, #12
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
 8012c86:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012c92:	2300      	movs	r3, #0
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2203      	movs	r2, #3
 8012cac:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012cae:	2002      	movs	r0, #2
 8012cb0:	f7f8 ffac 	bl	800bc0c <HAL_Delay>
  
  return HAL_OK;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <SDIO_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_OFF(SDIO_TypeDef *SDIOx)
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b083      	sub	sp, #12
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDIOx->POWER = (uint32_t)0x00000000;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8012ccc:	2300      	movs	r3, #0
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	370c      	adds	r7, #12
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr

08012cda <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012cda:	b480      	push	{r7}
 8012cdc:	b083      	sub	sp, #12
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f003 0303 	and.w	r3, r3, #3
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012cf6:	b480      	push	{r7}
 8012cf8:	b085      	sub	sp, #20
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d14:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012d1a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012d20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	4313      	orrs	r3, r2
 8012d26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012d30:	f023 030f 	bic.w	r3, r3, #15
 8012d34:	68fa      	ldr	r2, [r7, #12]
 8012d36:	431a      	orrs	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3714      	adds	r7, #20
 8012d42:	46bd      	mov	sp, r7
 8012d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d48:	4770      	bx	lr

08012d4a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8012d4a:	b480      	push	{r7}
 8012d4c:	b083      	sub	sp, #12
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	691b      	ldr	r3, [r3, #16]
 8012d56:	b2db      	uxtb	r3, r3
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	3314      	adds	r3, #20
 8012d72:	461a      	mov	r2, r3
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	4413      	add	r3, r2
 8012d78:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
}  
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3714      	adds	r7, #20
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr

08012d8a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012d8a:	b480      	push	{r7}
 8012d8c:	b085      	sub	sp, #20
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
 8012d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d94:	2300      	movs	r3, #0
 8012d96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	685a      	ldr	r2, [r3, #4]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012db0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012db6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012dbc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	431a      	orrs	r2, r3
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012dd4:	2300      	movs	r3, #0

}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3714      	adds	r7, #20
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b088      	sub	sp, #32
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	6078      	str	r0, [r7, #4]
 8012dea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012df0:	2310      	movs	r3, #16
 8012df2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012df4:	2340      	movs	r3, #64	; 0x40
 8012df6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012e02:	f107 0308 	add.w	r3, r7, #8
 8012e06:	4619      	mov	r1, r3
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f7ff ff74 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e12:	2110      	movs	r1, #16
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 f9ff 	bl	8013218 <SDMMC_GetCmdResp1>
 8012e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e1c:	69fb      	ldr	r3, [r7, #28]
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	3720      	adds	r7, #32
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd80      	pop	{r7, pc}

08012e26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012e26:	b580      	push	{r7, lr}
 8012e28:	b088      	sub	sp, #32
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
 8012e2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012e34:	2311      	movs	r3, #17
 8012e36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012e38:	2340      	movs	r3, #64	; 0x40
 8012e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012e46:	f107 0308 	add.w	r3, r7, #8
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff ff52 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e56:	2111      	movs	r1, #17
 8012e58:	6878      	ldr	r0, [r7, #4]
 8012e5a:	f000 f9dd 	bl	8013218 <SDMMC_GetCmdResp1>
 8012e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e60:	69fb      	ldr	r3, [r7, #28]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3720      	adds	r7, #32
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012e6a:	b580      	push	{r7, lr}
 8012e6c:	b088      	sub	sp, #32
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
 8012e72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012e78:	2312      	movs	r3, #18
 8012e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012e7c:	2340      	movs	r3, #64	; 0x40
 8012e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012e80:	2300      	movs	r3, #0
 8012e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012e8a:	f107 0308 	add.w	r3, r7, #8
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff ff30 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e9a:	2112      	movs	r1, #18
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 f9bb 	bl	8013218 <SDMMC_GetCmdResp1>
 8012ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ea4:	69fb      	ldr	r3, [r7, #28]
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3720      	adds	r7, #32
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	bd80      	pop	{r7, pc}

08012eae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	b088      	sub	sp, #32
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
 8012eb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012ebc:	2318      	movs	r3, #24
 8012ebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012ec0:	2340      	movs	r3, #64	; 0x40
 8012ec2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ecc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012ece:	f107 0308 	add.w	r3, r7, #8
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff ff0e 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ede:	2118      	movs	r1, #24
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f000 f999 	bl	8013218 <SDMMC_GetCmdResp1>
 8012ee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ee8:	69fb      	ldr	r3, [r7, #28]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3720      	adds	r7, #32
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}

08012ef2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012ef2:	b580      	push	{r7, lr}
 8012ef4:	b088      	sub	sp, #32
 8012ef6:	af00      	add	r7, sp, #0
 8012ef8:	6078      	str	r0, [r7, #4]
 8012efa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012f00:	2319      	movs	r3, #25
 8012f02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f04:	2340      	movs	r3, #64	; 0x40
 8012f06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f12:	f107 0308 	add.w	r3, r7, #8
 8012f16:	4619      	mov	r1, r3
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff feec 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f22:	2119      	movs	r1, #25
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f977 	bl	8013218 <SDMMC_GetCmdResp1>
 8012f2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f2c:	69fb      	ldr	r3, [r7, #28]
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3720      	adds	r7, #32
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
	...

08012f38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012f40:	2300      	movs	r3, #0
 8012f42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012f44:	230c      	movs	r3, #12
 8012f46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f48:	2340      	movs	r3, #64	; 0x40
 8012f4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f56:	f107 0308 	add.w	r3, r7, #8
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff feca 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8012f62:	4a05      	ldr	r2, [pc, #20]	; (8012f78 <SDMMC_CmdStopTransfer+0x40>)
 8012f64:	210c      	movs	r1, #12
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 f956 	bl	8013218 <SDMMC_GetCmdResp1>
 8012f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f6e:	69fb      	ldr	r3, [r7, #28]
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3720      	adds	r7, #32
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	05f5e100 	.word	0x05f5e100

08012f7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b08a      	sub	sp, #40	; 0x28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012f8c:	2307      	movs	r3, #7
 8012f8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f90:	2340      	movs	r3, #64	; 0x40
 8012f92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f94:	2300      	movs	r3, #0
 8012f96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f9e:	f107 0310 	add.w	r3, r7, #16
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f7ff fea6 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8012faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fae:	2107      	movs	r1, #7
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f000 f931 	bl	8013218 <SDMMC_GetCmdResp1>
 8012fb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3728      	adds	r7, #40	; 0x28
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b088      	sub	sp, #32
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012fe0:	f107 0308 	add.w	r3, r7, #8
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f7ff fe85 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f000 f8eb 	bl	80131c8 <SDMMC_GetCmdError>
 8012ff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ff4:	69fb      	ldr	r3, [r7, #28]
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3720      	adds	r7, #32
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b088      	sub	sp, #32
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013006:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801300a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801300c:	2308      	movs	r3, #8
 801300e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013010:	2340      	movs	r3, #64	; 0x40
 8013012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013014:	2300      	movs	r3, #0
 8013016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801301c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801301e:	f107 0308 	add.w	r3, r7, #8
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7ff fe66 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 fad4 	bl	80135d8 <SDMMC_GetCmdResp7>
 8013030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013032:	69fb      	ldr	r3, [r7, #28]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3720      	adds	r7, #32
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}

0801303c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b088      	sub	sp, #32
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801304a:	2337      	movs	r3, #55	; 0x37
 801304c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801304e:	2340      	movs	r3, #64	; 0x40
 8013050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013052:	2300      	movs	r3, #0
 8013054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801305a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801305c:	f107 0308 	add.w	r3, r7, #8
 8013060:	4619      	mov	r1, r3
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f7ff fe47 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8013068:	f241 3288 	movw	r2, #5000	; 0x1388
 801306c:	2137      	movs	r1, #55	; 0x37
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 f8d2 	bl	8013218 <SDMMC_GetCmdResp1>
 8013074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013076:	69fb      	ldr	r3, [r7, #28]
}
 8013078:	4618      	mov	r0, r3
 801307a:	3720      	adds	r7, #32
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b088      	sub	sp, #32
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8013090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013096:	2329      	movs	r3, #41	; 0x29
 8013098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801309a:	2340      	movs	r3, #64	; 0x40
 801309c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801309e:	2300      	movs	r3, #0
 80130a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130a8:	f107 0308 	add.w	r3, r7, #8
 80130ac:	4619      	mov	r1, r3
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff fe21 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 f9e1 	bl	801347c <SDMMC_GetCmdResp3>
 80130ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130bc:	69fb      	ldr	r3, [r7, #28]
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3720      	adds	r7, #32
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}

080130c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80130c6:	b580      	push	{r7, lr}
 80130c8:	b088      	sub	sp, #32
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80130ce:	2300      	movs	r3, #0
 80130d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80130d2:	2302      	movs	r3, #2
 80130d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80130d6:	23c0      	movs	r3, #192	; 0xc0
 80130d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80130da:	2300      	movs	r3, #0
 80130dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130e4:	f107 0308 	add.w	r3, r7, #8
 80130e8:	4619      	mov	r1, r3
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7ff fe03 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 f97d 	bl	80133f0 <SDMMC_GetCmdResp2>
 80130f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130f8:	69fb      	ldr	r3, [r7, #28]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3720      	adds	r7, #32
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013102:	b580      	push	{r7, lr}
 8013104:	b088      	sub	sp, #32
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
 801310a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013110:	2309      	movs	r3, #9
 8013112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8013114:	23c0      	movs	r3, #192	; 0xc0
 8013116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013118:	2300      	movs	r3, #0
 801311a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801311c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013122:	f107 0308 	add.w	r3, r7, #8
 8013126:	4619      	mov	r1, r3
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff fde4 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 f95e 	bl	80133f0 <SDMMC_GetCmdResp2>
 8013134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013136:	69fb      	ldr	r3, [r7, #28]
}
 8013138:	4618      	mov	r0, r3
 801313a:	3720      	adds	r7, #32
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b088      	sub	sp, #32
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801314a:	2300      	movs	r3, #0
 801314c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801314e:	2303      	movs	r3, #3
 8013150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013152:	2340      	movs	r3, #64	; 0x40
 8013154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013156:	2300      	movs	r3, #0
 8013158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801315a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801315e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013160:	f107 0308 	add.w	r3, r7, #8
 8013164:	4619      	mov	r1, r3
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f7ff fdc5 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801316c:	683a      	ldr	r2, [r7, #0]
 801316e:	2103      	movs	r1, #3
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 f9bd 	bl	80134f0 <SDMMC_GetCmdResp6>
 8013176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013178:	69fb      	ldr	r3, [r7, #28]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3720      	adds	r7, #32
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}

08013182 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013182:	b580      	push	{r7, lr}
 8013184:	b088      	sub	sp, #32
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
 801318a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013190:	230d      	movs	r3, #13
 8013192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013194:	2340      	movs	r3, #64	; 0x40
 8013196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013198:	2300      	movs	r3, #0
 801319a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131a2:	f107 0308 	add.w	r3, r7, #8
 80131a6:	4619      	mov	r1, r3
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7ff fda4 	bl	8012cf6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80131ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80131b2:	210d      	movs	r1, #13
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f82f 	bl	8013218 <SDMMC_GetCmdResp1>
 80131ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131bc:	69fb      	ldr	r3, [r7, #28]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3720      	adds	r7, #32
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
	...

080131c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80131c8:	b490      	push	{r4, r7}
 80131ca:	b082      	sub	sp, #8
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131d0:	4b0f      	ldr	r3, [pc, #60]	; (8013210 <SDMMC_GetCmdError+0x48>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4a0f      	ldr	r2, [pc, #60]	; (8013214 <SDMMC_GetCmdError+0x4c>)
 80131d6:	fba2 2303 	umull	r2, r3, r2, r3
 80131da:	0a5b      	lsrs	r3, r3, #9
 80131dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80131e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80131e4:	4623      	mov	r3, r4
 80131e6:	1e5c      	subs	r4, r3, #1
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d102      	bne.n	80131f2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131f0:	e009      	b.n	8013206 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d0f2      	beq.n	80131e4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	22c5      	movs	r2, #197	; 0xc5
 8013202:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bc90      	pop	{r4, r7}
 801320e:	4770      	bx	lr
 8013210:	20000040 	.word	0x20000040
 8013214:	10624dd3 	.word	0x10624dd3

08013218 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013218:	b590      	push	{r4, r7, lr}
 801321a:	b087      	sub	sp, #28
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	460b      	mov	r3, r1
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013226:	4b6f      	ldr	r3, [pc, #444]	; (80133e4 <SDMMC_GetCmdResp1+0x1cc>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4a6f      	ldr	r2, [pc, #444]	; (80133e8 <SDMMC_GetCmdResp1+0x1d0>)
 801322c:	fba2 2303 	umull	r2, r3, r2, r3
 8013230:	0a5b      	lsrs	r3, r3, #9
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8013238:	4623      	mov	r3, r4
 801323a:	1e5c      	subs	r4, r3, #1
 801323c:	2b00      	cmp	r3, #0
 801323e:	d102      	bne.n	8013246 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013244:	e0c9      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801324a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013252:	2b00      	cmp	r3, #0
 8013254:	d0f0      	beq.n	8013238 <SDMMC_GetCmdResp1+0x20>
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1eb      	bne.n	8013238 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013264:	f003 0304 	and.w	r3, r3, #4
 8013268:	2b00      	cmp	r3, #0
 801326a:	d004      	beq.n	8013276 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2204      	movs	r2, #4
 8013270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013272:	2304      	movs	r3, #4
 8013274:	e0b1      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801327a:	f003 0301 	and.w	r3, r3, #1
 801327e:	2b00      	cmp	r3, #0
 8013280:	d004      	beq.n	801328c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2201      	movs	r2, #1
 8013286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013288:	2301      	movs	r3, #1
 801328a:	e0a6      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	22c5      	movs	r2, #197	; 0xc5
 8013290:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f7ff fd59 	bl	8012d4a <SDIO_GetCommandResponse>
 8013298:	4603      	mov	r3, r0
 801329a:	461a      	mov	r2, r3
 801329c:	7afb      	ldrb	r3, [r7, #11]
 801329e:	4293      	cmp	r3, r2
 80132a0:	d001      	beq.n	80132a6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132a2:	2301      	movs	r3, #1
 80132a4:	e099      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80132a6:	2100      	movs	r1, #0
 80132a8:	68f8      	ldr	r0, [r7, #12]
 80132aa:	f7ff fd5b 	bl	8012d64 <SDIO_GetResponse>
 80132ae:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	4b4e      	ldr	r3, [pc, #312]	; (80133ec <SDMMC_GetCmdResp1+0x1d4>)
 80132b4:	4013      	ands	r3, r2
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80132ba:	2300      	movs	r3, #0
 80132bc:	e08d      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	da02      	bge.n	80132ca <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80132c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80132c8:	e087      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80132d4:	2340      	movs	r3, #64	; 0x40
 80132d6:	e080      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d001      	beq.n	80132e6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80132e2:	2380      	movs	r3, #128	; 0x80
 80132e4:	e079      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d002      	beq.n	80132f6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80132f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132f4:	e071      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d002      	beq.n	8013306 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8013300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013304:	e069      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801330c:	2b00      	cmp	r3, #0
 801330e:	d002      	beq.n	8013316 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013314:	e061      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801331c:	2b00      	cmp	r3, #0
 801331e:	d002      	beq.n	8013326 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013324:	e059      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801332c:	2b00      	cmp	r3, #0
 801332e:	d002      	beq.n	8013336 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013334:	e051      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801333c:	2b00      	cmp	r3, #0
 801333e:	d002      	beq.n	8013346 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013344:	e049      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801334c:	2b00      	cmp	r3, #0
 801334e:	d002      	beq.n	8013356 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013354:	e041      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801335c:	2b00      	cmp	r3, #0
 801335e:	d002      	beq.n	8013366 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8013360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013364:	e039      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801336c:	2b00      	cmp	r3, #0
 801336e:	d002      	beq.n	8013376 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013374:	e031      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013384:	e029      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013390:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013394:	e021      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801339c:	2b00      	cmp	r3, #0
 801339e:	d002      	beq.n	80133a6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80133a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80133a4:	e019      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80133b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80133b4:	e011      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d002      	beq.n	80133c6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80133c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80133c4:	e009      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	f003 0308 	and.w	r3, r3, #8
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80133d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80133d4:	e001      	b.n	80133da <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80133d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80133da:	4618      	mov	r0, r3
 80133dc:	371c      	adds	r7, #28
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd90      	pop	{r4, r7, pc}
 80133e2:	bf00      	nop
 80133e4:	20000040 	.word	0x20000040
 80133e8:	10624dd3 	.word	0x10624dd3
 80133ec:	fdffe008 	.word	0xfdffe008

080133f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80133f0:	b490      	push	{r4, r7}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133f8:	4b1e      	ldr	r3, [pc, #120]	; (8013474 <SDMMC_GetCmdResp2+0x84>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	4a1e      	ldr	r2, [pc, #120]	; (8013478 <SDMMC_GetCmdResp2+0x88>)
 80133fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013402:	0a5b      	lsrs	r3, r3, #9
 8013404:	f241 3288 	movw	r2, #5000	; 0x1388
 8013408:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801340c:	4623      	mov	r3, r4
 801340e:	1e5c      	subs	r4, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d102      	bne.n	801341a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013418:	e026      	b.n	8013468 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801341e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013426:	2b00      	cmp	r3, #0
 8013428:	d0f0      	beq.n	801340c <SDMMC_GetCmdResp2+0x1c>
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013430:	2b00      	cmp	r3, #0
 8013432:	d1eb      	bne.n	801340c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013438:	f003 0304 	and.w	r3, r3, #4
 801343c:	2b00      	cmp	r3, #0
 801343e:	d004      	beq.n	801344a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2204      	movs	r2, #4
 8013444:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013446:	2304      	movs	r3, #4
 8013448:	e00e      	b.n	8013468 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801344e:	f003 0301 	and.w	r3, r3, #1
 8013452:	2b00      	cmp	r3, #0
 8013454:	d004      	beq.n	8013460 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2201      	movs	r2, #1
 801345a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801345c:	2301      	movs	r3, #1
 801345e:	e003      	b.n	8013468 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	22c5      	movs	r2, #197	; 0xc5
 8013464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013466:	2300      	movs	r3, #0
}
 8013468:	4618      	mov	r0, r3
 801346a:	3710      	adds	r7, #16
 801346c:	46bd      	mov	sp, r7
 801346e:	bc90      	pop	{r4, r7}
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	20000040 	.word	0x20000040
 8013478:	10624dd3 	.word	0x10624dd3

0801347c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801347c:	b490      	push	{r4, r7}
 801347e:	b084      	sub	sp, #16
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013484:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <SDMMC_GetCmdResp3+0x6c>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	4a18      	ldr	r2, [pc, #96]	; (80134ec <SDMMC_GetCmdResp3+0x70>)
 801348a:	fba2 2303 	umull	r2, r3, r2, r3
 801348e:	0a5b      	lsrs	r3, r3, #9
 8013490:	f241 3288 	movw	r2, #5000	; 0x1388
 8013494:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8013498:	4623      	mov	r3, r4
 801349a:	1e5c      	subs	r4, r3, #1
 801349c:	2b00      	cmp	r3, #0
 801349e:	d102      	bne.n	80134a6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134a4:	e01b      	b.n	80134de <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0f0      	beq.n	8013498 <SDMMC_GetCmdResp3+0x1c>
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1eb      	bne.n	8013498 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c4:	f003 0304 	and.w	r3, r3, #4
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d004      	beq.n	80134d6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2204      	movs	r2, #4
 80134d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80134d2:	2304      	movs	r3, #4
 80134d4:	e003      	b.n	80134de <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	22c5      	movs	r2, #197	; 0xc5
 80134da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bc90      	pop	{r4, r7}
 80134e6:	4770      	bx	lr
 80134e8:	20000040 	.word	0x20000040
 80134ec:	10624dd3 	.word	0x10624dd3

080134f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80134f0:	b590      	push	{r4, r7, lr}
 80134f2:	b087      	sub	sp, #28
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	460b      	mov	r3, r1
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80134fe:	4b34      	ldr	r3, [pc, #208]	; (80135d0 <SDMMC_GetCmdResp6+0xe0>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	4a34      	ldr	r2, [pc, #208]	; (80135d4 <SDMMC_GetCmdResp6+0xe4>)
 8013504:	fba2 2303 	umull	r2, r3, r2, r3
 8013508:	0a5b      	lsrs	r3, r3, #9
 801350a:	f241 3288 	movw	r2, #5000	; 0x1388
 801350e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8013512:	4623      	mov	r3, r4
 8013514:	1e5c      	subs	r4, r3, #1
 8013516:	2b00      	cmp	r3, #0
 8013518:	d102      	bne.n	8013520 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801351a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801351e:	e052      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013524:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801352c:	2b00      	cmp	r3, #0
 801352e:	d0f0      	beq.n	8013512 <SDMMC_GetCmdResp6+0x22>
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1eb      	bne.n	8013512 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801353e:	f003 0304 	and.w	r3, r3, #4
 8013542:	2b00      	cmp	r3, #0
 8013544:	d004      	beq.n	8013550 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2204      	movs	r2, #4
 801354a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801354c:	2304      	movs	r3, #4
 801354e:	e03a      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013554:	f003 0301 	and.w	r3, r3, #1
 8013558:	2b00      	cmp	r3, #0
 801355a:	d004      	beq.n	8013566 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2201      	movs	r2, #1
 8013560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013562:	2301      	movs	r3, #1
 8013564:	e02f      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8013566:	68f8      	ldr	r0, [r7, #12]
 8013568:	f7ff fbef 	bl	8012d4a <SDIO_GetCommandResponse>
 801356c:	4603      	mov	r3, r0
 801356e:	461a      	mov	r2, r3
 8013570:	7afb      	ldrb	r3, [r7, #11]
 8013572:	4293      	cmp	r3, r2
 8013574:	d001      	beq.n	801357a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013576:	2301      	movs	r3, #1
 8013578:	e025      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	22c5      	movs	r2, #197	; 0xc5
 801357e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8013580:	2100      	movs	r1, #0
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f7ff fbee 	bl	8012d64 <SDIO_GetResponse>
 8013588:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013590:	2b00      	cmp	r3, #0
 8013592:	d106      	bne.n	80135a2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	0c1b      	lsrs	r3, r3, #16
 8013598:	b29a      	uxth	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801359e:	2300      	movs	r3, #0
 80135a0:	e011      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d002      	beq.n	80135b2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80135ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135b0:	e009      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d002      	beq.n	80135c2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80135bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135c0:	e001      	b.n	80135c6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	371c      	adds	r7, #28
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd90      	pop	{r4, r7, pc}
 80135ce:	bf00      	nop
 80135d0:	20000040 	.word	0x20000040
 80135d4:	10624dd3 	.word	0x10624dd3

080135d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80135d8:	b490      	push	{r4, r7}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80135e0:	4b21      	ldr	r3, [pc, #132]	; (8013668 <SDMMC_GetCmdResp7+0x90>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a21      	ldr	r2, [pc, #132]	; (801366c <SDMMC_GetCmdResp7+0x94>)
 80135e6:	fba2 2303 	umull	r2, r3, r2, r3
 80135ea:	0a5b      	lsrs	r3, r3, #9
 80135ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80135f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80135f4:	4623      	mov	r3, r4
 80135f6:	1e5c      	subs	r4, r3, #1
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013600:	e02c      	b.n	801365c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013606:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801360e:	2b00      	cmp	r3, #0
 8013610:	d0f0      	beq.n	80135f4 <SDMMC_GetCmdResp7+0x1c>
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013618:	2b00      	cmp	r3, #0
 801361a:	d1eb      	bne.n	80135f4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013620:	f003 0304 	and.w	r3, r3, #4
 8013624:	2b00      	cmp	r3, #0
 8013626:	d004      	beq.n	8013632 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2204      	movs	r2, #4
 801362c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801362e:	2304      	movs	r3, #4
 8013630:	e014      	b.n	801365c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013636:	f003 0301 	and.w	r3, r3, #1
 801363a:	2b00      	cmp	r3, #0
 801363c:	d004      	beq.n	8013648 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2201      	movs	r2, #1
 8013642:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013644:	2301      	movs	r3, #1
 8013646:	e009      	b.n	801365c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013650:	2b00      	cmp	r3, #0
 8013652:	d002      	beq.n	801365a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2240      	movs	r2, #64	; 0x40
 8013658:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801365a:	2300      	movs	r3, #0
  
}
 801365c:	4618      	mov	r0, r3
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bc90      	pop	{r4, r7}
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop
 8013668:	20000040 	.word	0x20000040
 801366c:	10624dd3 	.word	0x10624dd3

08013670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013670:	b084      	sub	sp, #16
 8013672:	b580      	push	{r7, lr}
 8013674:	b084      	sub	sp, #16
 8013676:	af00      	add	r7, sp, #0
 8013678:	6078      	str	r0, [r7, #4]
 801367a:	f107 001c 	add.w	r0, r7, #28
 801367e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013684:	2b01      	cmp	r3, #1
 8013686:	d122      	bne.n	80136ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801368c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801369c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	68db      	ldr	r3, [r3, #12]
 80136a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80136b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d105      	bne.n	80136c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f001 fab4 	bl	8014c30 <USB_CoreReset>
 80136c8:	4603      	mov	r3, r0
 80136ca:	73fb      	strb	r3, [r7, #15]
 80136cc:	e01a      	b.n	8013704 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	68db      	ldr	r3, [r3, #12]
 80136d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f001 faa8 	bl	8014c30 <USB_CoreReset>
 80136e0:	4603      	mov	r3, r0
 80136e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80136e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d106      	bne.n	80136f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	639a      	str	r2, [r3, #56]	; 0x38
 80136f6:	e005      	b.n	8013704 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013706:	2b01      	cmp	r3, #1
 8013708:	d10b      	bne.n	8013722 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	f043 0206 	orr.w	r2, r3, #6
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	f043 0220 	orr.w	r2, r3, #32
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013722:	7bfb      	ldrb	r3, [r7, #15]
}
 8013724:	4618      	mov	r0, r3
 8013726:	3710      	adds	r7, #16
 8013728:	46bd      	mov	sp, r7
 801372a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801372e:	b004      	add	sp, #16
 8013730:	4770      	bx	lr
	...

08013734 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013734:	b480      	push	{r7}
 8013736:	b087      	sub	sp, #28
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	4613      	mov	r3, r2
 8013740:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013742:	79fb      	ldrb	r3, [r7, #7]
 8013744:	2b02      	cmp	r3, #2
 8013746:	d165      	bne.n	8013814 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	4a41      	ldr	r2, [pc, #260]	; (8013850 <USB_SetTurnaroundTime+0x11c>)
 801374c:	4293      	cmp	r3, r2
 801374e:	d906      	bls.n	801375e <USB_SetTurnaroundTime+0x2a>
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	4a40      	ldr	r2, [pc, #256]	; (8013854 <USB_SetTurnaroundTime+0x120>)
 8013754:	4293      	cmp	r3, r2
 8013756:	d802      	bhi.n	801375e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013758:	230f      	movs	r3, #15
 801375a:	617b      	str	r3, [r7, #20]
 801375c:	e062      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	4a3c      	ldr	r2, [pc, #240]	; (8013854 <USB_SetTurnaroundTime+0x120>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d906      	bls.n	8013774 <USB_SetTurnaroundTime+0x40>
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	4a3b      	ldr	r2, [pc, #236]	; (8013858 <USB_SetTurnaroundTime+0x124>)
 801376a:	4293      	cmp	r3, r2
 801376c:	d802      	bhi.n	8013774 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801376e:	230e      	movs	r3, #14
 8013770:	617b      	str	r3, [r7, #20]
 8013772:	e057      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	4a38      	ldr	r2, [pc, #224]	; (8013858 <USB_SetTurnaroundTime+0x124>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d906      	bls.n	801378a <USB_SetTurnaroundTime+0x56>
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	4a37      	ldr	r2, [pc, #220]	; (801385c <USB_SetTurnaroundTime+0x128>)
 8013780:	4293      	cmp	r3, r2
 8013782:	d802      	bhi.n	801378a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013784:	230d      	movs	r3, #13
 8013786:	617b      	str	r3, [r7, #20]
 8013788:	e04c      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	4a33      	ldr	r2, [pc, #204]	; (801385c <USB_SetTurnaroundTime+0x128>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d906      	bls.n	80137a0 <USB_SetTurnaroundTime+0x6c>
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	4a32      	ldr	r2, [pc, #200]	; (8013860 <USB_SetTurnaroundTime+0x12c>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d802      	bhi.n	80137a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801379a:	230c      	movs	r3, #12
 801379c:	617b      	str	r3, [r7, #20]
 801379e:	e041      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	4a2f      	ldr	r2, [pc, #188]	; (8013860 <USB_SetTurnaroundTime+0x12c>)
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d906      	bls.n	80137b6 <USB_SetTurnaroundTime+0x82>
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	4a2e      	ldr	r2, [pc, #184]	; (8013864 <USB_SetTurnaroundTime+0x130>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d802      	bhi.n	80137b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80137b0:	230b      	movs	r3, #11
 80137b2:	617b      	str	r3, [r7, #20]
 80137b4:	e036      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	4a2a      	ldr	r2, [pc, #168]	; (8013864 <USB_SetTurnaroundTime+0x130>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d906      	bls.n	80137cc <USB_SetTurnaroundTime+0x98>
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	4a29      	ldr	r2, [pc, #164]	; (8013868 <USB_SetTurnaroundTime+0x134>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d802      	bhi.n	80137cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80137c6:	230a      	movs	r3, #10
 80137c8:	617b      	str	r3, [r7, #20]
 80137ca:	e02b      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	4a26      	ldr	r2, [pc, #152]	; (8013868 <USB_SetTurnaroundTime+0x134>)
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d906      	bls.n	80137e2 <USB_SetTurnaroundTime+0xae>
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	4a25      	ldr	r2, [pc, #148]	; (801386c <USB_SetTurnaroundTime+0x138>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d802      	bhi.n	80137e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80137dc:	2309      	movs	r3, #9
 80137de:	617b      	str	r3, [r7, #20]
 80137e0:	e020      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	4a21      	ldr	r2, [pc, #132]	; (801386c <USB_SetTurnaroundTime+0x138>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d906      	bls.n	80137f8 <USB_SetTurnaroundTime+0xc4>
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	4a20      	ldr	r2, [pc, #128]	; (8013870 <USB_SetTurnaroundTime+0x13c>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d802      	bhi.n	80137f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80137f2:	2308      	movs	r3, #8
 80137f4:	617b      	str	r3, [r7, #20]
 80137f6:	e015      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	4a1d      	ldr	r2, [pc, #116]	; (8013870 <USB_SetTurnaroundTime+0x13c>)
 80137fc:	4293      	cmp	r3, r2
 80137fe:	d906      	bls.n	801380e <USB_SetTurnaroundTime+0xda>
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	4a1c      	ldr	r2, [pc, #112]	; (8013874 <USB_SetTurnaroundTime+0x140>)
 8013804:	4293      	cmp	r3, r2
 8013806:	d802      	bhi.n	801380e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013808:	2307      	movs	r3, #7
 801380a:	617b      	str	r3, [r7, #20]
 801380c:	e00a      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801380e:	2306      	movs	r3, #6
 8013810:	617b      	str	r3, [r7, #20]
 8013812:	e007      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013814:	79fb      	ldrb	r3, [r7, #7]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d102      	bne.n	8013820 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801381a:	2309      	movs	r3, #9
 801381c:	617b      	str	r3, [r7, #20]
 801381e:	e001      	b.n	8013824 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013820:	2309      	movs	r3, #9
 8013822:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	68da      	ldr	r2, [r3, #12]
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	029b      	lsls	r3, r3, #10
 8013838:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801383c:	431a      	orrs	r2, r3
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	371c      	adds	r7, #28
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr
 8013850:	00d8acbf 	.word	0x00d8acbf
 8013854:	00e4e1bf 	.word	0x00e4e1bf
 8013858:	00f423ff 	.word	0x00f423ff
 801385c:	0106737f 	.word	0x0106737f
 8013860:	011a499f 	.word	0x011a499f
 8013864:	01312cff 	.word	0x01312cff
 8013868:	014ca43f 	.word	0x014ca43f
 801386c:	016e35ff 	.word	0x016e35ff
 8013870:	01a6ab1f 	.word	0x01a6ab1f
 8013874:	01e847ff 	.word	0x01e847ff

08013878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013878:	b480      	push	{r7}
 801387a:	b083      	sub	sp, #12
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	689b      	ldr	r3, [r3, #8]
 8013884:	f043 0201 	orr.w	r2, r3, #1
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801388c:	2300      	movs	r3, #0
}
 801388e:	4618      	mov	r0, r3
 8013890:	370c      	adds	r7, #12
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr

0801389a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801389a:	b480      	push	{r7}
 801389c:	b083      	sub	sp, #12
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	689b      	ldr	r3, [r3, #8]
 80138a6:	f023 0201 	bic.w	r2, r3, #1
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	370c      	adds	r7, #12
 80138b4:	46bd      	mov	sp, r7
 80138b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ba:	4770      	bx	lr

080138bc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	460b      	mov	r3, r1
 80138c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80138d4:	78fb      	ldrb	r3, [r7, #3]
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d106      	bne.n	80138e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	60da      	str	r2, [r3, #12]
 80138e6:	e00b      	b.n	8013900 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80138e8:	78fb      	ldrb	r3, [r7, #3]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	60da      	str	r2, [r3, #12]
 80138fa:	e001      	b.n	8013900 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80138fc:	2301      	movs	r3, #1
 80138fe:	e003      	b.n	8013908 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013900:	2032      	movs	r0, #50	; 0x32
 8013902:	f7f8 f983 	bl	800bc0c <HAL_Delay>

  return HAL_OK;
 8013906:	2300      	movs	r3, #0
}
 8013908:	4618      	mov	r0, r3
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013910:	b084      	sub	sp, #16
 8013912:	b580      	push	{r7, lr}
 8013914:	b086      	sub	sp, #24
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
 801391a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801391e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013922:	2300      	movs	r3, #0
 8013924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801392a:	2300      	movs	r3, #0
 801392c:	613b      	str	r3, [r7, #16]
 801392e:	e009      	b.n	8013944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	3340      	adds	r3, #64	; 0x40
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4413      	add	r3, r2
 801393a:	2200      	movs	r2, #0
 801393c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	3301      	adds	r3, #1
 8013942:	613b      	str	r3, [r7, #16]
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	2b0e      	cmp	r3, #14
 8013948:	d9f2      	bls.n	8013930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801394a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d11c      	bne.n	801398a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	68fa      	ldr	r2, [r7, #12]
 801395a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801395e:	f043 0302 	orr.w	r3, r3, #2
 8013962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	639a      	str	r2, [r3, #56]	; 0x38
 8013988:	e00b      	b.n	80139a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801398e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801399a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80139a8:	461a      	mov	r2, r3
 80139aa:	2300      	movs	r3, #0
 80139ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139b4:	4619      	mov	r1, r3
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139bc:	461a      	mov	r2, r3
 80139be:	680b      	ldr	r3, [r1, #0]
 80139c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80139c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d10c      	bne.n	80139e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80139c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d104      	bne.n	80139d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80139ce:	2100      	movs	r1, #0
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f000 f949 	bl	8013c68 <USB_SetDevSpeed>
 80139d6:	e008      	b.n	80139ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80139d8:	2101      	movs	r1, #1
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 f944 	bl	8013c68 <USB_SetDevSpeed>
 80139e0:	e003      	b.n	80139ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80139e2:	2103      	movs	r1, #3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 f93f 	bl	8013c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80139ea:	2110      	movs	r1, #16
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f8f3 	bl	8013bd8 <USB_FlushTxFifo>
 80139f2:	4603      	mov	r3, r0
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80139f8:	2301      	movs	r3, #1
 80139fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f000 f911 	bl	8013c24 <USB_FlushRxFifo>
 8013a02:	4603      	mov	r3, r0
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d001      	beq.n	8013a0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a12:	461a      	mov	r2, r3
 8013a14:	2300      	movs	r3, #0
 8013a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a1e:	461a      	mov	r2, r3
 8013a20:	2300      	movs	r3, #0
 8013a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a30:	2300      	movs	r3, #0
 8013a32:	613b      	str	r3, [r7, #16]
 8013a34:	e043      	b.n	8013abe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	015a      	lsls	r2, r3, #5
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a4c:	d118      	bne.n	8013a80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	015a      	lsls	r2, r3, #5
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a60:	461a      	mov	r2, r3
 8013a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013a66:	6013      	str	r3, [r2, #0]
 8013a68:	e013      	b.n	8013a92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	015a      	lsls	r2, r3, #5
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	4413      	add	r3, r2
 8013a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a76:	461a      	mov	r2, r3
 8013a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013a7c:	6013      	str	r3, [r2, #0]
 8013a7e:	e008      	b.n	8013a92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	015a      	lsls	r2, r3, #5
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	4413      	add	r3, r2
 8013a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	2300      	movs	r3, #0
 8013a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	015a      	lsls	r2, r3, #5
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	4413      	add	r3, r2
 8013a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	015a      	lsls	r2, r3, #5
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	4413      	add	r3, r2
 8013aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	3301      	adds	r3, #1
 8013abc:	613b      	str	r3, [r7, #16]
 8013abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac0:	693a      	ldr	r2, [r7, #16]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d3b7      	bcc.n	8013a36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	613b      	str	r3, [r7, #16]
 8013aca:	e043      	b.n	8013b54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	015a      	lsls	r2, r3, #5
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ae2:	d118      	bne.n	8013b16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10a      	bne.n	8013b00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	015a      	lsls	r2, r3, #5
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	4413      	add	r3, r2
 8013af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af6:	461a      	mov	r2, r3
 8013af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013afc:	6013      	str	r3, [r2, #0]
 8013afe:	e013      	b.n	8013b28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	015a      	lsls	r2, r3, #5
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	4413      	add	r3, r2
 8013b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013b12:	6013      	str	r3, [r2, #0]
 8013b14:	e008      	b.n	8013b28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	015a      	lsls	r2, r3, #5
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b22:	461a      	mov	r2, r3
 8013b24:	2300      	movs	r3, #0
 8013b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	015a      	lsls	r2, r3, #5
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	4413      	add	r3, r2
 8013b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b34:	461a      	mov	r2, r3
 8013b36:	2300      	movs	r3, #0
 8013b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	015a      	lsls	r2, r3, #5
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	4413      	add	r3, r2
 8013b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b46:	461a      	mov	r2, r3
 8013b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	3301      	adds	r3, #1
 8013b52:	613b      	str	r3, [r7, #16]
 8013b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b56:	693a      	ldr	r2, [r7, #16]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d3b7      	bcc.n	8013acc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b62:	691b      	ldr	r3, [r3, #16]
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2200      	movs	r2, #0
 8013b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d105      	bne.n	8013b90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	699b      	ldr	r3, [r3, #24]
 8013b88:	f043 0210 	orr.w	r2, r3, #16
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	699a      	ldr	r2, [r3, #24]
 8013b94:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <USB_DevInit+0x2c4>)
 8013b96:	4313      	orrs	r3, r2
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d005      	beq.n	8013bae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	699b      	ldr	r3, [r3, #24]
 8013ba6:	f043 0208 	orr.w	r2, r3, #8
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d107      	bne.n	8013bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	699b      	ldr	r3, [r3, #24]
 8013bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013bbc:	f043 0304 	orr.w	r3, r3, #4
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3718      	adds	r7, #24
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013bd0:	b004      	add	sp, #16
 8013bd2:	4770      	bx	lr
 8013bd4:	803c3800 	.word	0x803c3800

08013bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013be2:	2300      	movs	r3, #0
 8013be4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	019b      	lsls	r3, r3, #6
 8013bea:	f043 0220 	orr.w	r2, r3, #32
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	4a09      	ldr	r2, [pc, #36]	; (8013c20 <USB_FlushTxFifo+0x48>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d901      	bls.n	8013c04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013c00:	2303      	movs	r3, #3
 8013c02:	e006      	b.n	8013c12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	691b      	ldr	r3, [r3, #16]
 8013c08:	f003 0320 	and.w	r3, r3, #32
 8013c0c:	2b20      	cmp	r3, #32
 8013c0e:	d0f0      	beq.n	8013bf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3714      	adds	r7, #20
 8013c16:	46bd      	mov	sp, r7
 8013c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1c:	4770      	bx	lr
 8013c1e:	bf00      	nop
 8013c20:	00030d40 	.word	0x00030d40

08013c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b085      	sub	sp, #20
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2210      	movs	r2, #16
 8013c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	60fb      	str	r3, [r7, #12]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	4a09      	ldr	r2, [pc, #36]	; (8013c64 <USB_FlushRxFifo+0x40>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d901      	bls.n	8013c48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013c44:	2303      	movs	r3, #3
 8013c46:	e006      	b.n	8013c56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	691b      	ldr	r3, [r3, #16]
 8013c4c:	f003 0310 	and.w	r3, r3, #16
 8013c50:	2b10      	cmp	r3, #16
 8013c52:	d0f0      	beq.n	8013c36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop
 8013c64:	00030d40 	.word	0x00030d40

08013c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b085      	sub	sp, #20
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	460b      	mov	r3, r1
 8013c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	78fb      	ldrb	r3, [r7, #3]
 8013c82:	68f9      	ldr	r1, [r7, #12]
 8013c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013c8c:	2300      	movs	r3, #0
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3714      	adds	r7, #20
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr

08013c9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013c9a:	b480      	push	{r7}
 8013c9c:	b087      	sub	sp, #28
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	f003 0306 	and.w	r3, r3, #6
 8013cb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d102      	bne.n	8013cc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	75fb      	strb	r3, [r7, #23]
 8013cbe:	e00a      	b.n	8013cd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2b02      	cmp	r3, #2
 8013cc4:	d002      	beq.n	8013ccc <USB_GetDevSpeed+0x32>
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2b06      	cmp	r3, #6
 8013cca:	d102      	bne.n	8013cd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013ccc:	2302      	movs	r3, #2
 8013cce:	75fb      	strb	r3, [r7, #23]
 8013cd0:	e001      	b.n	8013cd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013cd2:	230f      	movs	r3, #15
 8013cd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	371c      	adds	r7, #28
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr

08013ce4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	785b      	ldrb	r3, [r3, #1]
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d13a      	bne.n	8013d76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d06:	69da      	ldr	r2, [r3, #28]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	f003 030f 	and.w	r3, r3, #15
 8013d10:	2101      	movs	r1, #1
 8013d12:	fa01 f303 	lsl.w	r3, r1, r3
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	68f9      	ldr	r1, [r7, #12]
 8013d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	015a      	lsls	r2, r3, #5
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	4413      	add	r3, r2
 8013d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d155      	bne.n	8013de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	015a      	lsls	r2, r3, #5
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d44:	681a      	ldr	r2, [r3, #0]
 8013d46:	683b      	ldr	r3, [r7, #0]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	78db      	ldrb	r3, [r3, #3]
 8013d52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	059b      	lsls	r3, r3, #22
 8013d5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013d5c:	4313      	orrs	r3, r2
 8013d5e:	68ba      	ldr	r2, [r7, #8]
 8013d60:	0151      	lsls	r1, r2, #5
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	440a      	add	r2, r1
 8013d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013d72:	6013      	str	r3, [r2, #0]
 8013d74:	e036      	b.n	8013de4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d7c:	69da      	ldr	r2, [r3, #28]
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	f003 030f 	and.w	r3, r3, #15
 8013d86:	2101      	movs	r1, #1
 8013d88:	fa01 f303 	lsl.w	r3, r1, r3
 8013d8c:	041b      	lsls	r3, r3, #16
 8013d8e:	68f9      	ldr	r1, [r7, #12]
 8013d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d94:	4313      	orrs	r3, r2
 8013d96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	015a      	lsls	r2, r3, #5
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	4413      	add	r3, r2
 8013da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d11a      	bne.n	8013de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	015a      	lsls	r2, r3, #5
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	4413      	add	r3, r2
 8013db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	78db      	ldrb	r3, [r3, #3]
 8013dc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013dca:	430b      	orrs	r3, r1
 8013dcc:	4313      	orrs	r3, r2
 8013dce:	68ba      	ldr	r2, [r7, #8]
 8013dd0:	0151      	lsls	r1, r2, #5
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	440a      	add	r2, r1
 8013dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013de2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013de4:	2300      	movs	r3, #0
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3714      	adds	r7, #20
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
	...

08013df4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	785b      	ldrb	r3, [r3, #1]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d161      	bne.n	8013ed4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	015a      	lsls	r2, r3, #5
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	4413      	add	r3, r2
 8013e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e26:	d11f      	bne.n	8013e68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	015a      	lsls	r2, r3, #5
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	4413      	add	r3, r2
 8013e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	68ba      	ldr	r2, [r7, #8]
 8013e38:	0151      	lsls	r1, r2, #5
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	440a      	add	r2, r1
 8013e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013e46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	015a      	lsls	r2, r3, #5
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	4413      	add	r3, r2
 8013e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	68ba      	ldr	r2, [r7, #8]
 8013e58:	0151      	lsls	r1, r2, #5
 8013e5a:	68fa      	ldr	r2, [r7, #12]
 8013e5c:	440a      	add	r2, r1
 8013e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	f003 030f 	and.w	r3, r3, #15
 8013e78:	2101      	movs	r1, #1
 8013e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	43db      	mvns	r3, r3
 8013e82:	68f9      	ldr	r1, [r7, #12]
 8013e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e88:	4013      	ands	r3, r2
 8013e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e92:	69da      	ldr	r2, [r3, #28]
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	f003 030f 	and.w	r3, r3, #15
 8013e9c:	2101      	movs	r1, #1
 8013e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	43db      	mvns	r3, r3
 8013ea6:	68f9      	ldr	r1, [r7, #12]
 8013ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013eac:	4013      	ands	r3, r2
 8013eae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	015a      	lsls	r2, r3, #5
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ebc:	681a      	ldr	r2, [r3, #0]
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	0159      	lsls	r1, r3, #5
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	440b      	add	r3, r1
 8013ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eca:	4619      	mov	r1, r3
 8013ecc:	4b35      	ldr	r3, [pc, #212]	; (8013fa4 <USB_DeactivateEndpoint+0x1b0>)
 8013ece:	4013      	ands	r3, r2
 8013ed0:	600b      	str	r3, [r1, #0]
 8013ed2:	e060      	b.n	8013f96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	015a      	lsls	r2, r3, #5
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	4413      	add	r3, r2
 8013edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013eea:	d11f      	bne.n	8013f2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	015a      	lsls	r2, r3, #5
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	0151      	lsls	r1, r2, #5
 8013efe:	68fa      	ldr	r2, [r7, #12]
 8013f00:	440a      	add	r2, r1
 8013f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	015a      	lsls	r2, r3, #5
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	4413      	add	r3, r2
 8013f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	68ba      	ldr	r2, [r7, #8]
 8013f1c:	0151      	lsls	r1, r2, #5
 8013f1e:	68fa      	ldr	r2, [r7, #12]
 8013f20:	440a      	add	r2, r1
 8013f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	f003 030f 	and.w	r3, r3, #15
 8013f3c:	2101      	movs	r1, #1
 8013f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8013f42:	041b      	lsls	r3, r3, #16
 8013f44:	43db      	mvns	r3, r3
 8013f46:	68f9      	ldr	r1, [r7, #12]
 8013f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f4c:	4013      	ands	r3, r2
 8013f4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f56:	69da      	ldr	r2, [r3, #28]
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	f003 030f 	and.w	r3, r3, #15
 8013f60:	2101      	movs	r1, #1
 8013f62:	fa01 f303 	lsl.w	r3, r1, r3
 8013f66:	041b      	lsls	r3, r3, #16
 8013f68:	43db      	mvns	r3, r3
 8013f6a:	68f9      	ldr	r1, [r7, #12]
 8013f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f70:	4013      	ands	r3, r2
 8013f72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	0159      	lsls	r1, r3, #5
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	440b      	add	r3, r1
 8013f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f8e:	4619      	mov	r1, r3
 8013f90:	4b05      	ldr	r3, [pc, #20]	; (8013fa8 <USB_DeactivateEndpoint+0x1b4>)
 8013f92:	4013      	ands	r3, r2
 8013f94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013f96:	2300      	movs	r3, #0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3714      	adds	r7, #20
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr
 8013fa4:	ec337800 	.word	0xec337800
 8013fa8:	eff37800 	.word	0xeff37800

08013fac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08a      	sub	sp, #40	; 0x28
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	785b      	ldrb	r3, [r3, #1]
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	f040 815c 	bne.w	8014286 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	695b      	ldr	r3, [r3, #20]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d132      	bne.n	801403c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013fd6:	69bb      	ldr	r3, [r7, #24]
 8013fd8:	015a      	lsls	r2, r3, #5
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	4413      	add	r3, r2
 8013fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	69ba      	ldr	r2, [r7, #24]
 8013fe6:	0151      	lsls	r1, r2, #5
 8013fe8:	69fa      	ldr	r2, [r7, #28]
 8013fea:	440a      	add	r2, r1
 8013fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ff0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013ff4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	015a      	lsls	r2, r3, #5
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	4413      	add	r3, r2
 8014002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014006:	691b      	ldr	r3, [r3, #16]
 8014008:	69ba      	ldr	r2, [r7, #24]
 801400a:	0151      	lsls	r1, r2, #5
 801400c:	69fa      	ldr	r2, [r7, #28]
 801400e:	440a      	add	r2, r1
 8014010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	015a      	lsls	r2, r3, #5
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	4413      	add	r3, r2
 8014022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	69ba      	ldr	r2, [r7, #24]
 801402a:	0151      	lsls	r1, r2, #5
 801402c:	69fa      	ldr	r2, [r7, #28]
 801402e:	440a      	add	r2, r1
 8014030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014034:	0cdb      	lsrs	r3, r3, #19
 8014036:	04db      	lsls	r3, r3, #19
 8014038:	6113      	str	r3, [r2, #16]
 801403a:	e074      	b.n	8014126 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	015a      	lsls	r2, r3, #5
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	4413      	add	r3, r2
 8014044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014048:	691b      	ldr	r3, [r3, #16]
 801404a:	69ba      	ldr	r2, [r7, #24]
 801404c:	0151      	lsls	r1, r2, #5
 801404e:	69fa      	ldr	r2, [r7, #28]
 8014050:	440a      	add	r2, r1
 8014052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014056:	0cdb      	lsrs	r3, r3, #19
 8014058:	04db      	lsls	r3, r3, #19
 801405a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801405c:	69bb      	ldr	r3, [r7, #24]
 801405e:	015a      	lsls	r2, r3, #5
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	4413      	add	r3, r2
 8014064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014068:	691b      	ldr	r3, [r3, #16]
 801406a:	69ba      	ldr	r2, [r7, #24]
 801406c:	0151      	lsls	r1, r2, #5
 801406e:	69fa      	ldr	r2, [r7, #28]
 8014070:	440a      	add	r2, r1
 8014072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014076:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801407a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801407e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	015a      	lsls	r2, r3, #5
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	4413      	add	r3, r2
 8014088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801408c:	691a      	ldr	r2, [r3, #16]
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	6959      	ldr	r1, [r3, #20]
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	689b      	ldr	r3, [r3, #8]
 8014096:	440b      	add	r3, r1
 8014098:	1e59      	subs	r1, r3, #1
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80140a2:	04d9      	lsls	r1, r3, #19
 80140a4:	4b9d      	ldr	r3, [pc, #628]	; (801431c <USB_EPStartXfer+0x370>)
 80140a6:	400b      	ands	r3, r1
 80140a8:	69b9      	ldr	r1, [r7, #24]
 80140aa:	0148      	lsls	r0, r1, #5
 80140ac:	69f9      	ldr	r1, [r7, #28]
 80140ae:	4401      	add	r1, r0
 80140b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80140b4:	4313      	orrs	r3, r2
 80140b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80140b8:	69bb      	ldr	r3, [r7, #24]
 80140ba:	015a      	lsls	r2, r3, #5
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	4413      	add	r3, r2
 80140c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140c4:	691a      	ldr	r2, [r3, #16]
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	695b      	ldr	r3, [r3, #20]
 80140ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80140ce:	69b9      	ldr	r1, [r7, #24]
 80140d0:	0148      	lsls	r0, r1, #5
 80140d2:	69f9      	ldr	r1, [r7, #28]
 80140d4:	4401      	add	r1, r0
 80140d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80140da:	4313      	orrs	r3, r2
 80140dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	78db      	ldrb	r3, [r3, #3]
 80140e2:	2b01      	cmp	r3, #1
 80140e4:	d11f      	bne.n	8014126 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	015a      	lsls	r2, r3, #5
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	4413      	add	r3, r2
 80140ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f2:	691b      	ldr	r3, [r3, #16]
 80140f4:	69ba      	ldr	r2, [r7, #24]
 80140f6:	0151      	lsls	r1, r2, #5
 80140f8:	69fa      	ldr	r2, [r7, #28]
 80140fa:	440a      	add	r2, r1
 80140fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014100:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014104:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	015a      	lsls	r2, r3, #5
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	4413      	add	r3, r2
 801410e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014112:	691b      	ldr	r3, [r3, #16]
 8014114:	69ba      	ldr	r2, [r7, #24]
 8014116:	0151      	lsls	r1, r2, #5
 8014118:	69fa      	ldr	r2, [r7, #28]
 801411a:	440a      	add	r2, r1
 801411c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014120:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014124:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014126:	79fb      	ldrb	r3, [r7, #7]
 8014128:	2b01      	cmp	r3, #1
 801412a:	d14b      	bne.n	80141c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	691b      	ldr	r3, [r3, #16]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d009      	beq.n	8014148 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	015a      	lsls	r2, r3, #5
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	4413      	add	r3, r2
 801413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014140:	461a      	mov	r2, r3
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	691b      	ldr	r3, [r3, #16]
 8014146:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	78db      	ldrb	r3, [r3, #3]
 801414c:	2b01      	cmp	r3, #1
 801414e:	d128      	bne.n	80141a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801415c:	2b00      	cmp	r3, #0
 801415e:	d110      	bne.n	8014182 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	015a      	lsls	r2, r3, #5
 8014164:	69fb      	ldr	r3, [r7, #28]
 8014166:	4413      	add	r3, r2
 8014168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	69ba      	ldr	r2, [r7, #24]
 8014170:	0151      	lsls	r1, r2, #5
 8014172:	69fa      	ldr	r2, [r7, #28]
 8014174:	440a      	add	r2, r1
 8014176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801417a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801417e:	6013      	str	r3, [r2, #0]
 8014180:	e00f      	b.n	80141a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	015a      	lsls	r2, r3, #5
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	4413      	add	r3, r2
 801418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	69ba      	ldr	r2, [r7, #24]
 8014192:	0151      	lsls	r1, r2, #5
 8014194:	69fa      	ldr	r2, [r7, #28]
 8014196:	440a      	add	r2, r1
 8014198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801419c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80141a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80141a2:	69bb      	ldr	r3, [r7, #24]
 80141a4:	015a      	lsls	r2, r3, #5
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	4413      	add	r3, r2
 80141aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	69ba      	ldr	r2, [r7, #24]
 80141b2:	0151      	lsls	r1, r2, #5
 80141b4:	69fa      	ldr	r2, [r7, #28]
 80141b6:	440a      	add	r2, r1
 80141b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80141c0:	6013      	str	r3, [r2, #0]
 80141c2:	e12f      	b.n	8014424 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	015a      	lsls	r2, r3, #5
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	4413      	add	r3, r2
 80141cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	69ba      	ldr	r2, [r7, #24]
 80141d4:	0151      	lsls	r1, r2, #5
 80141d6:	69fa      	ldr	r2, [r7, #28]
 80141d8:	440a      	add	r2, r1
 80141da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80141e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	78db      	ldrb	r3, [r3, #3]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d015      	beq.n	8014218 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	695b      	ldr	r3, [r3, #20]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	f000 8117 	beq.w	8014424 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80141fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	781b      	ldrb	r3, [r3, #0]
 8014202:	f003 030f 	and.w	r3, r3, #15
 8014206:	2101      	movs	r1, #1
 8014208:	fa01 f303 	lsl.w	r3, r1, r3
 801420c:	69f9      	ldr	r1, [r7, #28]
 801420e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014212:	4313      	orrs	r3, r2
 8014214:	634b      	str	r3, [r1, #52]	; 0x34
 8014216:	e105      	b.n	8014424 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014218:	69fb      	ldr	r3, [r7, #28]
 801421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801421e:	689b      	ldr	r3, [r3, #8]
 8014220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014224:	2b00      	cmp	r3, #0
 8014226:	d110      	bne.n	801424a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	015a      	lsls	r2, r3, #5
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	4413      	add	r3, r2
 8014230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	69ba      	ldr	r2, [r7, #24]
 8014238:	0151      	lsls	r1, r2, #5
 801423a:	69fa      	ldr	r2, [r7, #28]
 801423c:	440a      	add	r2, r1
 801423e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014246:	6013      	str	r3, [r2, #0]
 8014248:	e00f      	b.n	801426a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801424a:	69bb      	ldr	r3, [r7, #24]
 801424c:	015a      	lsls	r2, r3, #5
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	4413      	add	r3, r2
 8014252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	69ba      	ldr	r2, [r7, #24]
 801425a:	0151      	lsls	r1, r2, #5
 801425c:	69fa      	ldr	r2, [r7, #28]
 801425e:	440a      	add	r2, r1
 8014260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014268:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	68d9      	ldr	r1, [r3, #12]
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	781a      	ldrb	r2, [r3, #0]
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	695b      	ldr	r3, [r3, #20]
 8014276:	b298      	uxth	r0, r3
 8014278:	79fb      	ldrb	r3, [r7, #7]
 801427a:	9300      	str	r3, [sp, #0]
 801427c:	4603      	mov	r3, r0
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f000 fa2b 	bl	80146da <USB_WritePacket>
 8014284:	e0ce      	b.n	8014424 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	015a      	lsls	r2, r3, #5
 801428a:	69fb      	ldr	r3, [r7, #28]
 801428c:	4413      	add	r3, r2
 801428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	69ba      	ldr	r2, [r7, #24]
 8014296:	0151      	lsls	r1, r2, #5
 8014298:	69fa      	ldr	r2, [r7, #28]
 801429a:	440a      	add	r2, r1
 801429c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142a0:	0cdb      	lsrs	r3, r3, #19
 80142a2:	04db      	lsls	r3, r3, #19
 80142a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80142a6:	69bb      	ldr	r3, [r7, #24]
 80142a8:	015a      	lsls	r2, r3, #5
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	4413      	add	r3, r2
 80142ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	69ba      	ldr	r2, [r7, #24]
 80142b6:	0151      	lsls	r1, r2, #5
 80142b8:	69fa      	ldr	r2, [r7, #28]
 80142ba:	440a      	add	r2, r1
 80142bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80142c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80142c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	695b      	ldr	r3, [r3, #20]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d126      	bne.n	8014320 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	015a      	lsls	r2, r3, #5
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	4413      	add	r3, r2
 80142da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142de:	691a      	ldr	r2, [r3, #16]
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80142e8:	69b9      	ldr	r1, [r7, #24]
 80142ea:	0148      	lsls	r0, r1, #5
 80142ec:	69f9      	ldr	r1, [r7, #28]
 80142ee:	4401      	add	r1, r0
 80142f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80142f4:	4313      	orrs	r3, r2
 80142f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	015a      	lsls	r2, r3, #5
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	4413      	add	r3, r2
 8014300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014304:	691b      	ldr	r3, [r3, #16]
 8014306:	69ba      	ldr	r2, [r7, #24]
 8014308:	0151      	lsls	r1, r2, #5
 801430a:	69fa      	ldr	r2, [r7, #28]
 801430c:	440a      	add	r2, r1
 801430e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014316:	6113      	str	r3, [r2, #16]
 8014318:	e036      	b.n	8014388 <USB_EPStartXfer+0x3dc>
 801431a:	bf00      	nop
 801431c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	695a      	ldr	r2, [r3, #20]
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	689b      	ldr	r3, [r3, #8]
 8014328:	4413      	add	r3, r2
 801432a:	1e5a      	subs	r2, r3, #1
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	fbb2 f3f3 	udiv	r3, r2, r3
 8014334:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	015a      	lsls	r2, r3, #5
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	4413      	add	r3, r2
 801433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014342:	691a      	ldr	r2, [r3, #16]
 8014344:	8afb      	ldrh	r3, [r7, #22]
 8014346:	04d9      	lsls	r1, r3, #19
 8014348:	4b39      	ldr	r3, [pc, #228]	; (8014430 <USB_EPStartXfer+0x484>)
 801434a:	400b      	ands	r3, r1
 801434c:	69b9      	ldr	r1, [r7, #24]
 801434e:	0148      	lsls	r0, r1, #5
 8014350:	69f9      	ldr	r1, [r7, #28]
 8014352:	4401      	add	r1, r0
 8014354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014358:	4313      	orrs	r3, r2
 801435a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	015a      	lsls	r2, r3, #5
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	4413      	add	r3, r2
 8014364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014368:	691a      	ldr	r2, [r3, #16]
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	8af9      	ldrh	r1, [r7, #22]
 8014370:	fb01 f303 	mul.w	r3, r1, r3
 8014374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014378:	69b9      	ldr	r1, [r7, #24]
 801437a:	0148      	lsls	r0, r1, #5
 801437c:	69f9      	ldr	r1, [r7, #28]
 801437e:	4401      	add	r1, r0
 8014380:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014384:	4313      	orrs	r3, r2
 8014386:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014388:	79fb      	ldrb	r3, [r7, #7]
 801438a:	2b01      	cmp	r3, #1
 801438c:	d10d      	bne.n	80143aa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d009      	beq.n	80143aa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	68d9      	ldr	r1, [r3, #12]
 801439a:	69bb      	ldr	r3, [r7, #24]
 801439c:	015a      	lsls	r2, r3, #5
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	4413      	add	r3, r2
 80143a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143a6:	460a      	mov	r2, r1
 80143a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	78db      	ldrb	r3, [r3, #3]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d128      	bne.n	8014404 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80143b2:	69fb      	ldr	r3, [r7, #28]
 80143b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d110      	bne.n	80143e4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	015a      	lsls	r2, r3, #5
 80143c6:	69fb      	ldr	r3, [r7, #28]
 80143c8:	4413      	add	r3, r2
 80143ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	69ba      	ldr	r2, [r7, #24]
 80143d2:	0151      	lsls	r1, r2, #5
 80143d4:	69fa      	ldr	r2, [r7, #28]
 80143d6:	440a      	add	r2, r1
 80143d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80143e0:	6013      	str	r3, [r2, #0]
 80143e2:	e00f      	b.n	8014404 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	015a      	lsls	r2, r3, #5
 80143e8:	69fb      	ldr	r3, [r7, #28]
 80143ea:	4413      	add	r3, r2
 80143ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	69ba      	ldr	r2, [r7, #24]
 80143f4:	0151      	lsls	r1, r2, #5
 80143f6:	69fa      	ldr	r2, [r7, #28]
 80143f8:	440a      	add	r2, r1
 80143fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014402:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	015a      	lsls	r2, r3, #5
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	4413      	add	r3, r2
 801440c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	69ba      	ldr	r2, [r7, #24]
 8014414:	0151      	lsls	r1, r2, #5
 8014416:	69fa      	ldr	r2, [r7, #28]
 8014418:	440a      	add	r2, r1
 801441a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801441e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	4618      	mov	r0, r3
 8014428:	3720      	adds	r7, #32
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	1ff80000 	.word	0x1ff80000

08014434 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014434:	b480      	push	{r7}
 8014436:	b087      	sub	sp, #28
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	4613      	mov	r3, r2
 8014440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	785b      	ldrb	r3, [r3, #1]
 8014450:	2b01      	cmp	r3, #1
 8014452:	f040 80cd 	bne.w	80145f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	695b      	ldr	r3, [r3, #20]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d132      	bne.n	80144c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	015a      	lsls	r2, r3, #5
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	4413      	add	r3, r2
 8014466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801446a:	691b      	ldr	r3, [r3, #16]
 801446c:	693a      	ldr	r2, [r7, #16]
 801446e:	0151      	lsls	r1, r2, #5
 8014470:	697a      	ldr	r2, [r7, #20]
 8014472:	440a      	add	r2, r1
 8014474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801447c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	015a      	lsls	r2, r3, #5
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	4413      	add	r3, r2
 801448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801448e:	691b      	ldr	r3, [r3, #16]
 8014490:	693a      	ldr	r2, [r7, #16]
 8014492:	0151      	lsls	r1, r2, #5
 8014494:	697a      	ldr	r2, [r7, #20]
 8014496:	440a      	add	r2, r1
 8014498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801449c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80144a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	015a      	lsls	r2, r3, #5
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	4413      	add	r3, r2
 80144aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144ae:	691b      	ldr	r3, [r3, #16]
 80144b0:	693a      	ldr	r2, [r7, #16]
 80144b2:	0151      	lsls	r1, r2, #5
 80144b4:	697a      	ldr	r2, [r7, #20]
 80144b6:	440a      	add	r2, r1
 80144b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144bc:	0cdb      	lsrs	r3, r3, #19
 80144be:	04db      	lsls	r3, r3, #19
 80144c0:	6113      	str	r3, [r2, #16]
 80144c2:	e04e      	b.n	8014562 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	015a      	lsls	r2, r3, #5
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	4413      	add	r3, r2
 80144cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144d0:	691b      	ldr	r3, [r3, #16]
 80144d2:	693a      	ldr	r2, [r7, #16]
 80144d4:	0151      	lsls	r1, r2, #5
 80144d6:	697a      	ldr	r2, [r7, #20]
 80144d8:	440a      	add	r2, r1
 80144da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144de:	0cdb      	lsrs	r3, r3, #19
 80144e0:	04db      	lsls	r3, r3, #19
 80144e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	015a      	lsls	r2, r3, #5
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	4413      	add	r3, r2
 80144ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144f0:	691b      	ldr	r3, [r3, #16]
 80144f2:	693a      	ldr	r2, [r7, #16]
 80144f4:	0151      	lsls	r1, r2, #5
 80144f6:	697a      	ldr	r2, [r7, #20]
 80144f8:	440a      	add	r2, r1
 80144fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014502:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014506:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	695a      	ldr	r2, [r3, #20]
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	689b      	ldr	r3, [r3, #8]
 8014510:	429a      	cmp	r2, r3
 8014512:	d903      	bls.n	801451c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	689a      	ldr	r2, [r3, #8]
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	015a      	lsls	r2, r3, #5
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	4413      	add	r3, r2
 8014524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014528:	691b      	ldr	r3, [r3, #16]
 801452a:	693a      	ldr	r2, [r7, #16]
 801452c:	0151      	lsls	r1, r2, #5
 801452e:	697a      	ldr	r2, [r7, #20]
 8014530:	440a      	add	r2, r1
 8014532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801453a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	015a      	lsls	r2, r3, #5
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	4413      	add	r3, r2
 8014544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014548:	691a      	ldr	r2, [r3, #16]
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	695b      	ldr	r3, [r3, #20]
 801454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014552:	6939      	ldr	r1, [r7, #16]
 8014554:	0148      	lsls	r0, r1, #5
 8014556:	6979      	ldr	r1, [r7, #20]
 8014558:	4401      	add	r1, r0
 801455a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801455e:	4313      	orrs	r3, r2
 8014560:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014562:	79fb      	ldrb	r3, [r7, #7]
 8014564:	2b01      	cmp	r3, #1
 8014566:	d11e      	bne.n	80145a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014568:	68bb      	ldr	r3, [r7, #8]
 801456a:	691b      	ldr	r3, [r3, #16]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d009      	beq.n	8014584 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014570:	693b      	ldr	r3, [r7, #16]
 8014572:	015a      	lsls	r2, r3, #5
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	4413      	add	r3, r2
 8014578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801457c:	461a      	mov	r2, r3
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	691b      	ldr	r3, [r3, #16]
 8014582:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	015a      	lsls	r2, r3, #5
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	4413      	add	r3, r2
 801458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	693a      	ldr	r2, [r7, #16]
 8014594:	0151      	lsls	r1, r2, #5
 8014596:	697a      	ldr	r2, [r7, #20]
 8014598:	440a      	add	r2, r1
 801459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801459e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80145a2:	6013      	str	r3, [r2, #0]
 80145a4:	e092      	b.n	80146cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	693a      	ldr	r2, [r7, #16]
 80145b6:	0151      	lsls	r1, r2, #5
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	440a      	add	r2, r1
 80145bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80145c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	695b      	ldr	r3, [r3, #20]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d07e      	beq.n	80146cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	f003 030f 	and.w	r3, r3, #15
 80145de:	2101      	movs	r1, #1
 80145e0:	fa01 f303 	lsl.w	r3, r1, r3
 80145e4:	6979      	ldr	r1, [r7, #20]
 80145e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145ea:	4313      	orrs	r3, r2
 80145ec:	634b      	str	r3, [r1, #52]	; 0x34
 80145ee:	e06d      	b.n	80146cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	015a      	lsls	r2, r3, #5
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	4413      	add	r3, r2
 80145f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	693a      	ldr	r2, [r7, #16]
 8014600:	0151      	lsls	r1, r2, #5
 8014602:	697a      	ldr	r2, [r7, #20]
 8014604:	440a      	add	r2, r1
 8014606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801460a:	0cdb      	lsrs	r3, r3, #19
 801460c:	04db      	lsls	r3, r3, #19
 801460e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	015a      	lsls	r2, r3, #5
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	4413      	add	r3, r2
 8014618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801461c:	691b      	ldr	r3, [r3, #16]
 801461e:	693a      	ldr	r2, [r7, #16]
 8014620:	0151      	lsls	r1, r2, #5
 8014622:	697a      	ldr	r2, [r7, #20]
 8014624:	440a      	add	r2, r1
 8014626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801462a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801462e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014632:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	695b      	ldr	r3, [r3, #20]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d003      	beq.n	8014644 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	689a      	ldr	r2, [r3, #8]
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	015a      	lsls	r2, r3, #5
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	4413      	add	r3, r2
 801464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014650:	691b      	ldr	r3, [r3, #16]
 8014652:	693a      	ldr	r2, [r7, #16]
 8014654:	0151      	lsls	r1, r2, #5
 8014656:	697a      	ldr	r2, [r7, #20]
 8014658:	440a      	add	r2, r1
 801465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801465e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	015a      	lsls	r2, r3, #5
 8014668:	697b      	ldr	r3, [r7, #20]
 801466a:	4413      	add	r3, r2
 801466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014670:	691a      	ldr	r2, [r3, #16]
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	689b      	ldr	r3, [r3, #8]
 8014676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801467a:	6939      	ldr	r1, [r7, #16]
 801467c:	0148      	lsls	r0, r1, #5
 801467e:	6979      	ldr	r1, [r7, #20]
 8014680:	4401      	add	r1, r0
 8014682:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014686:	4313      	orrs	r3, r2
 8014688:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801468a:	79fb      	ldrb	r3, [r7, #7]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d10d      	bne.n	80146ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d009      	beq.n	80146ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	68d9      	ldr	r1, [r3, #12]
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	015a      	lsls	r2, r3, #5
 80146a0:	697b      	ldr	r3, [r7, #20]
 80146a2:	4413      	add	r3, r2
 80146a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146a8:	460a      	mov	r2, r1
 80146aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	015a      	lsls	r2, r3, #5
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	4413      	add	r3, r2
 80146b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	693a      	ldr	r2, [r7, #16]
 80146bc:	0151      	lsls	r1, r2, #5
 80146be:	697a      	ldr	r2, [r7, #20]
 80146c0:	440a      	add	r2, r1
 80146c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80146cc:	2300      	movs	r3, #0
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	371c      	adds	r7, #28
 80146d2:	46bd      	mov	sp, r7
 80146d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d8:	4770      	bx	lr

080146da <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80146da:	b480      	push	{r7}
 80146dc:	b089      	sub	sp, #36	; 0x24
 80146de:	af00      	add	r7, sp, #0
 80146e0:	60f8      	str	r0, [r7, #12]
 80146e2:	60b9      	str	r1, [r7, #8]
 80146e4:	4611      	mov	r1, r2
 80146e6:	461a      	mov	r2, r3
 80146e8:	460b      	mov	r3, r1
 80146ea:	71fb      	strb	r3, [r7, #7]
 80146ec:	4613      	mov	r3, r2
 80146ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80146f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d11a      	bne.n	8014736 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014700:	88bb      	ldrh	r3, [r7, #4]
 8014702:	3303      	adds	r3, #3
 8014704:	089b      	lsrs	r3, r3, #2
 8014706:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014708:	2300      	movs	r3, #0
 801470a:	61bb      	str	r3, [r7, #24]
 801470c:	e00f      	b.n	801472e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801470e:	79fb      	ldrb	r3, [r7, #7]
 8014710:	031a      	lsls	r2, r3, #12
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	4413      	add	r3, r2
 8014716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801471a:	461a      	mov	r2, r3
 801471c:	69fb      	ldr	r3, [r7, #28]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	3304      	adds	r3, #4
 8014726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	3301      	adds	r3, #1
 801472c:	61bb      	str	r3, [r7, #24]
 801472e:	69ba      	ldr	r2, [r7, #24]
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	429a      	cmp	r2, r3
 8014734:	d3eb      	bcc.n	801470e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014736:	2300      	movs	r3, #0
}
 8014738:	4618      	mov	r0, r3
 801473a:	3724      	adds	r7, #36	; 0x24
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014744:	b480      	push	{r7}
 8014746:	b089      	sub	sp, #36	; 0x24
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	4613      	mov	r3, r2
 8014750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801475a:	88fb      	ldrh	r3, [r7, #6]
 801475c:	3303      	adds	r3, #3
 801475e:	089b      	lsrs	r3, r3, #2
 8014760:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8014762:	2300      	movs	r3, #0
 8014764:	61bb      	str	r3, [r7, #24]
 8014766:	e00b      	b.n	8014780 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801476e:	681a      	ldr	r2, [r3, #0]
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	601a      	str	r2, [r3, #0]
    pDest++;
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	3304      	adds	r3, #4
 8014778:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	3301      	adds	r3, #1
 801477e:	61bb      	str	r3, [r7, #24]
 8014780:	69ba      	ldr	r2, [r7, #24]
 8014782:	693b      	ldr	r3, [r7, #16]
 8014784:	429a      	cmp	r2, r3
 8014786:	d3ef      	bcc.n	8014768 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8014788:	69fb      	ldr	r3, [r7, #28]
}
 801478a:	4618      	mov	r0, r3
 801478c:	3724      	adds	r7, #36	; 0x24
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr

08014796 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014796:	b480      	push	{r7}
 8014798:	b085      	sub	sp, #20
 801479a:	af00      	add	r7, sp, #0
 801479c:	6078      	str	r0, [r7, #4]
 801479e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	785b      	ldrb	r3, [r3, #1]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d12c      	bne.n	801480c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	015a      	lsls	r2, r3, #5
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	4413      	add	r3, r2
 80147ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	db12      	blt.n	80147ea <USB_EPSetStall+0x54>
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d00f      	beq.n	80147ea <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	015a      	lsls	r2, r3, #5
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	4413      	add	r3, r2
 80147d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	68ba      	ldr	r2, [r7, #8]
 80147da:	0151      	lsls	r1, r2, #5
 80147dc:	68fa      	ldr	r2, [r7, #12]
 80147de:	440a      	add	r2, r1
 80147e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80147e8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	015a      	lsls	r2, r3, #5
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	4413      	add	r3, r2
 80147f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	68ba      	ldr	r2, [r7, #8]
 80147fa:	0151      	lsls	r1, r2, #5
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	440a      	add	r2, r1
 8014800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014808:	6013      	str	r3, [r2, #0]
 801480a:	e02b      	b.n	8014864 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2b00      	cmp	r3, #0
 801481c:	db12      	blt.n	8014844 <USB_EPSetStall+0xae>
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d00f      	beq.n	8014844 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	015a      	lsls	r2, r3, #5
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	4413      	add	r3, r2
 801482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	68ba      	ldr	r2, [r7, #8]
 8014834:	0151      	lsls	r1, r2, #5
 8014836:	68fa      	ldr	r2, [r7, #12]
 8014838:	440a      	add	r2, r1
 801483a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801483e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014842:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	015a      	lsls	r2, r3, #5
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	4413      	add	r3, r2
 801484c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	68ba      	ldr	r2, [r7, #8]
 8014854:	0151      	lsls	r1, r2, #5
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	440a      	add	r2, r1
 801485a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801485e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014864:	2300      	movs	r3, #0
}
 8014866:	4618      	mov	r0, r3
 8014868:	3714      	adds	r7, #20
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr

08014872 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014872:	b480      	push	{r7}
 8014874:	b085      	sub	sp, #20
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	785b      	ldrb	r3, [r3, #1]
 801488a:	2b01      	cmp	r3, #1
 801488c:	d128      	bne.n	80148e0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	015a      	lsls	r2, r3, #5
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	4413      	add	r3, r2
 8014896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	0151      	lsls	r1, r2, #5
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	440a      	add	r2, r1
 80148a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80148ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	78db      	ldrb	r3, [r3, #3]
 80148b2:	2b03      	cmp	r3, #3
 80148b4:	d003      	beq.n	80148be <USB_EPClearStall+0x4c>
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	78db      	ldrb	r3, [r3, #3]
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d138      	bne.n	8014930 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	015a      	lsls	r2, r3, #5
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	4413      	add	r3, r2
 80148c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	68ba      	ldr	r2, [r7, #8]
 80148ce:	0151      	lsls	r1, r2, #5
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	440a      	add	r2, r1
 80148d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80148dc:	6013      	str	r3, [r2, #0]
 80148de:	e027      	b.n	8014930 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	015a      	lsls	r2, r3, #5
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	4413      	add	r3, r2
 80148e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68ba      	ldr	r2, [r7, #8]
 80148f0:	0151      	lsls	r1, r2, #5
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	440a      	add	r2, r1
 80148f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80148fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	78db      	ldrb	r3, [r3, #3]
 8014904:	2b03      	cmp	r3, #3
 8014906:	d003      	beq.n	8014910 <USB_EPClearStall+0x9e>
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	78db      	ldrb	r3, [r3, #3]
 801490c:	2b02      	cmp	r3, #2
 801490e:	d10f      	bne.n	8014930 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	015a      	lsls	r2, r3, #5
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	4413      	add	r3, r2
 8014918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	68ba      	ldr	r2, [r7, #8]
 8014920:	0151      	lsls	r1, r2, #5
 8014922:	68fa      	ldr	r2, [r7, #12]
 8014924:	440a      	add	r2, r1
 8014926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801492e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014930:	2300      	movs	r3, #0
}
 8014932:	4618      	mov	r0, r3
 8014934:	3714      	adds	r7, #20
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr

0801493e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801493e:	b480      	push	{r7}
 8014940:	b085      	sub	sp, #20
 8014942:	af00      	add	r7, sp, #0
 8014944:	6078      	str	r0, [r7, #4]
 8014946:	460b      	mov	r3, r1
 8014948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	68fa      	ldr	r2, [r7, #12]
 8014958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801495c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014960:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	78fb      	ldrb	r3, [r7, #3]
 801496c:	011b      	lsls	r3, r3, #4
 801496e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014972:	68f9      	ldr	r1, [r7, #12]
 8014974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014978:	4313      	orrs	r3, r2
 801497a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801497c:	2300      	movs	r3, #0
}
 801497e:	4618      	mov	r0, r3
 8014980:	3714      	adds	r7, #20
 8014982:	46bd      	mov	sp, r7
 8014984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014988:	4770      	bx	lr

0801498a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801498a:	b580      	push	{r7, lr}
 801498c:	b084      	sub	sp, #16
 801498e:	af00      	add	r7, sp, #0
 8014990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80149a4:	f023 0302 	bic.w	r3, r3, #2
 80149a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80149aa:	2003      	movs	r0, #3
 80149ac:	f7f7 f92e 	bl	800bc0c <HAL_Delay>

  return HAL_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}

080149ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80149ba:	b580      	push	{r7, lr}
 80149bc:	b084      	sub	sp, #16
 80149be:	af00      	add	r7, sp, #0
 80149c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149cc:	685b      	ldr	r3, [r3, #4]
 80149ce:	68fa      	ldr	r2, [r7, #12]
 80149d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80149d4:	f043 0302 	orr.w	r3, r3, #2
 80149d8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80149da:	2003      	movs	r0, #3
 80149dc:	f7f7 f916 	bl	800bc0c <HAL_Delay>

  return HAL_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b085      	sub	sp, #20
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	695b      	ldr	r3, [r3, #20]
 80149f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	699b      	ldr	r3, [r3, #24]
 80149fc:	68fa      	ldr	r2, [r7, #12]
 80149fe:	4013      	ands	r3, r2
 8014a00:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014a02:	68fb      	ldr	r3, [r7, #12]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3714      	adds	r7, #20
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b085      	sub	sp, #20
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a22:	699b      	ldr	r3, [r3, #24]
 8014a24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a2c:	69db      	ldr	r3, [r3, #28]
 8014a2e:	68ba      	ldr	r2, [r7, #8]
 8014a30:	4013      	ands	r3, r2
 8014a32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	0c1b      	lsrs	r3, r3, #16
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3714      	adds	r7, #20
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a42:	4770      	bx	lr

08014a44 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a44:	b480      	push	{r7}
 8014a46:	b085      	sub	sp, #20
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a56:	699b      	ldr	r3, [r3, #24]
 8014a58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a60:	69db      	ldr	r3, [r3, #28]
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	4013      	ands	r3, r2
 8014a66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	b29b      	uxth	r3, r3
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3714      	adds	r7, #20
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr

08014a78 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	460b      	mov	r3, r1
 8014a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014a88:	78fb      	ldrb	r3, [r7, #3]
 8014a8a:	015a      	lsls	r2, r3, #5
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	4413      	add	r3, r2
 8014a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a94:	689b      	ldr	r3, [r3, #8]
 8014a96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a9e:	695b      	ldr	r3, [r3, #20]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014aa6:	68bb      	ldr	r3, [r7, #8]
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3714      	adds	r7, #20
 8014aac:	46bd      	mov	sp, r7
 8014aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab2:	4770      	bx	lr

08014ab4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b087      	sub	sp, #28
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	460b      	mov	r3, r1
 8014abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014aca:	691b      	ldr	r3, [r3, #16]
 8014acc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ad6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014ad8:	78fb      	ldrb	r3, [r7, #3]
 8014ada:	f003 030f 	and.w	r3, r3, #15
 8014ade:	68fa      	ldr	r2, [r7, #12]
 8014ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8014ae4:	01db      	lsls	r3, r3, #7
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	693a      	ldr	r2, [r7, #16]
 8014aea:	4313      	orrs	r3, r2
 8014aec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014aee:	78fb      	ldrb	r3, [r7, #3]
 8014af0:	015a      	lsls	r2, r3, #5
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	4413      	add	r3, r2
 8014af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014afa:	689b      	ldr	r3, [r3, #8]
 8014afc:	693a      	ldr	r2, [r7, #16]
 8014afe:	4013      	ands	r3, r2
 8014b00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014b02:	68bb      	ldr	r3, [r7, #8]
}
 8014b04:	4618      	mov	r0, r3
 8014b06:	371c      	adds	r7, #28
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr

08014b10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014b10:	b480      	push	{r7}
 8014b12:	b083      	sub	sp, #12
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	f003 0301 	and.w	r3, r3, #1
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	370c      	adds	r7, #12
 8014b24:	46bd      	mov	sp, r7
 8014b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2a:	4770      	bx	lr

08014b2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	b085      	sub	sp, #20
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014b4a:	f023 0307 	bic.w	r3, r3, #7
 8014b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b56:	685b      	ldr	r3, [r3, #4]
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014b64:	2300      	movs	r3, #0
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3714      	adds	r7, #20
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
	...

08014b74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b087      	sub	sp, #28
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	333c      	adds	r3, #60	; 0x3c
 8014b8a:	3304      	adds	r3, #4
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	4a26      	ldr	r2, [pc, #152]	; (8014c2c <USB_EP0_OutStart+0xb8>)
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d90a      	bls.n	8014bae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ba8:	d101      	bne.n	8014bae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014baa:	2300      	movs	r3, #0
 8014bac:	e037      	b.n	8014c1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bc0:	691b      	ldr	r3, [r3, #16]
 8014bc2:	697a      	ldr	r2, [r7, #20]
 8014bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bd4:	691b      	ldr	r3, [r3, #16]
 8014bd6:	697a      	ldr	r2, [r7, #20]
 8014bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bdc:	f043 0318 	orr.w	r3, r3, #24
 8014be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be8:	691b      	ldr	r3, [r3, #16]
 8014bea:	697a      	ldr	r2, [r7, #20]
 8014bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014bf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014bf6:	7afb      	ldrb	r3, [r7, #11]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d10f      	bne.n	8014c1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c02:	461a      	mov	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	697a      	ldr	r2, [r7, #20]
 8014c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	371c      	adds	r7, #28
 8014c22:	46bd      	mov	sp, r7
 8014c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c28:	4770      	bx	lr
 8014c2a:	bf00      	nop
 8014c2c:	4f54300a 	.word	0x4f54300a

08014c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014c30:	b480      	push	{r7}
 8014c32:	b085      	sub	sp, #20
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	3301      	adds	r3, #1
 8014c40:	60fb      	str	r3, [r7, #12]
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	4a13      	ldr	r2, [pc, #76]	; (8014c94 <USB_CoreReset+0x64>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d901      	bls.n	8014c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014c4a:	2303      	movs	r3, #3
 8014c4c:	e01b      	b.n	8014c86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	691b      	ldr	r3, [r3, #16]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	daf2      	bge.n	8014c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014c56:	2300      	movs	r3, #0
 8014c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	691b      	ldr	r3, [r3, #16]
 8014c5e:	f043 0201 	orr.w	r2, r3, #1
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	60fb      	str	r3, [r7, #12]
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	4a09      	ldr	r2, [pc, #36]	; (8014c94 <USB_CoreReset+0x64>)
 8014c70:	4293      	cmp	r3, r2
 8014c72:	d901      	bls.n	8014c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014c74:	2303      	movs	r3, #3
 8014c76:	e006      	b.n	8014c86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	691b      	ldr	r3, [r3, #16]
 8014c7c:	f003 0301 	and.w	r3, r3, #1
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d0f0      	beq.n	8014c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8014c84:	2300      	movs	r3, #0
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3714      	adds	r7, #20
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	00030d40 	.word	0x00030d40

08014c98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014c9c:	4904      	ldr	r1, [pc, #16]	; (8014cb0 <MX_FATFS_Init+0x18>)
 8014c9e:	4805      	ldr	r0, [pc, #20]	; (8014cb4 <MX_FATFS_Init+0x1c>)
 8014ca0:	f004 fcb6 	bl	8019610 <FATFS_LinkDriver>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	4b03      	ldr	r3, [pc, #12]	; (8014cb8 <MX_FATFS_Init+0x20>)
 8014caa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8014cac:	bf00      	nop
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	20000a68 	.word	0x20000a68
 8014cb4:	0801ebe0 	.word	0x0801ebe0
 8014cb8:	20000a64 	.word	0x20000a64

08014cbc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b086      	sub	sp, #24
 8014cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	RTC_TimeTypeDef c_time;
	RTC_DateTypeDef c_date;
	HAL_RTC_GetTime(&hrtc,&c_time,RTC_FORMAT_BIN);
 8014cc2:	1d3b      	adds	r3, r7, #4
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	480f      	ldr	r0, [pc, #60]	; (8014d08 <get_fattime+0x4c>)
 8014cca:	f7fb fe1f 	bl	801090c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&c_date,RTC_FORMAT_BIN);
 8014cce:	463b      	mov	r3, r7
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	480c      	ldr	r0, [pc, #48]	; (8014d08 <get_fattime+0x4c>)
 8014cd6:	f7fb ff1e 	bl	8010b16 <HAL_RTC_GetDate>
return	((DWORD)c_date.Year << 25 | (DWORD)c_date.Month << 21 | (DWORD)c_date.Date << 16 | (DWORD) c_time.Hours <<11 | (DWORD) c_time.Minutes <<5 | (DWORD) (c_time.Seconds>>1)<<0);
 8014cda:	78fb      	ldrb	r3, [r7, #3]
 8014cdc:	065a      	lsls	r2, r3, #25
 8014cde:	787b      	ldrb	r3, [r7, #1]
 8014ce0:	055b      	lsls	r3, r3, #21
 8014ce2:	431a      	orrs	r2, r3
 8014ce4:	78bb      	ldrb	r3, [r7, #2]
 8014ce6:	041b      	lsls	r3, r3, #16
 8014ce8:	431a      	orrs	r2, r3
 8014cea:	793b      	ldrb	r3, [r7, #4]
 8014cec:	02db      	lsls	r3, r3, #11
 8014cee:	431a      	orrs	r2, r3
 8014cf0:	797b      	ldrb	r3, [r7, #5]
 8014cf2:	015b      	lsls	r3, r3, #5
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	79ba      	ldrb	r2, [r7, #6]
 8014cf8:	0852      	lsrs	r2, r2, #1
 8014cfa:	b2d2      	uxtb	r2, r2
 8014cfc:	4313      	orrs	r3, r2

  return 0;
  /* USER CODE END get_fattime */  
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3718      	adds	r7, #24
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	20000818 	.word	0x20000818

08014d0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014d12:	2300      	movs	r3, #0
 8014d14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014d16:	f000 f888 	bl	8014e2a <BSP_SD_IsDetected>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d001      	beq.n	8014d24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8014d20:	2301      	movs	r3, #1
 8014d22:	e005      	b.n	8014d30 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8014d24:	4804      	ldr	r0, [pc, #16]	; (8014d38 <BSP_SD_Init+0x2c>)
 8014d26:	f7fc f8eb 	bl	8010f00 <HAL_SD_Init>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8014d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	200008f8 	.word	0x200008f8

08014d3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b086      	sub	sp, #24
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	68ba      	ldr	r2, [r7, #8]
 8014d50:	68f9      	ldr	r1, [r7, #12]
 8014d52:	4806      	ldr	r0, [pc, #24]	; (8014d6c <BSP_SD_ReadBlocks_DMA+0x30>)
 8014d54:	f7fc f984 	bl	8011060 <HAL_SD_ReadBlocks_DMA>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014d5e:	2301      	movs	r3, #1
 8014d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8014d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3718      	adds	r7, #24
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	200008f8 	.word	0x200008f8

08014d70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	68ba      	ldr	r2, [r7, #8]
 8014d84:	68f9      	ldr	r1, [r7, #12]
 8014d86:	4806      	ldr	r0, [pc, #24]	; (8014da0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014d88:	f7fc fa54 	bl	8011234 <HAL_SD_WriteBlocks_DMA>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d001      	beq.n	8014d96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8014d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3718      	adds	r7, #24
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	200008f8 	.word	0x200008f8

08014da4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014da8:	4805      	ldr	r0, [pc, #20]	; (8014dc0 <BSP_SD_GetCardState+0x1c>)
 8014daa:	f7fc fe93 	bl	8011ad4 <HAL_SD_GetCardState>
 8014dae:	4603      	mov	r3, r0
 8014db0:	2b04      	cmp	r3, #4
 8014db2:	bf14      	ite	ne
 8014db4:	2301      	movne	r3, #1
 8014db6:	2300      	moveq	r3, #0
 8014db8:	b2db      	uxtb	r3, r3
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	200008f8 	.word	0x200008f8

08014dc4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b082      	sub	sp, #8
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8014dcc:	6879      	ldr	r1, [r7, #4]
 8014dce:	4803      	ldr	r0, [pc, #12]	; (8014ddc <BSP_SD_GetCardInfo+0x18>)
 8014dd0:	f7fc fe54 	bl	8011a7c <HAL_SD_GetCardInfo>
}
 8014dd4:	bf00      	nop
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	200008f8 	.word	0x200008f8

08014de0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b082      	sub	sp, #8
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8014de8:	f000 f818 	bl	8014e1c <BSP_SD_AbortCallback>
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b082      	sub	sp, #8
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014dfc:	f000 f9a8 	bl	8015150 <BSP_SD_WriteCpltCallback>
}
 8014e00:	bf00      	nop
 8014e02:	3708      	adds	r7, #8
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014e10:	f000 f9aa 	bl	8015168 <BSP_SD_ReadCpltCallback>
}
 8014e14:	bf00      	nop
 8014e16:	3708      	adds	r7, #8
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	af00      	add	r7, sp, #0

}
 8014e20:	bf00      	nop
 8014e22:	46bd      	mov	sp, r7
 8014e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e28:	4770      	bx	lr

08014e2a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014e2a:	b580      	push	{r7, lr}
 8014e2c:	b082      	sub	sp, #8
 8014e2e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014e30:	2301      	movs	r3, #1
 8014e32:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8014e34:	f000 f80c 	bl	8014e50 <BSP_PlatformIsDetected>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d101      	bne.n	8014e42 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014e42:	79fb      	ldrb	r3, [r7, #7]
 8014e44:	b2db      	uxtb	r3, r3
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
	...

08014e50 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014e56:	2301      	movs	r3, #1
 8014e58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014e5a:	2108      	movs	r1, #8
 8014e5c:	4806      	ldr	r0, [pc, #24]	; (8014e78 <BSP_PlatformIsDetected+0x28>)
 8014e5e:	f7f8 fd77 	bl	800d950 <HAL_GPIO_ReadPin>
 8014e62:	4603      	mov	r3, r0
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d001      	beq.n	8014e6c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8014e6c:	79fb      	ldrb	r3, [r7, #7]
}  
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3708      	adds	r7, #8
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	40020c00 	.word	0x40020c00

08014e7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014e84:	f7f6 feb6 	bl	800bbf4 <HAL_GetTick>
 8014e88:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014e8a:	e006      	b.n	8014e9a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014e8c:	f7ff ff8a 	bl	8014da4 <BSP_SD_GetCardState>
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d101      	bne.n	8014e9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	e009      	b.n	8014eae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014e9a:	f7f6 feab 	bl	800bbf4 <HAL_GetTick>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	1ad3      	subs	r3, r2, r3
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d8f0      	bhi.n	8014e8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3710      	adds	r7, #16
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
	...

08014eb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014ec2:	4b0b      	ldr	r3, [pc, #44]	; (8014ef0 <SD_CheckStatus+0x38>)
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014ec8:	f7ff ff6c 	bl	8014da4 <BSP_SD_GetCardState>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d107      	bne.n	8014ee2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014ed2:	4b07      	ldr	r3, [pc, #28]	; (8014ef0 <SD_CheckStatus+0x38>)
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	b2db      	uxtb	r3, r3
 8014ed8:	f023 0301 	bic.w	r3, r3, #1
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	4b04      	ldr	r3, [pc, #16]	; (8014ef0 <SD_CheckStatus+0x38>)
 8014ee0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014ee2:	4b03      	ldr	r3, [pc, #12]	; (8014ef0 <SD_CheckStatus+0x38>)
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	b2db      	uxtb	r3, r3
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	3708      	adds	r7, #8
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}
 8014ef0:	2000004d 	.word	0x2000004d

08014ef4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	4603      	mov	r3, r0
 8014efc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014efe:	f7ff ff05 	bl	8014d0c <BSP_SD_Init>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d107      	bne.n	8014f18 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014f08:	79fb      	ldrb	r3, [r7, #7]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7ff ffd4 	bl	8014eb8 <SD_CheckStatus>
 8014f10:	4603      	mov	r3, r0
 8014f12:	461a      	mov	r2, r3
 8014f14:	4b04      	ldr	r3, [pc, #16]	; (8014f28 <SD_initialize+0x34>)
 8014f16:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014f18:	4b03      	ldr	r3, [pc, #12]	; (8014f28 <SD_initialize+0x34>)
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	b2db      	uxtb	r3, r3
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	2000004d 	.word	0x2000004d

08014f2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	4603      	mov	r3, r0
 8014f34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014f36:	79fb      	ldrb	r3, [r7, #7]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7ff ffbd 	bl	8014eb8 <SD_CheckStatus>
 8014f3e:	4603      	mov	r3, r0
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3708      	adds	r7, #8
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60b9      	str	r1, [r7, #8]
 8014f50:	607a      	str	r2, [r7, #4]
 8014f52:	603b      	str	r3, [r7, #0]
 8014f54:	4603      	mov	r3, r0
 8014f56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014f58:	2301      	movs	r3, #1
 8014f5a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014f5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8014f60:	f7ff ff8c 	bl	8014e7c <SD_CheckStatusWithTimeout>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	da01      	bge.n	8014f6e <SD_read+0x26>
  {
    return res;
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	e03b      	b.n	8014fe6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014f6e:	683a      	ldr	r2, [r7, #0]
 8014f70:	6879      	ldr	r1, [r7, #4]
 8014f72:	68b8      	ldr	r0, [r7, #8]
 8014f74:	f7ff fee2 	bl	8014d3c <BSP_SD_ReadBlocks_DMA>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d132      	bne.n	8014fe4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014f7e:	4b1c      	ldr	r3, [pc, #112]	; (8014ff0 <SD_read+0xa8>)
 8014f80:	2200      	movs	r2, #0
 8014f82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014f84:	f7f6 fe36 	bl	800bbf4 <HAL_GetTick>
 8014f88:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014f8a:	bf00      	nop
 8014f8c:	4b18      	ldr	r3, [pc, #96]	; (8014ff0 <SD_read+0xa8>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d108      	bne.n	8014fa6 <SD_read+0x5e>
 8014f94:	f7f6 fe2e 	bl	800bbf4 <HAL_GetTick>
 8014f98:	4602      	mov	r2, r0
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	1ad3      	subs	r3, r2, r3
 8014f9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8014fa2:	4293      	cmp	r3, r2
 8014fa4:	d9f2      	bls.n	8014f8c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8014fa6:	4b12      	ldr	r3, [pc, #72]	; (8014ff0 <SD_read+0xa8>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d102      	bne.n	8014fb4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014fae:	2301      	movs	r3, #1
 8014fb0:	75fb      	strb	r3, [r7, #23]
 8014fb2:	e017      	b.n	8014fe4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014fb4:	4b0e      	ldr	r3, [pc, #56]	; (8014ff0 <SD_read+0xa8>)
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014fba:	f7f6 fe1b 	bl	800bbf4 <HAL_GetTick>
 8014fbe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014fc0:	e007      	b.n	8014fd2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014fc2:	f7ff feef 	bl	8014da4 <BSP_SD_GetCardState>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d102      	bne.n	8014fd2 <SD_read+0x8a>
          {
            res = RES_OK;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014fd0:	e008      	b.n	8014fe4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014fd2:	f7f6 fe0f 	bl	800bbf4 <HAL_GetTick>
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	1ad3      	subs	r3, r2, r3
 8014fdc:	f247 522f 	movw	r2, #29999	; 0x752f
 8014fe0:	4293      	cmp	r3, r2
 8014fe2:	d9ee      	bls.n	8014fc2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	200003f8 	.word	0x200003f8

08014ff4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b086      	sub	sp, #24
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60b9      	str	r1, [r7, #8]
 8014ffc:	607a      	str	r2, [r7, #4]
 8014ffe:	603b      	str	r3, [r7, #0]
 8015000:	4603      	mov	r3, r0
 8015002:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015004:	2301      	movs	r3, #1
 8015006:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015008:	4b24      	ldr	r3, [pc, #144]	; (801509c <SD_write+0xa8>)
 801500a:	2200      	movs	r2, #0
 801500c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801500e:	f247 5030 	movw	r0, #30000	; 0x7530
 8015012:	f7ff ff33 	bl	8014e7c <SD_CheckStatusWithTimeout>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	da01      	bge.n	8015020 <SD_write+0x2c>
  {
    return res;
 801501c:	7dfb      	ldrb	r3, [r7, #23]
 801501e:	e038      	b.n	8015092 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015020:	683a      	ldr	r2, [r7, #0]
 8015022:	6879      	ldr	r1, [r7, #4]
 8015024:	68b8      	ldr	r0, [r7, #8]
 8015026:	f7ff fea3 	bl	8014d70 <BSP_SD_WriteBlocks_DMA>
 801502a:	4603      	mov	r3, r0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d12f      	bne.n	8015090 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8015030:	f7f6 fde0 	bl	800bbf4 <HAL_GetTick>
 8015034:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015036:	bf00      	nop
 8015038:	4b18      	ldr	r3, [pc, #96]	; (801509c <SD_write+0xa8>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d108      	bne.n	8015052 <SD_write+0x5e>
 8015040:	f7f6 fdd8 	bl	800bbf4 <HAL_GetTick>
 8015044:	4602      	mov	r2, r0
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	f247 522f 	movw	r2, #29999	; 0x752f
 801504e:	4293      	cmp	r3, r2
 8015050:	d9f2      	bls.n	8015038 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8015052:	4b12      	ldr	r3, [pc, #72]	; (801509c <SD_write+0xa8>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d102      	bne.n	8015060 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801505a:	2301      	movs	r3, #1
 801505c:	75fb      	strb	r3, [r7, #23]
 801505e:	e017      	b.n	8015090 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8015060:	4b0e      	ldr	r3, [pc, #56]	; (801509c <SD_write+0xa8>)
 8015062:	2200      	movs	r2, #0
 8015064:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015066:	f7f6 fdc5 	bl	800bbf4 <HAL_GetTick>
 801506a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801506c:	e007      	b.n	801507e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801506e:	f7ff fe99 	bl	8014da4 <BSP_SD_GetCardState>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	d102      	bne.n	801507e <SD_write+0x8a>
          {
            res = RES_OK;
 8015078:	2300      	movs	r3, #0
 801507a:	75fb      	strb	r3, [r7, #23]
            break;
 801507c:	e008      	b.n	8015090 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801507e:	f7f6 fdb9 	bl	800bbf4 <HAL_GetTick>
 8015082:	4602      	mov	r2, r0
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	f247 522f 	movw	r2, #29999	; 0x752f
 801508c:	4293      	cmp	r3, r2
 801508e:	d9ee      	bls.n	801506e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015090:	7dfb      	ldrb	r3, [r7, #23]
}
 8015092:	4618      	mov	r0, r3
 8015094:	3718      	adds	r7, #24
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	200003f4 	.word	0x200003f4

080150a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b08c      	sub	sp, #48	; 0x30
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	4603      	mov	r3, r0
 80150a8:	603a      	str	r2, [r7, #0]
 80150aa:	71fb      	strb	r3, [r7, #7]
 80150ac:	460b      	mov	r3, r1
 80150ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80150b0:	2301      	movs	r3, #1
 80150b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80150b6:	4b25      	ldr	r3, [pc, #148]	; (801514c <SD_ioctl+0xac>)
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	f003 0301 	and.w	r3, r3, #1
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <SD_ioctl+0x28>
 80150c4:	2303      	movs	r3, #3
 80150c6:	e03c      	b.n	8015142 <SD_ioctl+0xa2>

  switch (cmd)
 80150c8:	79bb      	ldrb	r3, [r7, #6]
 80150ca:	2b03      	cmp	r3, #3
 80150cc:	d834      	bhi.n	8015138 <SD_ioctl+0x98>
 80150ce:	a201      	add	r2, pc, #4	; (adr r2, 80150d4 <SD_ioctl+0x34>)
 80150d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d4:	080150e5 	.word	0x080150e5
 80150d8:	080150ed 	.word	0x080150ed
 80150dc:	08015105 	.word	0x08015105
 80150e0:	0801511f 	.word	0x0801511f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80150e4:	2300      	movs	r3, #0
 80150e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80150ea:	e028      	b.n	801513e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80150ec:	f107 030c 	add.w	r3, r7, #12
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7ff fe67 	bl	8014dc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80150f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80150fc:	2300      	movs	r3, #0
 80150fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015102:	e01c      	b.n	801513e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015104:	f107 030c 	add.w	r3, r7, #12
 8015108:	4618      	mov	r0, r3
 801510a:	f7ff fe5b 	bl	8014dc4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015110:	b29a      	uxth	r2, r3
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8015116:	2300      	movs	r3, #0
 8015118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801511c:	e00f      	b.n	801513e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801511e:	f107 030c 	add.w	r3, r7, #12
 8015122:	4618      	mov	r0, r3
 8015124:	f7ff fe4e 	bl	8014dc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512a:	0a5a      	lsrs	r2, r3, #9
 801512c:	683b      	ldr	r3, [r7, #0]
 801512e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015130:	2300      	movs	r3, #0
 8015132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015136:	e002      	b.n	801513e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015138:	2304      	movs	r3, #4
 801513a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801513e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015142:	4618      	mov	r0, r3
 8015144:	3730      	adds	r7, #48	; 0x30
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	2000004d 	.word	0x2000004d

08015150 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8015150:	b480      	push	{r7}
 8015152:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8015154:	4b03      	ldr	r3, [pc, #12]	; (8015164 <BSP_SD_WriteCpltCallback+0x14>)
 8015156:	2201      	movs	r2, #1
 8015158:	601a      	str	r2, [r3, #0]
}
 801515a:	bf00      	nop
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr
 8015164:	200003f4 	.word	0x200003f4

08015168 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8015168:	b480      	push	{r7}
 801516a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801516c:	4b03      	ldr	r3, [pc, #12]	; (801517c <BSP_SD_ReadCpltCallback+0x14>)
 801516e:	2201      	movs	r2, #1
 8015170:	601a      	str	r2, [r3, #0]
}
 8015172:	bf00      	nop
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr
 801517c:	200003f8 	.word	0x200003f8

08015180 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	460b      	mov	r3, r1
 801518a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801518c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015190:	f005 f834 	bl	801a1fc <malloc>
 8015194:	4603      	mov	r3, r0
 8015196:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d105      	bne.n	80151aa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80151a6:	2302      	movs	r3, #2
 80151a8:	e066      	b.n	8015278 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	68fa      	ldr	r2, [r7, #12]
 80151ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	7c1b      	ldrb	r3, [r3, #16]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d119      	bne.n	80151ee <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80151ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151be:	2202      	movs	r2, #2
 80151c0:	2181      	movs	r1, #129	; 0x81
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f004 fe93 	bl	8019eee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2201      	movs	r2, #1
 80151cc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80151ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80151d2:	2202      	movs	r2, #2
 80151d4:	2101      	movs	r1, #1
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f004 fe89 	bl	8019eee <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2201      	movs	r2, #1
 80151e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2210      	movs	r2, #16
 80151e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80151ec:	e016      	b.n	801521c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80151ee:	2340      	movs	r3, #64	; 0x40
 80151f0:	2202      	movs	r2, #2
 80151f2:	2181      	movs	r1, #129	; 0x81
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f004 fe7a 	bl	8019eee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2201      	movs	r2, #1
 80151fe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015200:	2340      	movs	r3, #64	; 0x40
 8015202:	2202      	movs	r2, #2
 8015204:	2101      	movs	r1, #1
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f004 fe71 	bl	8019eee <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	2201      	movs	r2, #1
 8015210:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2210      	movs	r2, #16
 8015218:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801521c:	2308      	movs	r3, #8
 801521e:	2203      	movs	r2, #3
 8015220:	2182      	movs	r1, #130	; 0x82
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f004 fe63 	bl	8019eee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2201      	movs	r2, #1
 801522c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	2200      	movs	r2, #0
 801523e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	2200      	movs	r2, #0
 8015246:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	7c1b      	ldrb	r3, [r3, #16]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d109      	bne.n	8015266 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015258:	f44f 7300 	mov.w	r3, #512	; 0x200
 801525c:	2101      	movs	r1, #1
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f004 ff34 	bl	801a0cc <USBD_LL_PrepareReceive>
 8015264:	e007      	b.n	8015276 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801526c:	2340      	movs	r3, #64	; 0x40
 801526e:	2101      	movs	r1, #1
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f004 ff2b 	bl	801a0cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015276:	2300      	movs	r3, #0
}
 8015278:	4618      	mov	r0, r3
 801527a:	3710      	adds	r7, #16
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	460b      	mov	r3, r1
 801528a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 801528c:	2300      	movs	r3, #0
 801528e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8015290:	2181      	movs	r1, #129	; 0x81
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f004 fe51 	bl	8019f3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801529e:	2101      	movs	r1, #1
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f004 fe4a 	bl	8019f3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80152ae:	2182      	movs	r1, #130	; 0x82
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f004 fe42 	bl	8019f3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d00e      	beq.n	80152ee <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152e0:	4618      	mov	r0, r3
 80152e2:	f004 ff93 	bl	801a20c <free>
    pdev->pClassData = NULL;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2200      	movs	r2, #0
 80152ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80152ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3710      	adds	r7, #16
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b086      	sub	sp, #24
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015308:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801530a:	2300      	movs	r3, #0
 801530c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801530e:	2300      	movs	r3, #0
 8015310:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8015312:	2300      	movs	r3, #0
 8015314:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	781b      	ldrb	r3, [r3, #0]
 801531a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801531e:	2b00      	cmp	r3, #0
 8015320:	d03a      	beq.n	8015398 <USBD_CDC_Setup+0xa0>
 8015322:	2b20      	cmp	r3, #32
 8015324:	f040 8097 	bne.w	8015456 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	88db      	ldrh	r3, [r3, #6]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d029      	beq.n	8015384 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	b25b      	sxtb	r3, r3
 8015336:	2b00      	cmp	r3, #0
 8015338:	da11      	bge.n	801535e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015340:	689b      	ldr	r3, [r3, #8]
 8015342:	683a      	ldr	r2, [r7, #0]
 8015344:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8015346:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015348:	683a      	ldr	r2, [r7, #0]
 801534a:	88d2      	ldrh	r2, [r2, #6]
 801534c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801534e:	6939      	ldr	r1, [r7, #16]
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	88db      	ldrh	r3, [r3, #6]
 8015354:	461a      	mov	r2, r3
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f001 fa6d 	bl	8016836 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 801535c:	e082      	b.n	8015464 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	785a      	ldrb	r2, [r3, #1]
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	88db      	ldrh	r3, [r3, #6]
 801536c:	b2da      	uxtb	r2, r3
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8015374:	6939      	ldr	r1, [r7, #16]
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	88db      	ldrh	r3, [r3, #6]
 801537a:	461a      	mov	r2, r3
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f001 fa86 	bl	801688e <USBD_CtlPrepareRx>
    break;
 8015382:	e06f      	b.n	8015464 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801538a:	689b      	ldr	r3, [r3, #8]
 801538c:	683a      	ldr	r2, [r7, #0]
 801538e:	7850      	ldrb	r0, [r2, #1]
 8015390:	2200      	movs	r2, #0
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	4798      	blx	r3
    break;
 8015396:	e065      	b.n	8015464 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015398:	683b      	ldr	r3, [r7, #0]
 801539a:	785b      	ldrb	r3, [r3, #1]
 801539c:	2b0b      	cmp	r3, #11
 801539e:	d84f      	bhi.n	8015440 <USBD_CDC_Setup+0x148>
 80153a0:	a201      	add	r2, pc, #4	; (adr r2, 80153a8 <USBD_CDC_Setup+0xb0>)
 80153a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a6:	bf00      	nop
 80153a8:	080153d9 	.word	0x080153d9
 80153ac:	0801544f 	.word	0x0801544f
 80153b0:	08015441 	.word	0x08015441
 80153b4:	08015441 	.word	0x08015441
 80153b8:	08015441 	.word	0x08015441
 80153bc:	08015441 	.word	0x08015441
 80153c0:	08015441 	.word	0x08015441
 80153c4:	08015441 	.word	0x08015441
 80153c8:	08015441 	.word	0x08015441
 80153cc:	08015441 	.word	0x08015441
 80153d0:	08015401 	.word	0x08015401
 80153d4:	08015429 	.word	0x08015429
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153de:	2b03      	cmp	r3, #3
 80153e0:	d107      	bne.n	80153f2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80153e2:	f107 030c 	add.w	r3, r7, #12
 80153e6:	2202      	movs	r2, #2
 80153e8:	4619      	mov	r1, r3
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f001 fa23 	bl	8016836 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80153f0:	e030      	b.n	8015454 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80153f2:	6839      	ldr	r1, [r7, #0]
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f001 f9ad 	bl	8016754 <USBD_CtlError>
        ret = USBD_FAIL;
 80153fa:	2303      	movs	r3, #3
 80153fc:	75fb      	strb	r3, [r7, #23]
      break;
 80153fe:	e029      	b.n	8015454 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015406:	2b03      	cmp	r3, #3
 8015408:	d107      	bne.n	801541a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801540a:	f107 030f 	add.w	r3, r7, #15
 801540e:	2201      	movs	r2, #1
 8015410:	4619      	mov	r1, r3
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f001 fa0f 	bl	8016836 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8015418:	e01c      	b.n	8015454 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801541a:	6839      	ldr	r1, [r7, #0]
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f001 f999 	bl	8016754 <USBD_CtlError>
        ret = USBD_FAIL;
 8015422:	2303      	movs	r3, #3
 8015424:	75fb      	strb	r3, [r7, #23]
      break;
 8015426:	e015      	b.n	8015454 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801542e:	2b03      	cmp	r3, #3
 8015430:	d00f      	beq.n	8015452 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8015432:	6839      	ldr	r1, [r7, #0]
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f001 f98d 	bl	8016754 <USBD_CtlError>
        ret = USBD_FAIL;
 801543a:	2303      	movs	r3, #3
 801543c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801543e:	e008      	b.n	8015452 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8015440:	6839      	ldr	r1, [r7, #0]
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f001 f986 	bl	8016754 <USBD_CtlError>
      ret = USBD_FAIL;
 8015448:	2303      	movs	r3, #3
 801544a:	75fb      	strb	r3, [r7, #23]
      break;
 801544c:	e002      	b.n	8015454 <USBD_CDC_Setup+0x15c>
      break;
 801544e:	bf00      	nop
 8015450:	e008      	b.n	8015464 <USBD_CDC_Setup+0x16c>
      break;
 8015452:	bf00      	nop
    }
    break;
 8015454:	e006      	b.n	8015464 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8015456:	6839      	ldr	r1, [r7, #0]
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f001 f97b 	bl	8016754 <USBD_CtlError>
    ret = USBD_FAIL;
 801545e:	2303      	movs	r3, #3
 8015460:	75fb      	strb	r3, [r7, #23]
    break;
 8015462:	bf00      	nop
  }

  return (uint8_t)ret;
 8015464:	7dfb      	ldrb	r3, [r7, #23]
}
 8015466:	4618      	mov	r0, r3
 8015468:	3718      	adds	r7, #24
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop

08015470 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	460b      	mov	r3, r1
 801547a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015482:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801548e:	2303      	movs	r3, #3
 8015490:	e049      	b.n	8015526 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801549a:	78fa      	ldrb	r2, [r7, #3]
 801549c:	6879      	ldr	r1, [r7, #4]
 801549e:	4613      	mov	r3, r2
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	4413      	add	r3, r2
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	440b      	add	r3, r1
 80154a8:	3318      	adds	r3, #24
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d029      	beq.n	8015504 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80154b0:	78fa      	ldrb	r2, [r7, #3]
 80154b2:	6879      	ldr	r1, [r7, #4]
 80154b4:	4613      	mov	r3, r2
 80154b6:	009b      	lsls	r3, r3, #2
 80154b8:	4413      	add	r3, r2
 80154ba:	009b      	lsls	r3, r3, #2
 80154bc:	440b      	add	r3, r1
 80154be:	3318      	adds	r3, #24
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	78f9      	ldrb	r1, [r7, #3]
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	460b      	mov	r3, r1
 80154c8:	00db      	lsls	r3, r3, #3
 80154ca:	1a5b      	subs	r3, r3, r1
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	4403      	add	r3, r0
 80154d0:	3344      	adds	r3, #68	; 0x44
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80154d8:	fb03 f301 	mul.w	r3, r3, r1
 80154dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d110      	bne.n	8015504 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80154e2:	78fa      	ldrb	r2, [r7, #3]
 80154e4:	6879      	ldr	r1, [r7, #4]
 80154e6:	4613      	mov	r3, r2
 80154e8:	009b      	lsls	r3, r3, #2
 80154ea:	4413      	add	r3, r2
 80154ec:	009b      	lsls	r3, r3, #2
 80154ee:	440b      	add	r3, r1
 80154f0:	3318      	adds	r3, #24
 80154f2:	2200      	movs	r2, #0
 80154f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80154f6:	78f9      	ldrb	r1, [r7, #3]
 80154f8:	2300      	movs	r3, #0
 80154fa:	2200      	movs	r2, #0
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f004 fdc4 	bl	801a08a <USBD_LL_Transmit>
 8015502:	e00f      	b.n	8015524 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	2200      	movs	r2, #0
 8015508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015512:	691b      	ldr	r3, [r3, #16]
 8015514:	68ba      	ldr	r2, [r7, #8]
 8015516:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015520:	78fa      	ldrb	r2, [r7, #3]
 8015522:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8015524:	2300      	movs	r3, #0
}
 8015526:	4618      	mov	r0, r3
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}

0801552e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801552e:	b580      	push	{r7, lr}
 8015530:	b084      	sub	sp, #16
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
 8015536:	460b      	mov	r3, r1
 8015538:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015540:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015548:	2b00      	cmp	r3, #0
 801554a:	d101      	bne.n	8015550 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801554c:	2303      	movs	r3, #3
 801554e:	e015      	b.n	801557c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015550:	78fb      	ldrb	r3, [r7, #3]
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f004 fdda 	bl	801a10e <USBD_LL_GetRxDataSize>
 801555a:	4602      	mov	r2, r0
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	68fa      	ldr	r2, [r7, #12]
 801556c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015576:	4611      	mov	r1, r2
 8015578:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801557a:	2300      	movs	r3, #0
}
 801557c:	4618      	mov	r0, r3
 801557e:	3710      	adds	r7, #16
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015592:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d015      	beq.n	80155ca <USBD_CDC_EP0_RxReady+0x46>
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80155a4:	2bff      	cmp	r3, #255	; 0xff
 80155a6:	d010      	beq.n	80155ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155ae:	689b      	ldr	r3, [r3, #8]
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80155b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80155be:	b292      	uxth	r2, r2
 80155c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	22ff      	movs	r2, #255	; 0xff
 80155c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80155ca:	2300      	movs	r3, #0
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2243      	movs	r2, #67	; 0x43
 80155e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80155e2:	4b03      	ldr	r3, [pc, #12]	; (80155f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	370c      	adds	r7, #12
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr
 80155f0:	200000d8 	.word	0x200000d8

080155f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	2243      	movs	r2, #67	; 0x43
 8015600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8015602:	4b03      	ldr	r3, [pc, #12]	; (8015610 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8015604:	4618      	mov	r0, r3
 8015606:	370c      	adds	r7, #12
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr
 8015610:	20000094 	.word	0x20000094

08015614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2243      	movs	r2, #67	; 0x43
 8015620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8015622:	4b03      	ldr	r3, [pc, #12]	; (8015630 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8015624:	4618      	mov	r0, r3
 8015626:	370c      	adds	r7, #12
 8015628:	46bd      	mov	sp, r7
 801562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562e:	4770      	bx	lr
 8015630:	2000011c 	.word	0x2000011c

08015634 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	220a      	movs	r2, #10
 8015640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015642:	4b03      	ldr	r3, [pc, #12]	; (8015650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015644:	4618      	mov	r0, r3
 8015646:	370c      	adds	r7, #12
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr
 8015650:	20000050 	.word	0x20000050

08015654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d101      	bne.n	8015668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015664:	2303      	movs	r3, #3
 8015666:	e004      	b.n	8015672 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8015670:	2300      	movs	r3, #0
}
 8015672:	4618      	mov	r0, r3
 8015674:	370c      	adds	r7, #12
 8015676:	46bd      	mov	sp, r7
 8015678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567c:	4770      	bx	lr

0801567e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801567e:	b480      	push	{r7}
 8015680:	b087      	sub	sp, #28
 8015682:	af00      	add	r7, sp, #0
 8015684:	60f8      	str	r0, [r7, #12]
 8015686:	60b9      	str	r1, [r7, #8]
 8015688:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015690:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	68ba      	ldr	r2, [r7, #8]
 8015696:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	687a      	ldr	r2, [r7, #4]
 801569e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	371c      	adds	r7, #28
 80156a8:	46bd      	mov	sp, r7
 80156aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ae:	4770      	bx	lr

080156b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80156b0:	b480      	push	{r7}
 80156b2:	b085      	sub	sp, #20
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156c0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	683a      	ldr	r2, [r7, #0]
 80156c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80156ca:	2300      	movs	r3, #0
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3714      	adds	r7, #20
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d101      	bne.n	80156f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80156f2:	2303      	movs	r3, #3
 80156f4:	e016      	b.n	8015724 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	7c1b      	ldrb	r3, [r3, #16]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d109      	bne.n	8015712 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015708:	2101      	movs	r1, #1
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f004 fcde 	bl	801a0cc <USBD_LL_PrepareReceive>
 8015710:	e007      	b.n	8015722 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015718:	2340      	movs	r3, #64	; 0x40
 801571a:	2101      	movs	r1, #1
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f004 fcd5 	bl	801a0cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015722:	2300      	movs	r3, #0
}
 8015724:	4618      	mov	r0, r3
 8015726:	3710      	adds	r7, #16
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b086      	sub	sp, #24
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	60b9      	str	r1, [r7, #8]
 8015736:	4613      	mov	r3, r2
 8015738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d101      	bne.n	8015744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015740:	2303      	movs	r3, #3
 8015742:	e025      	b.n	8015790 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801574a:	2b00      	cmp	r3, #0
 801574c:	d003      	beq.n	8015756 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	2200      	movs	r2, #0
 8015752:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801575c:	2b00      	cmp	r3, #0
 801575e:	d003      	beq.n	8015768 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	2200      	movs	r2, #0
 8015764:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d003      	beq.n	8015776 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	68ba      	ldr	r2, [r7, #8]
 8015772:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2201      	movs	r2, #1
 801577a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	79fa      	ldrb	r2, [r7, #7]
 8015782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f004 fb4b 	bl	8019e20 <USBD_LL_Init>
 801578a:	4603      	mov	r3, r0
 801578c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015790:	4618      	mov	r0, r3
 8015792:	3718      	adds	r7, #24
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}

08015798 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80157a2:	2300      	movs	r3, #0
 80157a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d101      	bne.n	80157b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80157ac:	2303      	movs	r3, #3
 80157ae:	e010      	b.n	80157d2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	683a      	ldr	r2, [r7, #0]
 80157b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157c0:	f107 020e 	add.w	r2, r7, #14
 80157c4:	4610      	mov	r0, r2
 80157c6:	4798      	blx	r3
 80157c8:	4602      	mov	r2, r0
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80157d0:	2300      	movs	r3, #0
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3710      	adds	r7, #16
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f004 fb68 	bl	8019eb8 <USBD_LL_Start>
 80157e8:	4603      	mov	r3, r0
}
 80157ea:	4618      	mov	r0, r3
 80157ec:	3708      	adds	r7, #8
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}

080157f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80157f2:	b480      	push	{r7}
 80157f4:	b083      	sub	sp, #12
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	370c      	adds	r7, #12
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	460b      	mov	r3, r1
 8015812:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015814:	2303      	movs	r3, #3
 8015816:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801581e:	2b00      	cmp	r3, #0
 8015820:	d009      	beq.n	8015836 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	78fa      	ldrb	r2, [r7, #3]
 801582c:	4611      	mov	r1, r2
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	4798      	blx	r3
 8015832:	4603      	mov	r3, r0
 8015834:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015836:	7bfb      	ldrb	r3, [r7, #15]
}
 8015838:	4618      	mov	r0, r3
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}

08015840 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	460b      	mov	r3, r1
 801584a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015852:	2b00      	cmp	r3, #0
 8015854:	d007      	beq.n	8015866 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	78fa      	ldrb	r2, [r7, #3]
 8015860:	4611      	mov	r1, r2
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	4798      	blx	r3
  }

  return USBD_OK;
 8015866:	2300      	movs	r3, #0
}
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015880:	6839      	ldr	r1, [r7, #0]
 8015882:	4618      	mov	r0, r3
 8015884:	f000 ff2c 	bl	80166e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2201      	movs	r2, #1
 801588c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015896:	461a      	mov	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80158a4:	f003 031f 	and.w	r3, r3, #31
 80158a8:	2b01      	cmp	r3, #1
 80158aa:	d00e      	beq.n	80158ca <USBD_LL_SetupStage+0x5a>
 80158ac:	2b01      	cmp	r3, #1
 80158ae:	d302      	bcc.n	80158b6 <USBD_LL_SetupStage+0x46>
 80158b0:	2b02      	cmp	r3, #2
 80158b2:	d014      	beq.n	80158de <USBD_LL_SetupStage+0x6e>
 80158b4:	e01d      	b.n	80158f2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158bc:	4619      	mov	r1, r3
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f000 fa18 	bl	8015cf4 <USBD_StdDevReq>
 80158c4:	4603      	mov	r3, r0
 80158c6:	73fb      	strb	r3, [r7, #15]
      break;
 80158c8:	e020      	b.n	801590c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158d0:	4619      	mov	r1, r3
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 fa7c 	bl	8015dd0 <USBD_StdItfReq>
 80158d8:	4603      	mov	r3, r0
 80158da:	73fb      	strb	r3, [r7, #15]
      break;
 80158dc:	e016      	b.n	801590c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80158e4:	4619      	mov	r1, r3
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 fab8 	bl	8015e5c <USBD_StdEPReq>
 80158ec:	4603      	mov	r3, r0
 80158ee:	73fb      	strb	r3, [r7, #15]
      break;
 80158f0:	e00c      	b.n	801590c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80158f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	4619      	mov	r1, r3
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f004 fb39 	bl	8019f78 <USBD_LL_StallEP>
 8015906:	4603      	mov	r3, r0
 8015908:	73fb      	strb	r3, [r7, #15]
      break;
 801590a:	bf00      	nop
  }

  return ret;
 801590c:	7bfb      	ldrb	r3, [r7, #15]
}
 801590e:	4618      	mov	r0, r3
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}

08015916 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015916:	b580      	push	{r7, lr}
 8015918:	b086      	sub	sp, #24
 801591a:	af00      	add	r7, sp, #0
 801591c:	60f8      	str	r0, [r7, #12]
 801591e:	460b      	mov	r3, r1
 8015920:	607a      	str	r2, [r7, #4]
 8015922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015924:	7afb      	ldrb	r3, [r7, #11]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d137      	bne.n	801599a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015930:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015938:	2b03      	cmp	r3, #3
 801593a:	d14a      	bne.n	80159d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	689a      	ldr	r2, [r3, #8]
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	68db      	ldr	r3, [r3, #12]
 8015944:	429a      	cmp	r2, r3
 8015946:	d913      	bls.n	8015970 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	689a      	ldr	r2, [r3, #8]
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	1ad2      	subs	r2, r2, r3
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	68da      	ldr	r2, [r3, #12]
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	4293      	cmp	r3, r2
 8015960:	bf28      	it	cs
 8015962:	4613      	movcs	r3, r2
 8015964:	461a      	mov	r2, r3
 8015966:	6879      	ldr	r1, [r7, #4]
 8015968:	68f8      	ldr	r0, [r7, #12]
 801596a:	f000 ffad 	bl	80168c8 <USBD_CtlContinueRx>
 801596e:	e030      	b.n	80159d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015976:	691b      	ldr	r3, [r3, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d00a      	beq.n	8015992 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015982:	2b03      	cmp	r3, #3
 8015984:	d105      	bne.n	8015992 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801598c:	691b      	ldr	r3, [r3, #16]
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015992:	68f8      	ldr	r0, [r7, #12]
 8015994:	f000 ffa9 	bl	80168ea <USBD_CtlSendStatus>
 8015998:	e01b      	b.n	80159d2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a0:	699b      	ldr	r3, [r3, #24]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d013      	beq.n	80159ce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80159ac:	2b03      	cmp	r3, #3
 80159ae:	d10e      	bne.n	80159ce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159b6:	699b      	ldr	r3, [r3, #24]
 80159b8:	7afa      	ldrb	r2, [r7, #11]
 80159ba:	4611      	mov	r1, r2
 80159bc:	68f8      	ldr	r0, [r7, #12]
 80159be:	4798      	blx	r3
 80159c0:	4603      	mov	r3, r0
 80159c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80159c4:	7dfb      	ldrb	r3, [r7, #23]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d003      	beq.n	80159d2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80159ca:	7dfb      	ldrb	r3, [r7, #23]
 80159cc:	e002      	b.n	80159d4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80159ce:	2303      	movs	r3, #3
 80159d0:	e000      	b.n	80159d4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	460b      	mov	r3, r1
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80159ea:	7afb      	ldrb	r3, [r7, #11]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d16a      	bne.n	8015ac6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	3314      	adds	r3, #20
 80159f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d155      	bne.n	8015aac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	689a      	ldr	r2, [r3, #8]
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d914      	bls.n	8015a36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015a0c:	693b      	ldr	r3, [r7, #16]
 8015a0e:	689a      	ldr	r2, [r3, #8]
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	1ad2      	subs	r2, r2, r3
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015a1a:	693b      	ldr	r3, [r7, #16]
 8015a1c:	689b      	ldr	r3, [r3, #8]
 8015a1e:	461a      	mov	r2, r3
 8015a20:	6879      	ldr	r1, [r7, #4]
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f000 ff22 	bl	801686c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a28:	2300      	movs	r3, #0
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	f004 fb4c 	bl	801a0cc <USBD_LL_PrepareReceive>
 8015a34:	e03a      	b.n	8015aac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	68da      	ldr	r2, [r3, #12]
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	689b      	ldr	r3, [r3, #8]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d11c      	bne.n	8015a7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	685a      	ldr	r2, [r3, #4]
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d316      	bcc.n	8015a7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	685a      	ldr	r2, [r3, #4]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d20f      	bcs.n	8015a7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	2100      	movs	r1, #0
 8015a60:	68f8      	ldr	r0, [r7, #12]
 8015a62:	f000 ff03 	bl	801686c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a6e:	2300      	movs	r3, #0
 8015a70:	2200      	movs	r2, #0
 8015a72:	2100      	movs	r1, #0
 8015a74:	68f8      	ldr	r0, [r7, #12]
 8015a76:	f004 fb29 	bl	801a0cc <USBD_LL_PrepareReceive>
 8015a7a:	e017      	b.n	8015aac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a82:	68db      	ldr	r3, [r3, #12]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d00a      	beq.n	8015a9e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015a8e:	2b03      	cmp	r3, #3
 8015a90:	d105      	bne.n	8015a9e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a98:	68db      	ldr	r3, [r3, #12]
 8015a9a:	68f8      	ldr	r0, [r7, #12]
 8015a9c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a9e:	2180      	movs	r1, #128	; 0x80
 8015aa0:	68f8      	ldr	r0, [r7, #12]
 8015aa2:	f004 fa69 	bl	8019f78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015aa6:	68f8      	ldr	r0, [r7, #12]
 8015aa8:	f000 ff32 	bl	8016910 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d123      	bne.n	8015afe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015ab6:	68f8      	ldr	r0, [r7, #12]
 8015ab8:	f7ff fe9b 	bl	80157f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015ac4:	e01b      	b.n	8015afe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015acc:	695b      	ldr	r3, [r3, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d013      	beq.n	8015afa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8015ad8:	2b03      	cmp	r3, #3
 8015ada:	d10e      	bne.n	8015afa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ae2:	695b      	ldr	r3, [r3, #20]
 8015ae4:	7afa      	ldrb	r2, [r7, #11]
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	68f8      	ldr	r0, [r7, #12]
 8015aea:	4798      	blx	r3
 8015aec:	4603      	mov	r3, r0
 8015aee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015af0:	7dfb      	ldrb	r3, [r7, #23]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d003      	beq.n	8015afe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015af6:	7dfb      	ldrb	r3, [r7, #23]
 8015af8:	e002      	b.n	8015b00 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015afa:	2303      	movs	r3, #3
 8015afc:	e000      	b.n	8015b00 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015afe:	2300      	movs	r3, #0
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3718      	adds	r7, #24
 8015b04:	46bd      	mov	sp, r7
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2201      	movs	r2, #1
 8015b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2200      	movs	r2, #0
 8015b24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d009      	beq.n	8015b4c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	687a      	ldr	r2, [r7, #4]
 8015b42:	6852      	ldr	r2, [r2, #4]
 8015b44:	b2d2      	uxtb	r2, r2
 8015b46:	4611      	mov	r1, r2
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b4c:	2340      	movs	r3, #64	; 0x40
 8015b4e:	2200      	movs	r2, #0
 8015b50:	2100      	movs	r1, #0
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	f004 f9cb 	bl	8019eee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2240      	movs	r2, #64	; 0x40
 8015b64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b68:	2340      	movs	r3, #64	; 0x40
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2180      	movs	r1, #128	; 0x80
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f004 f9bd 	bl	8019eee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2201      	movs	r2, #1
 8015b78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2240      	movs	r2, #64	; 0x40
 8015b7e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015b80:	2300      	movs	r3, #0
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3708      	adds	r7, #8
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b8a:	b480      	push	{r7}
 8015b8c:	b083      	sub	sp, #12
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
 8015b92:	460b      	mov	r3, r1
 8015b94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	78fa      	ldrb	r2, [r7, #3]
 8015b9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b9c:	2300      	movs	r3, #0
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	370c      	adds	r7, #12
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba8:	4770      	bx	lr

08015baa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015baa:	b480      	push	{r7}
 8015bac:	b083      	sub	sp, #12
 8015bae:	af00      	add	r7, sp, #0
 8015bb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	2204      	movs	r2, #4
 8015bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015bc6:	2300      	movs	r3, #0
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	370c      	adds	r7, #12
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr

08015bd4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b083      	sub	sp, #12
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015be2:	2b04      	cmp	r3, #4
 8015be4:	d105      	bne.n	8015bf2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015bf2:	2300      	movs	r3, #0
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c0e:	2b03      	cmp	r3, #3
 8015c10:	d10b      	bne.n	8015c2a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c18:	69db      	ldr	r3, [r3, #28]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d005      	beq.n	8015c2a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c24:	69db      	ldr	r3, [r3, #28]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c2a:	2300      	movs	r3, #0
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c34:	b480      	push	{r7}
 8015c36:	b083      	sub	sp, #12
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015c40:	2300      	movs	r3, #0
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	370c      	adds	r7, #12
 8015c46:	46bd      	mov	sp, r7
 8015c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4c:	4770      	bx	lr

08015c4e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c4e:	b480      	push	{r7}
 8015c50:	b083      	sub	sp, #12
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
 8015c56:	460b      	mov	r3, r1
 8015c58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015c5a:	2300      	movs	r3, #0
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	370c      	adds	r7, #12
 8015c60:	46bd      	mov	sp, r7
 8015c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c66:	4770      	bx	lr

08015c68 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015c70:	2300      	movs	r3, #0
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	370c      	adds	r7, #12
 8015c76:	46bd      	mov	sp, r7
 8015c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7c:	4770      	bx	lr

08015c7e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015c7e:	b580      	push	{r7, lr}
 8015c80:	b082      	sub	sp, #8
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2201      	movs	r2, #1
 8015c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d009      	beq.n	8015cac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	687a      	ldr	r2, [r7, #4]
 8015ca2:	6852      	ldr	r2, [r2, #4]
 8015ca4:	b2d2      	uxtb	r2, r2
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	4798      	blx	r3
  }

  return USBD_OK;
 8015cac:	2300      	movs	r3, #0
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3708      	adds	r7, #8
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015cb6:	b480      	push	{r7}
 8015cb8:	b087      	sub	sp, #28
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	781b      	ldrb	r3, [r3, #0]
 8015cc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	781b      	ldrb	r3, [r3, #0]
 8015cd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015cd4:	8a3b      	ldrh	r3, [r7, #16]
 8015cd6:	021b      	lsls	r3, r3, #8
 8015cd8:	b21a      	sxth	r2, r3
 8015cda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015cde:	4313      	orrs	r3, r2
 8015ce0:	b21b      	sxth	r3, r3
 8015ce2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015ce4:	89fb      	ldrh	r3, [r7, #14]
}
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	371c      	adds	r7, #28
 8015cea:	46bd      	mov	sp, r7
 8015cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf0:	4770      	bx	lr
	...

08015cf4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d0a:	2b20      	cmp	r3, #32
 8015d0c:	d004      	beq.n	8015d18 <USBD_StdDevReq+0x24>
 8015d0e:	2b40      	cmp	r3, #64	; 0x40
 8015d10:	d002      	beq.n	8015d18 <USBD_StdDevReq+0x24>
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d00a      	beq.n	8015d2c <USBD_StdDevReq+0x38>
 8015d16:	e050      	b.n	8015dba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	6839      	ldr	r1, [r7, #0]
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	4798      	blx	r3
 8015d26:	4603      	mov	r3, r0
 8015d28:	73fb      	strb	r3, [r7, #15]
    break;
 8015d2a:	e04b      	b.n	8015dc4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	785b      	ldrb	r3, [r3, #1]
 8015d30:	2b09      	cmp	r3, #9
 8015d32:	d83c      	bhi.n	8015dae <USBD_StdDevReq+0xba>
 8015d34:	a201      	add	r2, pc, #4	; (adr r2, 8015d3c <USBD_StdDevReq+0x48>)
 8015d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d3a:	bf00      	nop
 8015d3c:	08015d91 	.word	0x08015d91
 8015d40:	08015da5 	.word	0x08015da5
 8015d44:	08015daf 	.word	0x08015daf
 8015d48:	08015d9b 	.word	0x08015d9b
 8015d4c:	08015daf 	.word	0x08015daf
 8015d50:	08015d6f 	.word	0x08015d6f
 8015d54:	08015d65 	.word	0x08015d65
 8015d58:	08015daf 	.word	0x08015daf
 8015d5c:	08015d87 	.word	0x08015d87
 8015d60:	08015d79 	.word	0x08015d79
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8015d64:	6839      	ldr	r1, [r7, #0]
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f000 f9ce 	bl	8016108 <USBD_GetDescriptor>
      break;
 8015d6c:	e024      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8015d6e:	6839      	ldr	r1, [r7, #0]
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f000 fb33 	bl	80163dc <USBD_SetAddress>
      break;
 8015d76:	e01f      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8015d78:	6839      	ldr	r1, [r7, #0]
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 fb70 	bl	8016460 <USBD_SetConfig>
 8015d80:	4603      	mov	r3, r0
 8015d82:	73fb      	strb	r3, [r7, #15]
      break;
 8015d84:	e018      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8015d86:	6839      	ldr	r1, [r7, #0]
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f000 fc0d 	bl	80165a8 <USBD_GetConfig>
      break;
 8015d8e:	e013      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8015d90:	6839      	ldr	r1, [r7, #0]
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f000 fc3c 	bl	8016610 <USBD_GetStatus>
      break;
 8015d98:	e00e      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8015d9a:	6839      	ldr	r1, [r7, #0]
 8015d9c:	6878      	ldr	r0, [r7, #4]
 8015d9e:	f000 fc6a 	bl	8016676 <USBD_SetFeature>
      break;
 8015da2:	e009      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 fc79 	bl	801669e <USBD_ClrFeature>
      break;
 8015dac:	e004      	b.n	8015db8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8015dae:	6839      	ldr	r1, [r7, #0]
 8015db0:	6878      	ldr	r0, [r7, #4]
 8015db2:	f000 fccf 	bl	8016754 <USBD_CtlError>
      break;
 8015db6:	bf00      	nop
    }
    break;
 8015db8:	e004      	b.n	8015dc4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8015dba:	6839      	ldr	r1, [r7, #0]
 8015dbc:	6878      	ldr	r0, [r7, #4]
 8015dbe:	f000 fcc9 	bl	8016754 <USBD_CtlError>
    break;
 8015dc2:	bf00      	nop
  }

  return ret;
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3710      	adds	r7, #16
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop

08015dd0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b084      	sub	sp, #16
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
 8015dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015de6:	2b20      	cmp	r3, #32
 8015de8:	d003      	beq.n	8015df2 <USBD_StdItfReq+0x22>
 8015dea:	2b40      	cmp	r3, #64	; 0x40
 8015dec:	d001      	beq.n	8015df2 <USBD_StdItfReq+0x22>
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d12a      	bne.n	8015e48 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	2b02      	cmp	r3, #2
 8015dfc:	d81d      	bhi.n	8015e3a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	889b      	ldrh	r3, [r3, #4]
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d813      	bhi.n	8015e30 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e0e:	689b      	ldr	r3, [r3, #8]
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	4798      	blx	r3
 8015e16:	4603      	mov	r3, r0
 8015e18:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	88db      	ldrh	r3, [r3, #6]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d110      	bne.n	8015e44 <USBD_StdItfReq+0x74>
 8015e22:	7bfb      	ldrb	r3, [r7, #15]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d10d      	bne.n	8015e44 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f000 fd5e 	bl	80168ea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8015e2e:	e009      	b.n	8015e44 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f000 fc8e 	bl	8016754 <USBD_CtlError>
      break;
 8015e38:	e004      	b.n	8015e44 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8015e3a:	6839      	ldr	r1, [r7, #0]
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f000 fc89 	bl	8016754 <USBD_CtlError>
      break;
 8015e42:	e000      	b.n	8015e46 <USBD_StdItfReq+0x76>
      break;
 8015e44:	bf00      	nop
    }
    break;
 8015e46:	e004      	b.n	8015e52 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f000 fc82 	bl	8016754 <USBD_CtlError>
    break;
 8015e50:	bf00      	nop
  }

  return ret;
 8015e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3710      	adds	r7, #16
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}

08015e5c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	889b      	ldrh	r3, [r3, #4]
 8015e6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e78:	2b20      	cmp	r3, #32
 8015e7a:	d004      	beq.n	8015e86 <USBD_StdEPReq+0x2a>
 8015e7c:	2b40      	cmp	r3, #64	; 0x40
 8015e7e:	d002      	beq.n	8015e86 <USBD_StdEPReq+0x2a>
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d00a      	beq.n	8015e9a <USBD_StdEPReq+0x3e>
 8015e84:	e135      	b.n	80160f2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	6839      	ldr	r1, [r7, #0]
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	4798      	blx	r3
 8015e94:	4603      	mov	r3, r0
 8015e96:	73fb      	strb	r3, [r7, #15]
    break;
 8015e98:	e130      	b.n	80160fc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	785b      	ldrb	r3, [r3, #1]
 8015e9e:	2b01      	cmp	r3, #1
 8015ea0:	d03e      	beq.n	8015f20 <USBD_StdEPReq+0xc4>
 8015ea2:	2b03      	cmp	r3, #3
 8015ea4:	d002      	beq.n	8015eac <USBD_StdEPReq+0x50>
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d077      	beq.n	8015f9a <USBD_StdEPReq+0x13e>
 8015eaa:	e11c      	b.n	80160e6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015eb2:	2b02      	cmp	r3, #2
 8015eb4:	d002      	beq.n	8015ebc <USBD_StdEPReq+0x60>
 8015eb6:	2b03      	cmp	r3, #3
 8015eb8:	d015      	beq.n	8015ee6 <USBD_StdEPReq+0x8a>
 8015eba:	e02b      	b.n	8015f14 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ebc:	7bbb      	ldrb	r3, [r7, #14]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d00c      	beq.n	8015edc <USBD_StdEPReq+0x80>
 8015ec2:	7bbb      	ldrb	r3, [r7, #14]
 8015ec4:	2b80      	cmp	r3, #128	; 0x80
 8015ec6:	d009      	beq.n	8015edc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ec8:	7bbb      	ldrb	r3, [r7, #14]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f004 f853 	bl	8019f78 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ed2:	2180      	movs	r1, #128	; 0x80
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f004 f84f 	bl	8019f78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015eda:	e020      	b.n	8015f1e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8015edc:	6839      	ldr	r1, [r7, #0]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fc38 	bl	8016754 <USBD_CtlError>
        break;
 8015ee4:	e01b      	b.n	8015f1e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	885b      	ldrh	r3, [r3, #2]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d10e      	bne.n	8015f0c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015eee:	7bbb      	ldrb	r3, [r7, #14]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d00b      	beq.n	8015f0c <USBD_StdEPReq+0xb0>
 8015ef4:	7bbb      	ldrb	r3, [r7, #14]
 8015ef6:	2b80      	cmp	r3, #128	; 0x80
 8015ef8:	d008      	beq.n	8015f0c <USBD_StdEPReq+0xb0>
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	88db      	ldrh	r3, [r3, #6]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d104      	bne.n	8015f0c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f02:	7bbb      	ldrb	r3, [r7, #14]
 8015f04:	4619      	mov	r1, r3
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f004 f836 	bl	8019f78 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 fcec 	bl	80168ea <USBD_CtlSendStatus>

        break;
 8015f12:	e004      	b.n	8015f1e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fc1c 	bl	8016754 <USBD_CtlError>
        break;
 8015f1c:	bf00      	nop
      }
      break;
 8015f1e:	e0e7      	b.n	80160f0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f26:	2b02      	cmp	r3, #2
 8015f28:	d002      	beq.n	8015f30 <USBD_StdEPReq+0xd4>
 8015f2a:	2b03      	cmp	r3, #3
 8015f2c:	d015      	beq.n	8015f5a <USBD_StdEPReq+0xfe>
 8015f2e:	e02d      	b.n	8015f8c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f30:	7bbb      	ldrb	r3, [r7, #14]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d00c      	beq.n	8015f50 <USBD_StdEPReq+0xf4>
 8015f36:	7bbb      	ldrb	r3, [r7, #14]
 8015f38:	2b80      	cmp	r3, #128	; 0x80
 8015f3a:	d009      	beq.n	8015f50 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f3c:	7bbb      	ldrb	r3, [r7, #14]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f004 f819 	bl	8019f78 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f46:	2180      	movs	r1, #128	; 0x80
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f004 f815 	bl	8019f78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015f4e:	e023      	b.n	8015f98 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015f50:	6839      	ldr	r1, [r7, #0]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 fbfe 	bl	8016754 <USBD_CtlError>
        break;
 8015f58:	e01e      	b.n	8015f98 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	885b      	ldrh	r3, [r3, #2]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d119      	bne.n	8015f96 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015f62:	7bbb      	ldrb	r3, [r7, #14]
 8015f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d004      	beq.n	8015f76 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015f6c:	7bbb      	ldrb	r3, [r7, #14]
 8015f6e:	4619      	mov	r1, r3
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f004 f820 	bl	8019fb6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f000 fcb7 	bl	80168ea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f82:	689b      	ldr	r3, [r3, #8]
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	4798      	blx	r3
        }
        break;
 8015f8a:	e004      	b.n	8015f96 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015f8c:	6839      	ldr	r1, [r7, #0]
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f000 fbe0 	bl	8016754 <USBD_CtlError>
        break;
 8015f94:	e000      	b.n	8015f98 <USBD_StdEPReq+0x13c>
        break;
 8015f96:	bf00      	nop
      }
      break;
 8015f98:	e0aa      	b.n	80160f0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fa0:	2b02      	cmp	r3, #2
 8015fa2:	d002      	beq.n	8015faa <USBD_StdEPReq+0x14e>
 8015fa4:	2b03      	cmp	r3, #3
 8015fa6:	d032      	beq.n	801600e <USBD_StdEPReq+0x1b2>
 8015fa8:	e097      	b.n	80160da <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015faa:	7bbb      	ldrb	r3, [r7, #14]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d007      	beq.n	8015fc0 <USBD_StdEPReq+0x164>
 8015fb0:	7bbb      	ldrb	r3, [r7, #14]
 8015fb2:	2b80      	cmp	r3, #128	; 0x80
 8015fb4:	d004      	beq.n	8015fc0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015fb6:	6839      	ldr	r1, [r7, #0]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 fbcb 	bl	8016754 <USBD_CtlError>
          break;
 8015fbe:	e091      	b.n	80160e4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	da0b      	bge.n	8015fe0 <USBD_StdEPReq+0x184>
 8015fc8:	7bbb      	ldrb	r3, [r7, #14]
 8015fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fce:	4613      	mov	r3, r2
 8015fd0:	009b      	lsls	r3, r3, #2
 8015fd2:	4413      	add	r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	3310      	adds	r3, #16
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	4413      	add	r3, r2
 8015fdc:	3304      	adds	r3, #4
 8015fde:	e00b      	b.n	8015ff8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015fe0:	7bbb      	ldrb	r3, [r7, #14]
 8015fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	009b      	lsls	r3, r3, #2
 8015fea:	4413      	add	r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ff2:	687a      	ldr	r2, [r7, #4]
 8015ff4:	4413      	add	r3, r2
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	2202      	movs	r2, #2
 8016004:	4619      	mov	r1, r3
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 fc15 	bl	8016836 <USBD_CtlSendData>
        break;
 801600c:	e06a      	b.n	80160e4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801600e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016012:	2b00      	cmp	r3, #0
 8016014:	da11      	bge.n	801603a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016016:	7bbb      	ldrb	r3, [r7, #14]
 8016018:	f003 020f 	and.w	r2, r3, #15
 801601c:	6879      	ldr	r1, [r7, #4]
 801601e:	4613      	mov	r3, r2
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	4413      	add	r3, r2
 8016024:	009b      	lsls	r3, r3, #2
 8016026:	440b      	add	r3, r1
 8016028:	3324      	adds	r3, #36	; 0x24
 801602a:	881b      	ldrh	r3, [r3, #0]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d117      	bne.n	8016060 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016030:	6839      	ldr	r1, [r7, #0]
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 fb8e 	bl	8016754 <USBD_CtlError>
            break;
 8016038:	e054      	b.n	80160e4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801603a:	7bbb      	ldrb	r3, [r7, #14]
 801603c:	f003 020f 	and.w	r2, r3, #15
 8016040:	6879      	ldr	r1, [r7, #4]
 8016042:	4613      	mov	r3, r2
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	4413      	add	r3, r2
 8016048:	009b      	lsls	r3, r3, #2
 801604a:	440b      	add	r3, r1
 801604c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016050:	881b      	ldrh	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d104      	bne.n	8016060 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016056:	6839      	ldr	r1, [r7, #0]
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 fb7b 	bl	8016754 <USBD_CtlError>
            break;
 801605e:	e041      	b.n	80160e4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016064:	2b00      	cmp	r3, #0
 8016066:	da0b      	bge.n	8016080 <USBD_StdEPReq+0x224>
 8016068:	7bbb      	ldrb	r3, [r7, #14]
 801606a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801606e:	4613      	mov	r3, r2
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	4413      	add	r3, r2
 8016074:	009b      	lsls	r3, r3, #2
 8016076:	3310      	adds	r3, #16
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	4413      	add	r3, r2
 801607c:	3304      	adds	r3, #4
 801607e:	e00b      	b.n	8016098 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016080:	7bbb      	ldrb	r3, [r7, #14]
 8016082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016086:	4613      	mov	r3, r2
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	4413      	add	r3, r2
 801608c:	009b      	lsls	r3, r3, #2
 801608e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016092:	687a      	ldr	r2, [r7, #4]
 8016094:	4413      	add	r3, r2
 8016096:	3304      	adds	r3, #4
 8016098:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801609a:	7bbb      	ldrb	r3, [r7, #14]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d002      	beq.n	80160a6 <USBD_StdEPReq+0x24a>
 80160a0:	7bbb      	ldrb	r3, [r7, #14]
 80160a2:	2b80      	cmp	r3, #128	; 0x80
 80160a4:	d103      	bne.n	80160ae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	2200      	movs	r2, #0
 80160aa:	601a      	str	r2, [r3, #0]
 80160ac:	e00e      	b.n	80160cc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80160ae:	7bbb      	ldrb	r3, [r7, #14]
 80160b0:	4619      	mov	r1, r3
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f003 ff9e 	bl	8019ff4 <USBD_LL_IsStallEP>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d003      	beq.n	80160c6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2201      	movs	r2, #1
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	e002      	b.n	80160cc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	2200      	movs	r2, #0
 80160ca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	2202      	movs	r2, #2
 80160d0:	4619      	mov	r1, r3
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 fbaf 	bl	8016836 <USBD_CtlSendData>
          break;
 80160d8:	e004      	b.n	80160e4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80160da:	6839      	ldr	r1, [r7, #0]
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 fb39 	bl	8016754 <USBD_CtlError>
        break;
 80160e2:	bf00      	nop
      }
      break;
 80160e4:	e004      	b.n	80160f0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 fb33 	bl	8016754 <USBD_CtlError>
      break;
 80160ee:	bf00      	nop
    }
    break;
 80160f0:	e004      	b.n	80160fc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80160f2:	6839      	ldr	r1, [r7, #0]
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 fb2d 	bl	8016754 <USBD_CtlError>
    break;
 80160fa:	bf00      	nop
  }

  return ret;
 80160fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3710      	adds	r7, #16
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
	...

08016108 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016112:	2300      	movs	r3, #0
 8016114:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016116:	2300      	movs	r3, #0
 8016118:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801611a:	2300      	movs	r3, #0
 801611c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	885b      	ldrh	r3, [r3, #2]
 8016122:	0a1b      	lsrs	r3, r3, #8
 8016124:	b29b      	uxth	r3, r3
 8016126:	3b01      	subs	r3, #1
 8016128:	2b06      	cmp	r3, #6
 801612a:	f200 8128 	bhi.w	801637e <USBD_GetDescriptor+0x276>
 801612e:	a201      	add	r2, pc, #4	; (adr r2, 8016134 <USBD_GetDescriptor+0x2c>)
 8016130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016134:	08016151 	.word	0x08016151
 8016138:	08016169 	.word	0x08016169
 801613c:	080161a9 	.word	0x080161a9
 8016140:	0801637f 	.word	0x0801637f
 8016144:	0801637f 	.word	0x0801637f
 8016148:	0801631f 	.word	0x0801631f
 801614c:	0801634b 	.word	0x0801634b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	687a      	ldr	r2, [r7, #4]
 801615a:	7c12      	ldrb	r2, [r2, #16]
 801615c:	f107 0108 	add.w	r1, r7, #8
 8016160:	4610      	mov	r0, r2
 8016162:	4798      	blx	r3
 8016164:	60f8      	str	r0, [r7, #12]
    break;
 8016166:	e112      	b.n	801638e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	7c1b      	ldrb	r3, [r3, #16]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d10d      	bne.n	801618c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016178:	f107 0208 	add.w	r2, r7, #8
 801617c:	4610      	mov	r0, r2
 801617e:	4798      	blx	r3
 8016180:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	3301      	adds	r3, #1
 8016186:	2202      	movs	r2, #2
 8016188:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801618a:	e100      	b.n	801638e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016194:	f107 0208 	add.w	r2, r7, #8
 8016198:	4610      	mov	r0, r2
 801619a:	4798      	blx	r3
 801619c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	3301      	adds	r3, #1
 80161a2:	2202      	movs	r2, #2
 80161a4:	701a      	strb	r2, [r3, #0]
    break;
 80161a6:	e0f2      	b.n	801638e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	885b      	ldrh	r3, [r3, #2]
 80161ac:	b2db      	uxtb	r3, r3
 80161ae:	2b05      	cmp	r3, #5
 80161b0:	f200 80ac 	bhi.w	801630c <USBD_GetDescriptor+0x204>
 80161b4:	a201      	add	r2, pc, #4	; (adr r2, 80161bc <USBD_GetDescriptor+0xb4>)
 80161b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161ba:	bf00      	nop
 80161bc:	080161d5 	.word	0x080161d5
 80161c0:	08016209 	.word	0x08016209
 80161c4:	0801623d 	.word	0x0801623d
 80161c8:	08016271 	.word	0x08016271
 80161cc:	080162a5 	.word	0x080162a5
 80161d0:	080162d9 	.word	0x080162d9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d00b      	beq.n	80161f8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	7c12      	ldrb	r2, [r2, #16]
 80161ec:	f107 0108 	add.w	r1, r7, #8
 80161f0:	4610      	mov	r0, r2
 80161f2:	4798      	blx	r3
 80161f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80161f6:	e091      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80161f8:	6839      	ldr	r1, [r7, #0]
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 faaa 	bl	8016754 <USBD_CtlError>
        err++;
 8016200:	7afb      	ldrb	r3, [r7, #11]
 8016202:	3301      	adds	r3, #1
 8016204:	72fb      	strb	r3, [r7, #11]
      break;
 8016206:	e089      	b.n	801631c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d00b      	beq.n	801622c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801621a:	689b      	ldr	r3, [r3, #8]
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	7c12      	ldrb	r2, [r2, #16]
 8016220:	f107 0108 	add.w	r1, r7, #8
 8016224:	4610      	mov	r0, r2
 8016226:	4798      	blx	r3
 8016228:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801622a:	e077      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801622c:	6839      	ldr	r1, [r7, #0]
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 fa90 	bl	8016754 <USBD_CtlError>
        err++;
 8016234:	7afb      	ldrb	r3, [r7, #11]
 8016236:	3301      	adds	r3, #1
 8016238:	72fb      	strb	r3, [r7, #11]
      break;
 801623a:	e06f      	b.n	801631c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d00b      	beq.n	8016260 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801624e:	68db      	ldr	r3, [r3, #12]
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	7c12      	ldrb	r2, [r2, #16]
 8016254:	f107 0108 	add.w	r1, r7, #8
 8016258:	4610      	mov	r0, r2
 801625a:	4798      	blx	r3
 801625c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801625e:	e05d      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016260:	6839      	ldr	r1, [r7, #0]
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f000 fa76 	bl	8016754 <USBD_CtlError>
        err++;
 8016268:	7afb      	ldrb	r3, [r7, #11]
 801626a:	3301      	adds	r3, #1
 801626c:	72fb      	strb	r3, [r7, #11]
      break;
 801626e:	e055      	b.n	801631c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016276:	691b      	ldr	r3, [r3, #16]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d00b      	beq.n	8016294 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016282:	691b      	ldr	r3, [r3, #16]
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	7c12      	ldrb	r2, [r2, #16]
 8016288:	f107 0108 	add.w	r1, r7, #8
 801628c:	4610      	mov	r0, r2
 801628e:	4798      	blx	r3
 8016290:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016292:	e043      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016294:	6839      	ldr	r1, [r7, #0]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 fa5c 	bl	8016754 <USBD_CtlError>
        err++;
 801629c:	7afb      	ldrb	r3, [r7, #11]
 801629e:	3301      	adds	r3, #1
 80162a0:	72fb      	strb	r3, [r7, #11]
      break;
 80162a2:	e03b      	b.n	801631c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162aa:	695b      	ldr	r3, [r3, #20]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00b      	beq.n	80162c8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162b6:	695b      	ldr	r3, [r3, #20]
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	7c12      	ldrb	r2, [r2, #16]
 80162bc:	f107 0108 	add.w	r1, r7, #8
 80162c0:	4610      	mov	r0, r2
 80162c2:	4798      	blx	r3
 80162c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162c6:	e029      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80162c8:	6839      	ldr	r1, [r7, #0]
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f000 fa42 	bl	8016754 <USBD_CtlError>
        err++;
 80162d0:	7afb      	ldrb	r3, [r7, #11]
 80162d2:	3301      	adds	r3, #1
 80162d4:	72fb      	strb	r3, [r7, #11]
      break;
 80162d6:	e021      	b.n	801631c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162de:	699b      	ldr	r3, [r3, #24]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d00b      	beq.n	80162fc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162ea:	699b      	ldr	r3, [r3, #24]
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	7c12      	ldrb	r2, [r2, #16]
 80162f0:	f107 0108 	add.w	r1, r7, #8
 80162f4:	4610      	mov	r0, r2
 80162f6:	4798      	blx	r3
 80162f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80162fa:	e00f      	b.n	801631c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80162fc:	6839      	ldr	r1, [r7, #0]
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fa28 	bl	8016754 <USBD_CtlError>
        err++;
 8016304:	7afb      	ldrb	r3, [r7, #11]
 8016306:	3301      	adds	r3, #1
 8016308:	72fb      	strb	r3, [r7, #11]
      break;
 801630a:	e007      	b.n	801631c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801630c:	6839      	ldr	r1, [r7, #0]
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f000 fa20 	bl	8016754 <USBD_CtlError>
      err++;
 8016314:	7afb      	ldrb	r3, [r7, #11]
 8016316:	3301      	adds	r3, #1
 8016318:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801631a:	bf00      	nop
    }
    break;
 801631c:	e037      	b.n	801638e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	7c1b      	ldrb	r3, [r3, #16]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d109      	bne.n	801633a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801632e:	f107 0208 	add.w	r2, r7, #8
 8016332:	4610      	mov	r0, r2
 8016334:	4798      	blx	r3
 8016336:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8016338:	e029      	b.n	801638e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801633a:	6839      	ldr	r1, [r7, #0]
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 fa09 	bl	8016754 <USBD_CtlError>
      err++;
 8016342:	7afb      	ldrb	r3, [r7, #11]
 8016344:	3301      	adds	r3, #1
 8016346:	72fb      	strb	r3, [r7, #11]
    break;
 8016348:	e021      	b.n	801638e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	7c1b      	ldrb	r3, [r3, #16]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d10d      	bne.n	801636e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801635a:	f107 0208 	add.w	r2, r7, #8
 801635e:	4610      	mov	r0, r2
 8016360:	4798      	blx	r3
 8016362:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	3301      	adds	r3, #1
 8016368:	2207      	movs	r2, #7
 801636a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801636c:	e00f      	b.n	801638e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801636e:	6839      	ldr	r1, [r7, #0]
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 f9ef 	bl	8016754 <USBD_CtlError>
      err++;
 8016376:	7afb      	ldrb	r3, [r7, #11]
 8016378:	3301      	adds	r3, #1
 801637a:	72fb      	strb	r3, [r7, #11]
    break;
 801637c:	e007      	b.n	801638e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 801637e:	6839      	ldr	r1, [r7, #0]
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f000 f9e7 	bl	8016754 <USBD_CtlError>
    err++;
 8016386:	7afb      	ldrb	r3, [r7, #11]
 8016388:	3301      	adds	r3, #1
 801638a:	72fb      	strb	r3, [r7, #11]
    break;
 801638c:	bf00      	nop
  }

  if (err != 0U)
 801638e:	7afb      	ldrb	r3, [r7, #11]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d11e      	bne.n	80163d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	88db      	ldrh	r3, [r3, #6]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d016      	beq.n	80163ca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 801639c:	893b      	ldrh	r3, [r7, #8]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00e      	beq.n	80163c0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	88da      	ldrh	r2, [r3, #6]
 80163a6:	893b      	ldrh	r3, [r7, #8]
 80163a8:	4293      	cmp	r3, r2
 80163aa:	bf28      	it	cs
 80163ac:	4613      	movcs	r3, r2
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80163b2:	893b      	ldrh	r3, [r7, #8]
 80163b4:	461a      	mov	r2, r3
 80163b6:	68f9      	ldr	r1, [r7, #12]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 fa3c 	bl	8016836 <USBD_CtlSendData>
 80163be:	e009      	b.n	80163d4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80163c0:	6839      	ldr	r1, [r7, #0]
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	f000 f9c6 	bl	8016754 <USBD_CtlError>
 80163c8:	e004      	b.n	80163d4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f000 fa8d 	bl	80168ea <USBD_CtlSendStatus>
 80163d0:	e000      	b.n	80163d4 <USBD_GetDescriptor+0x2cc>
    return;
 80163d2:	bf00      	nop
    }
  }
}
 80163d4:	3710      	adds	r7, #16
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop

080163dc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	889b      	ldrh	r3, [r3, #4]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d130      	bne.n	8016450 <USBD_SetAddress+0x74>
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	88db      	ldrh	r3, [r3, #6]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d12c      	bne.n	8016450 <USBD_SetAddress+0x74>
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	885b      	ldrh	r3, [r3, #2]
 80163fa:	2b7f      	cmp	r3, #127	; 0x7f
 80163fc:	d828      	bhi.n	8016450 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	885b      	ldrh	r3, [r3, #2]
 8016402:	b2db      	uxtb	r3, r3
 8016404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016410:	2b03      	cmp	r3, #3
 8016412:	d104      	bne.n	801641e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8016414:	6839      	ldr	r1, [r7, #0]
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f000 f99c 	bl	8016754 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801641c:	e01c      	b.n	8016458 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	7bfa      	ldrb	r2, [r7, #15]
 8016422:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016426:	7bfb      	ldrb	r3, [r7, #15]
 8016428:	4619      	mov	r1, r3
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	f003 fe0e 	bl	801a04c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f000 fa5a 	bl	80168ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016436:	7bfb      	ldrb	r3, [r7, #15]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d004      	beq.n	8016446 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2202      	movs	r2, #2
 8016440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016444:	e008      	b.n	8016458 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	2201      	movs	r2, #1
 801644a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801644e:	e003      	b.n	8016458 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016450:	6839      	ldr	r1, [r7, #0]
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 f97e 	bl	8016754 <USBD_CtlError>
  }
}
 8016458:	bf00      	nop
 801645a:	3710      	adds	r7, #16
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}

08016460 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801646a:	2300      	movs	r3, #0
 801646c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	885b      	ldrh	r3, [r3, #2]
 8016472:	b2da      	uxtb	r2, r3
 8016474:	4b4b      	ldr	r3, [pc, #300]	; (80165a4 <USBD_SetConfig+0x144>)
 8016476:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016478:	4b4a      	ldr	r3, [pc, #296]	; (80165a4 <USBD_SetConfig+0x144>)
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	2b01      	cmp	r3, #1
 801647e:	d905      	bls.n	801648c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016480:	6839      	ldr	r1, [r7, #0]
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f000 f966 	bl	8016754 <USBD_CtlError>
    return USBD_FAIL;
 8016488:	2303      	movs	r3, #3
 801648a:	e087      	b.n	801659c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016492:	2b02      	cmp	r3, #2
 8016494:	d002      	beq.n	801649c <USBD_SetConfig+0x3c>
 8016496:	2b03      	cmp	r3, #3
 8016498:	d025      	beq.n	80164e6 <USBD_SetConfig+0x86>
 801649a:	e071      	b.n	8016580 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 801649c:	4b41      	ldr	r3, [pc, #260]	; (80165a4 <USBD_SetConfig+0x144>)
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d01c      	beq.n	80164de <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80164a4:	4b3f      	ldr	r3, [pc, #252]	; (80165a4 <USBD_SetConfig+0x144>)
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	461a      	mov	r2, r3
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80164ae:	4b3d      	ldr	r3, [pc, #244]	; (80165a4 <USBD_SetConfig+0x144>)
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	4619      	mov	r1, r3
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f7ff f9a7 	bl	8015808 <USBD_SetClassConfig>
 80164ba:	4603      	mov	r3, r0
 80164bc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80164be:	7bfb      	ldrb	r3, [r7, #15]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d004      	beq.n	80164ce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80164c4:	6839      	ldr	r1, [r7, #0]
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 f944 	bl	8016754 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80164cc:	e065      	b.n	801659a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fa0b 	bl	80168ea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2203      	movs	r2, #3
 80164d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80164dc:	e05d      	b.n	801659a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 fa03 	bl	80168ea <USBD_CtlSendStatus>
    break;
 80164e4:	e059      	b.n	801659a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80164e6:	4b2f      	ldr	r3, [pc, #188]	; (80165a4 <USBD_SetConfig+0x144>)
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d112      	bne.n	8016514 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2202      	movs	r2, #2
 80164f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80164f6:	4b2b      	ldr	r3, [pc, #172]	; (80165a4 <USBD_SetConfig+0x144>)
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	461a      	mov	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016500:	4b28      	ldr	r3, [pc, #160]	; (80165a4 <USBD_SetConfig+0x144>)
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	4619      	mov	r1, r3
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f7ff f99a 	bl	8015840 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f000 f9ec 	bl	80168ea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016512:	e042      	b.n	801659a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016514:	4b23      	ldr	r3, [pc, #140]	; (80165a4 <USBD_SetConfig+0x144>)
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	461a      	mov	r2, r3
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	429a      	cmp	r2, r3
 8016520:	d02a      	beq.n	8016578 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	b2db      	uxtb	r3, r3
 8016528:	4619      	mov	r1, r3
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f7ff f988 	bl	8015840 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016530:	4b1c      	ldr	r3, [pc, #112]	; (80165a4 <USBD_SetConfig+0x144>)
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	461a      	mov	r2, r3
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801653a:	4b1a      	ldr	r3, [pc, #104]	; (80165a4 <USBD_SetConfig+0x144>)
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	4619      	mov	r1, r3
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f7ff f961 	bl	8015808 <USBD_SetClassConfig>
 8016546:	4603      	mov	r3, r0
 8016548:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801654a:	7bfb      	ldrb	r3, [r7, #15]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00f      	beq.n	8016570 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016550:	6839      	ldr	r1, [r7, #0]
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f000 f8fe 	bl	8016754 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	685b      	ldr	r3, [r3, #4]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	4619      	mov	r1, r3
 8016560:	6878      	ldr	r0, [r7, #4]
 8016562:	f7ff f96d 	bl	8015840 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	2202      	movs	r2, #2
 801656a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801656e:	e014      	b.n	801659a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f000 f9ba 	bl	80168ea <USBD_CtlSendStatus>
    break;
 8016576:	e010      	b.n	801659a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f000 f9b6 	bl	80168ea <USBD_CtlSendStatus>
    break;
 801657e:	e00c      	b.n	801659a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016580:	6839      	ldr	r1, [r7, #0]
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f000 f8e6 	bl	8016754 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016588:	4b06      	ldr	r3, [pc, #24]	; (80165a4 <USBD_SetConfig+0x144>)
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	4619      	mov	r1, r3
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7ff f956 	bl	8015840 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016594:	2303      	movs	r3, #3
 8016596:	73fb      	strb	r3, [r7, #15]
    break;
 8016598:	bf00      	nop
  }

  return ret;
 801659a:	7bfb      	ldrb	r3, [r7, #15]
}
 801659c:	4618      	mov	r0, r3
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}
 80165a4:	200003fc 	.word	0x200003fc

080165a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	88db      	ldrh	r3, [r3, #6]
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d004      	beq.n	80165c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80165ba:	6839      	ldr	r1, [r7, #0]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f000 f8c9 	bl	8016754 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80165c2:	e021      	b.n	8016608 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165ca:	2b01      	cmp	r3, #1
 80165cc:	db17      	blt.n	80165fe <USBD_GetConfig+0x56>
 80165ce:	2b02      	cmp	r3, #2
 80165d0:	dd02      	ble.n	80165d8 <USBD_GetConfig+0x30>
 80165d2:	2b03      	cmp	r3, #3
 80165d4:	d00b      	beq.n	80165ee <USBD_GetConfig+0x46>
 80165d6:	e012      	b.n	80165fe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	2200      	movs	r2, #0
 80165dc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	3308      	adds	r3, #8
 80165e2:	2201      	movs	r2, #1
 80165e4:	4619      	mov	r1, r3
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f000 f925 	bl	8016836 <USBD_CtlSendData>
      break;
 80165ec:	e00c      	b.n	8016608 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	3304      	adds	r3, #4
 80165f2:	2201      	movs	r2, #1
 80165f4:	4619      	mov	r1, r3
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f000 f91d 	bl	8016836 <USBD_CtlSendData>
      break;
 80165fc:	e004      	b.n	8016608 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80165fe:	6839      	ldr	r1, [r7, #0]
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 f8a7 	bl	8016754 <USBD_CtlError>
      break;
 8016606:	bf00      	nop
}
 8016608:	bf00      	nop
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016620:	3b01      	subs	r3, #1
 8016622:	2b02      	cmp	r3, #2
 8016624:	d81e      	bhi.n	8016664 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	88db      	ldrh	r3, [r3, #6]
 801662a:	2b02      	cmp	r3, #2
 801662c:	d004      	beq.n	8016638 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 f88f 	bl	8016754 <USBD_CtlError>
      break;
 8016636:	e01a      	b.n	801666e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016644:	2b00      	cmp	r3, #0
 8016646:	d005      	beq.n	8016654 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	68db      	ldr	r3, [r3, #12]
 801664c:	f043 0202 	orr.w	r2, r3, #2
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	330c      	adds	r3, #12
 8016658:	2202      	movs	r2, #2
 801665a:	4619      	mov	r1, r3
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f000 f8ea 	bl	8016836 <USBD_CtlSendData>
    break;
 8016662:	e004      	b.n	801666e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016664:	6839      	ldr	r1, [r7, #0]
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f000 f874 	bl	8016754 <USBD_CtlError>
    break;
 801666c:	bf00      	nop
  }
}
 801666e:	bf00      	nop
 8016670:	3708      	adds	r7, #8
 8016672:	46bd      	mov	sp, r7
 8016674:	bd80      	pop	{r7, pc}

08016676 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016676:	b580      	push	{r7, lr}
 8016678:	b082      	sub	sp, #8
 801667a:	af00      	add	r7, sp, #0
 801667c:	6078      	str	r0, [r7, #4]
 801667e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016680:	683b      	ldr	r3, [r7, #0]
 8016682:	885b      	ldrh	r3, [r3, #2]
 8016684:	2b01      	cmp	r3, #1
 8016686:	d106      	bne.n	8016696 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2201      	movs	r2, #1
 801668c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f000 f92a 	bl	80168ea <USBD_CtlSendStatus>
  }
}
 8016696:	bf00      	nop
 8016698:	3708      	adds	r7, #8
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}

0801669e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801669e:	b580      	push	{r7, lr}
 80166a0:	b082      	sub	sp, #8
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
 80166a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166ae:	3b01      	subs	r3, #1
 80166b0:	2b02      	cmp	r3, #2
 80166b2:	d80b      	bhi.n	80166cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	885b      	ldrh	r3, [r3, #2]
 80166b8:	2b01      	cmp	r3, #1
 80166ba:	d10c      	bne.n	80166d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2200      	movs	r2, #0
 80166c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f000 f910 	bl	80168ea <USBD_CtlSendStatus>
      }
      break;
 80166ca:	e004      	b.n	80166d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80166cc:	6839      	ldr	r1, [r7, #0]
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f000 f840 	bl	8016754 <USBD_CtlError>
      break;
 80166d4:	e000      	b.n	80166d8 <USBD_ClrFeature+0x3a>
      break;
 80166d6:	bf00      	nop
  }
}
 80166d8:	bf00      	nop
 80166da:	3708      	adds	r7, #8
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}

080166e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b084      	sub	sp, #16
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	781a      	ldrb	r2, [r3, #0]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	3301      	adds	r3, #1
 80166fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	781a      	ldrb	r2, [r3, #0]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	3301      	adds	r3, #1
 8016708:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801670a:	68f8      	ldr	r0, [r7, #12]
 801670c:	f7ff fad3 	bl	8015cb6 <SWAPBYTE>
 8016710:	4603      	mov	r3, r0
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	3301      	adds	r3, #1
 801671c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	3301      	adds	r3, #1
 8016722:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016724:	68f8      	ldr	r0, [r7, #12]
 8016726:	f7ff fac6 	bl	8015cb6 <SWAPBYTE>
 801672a:	4603      	mov	r3, r0
 801672c:	461a      	mov	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	3301      	adds	r3, #1
 8016736:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	3301      	adds	r3, #1
 801673c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801673e:	68f8      	ldr	r0, [r7, #12]
 8016740:	f7ff fab9 	bl	8015cb6 <SWAPBYTE>
 8016744:	4603      	mov	r3, r0
 8016746:	461a      	mov	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	80da      	strh	r2, [r3, #6]
}
 801674c:	bf00      	nop
 801674e:	3710      	adds	r7, #16
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}

08016754 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
 801675c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801675e:	2180      	movs	r1, #128	; 0x80
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f003 fc09 	bl	8019f78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016766:	2100      	movs	r1, #0
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f003 fc05 	bl	8019f78 <USBD_LL_StallEP>
}
 801676e:	bf00      	nop
 8016770:	3708      	adds	r7, #8
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b086      	sub	sp, #24
 801677a:	af00      	add	r7, sp, #0
 801677c:	60f8      	str	r0, [r7, #12]
 801677e:	60b9      	str	r1, [r7, #8]
 8016780:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016782:	2300      	movs	r3, #0
 8016784:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d036      	beq.n	80167fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016790:	6938      	ldr	r0, [r7, #16]
 8016792:	f000 f836 	bl	8016802 <USBD_GetLen>
 8016796:	4603      	mov	r3, r0
 8016798:	3301      	adds	r3, #1
 801679a:	b29b      	uxth	r3, r3
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	b29a      	uxth	r2, r3
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80167a4:	7dfb      	ldrb	r3, [r7, #23]
 80167a6:	68ba      	ldr	r2, [r7, #8]
 80167a8:	4413      	add	r3, r2
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	7812      	ldrb	r2, [r2, #0]
 80167ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80167b0:	7dfb      	ldrb	r3, [r7, #23]
 80167b2:	3301      	adds	r3, #1
 80167b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80167b6:	7dfb      	ldrb	r3, [r7, #23]
 80167b8:	68ba      	ldr	r2, [r7, #8]
 80167ba:	4413      	add	r3, r2
 80167bc:	2203      	movs	r2, #3
 80167be:	701a      	strb	r2, [r3, #0]
  idx++;
 80167c0:	7dfb      	ldrb	r3, [r7, #23]
 80167c2:	3301      	adds	r3, #1
 80167c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80167c6:	e013      	b.n	80167f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80167c8:	7dfb      	ldrb	r3, [r7, #23]
 80167ca:	68ba      	ldr	r2, [r7, #8]
 80167cc:	4413      	add	r3, r2
 80167ce:	693a      	ldr	r2, [r7, #16]
 80167d0:	7812      	ldrb	r2, [r2, #0]
 80167d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	3301      	adds	r3, #1
 80167d8:	613b      	str	r3, [r7, #16]
    idx++;
 80167da:	7dfb      	ldrb	r3, [r7, #23]
 80167dc:	3301      	adds	r3, #1
 80167de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80167e0:	7dfb      	ldrb	r3, [r7, #23]
 80167e2:	68ba      	ldr	r2, [r7, #8]
 80167e4:	4413      	add	r3, r2
 80167e6:	2200      	movs	r2, #0
 80167e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80167ea:	7dfb      	ldrb	r3, [r7, #23]
 80167ec:	3301      	adds	r3, #1
 80167ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d1e7      	bne.n	80167c8 <USBD_GetString+0x52>
 80167f8:	e000      	b.n	80167fc <USBD_GetString+0x86>
    return;
 80167fa:	bf00      	nop
  }
}
 80167fc:	3718      	adds	r7, #24
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016802:	b480      	push	{r7}
 8016804:	b085      	sub	sp, #20
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801680a:	2300      	movs	r3, #0
 801680c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016812:	e005      	b.n	8016820 <USBD_GetLen+0x1e>
  {
    len++;
 8016814:	7bfb      	ldrb	r3, [r7, #15]
 8016816:	3301      	adds	r3, #1
 8016818:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	3301      	adds	r3, #1
 801681e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d1f5      	bne.n	8016814 <USBD_GetLen+0x12>
  }

  return len;
 8016828:	7bfb      	ldrb	r3, [r7, #15]
}
 801682a:	4618      	mov	r0, r3
 801682c:	3714      	adds	r7, #20
 801682e:	46bd      	mov	sp, r7
 8016830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016834:	4770      	bx	lr

08016836 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016836:	b580      	push	{r7, lr}
 8016838:	b084      	sub	sp, #16
 801683a:	af00      	add	r7, sp, #0
 801683c:	60f8      	str	r0, [r7, #12]
 801683e:	60b9      	str	r1, [r7, #8]
 8016840:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2202      	movs	r2, #2
 8016846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	687a      	ldr	r2, [r7, #4]
 801684e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	68ba      	ldr	r2, [r7, #8]
 801685a:	2100      	movs	r1, #0
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	f003 fc14 	bl	801a08a <USBD_LL_Transmit>

  return USBD_OK;
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3710      	adds	r7, #16
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b084      	sub	sp, #16
 8016870:	af00      	add	r7, sp, #0
 8016872:	60f8      	str	r0, [r7, #12]
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	68ba      	ldr	r2, [r7, #8]
 801687c:	2100      	movs	r1, #0
 801687e:	68f8      	ldr	r0, [r7, #12]
 8016880:	f003 fc03 	bl	801a08a <USBD_LL_Transmit>

  return USBD_OK;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801688e:	b580      	push	{r7, lr}
 8016890:	b084      	sub	sp, #16
 8016892:	af00      	add	r7, sp, #0
 8016894:	60f8      	str	r0, [r7, #12]
 8016896:	60b9      	str	r1, [r7, #8]
 8016898:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	2203      	movs	r2, #3
 801689e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	687a      	ldr	r2, [r7, #4]
 80168a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	68ba      	ldr	r2, [r7, #8]
 80168b6:	2100      	movs	r1, #0
 80168b8:	68f8      	ldr	r0, [r7, #12]
 80168ba:	f003 fc07 	bl	801a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168be:	2300      	movs	r3, #0
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3710      	adds	r7, #16
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	60f8      	str	r0, [r7, #12]
 80168d0:	60b9      	str	r1, [r7, #8]
 80168d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	68ba      	ldr	r2, [r7, #8]
 80168d8:	2100      	movs	r1, #0
 80168da:	68f8      	ldr	r0, [r7, #12]
 80168dc:	f003 fbf6 	bl	801a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80168e0:	2300      	movs	r3, #0
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3710      	adds	r7, #16
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}

080168ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b082      	sub	sp, #8
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2204      	movs	r2, #4
 80168f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80168fa:	2300      	movs	r3, #0
 80168fc:	2200      	movs	r2, #0
 80168fe:	2100      	movs	r1, #0
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f003 fbc2 	bl	801a08a <USBD_LL_Transmit>

  return USBD_OK;
 8016906:	2300      	movs	r3, #0
}
 8016908:	4618      	mov	r0, r3
 801690a:	3708      	adds	r7, #8
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2205      	movs	r2, #5
 801691c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016920:	2300      	movs	r3, #0
 8016922:	2200      	movs	r2, #0
 8016924:	2100      	movs	r1, #0
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f003 fbd0 	bl	801a0cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801692c:	2300      	movs	r3, #0
}
 801692e:	4618      	mov	r0, r3
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
	...

08016938 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b084      	sub	sp, #16
 801693c:	af00      	add	r7, sp, #0
 801693e:	4603      	mov	r3, r0
 8016940:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016942:	79fb      	ldrb	r3, [r7, #7]
 8016944:	4a08      	ldr	r2, [pc, #32]	; (8016968 <disk_status+0x30>)
 8016946:	009b      	lsls	r3, r3, #2
 8016948:	4413      	add	r3, r2
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	79fa      	ldrb	r2, [r7, #7]
 8016950:	4905      	ldr	r1, [pc, #20]	; (8016968 <disk_status+0x30>)
 8016952:	440a      	add	r2, r1
 8016954:	7a12      	ldrb	r2, [r2, #8]
 8016956:	4610      	mov	r0, r2
 8016958:	4798      	blx	r3
 801695a:	4603      	mov	r3, r0
 801695c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	20000628 	.word	0x20000628

0801696c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	4603      	mov	r3, r0
 8016974:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016976:	2300      	movs	r3, #0
 8016978:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801697a:	79fb      	ldrb	r3, [r7, #7]
 801697c:	4a0d      	ldr	r2, [pc, #52]	; (80169b4 <disk_initialize+0x48>)
 801697e:	5cd3      	ldrb	r3, [r2, r3]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d111      	bne.n	80169a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016984:	79fb      	ldrb	r3, [r7, #7]
 8016986:	4a0b      	ldr	r2, [pc, #44]	; (80169b4 <disk_initialize+0x48>)
 8016988:	2101      	movs	r1, #1
 801698a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801698c:	79fb      	ldrb	r3, [r7, #7]
 801698e:	4a09      	ldr	r2, [pc, #36]	; (80169b4 <disk_initialize+0x48>)
 8016990:	009b      	lsls	r3, r3, #2
 8016992:	4413      	add	r3, r2
 8016994:	685b      	ldr	r3, [r3, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	79fa      	ldrb	r2, [r7, #7]
 801699a:	4906      	ldr	r1, [pc, #24]	; (80169b4 <disk_initialize+0x48>)
 801699c:	440a      	add	r2, r1
 801699e:	7a12      	ldrb	r2, [r2, #8]
 80169a0:	4610      	mov	r0, r2
 80169a2:	4798      	blx	r3
 80169a4:	4603      	mov	r3, r0
 80169a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80169a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	20000628 	.word	0x20000628

080169b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80169b8:	b590      	push	{r4, r7, lr}
 80169ba:	b087      	sub	sp, #28
 80169bc:	af00      	add	r7, sp, #0
 80169be:	60b9      	str	r1, [r7, #8]
 80169c0:	607a      	str	r2, [r7, #4]
 80169c2:	603b      	str	r3, [r7, #0]
 80169c4:	4603      	mov	r3, r0
 80169c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80169c8:	7bfb      	ldrb	r3, [r7, #15]
 80169ca:	4a0a      	ldr	r2, [pc, #40]	; (80169f4 <disk_read+0x3c>)
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	4413      	add	r3, r2
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	689c      	ldr	r4, [r3, #8]
 80169d4:	7bfb      	ldrb	r3, [r7, #15]
 80169d6:	4a07      	ldr	r2, [pc, #28]	; (80169f4 <disk_read+0x3c>)
 80169d8:	4413      	add	r3, r2
 80169da:	7a18      	ldrb	r0, [r3, #8]
 80169dc:	683b      	ldr	r3, [r7, #0]
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	68b9      	ldr	r1, [r7, #8]
 80169e2:	47a0      	blx	r4
 80169e4:	4603      	mov	r3, r0
 80169e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80169e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	371c      	adds	r7, #28
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd90      	pop	{r4, r7, pc}
 80169f2:	bf00      	nop
 80169f4:	20000628 	.word	0x20000628

080169f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80169f8:	b590      	push	{r4, r7, lr}
 80169fa:	b087      	sub	sp, #28
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	60b9      	str	r1, [r7, #8]
 8016a00:	607a      	str	r2, [r7, #4]
 8016a02:	603b      	str	r3, [r7, #0]
 8016a04:	4603      	mov	r3, r0
 8016a06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016a08:	7bfb      	ldrb	r3, [r7, #15]
 8016a0a:	4a0a      	ldr	r2, [pc, #40]	; (8016a34 <disk_write+0x3c>)
 8016a0c:	009b      	lsls	r3, r3, #2
 8016a0e:	4413      	add	r3, r2
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	68dc      	ldr	r4, [r3, #12]
 8016a14:	7bfb      	ldrb	r3, [r7, #15]
 8016a16:	4a07      	ldr	r2, [pc, #28]	; (8016a34 <disk_write+0x3c>)
 8016a18:	4413      	add	r3, r2
 8016a1a:	7a18      	ldrb	r0, [r3, #8]
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	687a      	ldr	r2, [r7, #4]
 8016a20:	68b9      	ldr	r1, [r7, #8]
 8016a22:	47a0      	blx	r4
 8016a24:	4603      	mov	r3, r0
 8016a26:	75fb      	strb	r3, [r7, #23]
  return res;
 8016a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	371c      	adds	r7, #28
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd90      	pop	{r4, r7, pc}
 8016a32:	bf00      	nop
 8016a34:	20000628 	.word	0x20000628

08016a38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b084      	sub	sp, #16
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	4603      	mov	r3, r0
 8016a40:	603a      	str	r2, [r7, #0]
 8016a42:	71fb      	strb	r3, [r7, #7]
 8016a44:	460b      	mov	r3, r1
 8016a46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016a48:	79fb      	ldrb	r3, [r7, #7]
 8016a4a:	4a09      	ldr	r2, [pc, #36]	; (8016a70 <disk_ioctl+0x38>)
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	4413      	add	r3, r2
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	691b      	ldr	r3, [r3, #16]
 8016a54:	79fa      	ldrb	r2, [r7, #7]
 8016a56:	4906      	ldr	r1, [pc, #24]	; (8016a70 <disk_ioctl+0x38>)
 8016a58:	440a      	add	r2, r1
 8016a5a:	7a10      	ldrb	r0, [r2, #8]
 8016a5c:	79b9      	ldrb	r1, [r7, #6]
 8016a5e:	683a      	ldr	r2, [r7, #0]
 8016a60:	4798      	blx	r3
 8016a62:	4603      	mov	r3, r0
 8016a64:	73fb      	strb	r3, [r7, #15]
  return res;
 8016a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3710      	adds	r7, #16
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	20000628 	.word	0x20000628

08016a74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016a74:	b480      	push	{r7}
 8016a76:	b085      	sub	sp, #20
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016a84:	89fb      	ldrh	r3, [r7, #14]
 8016a86:	021b      	lsls	r3, r3, #8
 8016a88:	b21a      	sxth	r2, r3
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	b21b      	sxth	r3, r3
 8016a90:	4313      	orrs	r3, r2
 8016a92:	b21b      	sxth	r3, r3
 8016a94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016a96:	89fb      	ldrh	r3, [r7, #14]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3714      	adds	r7, #20
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016aa4:	b480      	push	{r7}
 8016aa6:	b085      	sub	sp, #20
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	3303      	adds	r3, #3
 8016ab0:	781b      	ldrb	r3, [r3, #0]
 8016ab2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	021b      	lsls	r3, r3, #8
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	3202      	adds	r2, #2
 8016abc:	7812      	ldrb	r2, [r2, #0]
 8016abe:	4313      	orrs	r3, r2
 8016ac0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	021b      	lsls	r3, r3, #8
 8016ac6:	687a      	ldr	r2, [r7, #4]
 8016ac8:	3201      	adds	r2, #1
 8016aca:	7812      	ldrb	r2, [r2, #0]
 8016acc:	4313      	orrs	r3, r2
 8016ace:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	021b      	lsls	r3, r3, #8
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	7812      	ldrb	r2, [r2, #0]
 8016ad8:	4313      	orrs	r3, r2
 8016ada:	60fb      	str	r3, [r7, #12]
	return rv;
 8016adc:	68fb      	ldr	r3, [r7, #12]
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3714      	adds	r7, #20
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae8:	4770      	bx	lr

08016aea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016aea:	b480      	push	{r7}
 8016aec:	b083      	sub	sp, #12
 8016aee:	af00      	add	r7, sp, #0
 8016af0:	6078      	str	r0, [r7, #4]
 8016af2:	460b      	mov	r3, r1
 8016af4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	1c5a      	adds	r2, r3, #1
 8016afa:	607a      	str	r2, [r7, #4]
 8016afc:	887a      	ldrh	r2, [r7, #2]
 8016afe:	b2d2      	uxtb	r2, r2
 8016b00:	701a      	strb	r2, [r3, #0]
 8016b02:	887b      	ldrh	r3, [r7, #2]
 8016b04:	0a1b      	lsrs	r3, r3, #8
 8016b06:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	1c5a      	adds	r2, r3, #1
 8016b0c:	607a      	str	r2, [r7, #4]
 8016b0e:	887a      	ldrh	r2, [r7, #2]
 8016b10:	b2d2      	uxtb	r2, r2
 8016b12:	701a      	strb	r2, [r3, #0]
}
 8016b14:	bf00      	nop
 8016b16:	370c      	adds	r7, #12
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1e:	4770      	bx	lr

08016b20 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016b20:	b480      	push	{r7}
 8016b22:	b083      	sub	sp, #12
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
 8016b28:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	1c5a      	adds	r2, r3, #1
 8016b2e:	607a      	str	r2, [r7, #4]
 8016b30:	683a      	ldr	r2, [r7, #0]
 8016b32:	b2d2      	uxtb	r2, r2
 8016b34:	701a      	strb	r2, [r3, #0]
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	0a1b      	lsrs	r3, r3, #8
 8016b3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	1c5a      	adds	r2, r3, #1
 8016b40:	607a      	str	r2, [r7, #4]
 8016b42:	683a      	ldr	r2, [r7, #0]
 8016b44:	b2d2      	uxtb	r2, r2
 8016b46:	701a      	strb	r2, [r3, #0]
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	0a1b      	lsrs	r3, r3, #8
 8016b4c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	1c5a      	adds	r2, r3, #1
 8016b52:	607a      	str	r2, [r7, #4]
 8016b54:	683a      	ldr	r2, [r7, #0]
 8016b56:	b2d2      	uxtb	r2, r2
 8016b58:	701a      	strb	r2, [r3, #0]
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	0a1b      	lsrs	r3, r3, #8
 8016b5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	1c5a      	adds	r2, r3, #1
 8016b64:	607a      	str	r2, [r7, #4]
 8016b66:	683a      	ldr	r2, [r7, #0]
 8016b68:	b2d2      	uxtb	r2, r2
 8016b6a:	701a      	strb	r2, [r3, #0]
}
 8016b6c:	bf00      	nop
 8016b6e:	370c      	adds	r7, #12
 8016b70:	46bd      	mov	sp, r7
 8016b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b76:	4770      	bx	lr

08016b78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016b78:	b480      	push	{r7}
 8016b7a:	b087      	sub	sp, #28
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	60f8      	str	r0, [r7, #12]
 8016b80:	60b9      	str	r1, [r7, #8]
 8016b82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d00d      	beq.n	8016bae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016b92:	693a      	ldr	r2, [r7, #16]
 8016b94:	1c53      	adds	r3, r2, #1
 8016b96:	613b      	str	r3, [r7, #16]
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	1c59      	adds	r1, r3, #1
 8016b9c:	6179      	str	r1, [r7, #20]
 8016b9e:	7812      	ldrb	r2, [r2, #0]
 8016ba0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	3b01      	subs	r3, #1
 8016ba6:	607b      	str	r3, [r7, #4]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1f1      	bne.n	8016b92 <mem_cpy+0x1a>
	}
}
 8016bae:	bf00      	nop
 8016bb0:	371c      	adds	r7, #28
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb8:	4770      	bx	lr

08016bba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016bba:	b480      	push	{r7}
 8016bbc:	b087      	sub	sp, #28
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	60f8      	str	r0, [r7, #12]
 8016bc2:	60b9      	str	r1, [r7, #8]
 8016bc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	1c5a      	adds	r2, r3, #1
 8016bce:	617a      	str	r2, [r7, #20]
 8016bd0:	68ba      	ldr	r2, [r7, #8]
 8016bd2:	b2d2      	uxtb	r2, r2
 8016bd4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	3b01      	subs	r3, #1
 8016bda:	607b      	str	r3, [r7, #4]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d1f3      	bne.n	8016bca <mem_set+0x10>
}
 8016be2:	bf00      	nop
 8016be4:	371c      	adds	r7, #28
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr

08016bee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016bee:	b480      	push	{r7}
 8016bf0:	b089      	sub	sp, #36	; 0x24
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	60f8      	str	r0, [r7, #12]
 8016bf6:	60b9      	str	r1, [r7, #8]
 8016bf8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	61fb      	str	r3, [r7, #28]
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	1c5a      	adds	r2, r3, #1
 8016c0a:	61fa      	str	r2, [r7, #28]
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	1c5a      	adds	r2, r3, #1
 8016c14:	61ba      	str	r2, [r7, #24]
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	1acb      	subs	r3, r1, r3
 8016c1a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	3b01      	subs	r3, #1
 8016c20:	607b      	str	r3, [r7, #4]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d002      	beq.n	8016c2e <mem_cmp+0x40>
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d0eb      	beq.n	8016c06 <mem_cmp+0x18>

	return r;
 8016c2e:	697b      	ldr	r3, [r7, #20]
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	3724      	adds	r7, #36	; 0x24
 8016c34:	46bd      	mov	sp, r7
 8016c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3a:	4770      	bx	lr

08016c3c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016c46:	e002      	b.n	8016c4e <chk_chr+0x12>
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	607b      	str	r3, [r7, #4]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d005      	beq.n	8016c62 <chk_chr+0x26>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	d1f2      	bne.n	8016c48 <chk_chr+0xc>
	return *str;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	781b      	ldrb	r3, [r3, #0]
}
 8016c66:	4618      	mov	r0, r3
 8016c68:	370c      	adds	r7, #12
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c70:	4770      	bx	lr
	...

08016c74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016c74:	b480      	push	{r7}
 8016c76:	b085      	sub	sp, #20
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016c7e:	2300      	movs	r3, #0
 8016c80:	60bb      	str	r3, [r7, #8]
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	60fb      	str	r3, [r7, #12]
 8016c86:	e029      	b.n	8016cdc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016c88:	4a27      	ldr	r2, [pc, #156]	; (8016d28 <chk_lock+0xb4>)
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	011b      	lsls	r3, r3, #4
 8016c8e:	4413      	add	r3, r2
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d01d      	beq.n	8016cd2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016c96:	4a24      	ldr	r2, [pc, #144]	; (8016d28 <chk_lock+0xb4>)
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	011b      	lsls	r3, r3, #4
 8016c9c:	4413      	add	r3, r2
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d116      	bne.n	8016cd6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016ca8:	4a1f      	ldr	r2, [pc, #124]	; (8016d28 <chk_lock+0xb4>)
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	011b      	lsls	r3, r3, #4
 8016cae:	4413      	add	r3, r2
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	681a      	ldr	r2, [r3, #0]
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d10c      	bne.n	8016cd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016cbc:	4a1a      	ldr	r2, [pc, #104]	; (8016d28 <chk_lock+0xb4>)
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	011b      	lsls	r3, r3, #4
 8016cc2:	4413      	add	r3, r2
 8016cc4:	3308      	adds	r3, #8
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016ccc:	429a      	cmp	r2, r3
 8016cce:	d102      	bne.n	8016cd6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016cd0:	e007      	b.n	8016ce2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	60fb      	str	r3, [r7, #12]
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2b01      	cmp	r3, #1
 8016ce0:	d9d2      	bls.n	8016c88 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	2b02      	cmp	r3, #2
 8016ce6:	d109      	bne.n	8016cfc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d102      	bne.n	8016cf4 <chk_lock+0x80>
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	2b02      	cmp	r3, #2
 8016cf2:	d101      	bne.n	8016cf8 <chk_lock+0x84>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	e010      	b.n	8016d1a <chk_lock+0xa6>
 8016cf8:	2312      	movs	r3, #18
 8016cfa:	e00e      	b.n	8016d1a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d108      	bne.n	8016d14 <chk_lock+0xa0>
 8016d02:	4a09      	ldr	r2, [pc, #36]	; (8016d28 <chk_lock+0xb4>)
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	011b      	lsls	r3, r3, #4
 8016d08:	4413      	add	r3, r2
 8016d0a:	330c      	adds	r3, #12
 8016d0c:	881b      	ldrh	r3, [r3, #0]
 8016d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d12:	d101      	bne.n	8016d18 <chk_lock+0xa4>
 8016d14:	2310      	movs	r3, #16
 8016d16:	e000      	b.n	8016d1a <chk_lock+0xa6>
 8016d18:	2300      	movs	r3, #0
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3714      	adds	r7, #20
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop
 8016d28:	20000408 	.word	0x20000408

08016d2c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b083      	sub	sp, #12
 8016d30:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016d32:	2300      	movs	r3, #0
 8016d34:	607b      	str	r3, [r7, #4]
 8016d36:	e002      	b.n	8016d3e <enq_lock+0x12>
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	3301      	adds	r3, #1
 8016d3c:	607b      	str	r3, [r7, #4]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	2b01      	cmp	r3, #1
 8016d42:	d806      	bhi.n	8016d52 <enq_lock+0x26>
 8016d44:	4a09      	ldr	r2, [pc, #36]	; (8016d6c <enq_lock+0x40>)
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	011b      	lsls	r3, r3, #4
 8016d4a:	4413      	add	r3, r2
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d1f2      	bne.n	8016d38 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2b02      	cmp	r3, #2
 8016d56:	bf14      	ite	ne
 8016d58:	2301      	movne	r3, #1
 8016d5a:	2300      	moveq	r3, #0
 8016d5c:	b2db      	uxtb	r3, r3
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	370c      	adds	r7, #12
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr
 8016d6a:	bf00      	nop
 8016d6c:	20000408 	.word	0x20000408

08016d70 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016d70:	b480      	push	{r7}
 8016d72:	b085      	sub	sp, #20
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	60fb      	str	r3, [r7, #12]
 8016d7e:	e01f      	b.n	8016dc0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016d80:	4a41      	ldr	r2, [pc, #260]	; (8016e88 <inc_lock+0x118>)
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	011b      	lsls	r3, r3, #4
 8016d86:	4413      	add	r3, r2
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d113      	bne.n	8016dba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016d92:	4a3d      	ldr	r2, [pc, #244]	; (8016e88 <inc_lock+0x118>)
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	011b      	lsls	r3, r3, #4
 8016d98:	4413      	add	r3, r2
 8016d9a:	3304      	adds	r3, #4
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d109      	bne.n	8016dba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016da6:	4a38      	ldr	r2, [pc, #224]	; (8016e88 <inc_lock+0x118>)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	011b      	lsls	r3, r3, #4
 8016dac:	4413      	add	r3, r2
 8016dae:	3308      	adds	r3, #8
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d006      	beq.n	8016dc8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	3301      	adds	r3, #1
 8016dbe:	60fb      	str	r3, [r7, #12]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	d9dc      	bls.n	8016d80 <inc_lock+0x10>
 8016dc6:	e000      	b.n	8016dca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016dc8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	2b02      	cmp	r3, #2
 8016dce:	d132      	bne.n	8016e36 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	60fb      	str	r3, [r7, #12]
 8016dd4:	e002      	b.n	8016ddc <inc_lock+0x6c>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	60fb      	str	r3, [r7, #12]
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2b01      	cmp	r3, #1
 8016de0:	d806      	bhi.n	8016df0 <inc_lock+0x80>
 8016de2:	4a29      	ldr	r2, [pc, #164]	; (8016e88 <inc_lock+0x118>)
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	011b      	lsls	r3, r3, #4
 8016de8:	4413      	add	r3, r2
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d1f2      	bne.n	8016dd6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2b02      	cmp	r3, #2
 8016df4:	d101      	bne.n	8016dfa <inc_lock+0x8a>
 8016df6:	2300      	movs	r3, #0
 8016df8:	e040      	b.n	8016e7c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	4922      	ldr	r1, [pc, #136]	; (8016e88 <inc_lock+0x118>)
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	011b      	lsls	r3, r3, #4
 8016e04:	440b      	add	r3, r1
 8016e06:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	689a      	ldr	r2, [r3, #8]
 8016e0c:	491e      	ldr	r1, [pc, #120]	; (8016e88 <inc_lock+0x118>)
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	011b      	lsls	r3, r3, #4
 8016e12:	440b      	add	r3, r1
 8016e14:	3304      	adds	r3, #4
 8016e16:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	695a      	ldr	r2, [r3, #20]
 8016e1c:	491a      	ldr	r1, [pc, #104]	; (8016e88 <inc_lock+0x118>)
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	011b      	lsls	r3, r3, #4
 8016e22:	440b      	add	r3, r1
 8016e24:	3308      	adds	r3, #8
 8016e26:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016e28:	4a17      	ldr	r2, [pc, #92]	; (8016e88 <inc_lock+0x118>)
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	011b      	lsls	r3, r3, #4
 8016e2e:	4413      	add	r3, r2
 8016e30:	330c      	adds	r3, #12
 8016e32:	2200      	movs	r2, #0
 8016e34:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d009      	beq.n	8016e50 <inc_lock+0xe0>
 8016e3c:	4a12      	ldr	r2, [pc, #72]	; (8016e88 <inc_lock+0x118>)
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	011b      	lsls	r3, r3, #4
 8016e42:	4413      	add	r3, r2
 8016e44:	330c      	adds	r3, #12
 8016e46:	881b      	ldrh	r3, [r3, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d001      	beq.n	8016e50 <inc_lock+0xe0>
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	e015      	b.n	8016e7c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d108      	bne.n	8016e68 <inc_lock+0xf8>
 8016e56:	4a0c      	ldr	r2, [pc, #48]	; (8016e88 <inc_lock+0x118>)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	011b      	lsls	r3, r3, #4
 8016e5c:	4413      	add	r3, r2
 8016e5e:	330c      	adds	r3, #12
 8016e60:	881b      	ldrh	r3, [r3, #0]
 8016e62:	3301      	adds	r3, #1
 8016e64:	b29a      	uxth	r2, r3
 8016e66:	e001      	b.n	8016e6c <inc_lock+0xfc>
 8016e68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016e6c:	4906      	ldr	r1, [pc, #24]	; (8016e88 <inc_lock+0x118>)
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	011b      	lsls	r3, r3, #4
 8016e72:	440b      	add	r3, r1
 8016e74:	330c      	adds	r3, #12
 8016e76:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	3301      	adds	r3, #1
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3714      	adds	r7, #20
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr
 8016e88:	20000408 	.word	0x20000408

08016e8c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b085      	sub	sp, #20
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	3b01      	subs	r3, #1
 8016e98:	607b      	str	r3, [r7, #4]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2b01      	cmp	r3, #1
 8016e9e:	d825      	bhi.n	8016eec <dec_lock+0x60>
		n = Files[i].ctr;
 8016ea0:	4a17      	ldr	r2, [pc, #92]	; (8016f00 <dec_lock+0x74>)
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	011b      	lsls	r3, r3, #4
 8016ea6:	4413      	add	r3, r2
 8016ea8:	330c      	adds	r3, #12
 8016eaa:	881b      	ldrh	r3, [r3, #0]
 8016eac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016eae:	89fb      	ldrh	r3, [r7, #14]
 8016eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016eb4:	d101      	bne.n	8016eba <dec_lock+0x2e>
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016eba:	89fb      	ldrh	r3, [r7, #14]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d002      	beq.n	8016ec6 <dec_lock+0x3a>
 8016ec0:	89fb      	ldrh	r3, [r7, #14]
 8016ec2:	3b01      	subs	r3, #1
 8016ec4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016ec6:	4a0e      	ldr	r2, [pc, #56]	; (8016f00 <dec_lock+0x74>)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	011b      	lsls	r3, r3, #4
 8016ecc:	4413      	add	r3, r2
 8016ece:	330c      	adds	r3, #12
 8016ed0:	89fa      	ldrh	r2, [r7, #14]
 8016ed2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016ed4:	89fb      	ldrh	r3, [r7, #14]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d105      	bne.n	8016ee6 <dec_lock+0x5a>
 8016eda:	4a09      	ldr	r2, [pc, #36]	; (8016f00 <dec_lock+0x74>)
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	011b      	lsls	r3, r3, #4
 8016ee0:	4413      	add	r3, r2
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	737b      	strb	r3, [r7, #13]
 8016eea:	e001      	b.n	8016ef0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016eec:	2302      	movs	r3, #2
 8016eee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016ef0:	7b7b      	ldrb	r3, [r7, #13]
}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3714      	adds	r7, #20
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop
 8016f00:	20000408 	.word	0x20000408

08016f04 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016f04:	b480      	push	{r7}
 8016f06:	b085      	sub	sp, #20
 8016f08:	af00      	add	r7, sp, #0
 8016f0a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	60fb      	str	r3, [r7, #12]
 8016f10:	e010      	b.n	8016f34 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016f12:	4a0d      	ldr	r2, [pc, #52]	; (8016f48 <clear_lock+0x44>)
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	011b      	lsls	r3, r3, #4
 8016f18:	4413      	add	r3, r2
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	687a      	ldr	r2, [r7, #4]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d105      	bne.n	8016f2e <clear_lock+0x2a>
 8016f22:	4a09      	ldr	r2, [pc, #36]	; (8016f48 <clear_lock+0x44>)
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	011b      	lsls	r3, r3, #4
 8016f28:	4413      	add	r3, r2
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	3301      	adds	r3, #1
 8016f32:	60fb      	str	r3, [r7, #12]
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d9eb      	bls.n	8016f12 <clear_lock+0xe>
	}
}
 8016f3a:	bf00      	nop
 8016f3c:	3714      	adds	r7, #20
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f44:	4770      	bx	lr
 8016f46:	bf00      	nop
 8016f48:	20000408 	.word	0x20000408

08016f4c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b086      	sub	sp, #24
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016f54:	2300      	movs	r3, #0
 8016f56:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	78db      	ldrb	r3, [r3, #3]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d034      	beq.n	8016fca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016f64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	7858      	ldrb	r0, [r3, #1]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016f70:	2301      	movs	r3, #1
 8016f72:	697a      	ldr	r2, [r7, #20]
 8016f74:	f7ff fd40 	bl	80169f8 <disk_write>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d002      	beq.n	8016f84 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016f7e:	2301      	movs	r3, #1
 8016f80:	73fb      	strb	r3, [r7, #15]
 8016f82:	e022      	b.n	8016fca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2200      	movs	r2, #0
 8016f88:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f8e:	697a      	ldr	r2, [r7, #20]
 8016f90:	1ad2      	subs	r2, r2, r3
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	6a1b      	ldr	r3, [r3, #32]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d217      	bcs.n	8016fca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	789b      	ldrb	r3, [r3, #2]
 8016f9e:	613b      	str	r3, [r7, #16]
 8016fa0:	e010      	b.n	8016fc4 <sync_window+0x78>
					wsect += fs->fsize;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	6a1b      	ldr	r3, [r3, #32]
 8016fa6:	697a      	ldr	r2, [r7, #20]
 8016fa8:	4413      	add	r3, r2
 8016faa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	7858      	ldrb	r0, [r3, #1]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	697a      	ldr	r2, [r7, #20]
 8016fba:	f7ff fd1d 	bl	80169f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016fbe:	693b      	ldr	r3, [r7, #16]
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	613b      	str	r3, [r7, #16]
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d8eb      	bhi.n	8016fa2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3718      	adds	r7, #24
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b084      	sub	sp, #16
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
 8016fdc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fe6:	683a      	ldr	r2, [r7, #0]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d01b      	beq.n	8017024 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016fec:	6878      	ldr	r0, [r7, #4]
 8016fee:	f7ff ffad 	bl	8016f4c <sync_window>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016ff6:	7bfb      	ldrb	r3, [r7, #15]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d113      	bne.n	8017024 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	7858      	ldrb	r0, [r3, #1]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017006:	2301      	movs	r3, #1
 8017008:	683a      	ldr	r2, [r7, #0]
 801700a:	f7ff fcd5 	bl	80169b8 <disk_read>
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d004      	beq.n	801701e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017014:	f04f 33ff 	mov.w	r3, #4294967295
 8017018:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801701a:	2301      	movs	r3, #1
 801701c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	683a      	ldr	r2, [r7, #0]
 8017022:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017024:	7bfb      	ldrb	r3, [r7, #15]
}
 8017026:	4618      	mov	r0, r3
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
	...

08017030 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7ff ff87 	bl	8016f4c <sync_window>
 801703e:	4603      	mov	r3, r0
 8017040:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017042:	7bfb      	ldrb	r3, [r7, #15]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d159      	bne.n	80170fc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	2b03      	cmp	r3, #3
 801704e:	d149      	bne.n	80170e4 <sync_fs+0xb4>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	791b      	ldrb	r3, [r3, #4]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d145      	bne.n	80170e4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	899b      	ldrh	r3, [r3, #12]
 8017062:	461a      	mov	r2, r3
 8017064:	2100      	movs	r1, #0
 8017066:	f7ff fda8 	bl	8016bba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	3338      	adds	r3, #56	; 0x38
 801706e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017072:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017076:	4618      	mov	r0, r3
 8017078:	f7ff fd37 	bl	8016aea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	3338      	adds	r3, #56	; 0x38
 8017080:	4921      	ldr	r1, [pc, #132]	; (8017108 <sync_fs+0xd8>)
 8017082:	4618      	mov	r0, r3
 8017084:	f7ff fd4c 	bl	8016b20 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	3338      	adds	r3, #56	; 0x38
 801708c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017090:	491e      	ldr	r1, [pc, #120]	; (801710c <sync_fs+0xdc>)
 8017092:	4618      	mov	r0, r3
 8017094:	f7ff fd44 	bl	8016b20 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	3338      	adds	r3, #56	; 0x38
 801709c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	699b      	ldr	r3, [r3, #24]
 80170a4:	4619      	mov	r1, r3
 80170a6:	4610      	mov	r0, r2
 80170a8:	f7ff fd3a 	bl	8016b20 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	3338      	adds	r3, #56	; 0x38
 80170b0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	695b      	ldr	r3, [r3, #20]
 80170b8:	4619      	mov	r1, r3
 80170ba:	4610      	mov	r0, r2
 80170bc:	f7ff fd30 	bl	8016b20 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c4:	1c5a      	adds	r2, r3, #1
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	7858      	ldrb	r0, [r3, #1]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80170d8:	2301      	movs	r3, #1
 80170da:	f7ff fc8d 	bl	80169f8 <disk_write>
			fs->fsi_flag = 0;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2200      	movs	r2, #0
 80170e2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	785b      	ldrb	r3, [r3, #1]
 80170e8:	2200      	movs	r2, #0
 80170ea:	2100      	movs	r1, #0
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7ff fca3 	bl	8016a38 <disk_ioctl>
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d001      	beq.n	80170fc <sync_fs+0xcc>
 80170f8:	2301      	movs	r3, #1
 80170fa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80170fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
 8017106:	bf00      	nop
 8017108:	41615252 	.word	0x41615252
 801710c:	61417272 	.word	0x61417272

08017110 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017110:	b480      	push	{r7}
 8017112:	b083      	sub	sp, #12
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
 8017118:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	3b02      	subs	r3, #2
 801711e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	69db      	ldr	r3, [r3, #28]
 8017124:	3b02      	subs	r3, #2
 8017126:	683a      	ldr	r2, [r7, #0]
 8017128:	429a      	cmp	r2, r3
 801712a:	d301      	bcc.n	8017130 <clust2sect+0x20>
 801712c:	2300      	movs	r3, #0
 801712e:	e008      	b.n	8017142 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	895b      	ldrh	r3, [r3, #10]
 8017134:	461a      	mov	r2, r3
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	fb03 f202 	mul.w	r2, r3, r2
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017140:	4413      	add	r3, r2
}
 8017142:	4618      	mov	r0, r3
 8017144:	370c      	adds	r7, #12
 8017146:	46bd      	mov	sp, r7
 8017148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714c:	4770      	bx	lr

0801714e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801714e:	b580      	push	{r7, lr}
 8017150:	b086      	sub	sp, #24
 8017152:	af00      	add	r7, sp, #0
 8017154:	6078      	str	r0, [r7, #4]
 8017156:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	2b01      	cmp	r3, #1
 8017162:	d904      	bls.n	801716e <get_fat+0x20>
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	69db      	ldr	r3, [r3, #28]
 8017168:	683a      	ldr	r2, [r7, #0]
 801716a:	429a      	cmp	r2, r3
 801716c:	d302      	bcc.n	8017174 <get_fat+0x26>
		val = 1;	/* Internal error */
 801716e:	2301      	movs	r3, #1
 8017170:	617b      	str	r3, [r7, #20]
 8017172:	e0b7      	b.n	80172e4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017174:	f04f 33ff 	mov.w	r3, #4294967295
 8017178:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	2b02      	cmp	r3, #2
 8017180:	d05a      	beq.n	8017238 <get_fat+0xea>
 8017182:	2b03      	cmp	r3, #3
 8017184:	d07d      	beq.n	8017282 <get_fat+0x134>
 8017186:	2b01      	cmp	r3, #1
 8017188:	f040 80a2 	bne.w	80172d0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	60fb      	str	r3, [r7, #12]
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	085b      	lsrs	r3, r3, #1
 8017194:	68fa      	ldr	r2, [r7, #12]
 8017196:	4413      	add	r3, r2
 8017198:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	899b      	ldrh	r3, [r3, #12]
 80171a2:	4619      	mov	r1, r3
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80171aa:	4413      	add	r3, r2
 80171ac:	4619      	mov	r1, r3
 80171ae:	6938      	ldr	r0, [r7, #16]
 80171b0:	f7ff ff10 	bl	8016fd4 <move_window>
 80171b4:	4603      	mov	r3, r0
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f040 808d 	bne.w	80172d6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	1c5a      	adds	r2, r3, #1
 80171c0:	60fa      	str	r2, [r7, #12]
 80171c2:	693a      	ldr	r2, [r7, #16]
 80171c4:	8992      	ldrh	r2, [r2, #12]
 80171c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80171ca:	fb02 f201 	mul.w	r2, r2, r1
 80171ce:	1a9b      	subs	r3, r3, r2
 80171d0:	693a      	ldr	r2, [r7, #16]
 80171d2:	4413      	add	r3, r2
 80171d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80171d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	899b      	ldrh	r3, [r3, #12]
 80171e2:	4619      	mov	r1, r3
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80171ea:	4413      	add	r3, r2
 80171ec:	4619      	mov	r1, r3
 80171ee:	6938      	ldr	r0, [r7, #16]
 80171f0:	f7ff fef0 	bl	8016fd4 <move_window>
 80171f4:	4603      	mov	r3, r0
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d16f      	bne.n	80172da <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80171fa:	693b      	ldr	r3, [r7, #16]
 80171fc:	899b      	ldrh	r3, [r3, #12]
 80171fe:	461a      	mov	r2, r3
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	fbb3 f1f2 	udiv	r1, r3, r2
 8017206:	fb02 f201 	mul.w	r2, r2, r1
 801720a:	1a9b      	subs	r3, r3, r2
 801720c:	693a      	ldr	r2, [r7, #16]
 801720e:	4413      	add	r3, r2
 8017210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017214:	021b      	lsls	r3, r3, #8
 8017216:	461a      	mov	r2, r3
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	4313      	orrs	r3, r2
 801721c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	f003 0301 	and.w	r3, r3, #1
 8017224:	2b00      	cmp	r3, #0
 8017226:	d002      	beq.n	801722e <get_fat+0xe0>
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	091b      	lsrs	r3, r3, #4
 801722c:	e002      	b.n	8017234 <get_fat+0xe6>
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017234:	617b      	str	r3, [r7, #20]
			break;
 8017236:	e055      	b.n	80172e4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	899b      	ldrh	r3, [r3, #12]
 8017240:	085b      	lsrs	r3, r3, #1
 8017242:	b29b      	uxth	r3, r3
 8017244:	4619      	mov	r1, r3
 8017246:	683b      	ldr	r3, [r7, #0]
 8017248:	fbb3 f3f1 	udiv	r3, r3, r1
 801724c:	4413      	add	r3, r2
 801724e:	4619      	mov	r1, r3
 8017250:	6938      	ldr	r0, [r7, #16]
 8017252:	f7ff febf 	bl	8016fd4 <move_window>
 8017256:	4603      	mov	r3, r0
 8017258:	2b00      	cmp	r3, #0
 801725a:	d140      	bne.n	80172de <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017262:	683b      	ldr	r3, [r7, #0]
 8017264:	005b      	lsls	r3, r3, #1
 8017266:	693a      	ldr	r2, [r7, #16]
 8017268:	8992      	ldrh	r2, [r2, #12]
 801726a:	fbb3 f0f2 	udiv	r0, r3, r2
 801726e:	fb02 f200 	mul.w	r2, r2, r0
 8017272:	1a9b      	subs	r3, r3, r2
 8017274:	440b      	add	r3, r1
 8017276:	4618      	mov	r0, r3
 8017278:	f7ff fbfc 	bl	8016a74 <ld_word>
 801727c:	4603      	mov	r3, r0
 801727e:	617b      	str	r3, [r7, #20]
			break;
 8017280:	e030      	b.n	80172e4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	899b      	ldrh	r3, [r3, #12]
 801728a:	089b      	lsrs	r3, r3, #2
 801728c:	b29b      	uxth	r3, r3
 801728e:	4619      	mov	r1, r3
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	fbb3 f3f1 	udiv	r3, r3, r1
 8017296:	4413      	add	r3, r2
 8017298:	4619      	mov	r1, r3
 801729a:	6938      	ldr	r0, [r7, #16]
 801729c:	f7ff fe9a 	bl	8016fd4 <move_window>
 80172a0:	4603      	mov	r3, r0
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d11d      	bne.n	80172e2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80172a6:	693b      	ldr	r3, [r7, #16]
 80172a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	009b      	lsls	r3, r3, #2
 80172b0:	693a      	ldr	r2, [r7, #16]
 80172b2:	8992      	ldrh	r2, [r2, #12]
 80172b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80172b8:	fb02 f200 	mul.w	r2, r2, r0
 80172bc:	1a9b      	subs	r3, r3, r2
 80172be:	440b      	add	r3, r1
 80172c0:	4618      	mov	r0, r3
 80172c2:	f7ff fbef 	bl	8016aa4 <ld_dword>
 80172c6:	4603      	mov	r3, r0
 80172c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80172cc:	617b      	str	r3, [r7, #20]
			break;
 80172ce:	e009      	b.n	80172e4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80172d0:	2301      	movs	r3, #1
 80172d2:	617b      	str	r3, [r7, #20]
 80172d4:	e006      	b.n	80172e4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80172d6:	bf00      	nop
 80172d8:	e004      	b.n	80172e4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80172da:	bf00      	nop
 80172dc:	e002      	b.n	80172e4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80172de:	bf00      	nop
 80172e0:	e000      	b.n	80172e4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80172e2:	bf00      	nop
		}
	}

	return val;
 80172e4:	697b      	ldr	r3, [r7, #20]
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3718      	adds	r7, #24
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}

080172ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80172ee:	b590      	push	{r4, r7, lr}
 80172f0:	b089      	sub	sp, #36	; 0x24
 80172f2:	af00      	add	r7, sp, #0
 80172f4:	60f8      	str	r0, [r7, #12]
 80172f6:	60b9      	str	r1, [r7, #8]
 80172f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80172fa:	2302      	movs	r3, #2
 80172fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	2b01      	cmp	r3, #1
 8017302:	f240 8106 	bls.w	8017512 <put_fat+0x224>
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	69db      	ldr	r3, [r3, #28]
 801730a:	68ba      	ldr	r2, [r7, #8]
 801730c:	429a      	cmp	r2, r3
 801730e:	f080 8100 	bcs.w	8017512 <put_fat+0x224>
		switch (fs->fs_type) {
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	2b02      	cmp	r3, #2
 8017318:	f000 8088 	beq.w	801742c <put_fat+0x13e>
 801731c:	2b03      	cmp	r3, #3
 801731e:	f000 80b0 	beq.w	8017482 <put_fat+0x194>
 8017322:	2b01      	cmp	r3, #1
 8017324:	f040 80f5 	bne.w	8017512 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	61bb      	str	r3, [r7, #24]
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	085b      	lsrs	r3, r3, #1
 8017330:	69ba      	ldr	r2, [r7, #24]
 8017332:	4413      	add	r3, r2
 8017334:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	899b      	ldrh	r3, [r3, #12]
 801733e:	4619      	mov	r1, r3
 8017340:	69bb      	ldr	r3, [r7, #24]
 8017342:	fbb3 f3f1 	udiv	r3, r3, r1
 8017346:	4413      	add	r3, r2
 8017348:	4619      	mov	r1, r3
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	f7ff fe42 	bl	8016fd4 <move_window>
 8017350:	4603      	mov	r3, r0
 8017352:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017354:	7ffb      	ldrb	r3, [r7, #31]
 8017356:	2b00      	cmp	r3, #0
 8017358:	f040 80d4 	bne.w	8017504 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017362:	69bb      	ldr	r3, [r7, #24]
 8017364:	1c5a      	adds	r2, r3, #1
 8017366:	61ba      	str	r2, [r7, #24]
 8017368:	68fa      	ldr	r2, [r7, #12]
 801736a:	8992      	ldrh	r2, [r2, #12]
 801736c:	fbb3 f0f2 	udiv	r0, r3, r2
 8017370:	fb02 f200 	mul.w	r2, r2, r0
 8017374:	1a9b      	subs	r3, r3, r2
 8017376:	440b      	add	r3, r1
 8017378:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801737a:	68bb      	ldr	r3, [r7, #8]
 801737c:	f003 0301 	and.w	r3, r3, #1
 8017380:	2b00      	cmp	r3, #0
 8017382:	d00d      	beq.n	80173a0 <put_fat+0xb2>
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	b25b      	sxtb	r3, r3
 801738a:	f003 030f 	and.w	r3, r3, #15
 801738e:	b25a      	sxtb	r2, r3
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	b2db      	uxtb	r3, r3
 8017394:	011b      	lsls	r3, r3, #4
 8017396:	b25b      	sxtb	r3, r3
 8017398:	4313      	orrs	r3, r2
 801739a:	b25b      	sxtb	r3, r3
 801739c:	b2db      	uxtb	r3, r3
 801739e:	e001      	b.n	80173a4 <put_fat+0xb6>
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	697a      	ldr	r2, [r7, #20]
 80173a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2201      	movs	r2, #1
 80173ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	899b      	ldrh	r3, [r3, #12]
 80173b6:	4619      	mov	r1, r3
 80173b8:	69bb      	ldr	r3, [r7, #24]
 80173ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80173be:	4413      	add	r3, r2
 80173c0:	4619      	mov	r1, r3
 80173c2:	68f8      	ldr	r0, [r7, #12]
 80173c4:	f7ff fe06 	bl	8016fd4 <move_window>
 80173c8:	4603      	mov	r3, r0
 80173ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80173cc:	7ffb      	ldrb	r3, [r7, #31]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	f040 809a 	bne.w	8017508 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	899b      	ldrh	r3, [r3, #12]
 80173de:	461a      	mov	r2, r3
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80173e6:	fb02 f200 	mul.w	r2, r2, r0
 80173ea:	1a9b      	subs	r3, r3, r2
 80173ec:	440b      	add	r3, r1
 80173ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	f003 0301 	and.w	r3, r3, #1
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d003      	beq.n	8017402 <put_fat+0x114>
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	091b      	lsrs	r3, r3, #4
 80173fe:	b2db      	uxtb	r3, r3
 8017400:	e00e      	b.n	8017420 <put_fat+0x132>
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	b25b      	sxtb	r3, r3
 8017408:	f023 030f 	bic.w	r3, r3, #15
 801740c:	b25a      	sxtb	r2, r3
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	0a1b      	lsrs	r3, r3, #8
 8017412:	b25b      	sxtb	r3, r3
 8017414:	f003 030f 	and.w	r3, r3, #15
 8017418:	b25b      	sxtb	r3, r3
 801741a:	4313      	orrs	r3, r2
 801741c:	b25b      	sxtb	r3, r3
 801741e:	b2db      	uxtb	r3, r3
 8017420:	697a      	ldr	r2, [r7, #20]
 8017422:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	2201      	movs	r2, #1
 8017428:	70da      	strb	r2, [r3, #3]
			break;
 801742a:	e072      	b.n	8017512 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	899b      	ldrh	r3, [r3, #12]
 8017434:	085b      	lsrs	r3, r3, #1
 8017436:	b29b      	uxth	r3, r3
 8017438:	4619      	mov	r1, r3
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017440:	4413      	add	r3, r2
 8017442:	4619      	mov	r1, r3
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	f7ff fdc5 	bl	8016fd4 <move_window>
 801744a:	4603      	mov	r3, r0
 801744c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801744e:	7ffb      	ldrb	r3, [r7, #31]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d15b      	bne.n	801750c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	005b      	lsls	r3, r3, #1
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	8992      	ldrh	r2, [r2, #12]
 8017462:	fbb3 f0f2 	udiv	r0, r3, r2
 8017466:	fb02 f200 	mul.w	r2, r2, r0
 801746a:	1a9b      	subs	r3, r3, r2
 801746c:	440b      	add	r3, r1
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	b292      	uxth	r2, r2
 8017472:	4611      	mov	r1, r2
 8017474:	4618      	mov	r0, r3
 8017476:	f7ff fb38 	bl	8016aea <st_word>
			fs->wflag = 1;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2201      	movs	r2, #1
 801747e:	70da      	strb	r2, [r3, #3]
			break;
 8017480:	e047      	b.n	8017512 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	899b      	ldrh	r3, [r3, #12]
 801748a:	089b      	lsrs	r3, r3, #2
 801748c:	b29b      	uxth	r3, r3
 801748e:	4619      	mov	r1, r3
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	fbb3 f3f1 	udiv	r3, r3, r1
 8017496:	4413      	add	r3, r2
 8017498:	4619      	mov	r1, r3
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f7ff fd9a 	bl	8016fd4 <move_window>
 80174a0:	4603      	mov	r3, r0
 80174a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80174a4:	7ffb      	ldrb	r3, [r7, #31]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d132      	bne.n	8017510 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	009b      	lsls	r3, r3, #2
 80174ba:	68fa      	ldr	r2, [r7, #12]
 80174bc:	8992      	ldrh	r2, [r2, #12]
 80174be:	fbb3 f0f2 	udiv	r0, r3, r2
 80174c2:	fb02 f200 	mul.w	r2, r2, r0
 80174c6:	1a9b      	subs	r3, r3, r2
 80174c8:	440b      	add	r3, r1
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7ff faea 	bl	8016aa4 <ld_dword>
 80174d0:	4603      	mov	r3, r0
 80174d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80174d6:	4323      	orrs	r3, r4
 80174d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	8992      	ldrh	r2, [r2, #12]
 80174e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80174ec:	fb02 f200 	mul.w	r2, r2, r0
 80174f0:	1a9b      	subs	r3, r3, r2
 80174f2:	440b      	add	r3, r1
 80174f4:	6879      	ldr	r1, [r7, #4]
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7ff fb12 	bl	8016b20 <st_dword>
			fs->wflag = 1;
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	2201      	movs	r2, #1
 8017500:	70da      	strb	r2, [r3, #3]
			break;
 8017502:	e006      	b.n	8017512 <put_fat+0x224>
			if (res != FR_OK) break;
 8017504:	bf00      	nop
 8017506:	e004      	b.n	8017512 <put_fat+0x224>
			if (res != FR_OK) break;
 8017508:	bf00      	nop
 801750a:	e002      	b.n	8017512 <put_fat+0x224>
			if (res != FR_OK) break;
 801750c:	bf00      	nop
 801750e:	e000      	b.n	8017512 <put_fat+0x224>
			if (res != FR_OK) break;
 8017510:	bf00      	nop
		}
	}
	return res;
 8017512:	7ffb      	ldrb	r3, [r7, #31]
}
 8017514:	4618      	mov	r0, r3
 8017516:	3724      	adds	r7, #36	; 0x24
 8017518:	46bd      	mov	sp, r7
 801751a:	bd90      	pop	{r4, r7, pc}

0801751c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b088      	sub	sp, #32
 8017520:	af00      	add	r7, sp, #0
 8017522:	60f8      	str	r0, [r7, #12]
 8017524:	60b9      	str	r1, [r7, #8]
 8017526:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017528:	2300      	movs	r3, #0
 801752a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	2b01      	cmp	r3, #1
 8017536:	d904      	bls.n	8017542 <remove_chain+0x26>
 8017538:	69bb      	ldr	r3, [r7, #24]
 801753a:	69db      	ldr	r3, [r3, #28]
 801753c:	68ba      	ldr	r2, [r7, #8]
 801753e:	429a      	cmp	r2, r3
 8017540:	d301      	bcc.n	8017546 <remove_chain+0x2a>
 8017542:	2302      	movs	r3, #2
 8017544:	e04b      	b.n	80175de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d00c      	beq.n	8017566 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801754c:	f04f 32ff 	mov.w	r2, #4294967295
 8017550:	6879      	ldr	r1, [r7, #4]
 8017552:	69b8      	ldr	r0, [r7, #24]
 8017554:	f7ff fecb 	bl	80172ee <put_fat>
 8017558:	4603      	mov	r3, r0
 801755a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801755c:	7ffb      	ldrb	r3, [r7, #31]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d001      	beq.n	8017566 <remove_chain+0x4a>
 8017562:	7ffb      	ldrb	r3, [r7, #31]
 8017564:	e03b      	b.n	80175de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017566:	68b9      	ldr	r1, [r7, #8]
 8017568:	68f8      	ldr	r0, [r7, #12]
 801756a:	f7ff fdf0 	bl	801714e <get_fat>
 801756e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d031      	beq.n	80175da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	2b01      	cmp	r3, #1
 801757a:	d101      	bne.n	8017580 <remove_chain+0x64>
 801757c:	2302      	movs	r3, #2
 801757e:	e02e      	b.n	80175de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017586:	d101      	bne.n	801758c <remove_chain+0x70>
 8017588:	2301      	movs	r3, #1
 801758a:	e028      	b.n	80175de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801758c:	2200      	movs	r2, #0
 801758e:	68b9      	ldr	r1, [r7, #8]
 8017590:	69b8      	ldr	r0, [r7, #24]
 8017592:	f7ff feac 	bl	80172ee <put_fat>
 8017596:	4603      	mov	r3, r0
 8017598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801759a:	7ffb      	ldrb	r3, [r7, #31]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d001      	beq.n	80175a4 <remove_chain+0x88>
 80175a0:	7ffb      	ldrb	r3, [r7, #31]
 80175a2:	e01c      	b.n	80175de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80175a4:	69bb      	ldr	r3, [r7, #24]
 80175a6:	699a      	ldr	r2, [r3, #24]
 80175a8:	69bb      	ldr	r3, [r7, #24]
 80175aa:	69db      	ldr	r3, [r3, #28]
 80175ac:	3b02      	subs	r3, #2
 80175ae:	429a      	cmp	r2, r3
 80175b0:	d20b      	bcs.n	80175ca <remove_chain+0xae>
			fs->free_clst++;
 80175b2:	69bb      	ldr	r3, [r7, #24]
 80175b4:	699b      	ldr	r3, [r3, #24]
 80175b6:	1c5a      	adds	r2, r3, #1
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80175bc:	69bb      	ldr	r3, [r7, #24]
 80175be:	791b      	ldrb	r3, [r3, #4]
 80175c0:	f043 0301 	orr.w	r3, r3, #1
 80175c4:	b2da      	uxtb	r2, r3
 80175c6:	69bb      	ldr	r3, [r7, #24]
 80175c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80175ce:	69bb      	ldr	r3, [r7, #24]
 80175d0:	69db      	ldr	r3, [r3, #28]
 80175d2:	68ba      	ldr	r2, [r7, #8]
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d3c6      	bcc.n	8017566 <remove_chain+0x4a>
 80175d8:	e000      	b.n	80175dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80175da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80175dc:	2300      	movs	r3, #0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3720      	adds	r7, #32
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b088      	sub	sp, #32
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
 80175ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10d      	bne.n	8017618 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	695b      	ldr	r3, [r3, #20]
 8017600:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d004      	beq.n	8017612 <create_chain+0x2c>
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	69db      	ldr	r3, [r3, #28]
 801760c:	69ba      	ldr	r2, [r7, #24]
 801760e:	429a      	cmp	r2, r3
 8017610:	d31b      	bcc.n	801764a <create_chain+0x64>
 8017612:	2301      	movs	r3, #1
 8017614:	61bb      	str	r3, [r7, #24]
 8017616:	e018      	b.n	801764a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017618:	6839      	ldr	r1, [r7, #0]
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	f7ff fd97 	bl	801714e <get_fat>
 8017620:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	2b01      	cmp	r3, #1
 8017626:	d801      	bhi.n	801762c <create_chain+0x46>
 8017628:	2301      	movs	r3, #1
 801762a:	e070      	b.n	801770e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017632:	d101      	bne.n	8017638 <create_chain+0x52>
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	e06a      	b.n	801770e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	69db      	ldr	r3, [r3, #28]
 801763c:	68fa      	ldr	r2, [r7, #12]
 801763e:	429a      	cmp	r2, r3
 8017640:	d201      	bcs.n	8017646 <create_chain+0x60>
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	e063      	b.n	801770e <create_chain+0x128>
		scl = clst;
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801764e:	69fb      	ldr	r3, [r7, #28]
 8017650:	3301      	adds	r3, #1
 8017652:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	69db      	ldr	r3, [r3, #28]
 8017658:	69fa      	ldr	r2, [r7, #28]
 801765a:	429a      	cmp	r2, r3
 801765c:	d307      	bcc.n	801766e <create_chain+0x88>
				ncl = 2;
 801765e:	2302      	movs	r3, #2
 8017660:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017662:	69fa      	ldr	r2, [r7, #28]
 8017664:	69bb      	ldr	r3, [r7, #24]
 8017666:	429a      	cmp	r2, r3
 8017668:	d901      	bls.n	801766e <create_chain+0x88>
 801766a:	2300      	movs	r3, #0
 801766c:	e04f      	b.n	801770e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801766e:	69f9      	ldr	r1, [r7, #28]
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7ff fd6c 	bl	801714e <get_fat>
 8017676:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d00e      	beq.n	801769c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	2b01      	cmp	r3, #1
 8017682:	d003      	beq.n	801768c <create_chain+0xa6>
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801768a:	d101      	bne.n	8017690 <create_chain+0xaa>
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	e03e      	b.n	801770e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017690:	69fa      	ldr	r2, [r7, #28]
 8017692:	69bb      	ldr	r3, [r7, #24]
 8017694:	429a      	cmp	r2, r3
 8017696:	d1da      	bne.n	801764e <create_chain+0x68>
 8017698:	2300      	movs	r3, #0
 801769a:	e038      	b.n	801770e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801769c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801769e:	f04f 32ff 	mov.w	r2, #4294967295
 80176a2:	69f9      	ldr	r1, [r7, #28]
 80176a4:	6938      	ldr	r0, [r7, #16]
 80176a6:	f7ff fe22 	bl	80172ee <put_fat>
 80176aa:	4603      	mov	r3, r0
 80176ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80176ae:	7dfb      	ldrb	r3, [r7, #23]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d109      	bne.n	80176c8 <create_chain+0xe2>
 80176b4:	683b      	ldr	r3, [r7, #0]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d006      	beq.n	80176c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80176ba:	69fa      	ldr	r2, [r7, #28]
 80176bc:	6839      	ldr	r1, [r7, #0]
 80176be:	6938      	ldr	r0, [r7, #16]
 80176c0:	f7ff fe15 	bl	80172ee <put_fat>
 80176c4:	4603      	mov	r3, r0
 80176c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80176c8:	7dfb      	ldrb	r3, [r7, #23]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d116      	bne.n	80176fc <create_chain+0x116>
		fs->last_clst = ncl;
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	69fa      	ldr	r2, [r7, #28]
 80176d2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	699a      	ldr	r2, [r3, #24]
 80176d8:	693b      	ldr	r3, [r7, #16]
 80176da:	69db      	ldr	r3, [r3, #28]
 80176dc:	3b02      	subs	r3, #2
 80176de:	429a      	cmp	r2, r3
 80176e0:	d804      	bhi.n	80176ec <create_chain+0x106>
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	699b      	ldr	r3, [r3, #24]
 80176e6:	1e5a      	subs	r2, r3, #1
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	791b      	ldrb	r3, [r3, #4]
 80176f0:	f043 0301 	orr.w	r3, r3, #1
 80176f4:	b2da      	uxtb	r2, r3
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	711a      	strb	r2, [r3, #4]
 80176fa:	e007      	b.n	801770c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80176fc:	7dfb      	ldrb	r3, [r7, #23]
 80176fe:	2b01      	cmp	r3, #1
 8017700:	d102      	bne.n	8017708 <create_chain+0x122>
 8017702:	f04f 33ff 	mov.w	r3, #4294967295
 8017706:	e000      	b.n	801770a <create_chain+0x124>
 8017708:	2301      	movs	r3, #1
 801770a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801770c:	69fb      	ldr	r3, [r7, #28]
}
 801770e:	4618      	mov	r0, r3
 8017710:	3720      	adds	r7, #32
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}

08017716 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017716:	b480      	push	{r7}
 8017718:	b087      	sub	sp, #28
 801771a:	af00      	add	r7, sp, #0
 801771c:	6078      	str	r0, [r7, #4]
 801771e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801772a:	3304      	adds	r3, #4
 801772c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	899b      	ldrh	r3, [r3, #12]
 8017732:	461a      	mov	r2, r3
 8017734:	683b      	ldr	r3, [r7, #0]
 8017736:	fbb3 f3f2 	udiv	r3, r3, r2
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	8952      	ldrh	r2, [r2, #10]
 801773e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017742:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	1d1a      	adds	r2, r3, #4
 8017748:	613a      	str	r2, [r7, #16]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d101      	bne.n	8017758 <clmt_clust+0x42>
 8017754:	2300      	movs	r3, #0
 8017756:	e010      	b.n	801777a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8017758:	697a      	ldr	r2, [r7, #20]
 801775a:	68bb      	ldr	r3, [r7, #8]
 801775c:	429a      	cmp	r2, r3
 801775e:	d307      	bcc.n	8017770 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8017760:	697a      	ldr	r2, [r7, #20]
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	1ad3      	subs	r3, r2, r3
 8017766:	617b      	str	r3, [r7, #20]
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	3304      	adds	r3, #4
 801776c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801776e:	e7e9      	b.n	8017744 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8017770:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	4413      	add	r3, r2
}
 801777a:	4618      	mov	r0, r3
 801777c:	371c      	adds	r7, #28
 801777e:	46bd      	mov	sp, r7
 8017780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017784:	4770      	bx	lr

08017786 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017786:	b580      	push	{r7, lr}
 8017788:	b086      	sub	sp, #24
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
 801778e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801779c:	d204      	bcs.n	80177a8 <dir_sdi+0x22>
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	f003 031f 	and.w	r3, r3, #31
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d001      	beq.n	80177ac <dir_sdi+0x26>
		return FR_INT_ERR;
 80177a8:	2302      	movs	r3, #2
 80177aa:	e071      	b.n	8017890 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	683a      	ldr	r2, [r7, #0]
 80177b0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	689b      	ldr	r3, [r3, #8]
 80177b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d106      	bne.n	80177cc <dir_sdi+0x46>
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	2b02      	cmp	r3, #2
 80177c4:	d902      	bls.n	80177cc <dir_sdi+0x46>
		clst = fs->dirbase;
 80177c6:	693b      	ldr	r3, [r7, #16]
 80177c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d10c      	bne.n	80177ec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	095b      	lsrs	r3, r3, #5
 80177d6:	693a      	ldr	r2, [r7, #16]
 80177d8:	8912      	ldrh	r2, [r2, #8]
 80177da:	4293      	cmp	r3, r2
 80177dc:	d301      	bcc.n	80177e2 <dir_sdi+0x5c>
 80177de:	2302      	movs	r3, #2
 80177e0:	e056      	b.n	8017890 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80177e2:	693b      	ldr	r3, [r7, #16]
 80177e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	61da      	str	r2, [r3, #28]
 80177ea:	e02d      	b.n	8017848 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80177ec:	693b      	ldr	r3, [r7, #16]
 80177ee:	895b      	ldrh	r3, [r3, #10]
 80177f0:	461a      	mov	r2, r3
 80177f2:	693b      	ldr	r3, [r7, #16]
 80177f4:	899b      	ldrh	r3, [r3, #12]
 80177f6:	fb03 f302 	mul.w	r3, r3, r2
 80177fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80177fc:	e019      	b.n	8017832 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	6979      	ldr	r1, [r7, #20]
 8017802:	4618      	mov	r0, r3
 8017804:	f7ff fca3 	bl	801714e <get_fat>
 8017808:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801780a:	697b      	ldr	r3, [r7, #20]
 801780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017810:	d101      	bne.n	8017816 <dir_sdi+0x90>
 8017812:	2301      	movs	r3, #1
 8017814:	e03c      	b.n	8017890 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	2b01      	cmp	r3, #1
 801781a:	d904      	bls.n	8017826 <dir_sdi+0xa0>
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	69db      	ldr	r3, [r3, #28]
 8017820:	697a      	ldr	r2, [r7, #20]
 8017822:	429a      	cmp	r2, r3
 8017824:	d301      	bcc.n	801782a <dir_sdi+0xa4>
 8017826:	2302      	movs	r3, #2
 8017828:	e032      	b.n	8017890 <dir_sdi+0x10a>
			ofs -= csz;
 801782a:	683a      	ldr	r2, [r7, #0]
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017832:	683a      	ldr	r2, [r7, #0]
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	429a      	cmp	r2, r3
 8017838:	d2e1      	bcs.n	80177fe <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801783a:	6979      	ldr	r1, [r7, #20]
 801783c:	6938      	ldr	r0, [r7, #16]
 801783e:	f7ff fc67 	bl	8017110 <clust2sect>
 8017842:	4602      	mov	r2, r0
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	697a      	ldr	r2, [r7, #20]
 801784c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	69db      	ldr	r3, [r3, #28]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d101      	bne.n	801785a <dir_sdi+0xd4>
 8017856:	2302      	movs	r3, #2
 8017858:	e01a      	b.n	8017890 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	69da      	ldr	r2, [r3, #28]
 801785e:	693b      	ldr	r3, [r7, #16]
 8017860:	899b      	ldrh	r3, [r3, #12]
 8017862:	4619      	mov	r1, r3
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	fbb3 f3f1 	udiv	r3, r3, r1
 801786a:	441a      	add	r2, r3
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017870:	693b      	ldr	r3, [r7, #16]
 8017872:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	899b      	ldrh	r3, [r3, #12]
 801787a:	461a      	mov	r2, r3
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	fbb3 f0f2 	udiv	r0, r3, r2
 8017882:	fb02 f200 	mul.w	r2, r2, r0
 8017886:	1a9b      	subs	r3, r3, r2
 8017888:	18ca      	adds	r2, r1, r3
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801788e:	2300      	movs	r3, #0
}
 8017890:	4618      	mov	r0, r3
 8017892:	3718      	adds	r7, #24
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}

08017898 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b086      	sub	sp, #24
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	695b      	ldr	r3, [r3, #20]
 80178ac:	3320      	adds	r3, #32
 80178ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	69db      	ldr	r3, [r3, #28]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d003      	beq.n	80178c0 <dir_next+0x28>
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80178be:	d301      	bcc.n	80178c4 <dir_next+0x2c>
 80178c0:	2304      	movs	r3, #4
 80178c2:	e0bb      	b.n	8017a3c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	899b      	ldrh	r3, [r3, #12]
 80178c8:	461a      	mov	r2, r3
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80178d0:	fb02 f201 	mul.w	r2, r2, r1
 80178d4:	1a9b      	subs	r3, r3, r2
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f040 809d 	bne.w	8017a16 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	69db      	ldr	r3, [r3, #28]
 80178e0:	1c5a      	adds	r2, r3, #1
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	699b      	ldr	r3, [r3, #24]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d10b      	bne.n	8017906 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	095b      	lsrs	r3, r3, #5
 80178f2:	68fa      	ldr	r2, [r7, #12]
 80178f4:	8912      	ldrh	r2, [r2, #8]
 80178f6:	4293      	cmp	r3, r2
 80178f8:	f0c0 808d 	bcc.w	8017a16 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2200      	movs	r2, #0
 8017900:	61da      	str	r2, [r3, #28]
 8017902:	2304      	movs	r3, #4
 8017904:	e09a      	b.n	8017a3c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	899b      	ldrh	r3, [r3, #12]
 801790a:	461a      	mov	r2, r3
 801790c:	68bb      	ldr	r3, [r7, #8]
 801790e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017912:	68fa      	ldr	r2, [r7, #12]
 8017914:	8952      	ldrh	r2, [r2, #10]
 8017916:	3a01      	subs	r2, #1
 8017918:	4013      	ands	r3, r2
 801791a:	2b00      	cmp	r3, #0
 801791c:	d17b      	bne.n	8017a16 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	699b      	ldr	r3, [r3, #24]
 8017924:	4619      	mov	r1, r3
 8017926:	4610      	mov	r0, r2
 8017928:	f7ff fc11 	bl	801714e <get_fat>
 801792c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801792e:	697b      	ldr	r3, [r7, #20]
 8017930:	2b01      	cmp	r3, #1
 8017932:	d801      	bhi.n	8017938 <dir_next+0xa0>
 8017934:	2302      	movs	r3, #2
 8017936:	e081      	b.n	8017a3c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801793e:	d101      	bne.n	8017944 <dir_next+0xac>
 8017940:	2301      	movs	r3, #1
 8017942:	e07b      	b.n	8017a3c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	69db      	ldr	r3, [r3, #28]
 8017948:	697a      	ldr	r2, [r7, #20]
 801794a:	429a      	cmp	r2, r3
 801794c:	d359      	bcc.n	8017a02 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d104      	bne.n	801795e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2200      	movs	r2, #0
 8017958:	61da      	str	r2, [r3, #28]
 801795a:	2304      	movs	r3, #4
 801795c:	e06e      	b.n	8017a3c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	699b      	ldr	r3, [r3, #24]
 8017964:	4619      	mov	r1, r3
 8017966:	4610      	mov	r0, r2
 8017968:	f7ff fe3d 	bl	80175e6 <create_chain>
 801796c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801796e:	697b      	ldr	r3, [r7, #20]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d101      	bne.n	8017978 <dir_next+0xe0>
 8017974:	2307      	movs	r3, #7
 8017976:	e061      	b.n	8017a3c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	2b01      	cmp	r3, #1
 801797c:	d101      	bne.n	8017982 <dir_next+0xea>
 801797e:	2302      	movs	r3, #2
 8017980:	e05c      	b.n	8017a3c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017988:	d101      	bne.n	801798e <dir_next+0xf6>
 801798a:	2301      	movs	r3, #1
 801798c:	e056      	b.n	8017a3c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801798e:	68f8      	ldr	r0, [r7, #12]
 8017990:	f7ff fadc 	bl	8016f4c <sync_window>
 8017994:	4603      	mov	r3, r0
 8017996:	2b00      	cmp	r3, #0
 8017998:	d001      	beq.n	801799e <dir_next+0x106>
 801799a:	2301      	movs	r3, #1
 801799c:	e04e      	b.n	8017a3c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	899b      	ldrh	r3, [r3, #12]
 80179a8:	461a      	mov	r2, r3
 80179aa:	2100      	movs	r1, #0
 80179ac:	f7ff f905 	bl	8016bba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80179b0:	2300      	movs	r3, #0
 80179b2:	613b      	str	r3, [r7, #16]
 80179b4:	6979      	ldr	r1, [r7, #20]
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	f7ff fbaa 	bl	8017110 <clust2sect>
 80179bc:	4602      	mov	r2, r0
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	635a      	str	r2, [r3, #52]	; 0x34
 80179c2:	e012      	b.n	80179ea <dir_next+0x152>
						fs->wflag = 1;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	2201      	movs	r2, #1
 80179c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80179ca:	68f8      	ldr	r0, [r7, #12]
 80179cc:	f7ff fabe 	bl	8016f4c <sync_window>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d001      	beq.n	80179da <dir_next+0x142>
 80179d6:	2301      	movs	r3, #1
 80179d8:	e030      	b.n	8017a3c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80179da:	693b      	ldr	r3, [r7, #16]
 80179dc:	3301      	adds	r3, #1
 80179de:	613b      	str	r3, [r7, #16]
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179e4:	1c5a      	adds	r2, r3, #1
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	635a      	str	r2, [r3, #52]	; 0x34
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	895b      	ldrh	r3, [r3, #10]
 80179ee:	461a      	mov	r2, r3
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	4293      	cmp	r3, r2
 80179f4:	d3e6      	bcc.n	80179c4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80179fa:	693b      	ldr	r3, [r7, #16]
 80179fc:	1ad2      	subs	r2, r2, r3
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	697a      	ldr	r2, [r7, #20]
 8017a06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017a08:	6979      	ldr	r1, [r7, #20]
 8017a0a:	68f8      	ldr	r0, [r7, #12]
 8017a0c:	f7ff fb80 	bl	8017110 <clust2sect>
 8017a10:	4602      	mov	r2, r0
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	68ba      	ldr	r2, [r7, #8]
 8017a1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	899b      	ldrh	r3, [r3, #12]
 8017a26:	461a      	mov	r2, r3
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8017a2e:	fb02 f200 	mul.w	r2, r2, r0
 8017a32:	1a9b      	subs	r3, r3, r2
 8017a34:	18ca      	adds	r2, r1, r3
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017a3a:	2300      	movs	r3, #0
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3718      	adds	r7, #24
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}

08017a44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b086      	sub	sp, #24
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017a54:	2100      	movs	r1, #0
 8017a56:	6878      	ldr	r0, [r7, #4]
 8017a58:	f7ff fe95 	bl	8017786 <dir_sdi>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017a60:	7dfb      	ldrb	r3, [r7, #23]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d12b      	bne.n	8017abe <dir_alloc+0x7a>
		n = 0;
 8017a66:	2300      	movs	r3, #0
 8017a68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	69db      	ldr	r3, [r3, #28]
 8017a6e:	4619      	mov	r1, r3
 8017a70:	68f8      	ldr	r0, [r7, #12]
 8017a72:	f7ff faaf 	bl	8016fd4 <move_window>
 8017a76:	4603      	mov	r3, r0
 8017a78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017a7a:	7dfb      	ldrb	r3, [r7, #23]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d11d      	bne.n	8017abc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	6a1b      	ldr	r3, [r3, #32]
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	2be5      	cmp	r3, #229	; 0xe5
 8017a88:	d004      	beq.n	8017a94 <dir_alloc+0x50>
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	6a1b      	ldr	r3, [r3, #32]
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d107      	bne.n	8017aa4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017a94:	693b      	ldr	r3, [r7, #16]
 8017a96:	3301      	adds	r3, #1
 8017a98:	613b      	str	r3, [r7, #16]
 8017a9a:	693a      	ldr	r2, [r7, #16]
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	429a      	cmp	r2, r3
 8017aa0:	d102      	bne.n	8017aa8 <dir_alloc+0x64>
 8017aa2:	e00c      	b.n	8017abe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017aa8:	2101      	movs	r1, #1
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f7ff fef4 	bl	8017898 <dir_next>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017ab4:	7dfb      	ldrb	r3, [r7, #23]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d0d7      	beq.n	8017a6a <dir_alloc+0x26>
 8017aba:	e000      	b.n	8017abe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017abc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017abe:	7dfb      	ldrb	r3, [r7, #23]
 8017ac0:	2b04      	cmp	r3, #4
 8017ac2:	d101      	bne.n	8017ac8 <dir_alloc+0x84>
 8017ac4:	2307      	movs	r3, #7
 8017ac6:	75fb      	strb	r3, [r7, #23]
	return res;
 8017ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3718      	adds	r7, #24
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}

08017ad2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b084      	sub	sp, #16
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	6078      	str	r0, [r7, #4]
 8017ada:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	331a      	adds	r3, #26
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f7fe ffc7 	bl	8016a74 <ld_word>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	2b03      	cmp	r3, #3
 8017af0:	d109      	bne.n	8017b06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	3314      	adds	r3, #20
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7fe ffbc 	bl	8016a74 <ld_word>
 8017afc:	4603      	mov	r3, r0
 8017afe:	041b      	lsls	r3, r3, #16
 8017b00:	68fa      	ldr	r2, [r7, #12]
 8017b02:	4313      	orrs	r3, r2
 8017b04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017b06:	68fb      	ldr	r3, [r7, #12]
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3710      	adds	r7, #16
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}

08017b10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	60b9      	str	r1, [r7, #8]
 8017b1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	331a      	adds	r3, #26
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	b292      	uxth	r2, r2
 8017b24:	4611      	mov	r1, r2
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7fe ffdf 	bl	8016aea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	2b03      	cmp	r3, #3
 8017b32:	d109      	bne.n	8017b48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017b34:	68bb      	ldr	r3, [r7, #8]
 8017b36:	f103 0214 	add.w	r2, r3, #20
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	0c1b      	lsrs	r3, r3, #16
 8017b3e:	b29b      	uxth	r3, r3
 8017b40:	4619      	mov	r1, r3
 8017b42:	4610      	mov	r0, r2
 8017b44:	f7fe ffd1 	bl	8016aea <st_word>
	}
}
 8017b48:	bf00      	nop
 8017b4a:	3710      	adds	r7, #16
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}

08017b50 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017b50:	b590      	push	{r4, r7, lr}
 8017b52:	b087      	sub	sp, #28
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	331a      	adds	r3, #26
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f7fe ff88 	bl	8016a74 <ld_word>
 8017b64:	4603      	mov	r3, r0
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d001      	beq.n	8017b6e <cmp_lfn+0x1e>
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	e059      	b.n	8017c22 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	781b      	ldrb	r3, [r3, #0]
 8017b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b76:	1e5a      	subs	r2, r3, #1
 8017b78:	4613      	mov	r3, r2
 8017b7a:	005b      	lsls	r3, r3, #1
 8017b7c:	4413      	add	r3, r2
 8017b7e:	009b      	lsls	r3, r3, #2
 8017b80:	4413      	add	r3, r2
 8017b82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017b84:	2301      	movs	r3, #1
 8017b86:	81fb      	strh	r3, [r7, #14]
 8017b88:	2300      	movs	r3, #0
 8017b8a:	613b      	str	r3, [r7, #16]
 8017b8c:	e033      	b.n	8017bf6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8017b8e:	4a27      	ldr	r2, [pc, #156]	; (8017c2c <cmp_lfn+0xdc>)
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	4413      	add	r3, r2
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	461a      	mov	r2, r3
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	4413      	add	r3, r2
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7fe ff69 	bl	8016a74 <ld_word>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8017ba6:	89fb      	ldrh	r3, [r7, #14]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d01a      	beq.n	8017be2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8017bac:	697b      	ldr	r3, [r7, #20]
 8017bae:	2bfe      	cmp	r3, #254	; 0xfe
 8017bb0:	d812      	bhi.n	8017bd8 <cmp_lfn+0x88>
 8017bb2:	89bb      	ldrh	r3, [r7, #12]
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f001 fd77 	bl	80196a8 <ff_wtoupper>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	461c      	mov	r4, r3
 8017bbe:	697b      	ldr	r3, [r7, #20]
 8017bc0:	1c5a      	adds	r2, r3, #1
 8017bc2:	617a      	str	r2, [r7, #20]
 8017bc4:	005b      	lsls	r3, r3, #1
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	4413      	add	r3, r2
 8017bca:	881b      	ldrh	r3, [r3, #0]
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f001 fd6b 	bl	80196a8 <ff_wtoupper>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	429c      	cmp	r4, r3
 8017bd6:	d001      	beq.n	8017bdc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8017bd8:	2300      	movs	r3, #0
 8017bda:	e022      	b.n	8017c22 <cmp_lfn+0xd2>
			}
			wc = uc;
 8017bdc:	89bb      	ldrh	r3, [r7, #12]
 8017bde:	81fb      	strh	r3, [r7, #14]
 8017be0:	e006      	b.n	8017bf0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8017be2:	89bb      	ldrh	r3, [r7, #12]
 8017be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d001      	beq.n	8017bf0 <cmp_lfn+0xa0>
 8017bec:	2300      	movs	r3, #0
 8017bee:	e018      	b.n	8017c22 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	613b      	str	r3, [r7, #16]
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	2b0c      	cmp	r3, #12
 8017bfa:	d9c8      	bls.n	8017b8e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d00b      	beq.n	8017c20 <cmp_lfn+0xd0>
 8017c08:	89fb      	ldrh	r3, [r7, #14]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d008      	beq.n	8017c20 <cmp_lfn+0xd0>
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	687a      	ldr	r2, [r7, #4]
 8017c14:	4413      	add	r3, r2
 8017c16:	881b      	ldrh	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d001      	beq.n	8017c20 <cmp_lfn+0xd0>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	e000      	b.n	8017c22 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017c20:	2301      	movs	r3, #1
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	371c      	adds	r7, #28
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd90      	pop	{r4, r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	0801ec74 	.word	0x0801ec74

08017c30 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b088      	sub	sp, #32
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	60b9      	str	r1, [r7, #8]
 8017c3a:	4611      	mov	r1, r2
 8017c3c:	461a      	mov	r2, r3
 8017c3e:	460b      	mov	r3, r1
 8017c40:	71fb      	strb	r3, [r7, #7]
 8017c42:	4613      	mov	r3, r2
 8017c44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	330d      	adds	r3, #13
 8017c4a:	79ba      	ldrb	r2, [r7, #6]
 8017c4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	330b      	adds	r3, #11
 8017c52:	220f      	movs	r2, #15
 8017c54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	330c      	adds	r3, #12
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	331a      	adds	r3, #26
 8017c62:	2100      	movs	r1, #0
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7fe ff40 	bl	8016aea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8017c6a:	79fb      	ldrb	r3, [r7, #7]
 8017c6c:	1e5a      	subs	r2, r3, #1
 8017c6e:	4613      	mov	r3, r2
 8017c70:	005b      	lsls	r3, r3, #1
 8017c72:	4413      	add	r3, r2
 8017c74:	009b      	lsls	r3, r3, #2
 8017c76:	4413      	add	r3, r2
 8017c78:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	82fb      	strh	r3, [r7, #22]
 8017c7e:	2300      	movs	r3, #0
 8017c80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8017c82:	8afb      	ldrh	r3, [r7, #22]
 8017c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d007      	beq.n	8017c9c <put_lfn+0x6c>
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	1c5a      	adds	r2, r3, #1
 8017c90:	61fa      	str	r2, [r7, #28]
 8017c92:	005b      	lsls	r3, r3, #1
 8017c94:	68fa      	ldr	r2, [r7, #12]
 8017c96:	4413      	add	r3, r2
 8017c98:	881b      	ldrh	r3, [r3, #0]
 8017c9a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8017c9c:	4a17      	ldr	r2, [pc, #92]	; (8017cfc <put_lfn+0xcc>)
 8017c9e:	69bb      	ldr	r3, [r7, #24]
 8017ca0:	4413      	add	r3, r2
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	461a      	mov	r2, r3
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	4413      	add	r3, r2
 8017caa:	8afa      	ldrh	r2, [r7, #22]
 8017cac:	4611      	mov	r1, r2
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fe ff1b 	bl	8016aea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8017cb4:	8afb      	ldrh	r3, [r7, #22]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d102      	bne.n	8017cc0 <put_lfn+0x90>
 8017cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017cbe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8017cc0:	69bb      	ldr	r3, [r7, #24]
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	61bb      	str	r3, [r7, #24]
 8017cc6:	69bb      	ldr	r3, [r7, #24]
 8017cc8:	2b0c      	cmp	r3, #12
 8017cca:	d9da      	bls.n	8017c82 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8017ccc:	8afb      	ldrh	r3, [r7, #22]
 8017cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d006      	beq.n	8017ce4 <put_lfn+0xb4>
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	68fa      	ldr	r2, [r7, #12]
 8017cdc:	4413      	add	r3, r2
 8017cde:	881b      	ldrh	r3, [r3, #0]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d103      	bne.n	8017cec <put_lfn+0xbc>
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017cea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	79fa      	ldrb	r2, [r7, #7]
 8017cf0:	701a      	strb	r2, [r3, #0]
}
 8017cf2:	bf00      	nop
 8017cf4:	3720      	adds	r7, #32
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	0801ec74 	.word	0x0801ec74

08017d00 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b08c      	sub	sp, #48	; 0x30
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	607a      	str	r2, [r7, #4]
 8017d0c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8017d0e:	220b      	movs	r2, #11
 8017d10:	68b9      	ldr	r1, [r7, #8]
 8017d12:	68f8      	ldr	r0, [r7, #12]
 8017d14:	f7fe ff30 	bl	8016b78 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	2b05      	cmp	r3, #5
 8017d1c:	d92b      	bls.n	8017d76 <gen_numname+0x76>
		sr = seq;
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017d22:	e022      	b.n	8017d6a <gen_numname+0x6a>
			wc = *lfn++;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	1c9a      	adds	r2, r3, #2
 8017d28:	607a      	str	r2, [r7, #4]
 8017d2a:	881b      	ldrh	r3, [r3, #0]
 8017d2c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8017d2e:	2300      	movs	r3, #0
 8017d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d32:	e017      	b.n	8017d64 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8017d34:	69fb      	ldr	r3, [r7, #28]
 8017d36:	005a      	lsls	r2, r3, #1
 8017d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d3a:	f003 0301 	and.w	r3, r3, #1
 8017d3e:	4413      	add	r3, r2
 8017d40:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d44:	085b      	lsrs	r3, r3, #1
 8017d46:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d005      	beq.n	8017d5e <gen_numname+0x5e>
 8017d52:	69fb      	ldr	r3, [r7, #28]
 8017d54:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8017d58:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8017d5c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8017d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d60:	3301      	adds	r3, #1
 8017d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d66:	2b0f      	cmp	r3, #15
 8017d68:	d9e4      	bls.n	8017d34 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	881b      	ldrh	r3, [r3, #0]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1d8      	bne.n	8017d24 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8017d72:	69fb      	ldr	r3, [r7, #28]
 8017d74:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017d76:	2307      	movs	r3, #7
 8017d78:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017d7a:	683b      	ldr	r3, [r7, #0]
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	f003 030f 	and.w	r3, r3, #15
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	3330      	adds	r3, #48	; 0x30
 8017d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8017d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017d8e:	2b39      	cmp	r3, #57	; 0x39
 8017d90:	d904      	bls.n	8017d9c <gen_numname+0x9c>
 8017d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017d96:	3307      	adds	r3, #7
 8017d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8017d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9e:	1e5a      	subs	r2, r3, #1
 8017da0:	62ba      	str	r2, [r7, #40]	; 0x28
 8017da2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017da6:	4413      	add	r3, r2
 8017da8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8017dac:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	091b      	lsrs	r3, r3, #4
 8017db4:	603b      	str	r3, [r7, #0]
	} while (seq);
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d1de      	bne.n	8017d7a <gen_numname+0x7a>
	ns[i] = '~';
 8017dbc:	f107 0214 	add.w	r2, r7, #20
 8017dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dc2:	4413      	add	r3, r2
 8017dc4:	227e      	movs	r2, #126	; 0x7e
 8017dc6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8017dc8:	2300      	movs	r3, #0
 8017dca:	627b      	str	r3, [r7, #36]	; 0x24
 8017dcc:	e002      	b.n	8017dd4 <gen_numname+0xd4>
 8017dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8017dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d205      	bcs.n	8017de8 <gen_numname+0xe8>
 8017ddc:	68fa      	ldr	r2, [r7, #12]
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	4413      	add	r3, r2
 8017de2:	781b      	ldrb	r3, [r3, #0]
 8017de4:	2b20      	cmp	r3, #32
 8017de6:	d1f2      	bne.n	8017dce <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dea:	2b07      	cmp	r3, #7
 8017dec:	d808      	bhi.n	8017e00 <gen_numname+0x100>
 8017dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df0:	1c5a      	adds	r2, r3, #1
 8017df2:	62ba      	str	r2, [r7, #40]	; 0x28
 8017df4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8017df8:	4413      	add	r3, r2
 8017dfa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017dfe:	e000      	b.n	8017e02 <gen_numname+0x102>
 8017e00:	2120      	movs	r1, #32
 8017e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e04:	1c5a      	adds	r2, r3, #1
 8017e06:	627a      	str	r2, [r7, #36]	; 0x24
 8017e08:	68fa      	ldr	r2, [r7, #12]
 8017e0a:	4413      	add	r3, r2
 8017e0c:	460a      	mov	r2, r1
 8017e0e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e12:	2b07      	cmp	r3, #7
 8017e14:	d9e8      	bls.n	8017de8 <gen_numname+0xe8>
}
 8017e16:	bf00      	nop
 8017e18:	3730      	adds	r7, #48	; 0x30
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017e1e:	b480      	push	{r7}
 8017e20:	b085      	sub	sp, #20
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017e2a:	230b      	movs	r3, #11
 8017e2c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017e2e:	7bfb      	ldrb	r3, [r7, #15]
 8017e30:	b2da      	uxtb	r2, r3
 8017e32:	0852      	lsrs	r2, r2, #1
 8017e34:	01db      	lsls	r3, r3, #7
 8017e36:	4313      	orrs	r3, r2
 8017e38:	b2da      	uxtb	r2, r3
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	1c59      	adds	r1, r3, #1
 8017e3e:	6079      	str	r1, [r7, #4]
 8017e40:	781b      	ldrb	r3, [r3, #0]
 8017e42:	4413      	add	r3, r2
 8017e44:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017e46:	68bb      	ldr	r3, [r7, #8]
 8017e48:	3b01      	subs	r3, #1
 8017e4a:	60bb      	str	r3, [r7, #8]
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d1ed      	bne.n	8017e2e <sum_sfn+0x10>
	return sum;
 8017e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	3714      	adds	r7, #20
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5e:	4770      	bx	lr

08017e60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b086      	sub	sp, #24
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017e6e:	2100      	movs	r1, #0
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7ff fc88 	bl	8017786 <dir_sdi>
 8017e76:	4603      	mov	r3, r0
 8017e78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017e7a:	7dfb      	ldrb	r3, [r7, #23]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d001      	beq.n	8017e84 <dir_find+0x24>
 8017e80:	7dfb      	ldrb	r3, [r7, #23]
 8017e82:	e0a9      	b.n	8017fd8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017e84:	23ff      	movs	r3, #255	; 0xff
 8017e86:	753b      	strb	r3, [r7, #20]
 8017e88:	7d3b      	ldrb	r3, [r7, #20]
 8017e8a:	757b      	strb	r3, [r7, #21]
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017e92:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	69db      	ldr	r3, [r3, #28]
 8017e98:	4619      	mov	r1, r3
 8017e9a:	6938      	ldr	r0, [r7, #16]
 8017e9c:	f7ff f89a 	bl	8016fd4 <move_window>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017ea4:	7dfb      	ldrb	r3, [r7, #23]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	f040 8090 	bne.w	8017fcc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6a1b      	ldr	r3, [r3, #32]
 8017eb0:	781b      	ldrb	r3, [r3, #0]
 8017eb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017eb4:	7dbb      	ldrb	r3, [r7, #22]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d102      	bne.n	8017ec0 <dir_find+0x60>
 8017eba:	2304      	movs	r3, #4
 8017ebc:	75fb      	strb	r3, [r7, #23]
 8017ebe:	e08a      	b.n	8017fd6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6a1b      	ldr	r3, [r3, #32]
 8017ec4:	330b      	adds	r3, #11
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ecc:	73fb      	strb	r3, [r7, #15]
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	7bfa      	ldrb	r2, [r7, #15]
 8017ed2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8017ed4:	7dbb      	ldrb	r3, [r7, #22]
 8017ed6:	2be5      	cmp	r3, #229	; 0xe5
 8017ed8:	d007      	beq.n	8017eea <dir_find+0x8a>
 8017eda:	7bfb      	ldrb	r3, [r7, #15]
 8017edc:	f003 0308 	and.w	r3, r3, #8
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d009      	beq.n	8017ef8 <dir_find+0x98>
 8017ee4:	7bfb      	ldrb	r3, [r7, #15]
 8017ee6:	2b0f      	cmp	r3, #15
 8017ee8:	d006      	beq.n	8017ef8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017eea:	23ff      	movs	r3, #255	; 0xff
 8017eec:	757b      	strb	r3, [r7, #21]
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8017ef6:	e05e      	b.n	8017fb6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017ef8:	7bfb      	ldrb	r3, [r7, #15]
 8017efa:	2b0f      	cmp	r3, #15
 8017efc:	d136      	bne.n	8017f6c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d154      	bne.n	8017fb6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017f0c:	7dbb      	ldrb	r3, [r7, #22]
 8017f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d00d      	beq.n	8017f32 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6a1b      	ldr	r3, [r3, #32]
 8017f1a:	7b5b      	ldrb	r3, [r3, #13]
 8017f1c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017f1e:	7dbb      	ldrb	r3, [r7, #22]
 8017f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017f24:	75bb      	strb	r3, [r7, #22]
 8017f26:	7dbb      	ldrb	r3, [r7, #22]
 8017f28:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	695a      	ldr	r2, [r3, #20]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017f32:	7dba      	ldrb	r2, [r7, #22]
 8017f34:	7d7b      	ldrb	r3, [r7, #21]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d115      	bne.n	8017f66 <dir_find+0x106>
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	6a1b      	ldr	r3, [r3, #32]
 8017f3e:	330d      	adds	r3, #13
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	7d3a      	ldrb	r2, [r7, #20]
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d10e      	bne.n	8017f66 <dir_find+0x106>
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	691a      	ldr	r2, [r3, #16]
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	6a1b      	ldr	r3, [r3, #32]
 8017f50:	4619      	mov	r1, r3
 8017f52:	4610      	mov	r0, r2
 8017f54:	f7ff fdfc 	bl	8017b50 <cmp_lfn>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d003      	beq.n	8017f66 <dir_find+0x106>
 8017f5e:	7d7b      	ldrb	r3, [r7, #21]
 8017f60:	3b01      	subs	r3, #1
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	e000      	b.n	8017f68 <dir_find+0x108>
 8017f66:	23ff      	movs	r3, #255	; 0xff
 8017f68:	757b      	strb	r3, [r7, #21]
 8017f6a:	e024      	b.n	8017fb6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017f6c:	7d7b      	ldrb	r3, [r7, #21]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d109      	bne.n	8017f86 <dir_find+0x126>
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	6a1b      	ldr	r3, [r3, #32]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7ff ff51 	bl	8017e1e <sum_sfn>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	461a      	mov	r2, r3
 8017f80:	7d3b      	ldrb	r3, [r7, #20]
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d024      	beq.n	8017fd0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017f8c:	f003 0301 	and.w	r3, r3, #1
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d10a      	bne.n	8017faa <dir_find+0x14a>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6a18      	ldr	r0, [r3, #32]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	3324      	adds	r3, #36	; 0x24
 8017f9c:	220b      	movs	r2, #11
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	f7fe fe25 	bl	8016bee <mem_cmp>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d014      	beq.n	8017fd4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017faa:	23ff      	movs	r3, #255	; 0xff
 8017fac:	757b      	strb	r3, [r7, #21]
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fb4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017fb6:	2100      	movs	r1, #0
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f7ff fc6d 	bl	8017898 <dir_next>
 8017fbe:	4603      	mov	r3, r0
 8017fc0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017fc2:	7dfb      	ldrb	r3, [r7, #23]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	f43f af65 	beq.w	8017e94 <dir_find+0x34>
 8017fca:	e004      	b.n	8017fd6 <dir_find+0x176>
		if (res != FR_OK) break;
 8017fcc:	bf00      	nop
 8017fce:	e002      	b.n	8017fd6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017fd0:	bf00      	nop
 8017fd2:	e000      	b.n	8017fd6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017fd4:	bf00      	nop

	return res;
 8017fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3718      	adds	r7, #24
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08c      	sub	sp, #48	; 0x30
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017ff4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d001      	beq.n	8018000 <dir_register+0x20>
 8017ffc:	2306      	movs	r3, #6
 8017ffe:	e0e0      	b.n	80181c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018000:	2300      	movs	r3, #0
 8018002:	627b      	str	r3, [r7, #36]	; 0x24
 8018004:	e002      	b.n	801800c <dir_register+0x2c>
 8018006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018008:	3301      	adds	r3, #1
 801800a:	627b      	str	r3, [r7, #36]	; 0x24
 801800c:	69fb      	ldr	r3, [r7, #28]
 801800e:	691a      	ldr	r2, [r3, #16]
 8018010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018012:	005b      	lsls	r3, r3, #1
 8018014:	4413      	add	r3, r2
 8018016:	881b      	ldrh	r3, [r3, #0]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d1f4      	bne.n	8018006 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018022:	f107 030c 	add.w	r3, r7, #12
 8018026:	220c      	movs	r2, #12
 8018028:	4618      	mov	r0, r3
 801802a:	f7fe fda5 	bl	8016b78 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801802e:	7dfb      	ldrb	r3, [r7, #23]
 8018030:	f003 0301 	and.w	r3, r3, #1
 8018034:	2b00      	cmp	r3, #0
 8018036:	d032      	beq.n	801809e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2240      	movs	r2, #64	; 0x40
 801803c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018040:	2301      	movs	r3, #1
 8018042:	62bb      	str	r3, [r7, #40]	; 0x28
 8018044:	e016      	b.n	8018074 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801804c:	69fb      	ldr	r3, [r7, #28]
 801804e:	691a      	ldr	r2, [r3, #16]
 8018050:	f107 010c 	add.w	r1, r7, #12
 8018054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018056:	f7ff fe53 	bl	8017d00 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f7ff ff00 	bl	8017e60 <dir_find>
 8018060:	4603      	mov	r3, r0
 8018062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801806a:	2b00      	cmp	r3, #0
 801806c:	d106      	bne.n	801807c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	3301      	adds	r3, #1
 8018072:	62bb      	str	r3, [r7, #40]	; 0x28
 8018074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018076:	2b63      	cmp	r3, #99	; 0x63
 8018078:	d9e5      	bls.n	8018046 <dir_register+0x66>
 801807a:	e000      	b.n	801807e <dir_register+0x9e>
			if (res != FR_OK) break;
 801807c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018080:	2b64      	cmp	r3, #100	; 0x64
 8018082:	d101      	bne.n	8018088 <dir_register+0xa8>
 8018084:	2307      	movs	r3, #7
 8018086:	e09c      	b.n	80181c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801808c:	2b04      	cmp	r3, #4
 801808e:	d002      	beq.n	8018096 <dir_register+0xb6>
 8018090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018094:	e095      	b.n	80181c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018096:	7dfa      	ldrb	r2, [r7, #23]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801809e:	7dfb      	ldrb	r3, [r7, #23]
 80180a0:	f003 0302 	and.w	r3, r3, #2
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d007      	beq.n	80180b8 <dir_register+0xd8>
 80180a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180aa:	330c      	adds	r3, #12
 80180ac:	4a47      	ldr	r2, [pc, #284]	; (80181cc <dir_register+0x1ec>)
 80180ae:	fba2 2303 	umull	r2, r3, r2, r3
 80180b2:	089b      	lsrs	r3, r3, #2
 80180b4:	3301      	adds	r3, #1
 80180b6:	e000      	b.n	80180ba <dir_register+0xda>
 80180b8:	2301      	movs	r3, #1
 80180ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80180bc:	6a39      	ldr	r1, [r7, #32]
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f7ff fcc0 	bl	8017a44 <dir_alloc>
 80180c4:	4603      	mov	r3, r0
 80180c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80180ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d148      	bne.n	8018164 <dir_register+0x184>
 80180d2:	6a3b      	ldr	r3, [r7, #32]
 80180d4:	3b01      	subs	r3, #1
 80180d6:	623b      	str	r3, [r7, #32]
 80180d8:	6a3b      	ldr	r3, [r7, #32]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d042      	beq.n	8018164 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	695a      	ldr	r2, [r3, #20]
 80180e2:	6a3b      	ldr	r3, [r7, #32]
 80180e4:	015b      	lsls	r3, r3, #5
 80180e6:	1ad3      	subs	r3, r2, r3
 80180e8:	4619      	mov	r1, r3
 80180ea:	6878      	ldr	r0, [r7, #4]
 80180ec:	f7ff fb4b 	bl	8017786 <dir_sdi>
 80180f0:	4603      	mov	r3, r0
 80180f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80180f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d132      	bne.n	8018164 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	3324      	adds	r3, #36	; 0x24
 8018102:	4618      	mov	r0, r3
 8018104:	f7ff fe8b 	bl	8017e1e <sum_sfn>
 8018108:	4603      	mov	r3, r0
 801810a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	69db      	ldr	r3, [r3, #28]
 8018110:	4619      	mov	r1, r3
 8018112:	69f8      	ldr	r0, [r7, #28]
 8018114:	f7fe ff5e 	bl	8016fd4 <move_window>
 8018118:	4603      	mov	r3, r0
 801811a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801811e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018122:	2b00      	cmp	r3, #0
 8018124:	d11d      	bne.n	8018162 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018126:	69fb      	ldr	r3, [r7, #28]
 8018128:	6918      	ldr	r0, [r3, #16]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6a19      	ldr	r1, [r3, #32]
 801812e:	6a3b      	ldr	r3, [r7, #32]
 8018130:	b2da      	uxtb	r2, r3
 8018132:	7efb      	ldrb	r3, [r7, #27]
 8018134:	f7ff fd7c 	bl	8017c30 <put_lfn>
				fs->wflag = 1;
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	2201      	movs	r2, #1
 801813c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801813e:	2100      	movs	r1, #0
 8018140:	6878      	ldr	r0, [r7, #4]
 8018142:	f7ff fba9 	bl	8017898 <dir_next>
 8018146:	4603      	mov	r3, r0
 8018148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801814c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018150:	2b00      	cmp	r3, #0
 8018152:	d107      	bne.n	8018164 <dir_register+0x184>
 8018154:	6a3b      	ldr	r3, [r7, #32]
 8018156:	3b01      	subs	r3, #1
 8018158:	623b      	str	r3, [r7, #32]
 801815a:	6a3b      	ldr	r3, [r7, #32]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d1d5      	bne.n	801810c <dir_register+0x12c>
 8018160:	e000      	b.n	8018164 <dir_register+0x184>
				if (res != FR_OK) break;
 8018162:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018168:	2b00      	cmp	r3, #0
 801816a:	d128      	bne.n	80181be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	69db      	ldr	r3, [r3, #28]
 8018170:	4619      	mov	r1, r3
 8018172:	69f8      	ldr	r0, [r7, #28]
 8018174:	f7fe ff2e 	bl	8016fd4 <move_window>
 8018178:	4603      	mov	r3, r0
 801817a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801817e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018182:	2b00      	cmp	r3, #0
 8018184:	d11b      	bne.n	80181be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6a1b      	ldr	r3, [r3, #32]
 801818a:	2220      	movs	r2, #32
 801818c:	2100      	movs	r1, #0
 801818e:	4618      	mov	r0, r3
 8018190:	f7fe fd13 	bl	8016bba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6a18      	ldr	r0, [r3, #32]
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	3324      	adds	r3, #36	; 0x24
 801819c:	220b      	movs	r2, #11
 801819e:	4619      	mov	r1, r3
 80181a0:	f7fe fcea 	bl	8016b78 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	6a1b      	ldr	r3, [r3, #32]
 80181ae:	330c      	adds	r3, #12
 80181b0:	f002 0218 	and.w	r2, r2, #24
 80181b4:	b2d2      	uxtb	r2, r2
 80181b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80181b8:	69fb      	ldr	r3, [r7, #28]
 80181ba:	2201      	movs	r2, #1
 80181bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80181be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3730      	adds	r7, #48	; 0x30
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	4ec4ec4f 	.word	0x4ec4ec4f

080181d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b08a      	sub	sp, #40	; 0x28
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
 80181d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	613b      	str	r3, [r7, #16]
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	691b      	ldr	r3, [r3, #16]
 80181e6:	60fb      	str	r3, [r7, #12]
 80181e8:	2300      	movs	r3, #0
 80181ea:	617b      	str	r3, [r7, #20]
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	1c5a      	adds	r2, r3, #1
 80181f4:	61ba      	str	r2, [r7, #24]
 80181f6:	693a      	ldr	r2, [r7, #16]
 80181f8:	4413      	add	r3, r2
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80181fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018200:	2b1f      	cmp	r3, #31
 8018202:	d940      	bls.n	8018286 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018206:	2b2f      	cmp	r3, #47	; 0x2f
 8018208:	d006      	beq.n	8018218 <create_name+0x48>
 801820a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801820c:	2b5c      	cmp	r3, #92	; 0x5c
 801820e:	d110      	bne.n	8018232 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018210:	e002      	b.n	8018218 <create_name+0x48>
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	3301      	adds	r3, #1
 8018216:	61bb      	str	r3, [r7, #24]
 8018218:	693a      	ldr	r2, [r7, #16]
 801821a:	69bb      	ldr	r3, [r7, #24]
 801821c:	4413      	add	r3, r2
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	2b2f      	cmp	r3, #47	; 0x2f
 8018222:	d0f6      	beq.n	8018212 <create_name+0x42>
 8018224:	693a      	ldr	r2, [r7, #16]
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	4413      	add	r3, r2
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	2b5c      	cmp	r3, #92	; 0x5c
 801822e:	d0f0      	beq.n	8018212 <create_name+0x42>
			break;
 8018230:	e02a      	b.n	8018288 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	2bfe      	cmp	r3, #254	; 0xfe
 8018236:	d901      	bls.n	801823c <create_name+0x6c>
 8018238:	2306      	movs	r3, #6
 801823a:	e177      	b.n	801852c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 801823c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801823e:	b2db      	uxtb	r3, r3
 8018240:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018244:	2101      	movs	r1, #1
 8018246:	4618      	mov	r0, r3
 8018248:	f001 f9f2 	bl	8019630 <ff_convert>
 801824c:	4603      	mov	r3, r0
 801824e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018252:	2b00      	cmp	r3, #0
 8018254:	d101      	bne.n	801825a <create_name+0x8a>
 8018256:	2306      	movs	r3, #6
 8018258:	e168      	b.n	801852c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801825a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801825c:	2b7f      	cmp	r3, #127	; 0x7f
 801825e:	d809      	bhi.n	8018274 <create_name+0xa4>
 8018260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018262:	4619      	mov	r1, r3
 8018264:	48b3      	ldr	r0, [pc, #716]	; (8018534 <create_name+0x364>)
 8018266:	f7fe fce9 	bl	8016c3c <chk_chr>
 801826a:	4603      	mov	r3, r0
 801826c:	2b00      	cmp	r3, #0
 801826e:	d001      	beq.n	8018274 <create_name+0xa4>
 8018270:	2306      	movs	r3, #6
 8018272:	e15b      	b.n	801852c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	1c5a      	adds	r2, r3, #1
 8018278:	617a      	str	r2, [r7, #20]
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	68fa      	ldr	r2, [r7, #12]
 801827e:	4413      	add	r3, r2
 8018280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018282:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018284:	e7b4      	b.n	80181f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018286:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018288:	693a      	ldr	r2, [r7, #16]
 801828a:	69bb      	ldr	r3, [r7, #24]
 801828c:	441a      	add	r2, r3
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018294:	2b1f      	cmp	r3, #31
 8018296:	d801      	bhi.n	801829c <create_name+0xcc>
 8018298:	2304      	movs	r3, #4
 801829a:	e000      	b.n	801829e <create_name+0xce>
 801829c:	2300      	movs	r3, #0
 801829e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80182a2:	e011      	b.n	80182c8 <create_name+0xf8>
		w = lfn[di - 1];
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80182aa:	3b01      	subs	r3, #1
 80182ac:	005b      	lsls	r3, r3, #1
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	4413      	add	r3, r2
 80182b2:	881b      	ldrh	r3, [r3, #0]
 80182b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80182b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182b8:	2b20      	cmp	r3, #32
 80182ba:	d002      	beq.n	80182c2 <create_name+0xf2>
 80182bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80182be:	2b2e      	cmp	r3, #46	; 0x2e
 80182c0:	d106      	bne.n	80182d0 <create_name+0x100>
		di--;
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	3b01      	subs	r3, #1
 80182c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d1ea      	bne.n	80182a4 <create_name+0xd4>
 80182ce:	e000      	b.n	80182d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80182d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	005b      	lsls	r3, r3, #1
 80182d6:	68fa      	ldr	r2, [r7, #12]
 80182d8:	4413      	add	r3, r2
 80182da:	2200      	movs	r2, #0
 80182dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d101      	bne.n	80182e8 <create_name+0x118>
 80182e4:	2306      	movs	r3, #6
 80182e6:	e121      	b.n	801852c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	3324      	adds	r3, #36	; 0x24
 80182ec:	220b      	movs	r2, #11
 80182ee:	2120      	movs	r1, #32
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7fe fc62 	bl	8016bba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80182f6:	2300      	movs	r3, #0
 80182f8:	61bb      	str	r3, [r7, #24]
 80182fa:	e002      	b.n	8018302 <create_name+0x132>
 80182fc:	69bb      	ldr	r3, [r7, #24]
 80182fe:	3301      	adds	r3, #1
 8018300:	61bb      	str	r3, [r7, #24]
 8018302:	69bb      	ldr	r3, [r7, #24]
 8018304:	005b      	lsls	r3, r3, #1
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	4413      	add	r3, r2
 801830a:	881b      	ldrh	r3, [r3, #0]
 801830c:	2b20      	cmp	r3, #32
 801830e:	d0f5      	beq.n	80182fc <create_name+0x12c>
 8018310:	69bb      	ldr	r3, [r7, #24]
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	68fa      	ldr	r2, [r7, #12]
 8018316:	4413      	add	r3, r2
 8018318:	881b      	ldrh	r3, [r3, #0]
 801831a:	2b2e      	cmp	r3, #46	; 0x2e
 801831c:	d0ee      	beq.n	80182fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801831e:	69bb      	ldr	r3, [r7, #24]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d009      	beq.n	8018338 <create_name+0x168>
 8018324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018328:	f043 0303 	orr.w	r3, r3, #3
 801832c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018330:	e002      	b.n	8018338 <create_name+0x168>
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	3b01      	subs	r3, #1
 8018336:	617b      	str	r3, [r7, #20]
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d009      	beq.n	8018352 <create_name+0x182>
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018344:	3b01      	subs	r3, #1
 8018346:	005b      	lsls	r3, r3, #1
 8018348:	68fa      	ldr	r2, [r7, #12]
 801834a:	4413      	add	r3, r2
 801834c:	881b      	ldrh	r3, [r3, #0]
 801834e:	2b2e      	cmp	r3, #46	; 0x2e
 8018350:	d1ef      	bne.n	8018332 <create_name+0x162>

	i = b = 0; ni = 8;
 8018352:	2300      	movs	r3, #0
 8018354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018358:	2300      	movs	r3, #0
 801835a:	623b      	str	r3, [r7, #32]
 801835c:	2308      	movs	r3, #8
 801835e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018360:	69bb      	ldr	r3, [r7, #24]
 8018362:	1c5a      	adds	r2, r3, #1
 8018364:	61ba      	str	r2, [r7, #24]
 8018366:	005b      	lsls	r3, r3, #1
 8018368:	68fa      	ldr	r2, [r7, #12]
 801836a:	4413      	add	r3, r2
 801836c:	881b      	ldrh	r3, [r3, #0]
 801836e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018372:	2b00      	cmp	r3, #0
 8018374:	f000 8090 	beq.w	8018498 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801837a:	2b20      	cmp	r3, #32
 801837c:	d006      	beq.n	801838c <create_name+0x1bc>
 801837e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018380:	2b2e      	cmp	r3, #46	; 0x2e
 8018382:	d10a      	bne.n	801839a <create_name+0x1ca>
 8018384:	69ba      	ldr	r2, [r7, #24]
 8018386:	697b      	ldr	r3, [r7, #20]
 8018388:	429a      	cmp	r2, r3
 801838a:	d006      	beq.n	801839a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801838c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018390:	f043 0303 	orr.w	r3, r3, #3
 8018394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018398:	e07d      	b.n	8018496 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801839a:	6a3a      	ldr	r2, [r7, #32]
 801839c:	69fb      	ldr	r3, [r7, #28]
 801839e:	429a      	cmp	r2, r3
 80183a0:	d203      	bcs.n	80183aa <create_name+0x1da>
 80183a2:	69ba      	ldr	r2, [r7, #24]
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d123      	bne.n	80183f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80183aa:	69fb      	ldr	r3, [r7, #28]
 80183ac:	2b0b      	cmp	r3, #11
 80183ae:	d106      	bne.n	80183be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80183b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183b4:	f043 0303 	orr.w	r3, r3, #3
 80183b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80183bc:	e06f      	b.n	801849e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80183be:	69ba      	ldr	r2, [r7, #24]
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d005      	beq.n	80183d2 <create_name+0x202>
 80183c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183ca:	f043 0303 	orr.w	r3, r3, #3
 80183ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80183d2:	69ba      	ldr	r2, [r7, #24]
 80183d4:	697b      	ldr	r3, [r7, #20]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d860      	bhi.n	801849c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	61bb      	str	r3, [r7, #24]
 80183de:	2308      	movs	r3, #8
 80183e0:	623b      	str	r3, [r7, #32]
 80183e2:	230b      	movs	r3, #11
 80183e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80183e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183ea:	009b      	lsls	r3, r3, #2
 80183ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80183f0:	e051      	b.n	8018496 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80183f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183f4:	2b7f      	cmp	r3, #127	; 0x7f
 80183f6:	d914      	bls.n	8018422 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80183f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183fa:	2100      	movs	r1, #0
 80183fc:	4618      	mov	r0, r3
 80183fe:	f001 f917 	bl	8019630 <ff_convert>
 8018402:	4603      	mov	r3, r0
 8018404:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018408:	2b00      	cmp	r3, #0
 801840a:	d004      	beq.n	8018416 <create_name+0x246>
 801840c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801840e:	3b80      	subs	r3, #128	; 0x80
 8018410:	4a49      	ldr	r2, [pc, #292]	; (8018538 <create_name+0x368>)
 8018412:	5cd3      	ldrb	r3, [r2, r3]
 8018414:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801841a:	f043 0302 	orr.w	r3, r3, #2
 801841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018424:	2b00      	cmp	r3, #0
 8018426:	d007      	beq.n	8018438 <create_name+0x268>
 8018428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801842a:	4619      	mov	r1, r3
 801842c:	4843      	ldr	r0, [pc, #268]	; (801853c <create_name+0x36c>)
 801842e:	f7fe fc05 	bl	8016c3c <chk_chr>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d008      	beq.n	801844a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018438:	235f      	movs	r3, #95	; 0x5f
 801843a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801843c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018440:	f043 0303 	orr.w	r3, r3, #3
 8018444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018448:	e01b      	b.n	8018482 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801844a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801844c:	2b40      	cmp	r3, #64	; 0x40
 801844e:	d909      	bls.n	8018464 <create_name+0x294>
 8018450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018452:	2b5a      	cmp	r3, #90	; 0x5a
 8018454:	d806      	bhi.n	8018464 <create_name+0x294>
					b |= 2;
 8018456:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801845a:	f043 0302 	orr.w	r3, r3, #2
 801845e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018462:	e00e      	b.n	8018482 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018466:	2b60      	cmp	r3, #96	; 0x60
 8018468:	d90b      	bls.n	8018482 <create_name+0x2b2>
 801846a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801846c:	2b7a      	cmp	r3, #122	; 0x7a
 801846e:	d808      	bhi.n	8018482 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018474:	f043 0301 	orr.w	r3, r3, #1
 8018478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801847c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801847e:	3b20      	subs	r3, #32
 8018480:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018482:	6a3b      	ldr	r3, [r7, #32]
 8018484:	1c5a      	adds	r2, r3, #1
 8018486:	623a      	str	r2, [r7, #32]
 8018488:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801848a:	b2d1      	uxtb	r1, r2
 801848c:	687a      	ldr	r2, [r7, #4]
 801848e:	4413      	add	r3, r2
 8018490:	460a      	mov	r2, r1
 8018492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018496:	e763      	b.n	8018360 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018498:	bf00      	nop
 801849a:	e000      	b.n	801849e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 801849c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80184a4:	2be5      	cmp	r3, #229	; 0xe5
 80184a6:	d103      	bne.n	80184b0 <create_name+0x2e0>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2205      	movs	r2, #5
 80184ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	2b08      	cmp	r3, #8
 80184b4:	d104      	bne.n	80184c0 <create_name+0x2f0>
 80184b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184ba:	009b      	lsls	r3, r3, #2
 80184bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80184c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184c4:	f003 030c 	and.w	r3, r3, #12
 80184c8:	2b0c      	cmp	r3, #12
 80184ca:	d005      	beq.n	80184d8 <create_name+0x308>
 80184cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184d0:	f003 0303 	and.w	r3, r3, #3
 80184d4:	2b03      	cmp	r3, #3
 80184d6:	d105      	bne.n	80184e4 <create_name+0x314>
 80184d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184dc:	f043 0302 	orr.w	r3, r3, #2
 80184e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80184e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184e8:	f003 0302 	and.w	r3, r3, #2
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d117      	bne.n	8018520 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80184f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184f4:	f003 0303 	and.w	r3, r3, #3
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d105      	bne.n	8018508 <create_name+0x338>
 80184fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018500:	f043 0310 	orr.w	r3, r3, #16
 8018504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801850c:	f003 030c 	and.w	r3, r3, #12
 8018510:	2b04      	cmp	r3, #4
 8018512:	d105      	bne.n	8018520 <create_name+0x350>
 8018514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018518:	f043 0308 	orr.w	r3, r3, #8
 801851c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018526:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801852a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801852c:	4618      	mov	r0, r3
 801852e:	3728      	adds	r7, #40	; 0x28
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}
 8018534:	0801eb30 	.word	0x0801eb30
 8018538:	0801ebf4 	.word	0x0801ebf4
 801853c:	0801eb3c 	.word	0x0801eb3c

08018540 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b086      	sub	sp, #24
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
 8018548:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801854e:	693b      	ldr	r3, [r7, #16]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018554:	e002      	b.n	801855c <follow_path+0x1c>
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	3301      	adds	r3, #1
 801855a:	603b      	str	r3, [r7, #0]
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	2b2f      	cmp	r3, #47	; 0x2f
 8018562:	d0f8      	beq.n	8018556 <follow_path+0x16>
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	2b5c      	cmp	r3, #92	; 0x5c
 801856a:	d0f4      	beq.n	8018556 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	2200      	movs	r2, #0
 8018570:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	781b      	ldrb	r3, [r3, #0]
 8018576:	2b1f      	cmp	r3, #31
 8018578:	d80a      	bhi.n	8018590 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	2280      	movs	r2, #128	; 0x80
 801857e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018582:	2100      	movs	r1, #0
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f7ff f8fe 	bl	8017786 <dir_sdi>
 801858a:	4603      	mov	r3, r0
 801858c:	75fb      	strb	r3, [r7, #23]
 801858e:	e048      	b.n	8018622 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018590:	463b      	mov	r3, r7
 8018592:	4619      	mov	r1, r3
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7ff fe1b 	bl	80181d0 <create_name>
 801859a:	4603      	mov	r3, r0
 801859c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801859e:	7dfb      	ldrb	r3, [r7, #23]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d139      	bne.n	8018618 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80185a4:	6878      	ldr	r0, [r7, #4]
 80185a6:	f7ff fc5b 	bl	8017e60 <dir_find>
 80185aa:	4603      	mov	r3, r0
 80185ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80185b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80185b6:	7dfb      	ldrb	r3, [r7, #23]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d00a      	beq.n	80185d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80185bc:	7dfb      	ldrb	r3, [r7, #23]
 80185be:	2b04      	cmp	r3, #4
 80185c0:	d12c      	bne.n	801861c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80185c2:	7afb      	ldrb	r3, [r7, #11]
 80185c4:	f003 0304 	and.w	r3, r3, #4
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d127      	bne.n	801861c <follow_path+0xdc>
 80185cc:	2305      	movs	r3, #5
 80185ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80185d0:	e024      	b.n	801861c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80185d2:	7afb      	ldrb	r3, [r7, #11]
 80185d4:	f003 0304 	and.w	r3, r3, #4
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d121      	bne.n	8018620 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80185dc:	693b      	ldr	r3, [r7, #16]
 80185de:	799b      	ldrb	r3, [r3, #6]
 80185e0:	f003 0310 	and.w	r3, r3, #16
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d102      	bne.n	80185ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80185e8:	2305      	movs	r3, #5
 80185ea:	75fb      	strb	r3, [r7, #23]
 80185ec:	e019      	b.n	8018622 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	695b      	ldr	r3, [r3, #20]
 80185f8:	68fa      	ldr	r2, [r7, #12]
 80185fa:	8992      	ldrh	r2, [r2, #12]
 80185fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8018600:	fb02 f200 	mul.w	r2, r2, r0
 8018604:	1a9b      	subs	r3, r3, r2
 8018606:	440b      	add	r3, r1
 8018608:	4619      	mov	r1, r3
 801860a:	68f8      	ldr	r0, [r7, #12]
 801860c:	f7ff fa61 	bl	8017ad2 <ld_clust>
 8018610:	4602      	mov	r2, r0
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018616:	e7bb      	b.n	8018590 <follow_path+0x50>
			if (res != FR_OK) break;
 8018618:	bf00      	nop
 801861a:	e002      	b.n	8018622 <follow_path+0xe2>
				break;
 801861c:	bf00      	nop
 801861e:	e000      	b.n	8018622 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018620:	bf00      	nop
			}
		}
	}

	return res;
 8018622:	7dfb      	ldrb	r3, [r7, #23]
}
 8018624:	4618      	mov	r0, r3
 8018626:	3718      	adds	r7, #24
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}

0801862c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801862c:	b480      	push	{r7}
 801862e:	b087      	sub	sp, #28
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018634:	f04f 33ff 	mov.w	r3, #4294967295
 8018638:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d031      	beq.n	80186a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	617b      	str	r3, [r7, #20]
 8018648:	e002      	b.n	8018650 <get_ldnumber+0x24>
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	3301      	adds	r3, #1
 801864e:	617b      	str	r3, [r7, #20]
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	2b1f      	cmp	r3, #31
 8018656:	d903      	bls.n	8018660 <get_ldnumber+0x34>
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	2b3a      	cmp	r3, #58	; 0x3a
 801865e:	d1f4      	bne.n	801864a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	2b3a      	cmp	r3, #58	; 0x3a
 8018666:	d11c      	bne.n	80186a2 <get_ldnumber+0x76>
			tp = *path;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	1c5a      	adds	r2, r3, #1
 8018672:	60fa      	str	r2, [r7, #12]
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	3b30      	subs	r3, #48	; 0x30
 8018678:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	2b09      	cmp	r3, #9
 801867e:	d80e      	bhi.n	801869e <get_ldnumber+0x72>
 8018680:	68fa      	ldr	r2, [r7, #12]
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	429a      	cmp	r2, r3
 8018686:	d10a      	bne.n	801869e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d107      	bne.n	801869e <get_ldnumber+0x72>
					vol = (int)i;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018692:	697b      	ldr	r3, [r7, #20]
 8018694:	3301      	adds	r3, #1
 8018696:	617b      	str	r3, [r7, #20]
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	697a      	ldr	r2, [r7, #20]
 801869c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801869e:	693b      	ldr	r3, [r7, #16]
 80186a0:	e002      	b.n	80186a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80186a2:	2300      	movs	r3, #0
 80186a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80186a6:	693b      	ldr	r3, [r7, #16]
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	371c      	adds	r7, #28
 80186ac:	46bd      	mov	sp, r7
 80186ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b2:	4770      	bx	lr

080186b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2200      	movs	r2, #0
 80186c2:	70da      	strb	r2, [r3, #3]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f04f 32ff 	mov.w	r2, #4294967295
 80186ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80186cc:	6839      	ldr	r1, [r7, #0]
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f7fe fc80 	bl	8016fd4 <move_window>
 80186d4:	4603      	mov	r3, r0
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d001      	beq.n	80186de <check_fs+0x2a>
 80186da:	2304      	movs	r3, #4
 80186dc:	e038      	b.n	8018750 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	3338      	adds	r3, #56	; 0x38
 80186e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fe f9c4 	bl	8016a74 <ld_word>
 80186ec:	4603      	mov	r3, r0
 80186ee:	461a      	mov	r2, r3
 80186f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d001      	beq.n	80186fc <check_fs+0x48>
 80186f8:	2303      	movs	r3, #3
 80186fa:	e029      	b.n	8018750 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018702:	2be9      	cmp	r3, #233	; 0xe9
 8018704:	d009      	beq.n	801871a <check_fs+0x66>
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801870c:	2beb      	cmp	r3, #235	; 0xeb
 801870e:	d11e      	bne.n	801874e <check_fs+0x9a>
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8018716:	2b90      	cmp	r3, #144	; 0x90
 8018718:	d119      	bne.n	801874e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	3338      	adds	r3, #56	; 0x38
 801871e:	3336      	adds	r3, #54	; 0x36
 8018720:	4618      	mov	r0, r3
 8018722:	f7fe f9bf 	bl	8016aa4 <ld_dword>
 8018726:	4603      	mov	r3, r0
 8018728:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801872c:	4a0a      	ldr	r2, [pc, #40]	; (8018758 <check_fs+0xa4>)
 801872e:	4293      	cmp	r3, r2
 8018730:	d101      	bne.n	8018736 <check_fs+0x82>
 8018732:	2300      	movs	r3, #0
 8018734:	e00c      	b.n	8018750 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	3338      	adds	r3, #56	; 0x38
 801873a:	3352      	adds	r3, #82	; 0x52
 801873c:	4618      	mov	r0, r3
 801873e:	f7fe f9b1 	bl	8016aa4 <ld_dword>
 8018742:	4602      	mov	r2, r0
 8018744:	4b05      	ldr	r3, [pc, #20]	; (801875c <check_fs+0xa8>)
 8018746:	429a      	cmp	r2, r3
 8018748:	d101      	bne.n	801874e <check_fs+0x9a>
 801874a:	2300      	movs	r3, #0
 801874c:	e000      	b.n	8018750 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801874e:	2302      	movs	r3, #2
}
 8018750:	4618      	mov	r0, r3
 8018752:	3708      	adds	r7, #8
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}
 8018758:	00544146 	.word	0x00544146
 801875c:	33544146 	.word	0x33544146

08018760 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b096      	sub	sp, #88	; 0x58
 8018764:	af00      	add	r7, sp, #0
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	4613      	mov	r3, r2
 801876c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801876e:	68bb      	ldr	r3, [r7, #8]
 8018770:	2200      	movs	r2, #0
 8018772:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018774:	68f8      	ldr	r0, [r7, #12]
 8018776:	f7ff ff59 	bl	801862c <get_ldnumber>
 801877a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801877e:	2b00      	cmp	r3, #0
 8018780:	da01      	bge.n	8018786 <find_volume+0x26>
 8018782:	230b      	movs	r3, #11
 8018784:	e268      	b.n	8018c58 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018786:	4ab0      	ldr	r2, [pc, #704]	; (8018a48 <find_volume+0x2e8>)
 8018788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801878e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018792:	2b00      	cmp	r3, #0
 8018794:	d101      	bne.n	801879a <find_volume+0x3a>
 8018796:	230c      	movs	r3, #12
 8018798:	e25e      	b.n	8018c58 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801879e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80187a0:	79fb      	ldrb	r3, [r7, #7]
 80187a2:	f023 0301 	bic.w	r3, r3, #1
 80187a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80187a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d01a      	beq.n	80187e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80187b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187b2:	785b      	ldrb	r3, [r3, #1]
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7fe f8bf 	bl	8016938 <disk_status>
 80187ba:	4603      	mov	r3, r0
 80187bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80187c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187c4:	f003 0301 	and.w	r3, r3, #1
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d10c      	bne.n	80187e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80187cc:	79fb      	ldrb	r3, [r7, #7]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d007      	beq.n	80187e2 <find_volume+0x82>
 80187d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80187d6:	f003 0304 	and.w	r3, r3, #4
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d001      	beq.n	80187e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80187de:	230a      	movs	r3, #10
 80187e0:	e23a      	b.n	8018c58 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80187e2:	2300      	movs	r3, #0
 80187e4:	e238      	b.n	8018c58 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80187e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187e8:	2200      	movs	r2, #0
 80187ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80187ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187ee:	b2da      	uxtb	r2, r3
 80187f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80187f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187f6:	785b      	ldrb	r3, [r3, #1]
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7fe f8b7 	bl	801696c <disk_initialize>
 80187fe:	4603      	mov	r3, r0
 8018800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018804:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018808:	f003 0301 	and.w	r3, r3, #1
 801880c:	2b00      	cmp	r3, #0
 801880e:	d001      	beq.n	8018814 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018810:	2303      	movs	r3, #3
 8018812:	e221      	b.n	8018c58 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018814:	79fb      	ldrb	r3, [r7, #7]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d007      	beq.n	801882a <find_volume+0xca>
 801881a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801881e:	f003 0304 	and.w	r3, r3, #4
 8018822:	2b00      	cmp	r3, #0
 8018824:	d001      	beq.n	801882a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018826:	230a      	movs	r3, #10
 8018828:	e216      	b.n	8018c58 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801882c:	7858      	ldrb	r0, [r3, #1]
 801882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018830:	330c      	adds	r3, #12
 8018832:	461a      	mov	r2, r3
 8018834:	2102      	movs	r1, #2
 8018836:	f7fe f8ff 	bl	8016a38 <disk_ioctl>
 801883a:	4603      	mov	r3, r0
 801883c:	2b00      	cmp	r3, #0
 801883e:	d001      	beq.n	8018844 <find_volume+0xe4>
 8018840:	2301      	movs	r3, #1
 8018842:	e209      	b.n	8018c58 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8018844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018846:	899b      	ldrh	r3, [r3, #12]
 8018848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801884c:	d80d      	bhi.n	801886a <find_volume+0x10a>
 801884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018850:	899b      	ldrh	r3, [r3, #12]
 8018852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018856:	d308      	bcc.n	801886a <find_volume+0x10a>
 8018858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801885a:	899b      	ldrh	r3, [r3, #12]
 801885c:	461a      	mov	r2, r3
 801885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018860:	899b      	ldrh	r3, [r3, #12]
 8018862:	3b01      	subs	r3, #1
 8018864:	4013      	ands	r3, r2
 8018866:	2b00      	cmp	r3, #0
 8018868:	d001      	beq.n	801886e <find_volume+0x10e>
 801886a:	2301      	movs	r3, #1
 801886c:	e1f4      	b.n	8018c58 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801886e:	2300      	movs	r3, #0
 8018870:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018872:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018876:	f7ff ff1d 	bl	80186b4 <check_fs>
 801887a:	4603      	mov	r3, r0
 801887c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018884:	2b02      	cmp	r3, #2
 8018886:	d14b      	bne.n	8018920 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018888:	2300      	movs	r3, #0
 801888a:	643b      	str	r3, [r7, #64]	; 0x40
 801888c:	e01f      	b.n	80188ce <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018890:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8018894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018896:	011b      	lsls	r3, r3, #4
 8018898:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801889c:	4413      	add	r3, r2
 801889e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80188a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a2:	3304      	adds	r3, #4
 80188a4:	781b      	ldrb	r3, [r3, #0]
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d006      	beq.n	80188b8 <find_volume+0x158>
 80188aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ac:	3308      	adds	r3, #8
 80188ae:	4618      	mov	r0, r3
 80188b0:	f7fe f8f8 	bl	8016aa4 <ld_dword>
 80188b4:	4602      	mov	r2, r0
 80188b6:	e000      	b.n	80188ba <find_volume+0x15a>
 80188b8:	2200      	movs	r2, #0
 80188ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188bc:	009b      	lsls	r3, r3, #2
 80188be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80188c2:	440b      	add	r3, r1
 80188c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80188c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188ca:	3301      	adds	r3, #1
 80188cc:	643b      	str	r3, [r7, #64]	; 0x40
 80188ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188d0:	2b03      	cmp	r3, #3
 80188d2:	d9dc      	bls.n	801888e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80188d4:	2300      	movs	r3, #0
 80188d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80188d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d002      	beq.n	80188e4 <find_volume+0x184>
 80188de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188e0:	3b01      	subs	r3, #1
 80188e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80188e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80188e6:	009b      	lsls	r3, r3, #2
 80188e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80188ec:	4413      	add	r3, r2
 80188ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80188f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80188f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d005      	beq.n	8018906 <find_volume+0x1a6>
 80188fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80188fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80188fe:	f7ff fed9 	bl	80186b4 <check_fs>
 8018902:	4603      	mov	r3, r0
 8018904:	e000      	b.n	8018908 <find_volume+0x1a8>
 8018906:	2303      	movs	r3, #3
 8018908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801890c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018910:	2b01      	cmp	r3, #1
 8018912:	d905      	bls.n	8018920 <find_volume+0x1c0>
 8018914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018916:	3301      	adds	r3, #1
 8018918:	643b      	str	r3, [r7, #64]	; 0x40
 801891a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801891c:	2b03      	cmp	r3, #3
 801891e:	d9e1      	bls.n	80188e4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018924:	2b04      	cmp	r3, #4
 8018926:	d101      	bne.n	801892c <find_volume+0x1cc>
 8018928:	2301      	movs	r3, #1
 801892a:	e195      	b.n	8018c58 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801892c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018930:	2b01      	cmp	r3, #1
 8018932:	d901      	bls.n	8018938 <find_volume+0x1d8>
 8018934:	230d      	movs	r3, #13
 8018936:	e18f      	b.n	8018c58 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801893a:	3338      	adds	r3, #56	; 0x38
 801893c:	330b      	adds	r3, #11
 801893e:	4618      	mov	r0, r3
 8018940:	f7fe f898 	bl	8016a74 <ld_word>
 8018944:	4603      	mov	r3, r0
 8018946:	461a      	mov	r2, r3
 8018948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801894a:	899b      	ldrh	r3, [r3, #12]
 801894c:	429a      	cmp	r2, r3
 801894e:	d001      	beq.n	8018954 <find_volume+0x1f4>
 8018950:	230d      	movs	r3, #13
 8018952:	e181      	b.n	8018c58 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018956:	3338      	adds	r3, #56	; 0x38
 8018958:	3316      	adds	r3, #22
 801895a:	4618      	mov	r0, r3
 801895c:	f7fe f88a 	bl	8016a74 <ld_word>
 8018960:	4603      	mov	r3, r0
 8018962:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018966:	2b00      	cmp	r3, #0
 8018968:	d106      	bne.n	8018978 <find_volume+0x218>
 801896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801896c:	3338      	adds	r3, #56	; 0x38
 801896e:	3324      	adds	r3, #36	; 0x24
 8018970:	4618      	mov	r0, r3
 8018972:	f7fe f897 	bl	8016aa4 <ld_dword>
 8018976:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801897a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801897c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018980:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8018984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018986:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801898a:	789b      	ldrb	r3, [r3, #2]
 801898c:	2b01      	cmp	r3, #1
 801898e:	d005      	beq.n	801899c <find_volume+0x23c>
 8018990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018992:	789b      	ldrb	r3, [r3, #2]
 8018994:	2b02      	cmp	r3, #2
 8018996:	d001      	beq.n	801899c <find_volume+0x23c>
 8018998:	230d      	movs	r3, #13
 801899a:	e15d      	b.n	8018c58 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801899e:	789b      	ldrb	r3, [r3, #2]
 80189a0:	461a      	mov	r2, r3
 80189a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189a4:	fb02 f303 	mul.w	r3, r2, r3
 80189a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80189aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80189b0:	b29a      	uxth	r2, r3
 80189b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80189b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b8:	895b      	ldrh	r3, [r3, #10]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d008      	beq.n	80189d0 <find_volume+0x270>
 80189be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c0:	895b      	ldrh	r3, [r3, #10]
 80189c2:	461a      	mov	r2, r3
 80189c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c6:	895b      	ldrh	r3, [r3, #10]
 80189c8:	3b01      	subs	r3, #1
 80189ca:	4013      	ands	r3, r2
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d001      	beq.n	80189d4 <find_volume+0x274>
 80189d0:	230d      	movs	r3, #13
 80189d2:	e141      	b.n	8018c58 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80189d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d6:	3338      	adds	r3, #56	; 0x38
 80189d8:	3311      	adds	r3, #17
 80189da:	4618      	mov	r0, r3
 80189dc:	f7fe f84a 	bl	8016a74 <ld_word>
 80189e0:	4603      	mov	r3, r0
 80189e2:	461a      	mov	r2, r3
 80189e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80189e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ea:	891b      	ldrh	r3, [r3, #8]
 80189ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189ee:	8992      	ldrh	r2, [r2, #12]
 80189f0:	0952      	lsrs	r2, r2, #5
 80189f2:	b292      	uxth	r2, r2
 80189f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80189f8:	fb02 f201 	mul.w	r2, r2, r1
 80189fc:	1a9b      	subs	r3, r3, r2
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d001      	beq.n	8018a08 <find_volume+0x2a8>
 8018a04:	230d      	movs	r3, #13
 8018a06:	e127      	b.n	8018c58 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0a:	3338      	adds	r3, #56	; 0x38
 8018a0c:	3313      	adds	r3, #19
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fe f830 	bl	8016a74 <ld_word>
 8018a14:	4603      	mov	r3, r0
 8018a16:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <find_volume+0x2cc>
 8018a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a20:	3338      	adds	r3, #56	; 0x38
 8018a22:	3320      	adds	r3, #32
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7fe f83d 	bl	8016aa4 <ld_dword>
 8018a2a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8018a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2e:	3338      	adds	r3, #56	; 0x38
 8018a30:	330e      	adds	r3, #14
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7fe f81e 	bl	8016a74 <ld_word>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8018a3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d104      	bne.n	8018a4c <find_volume+0x2ec>
 8018a42:	230d      	movs	r3, #13
 8018a44:	e108      	b.n	8018c58 <find_volume+0x4f8>
 8018a46:	bf00      	nop
 8018a48:	20000400 	.word	0x20000400

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018a4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a50:	4413      	add	r3, r2
 8018a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a54:	8911      	ldrh	r1, [r2, #8]
 8018a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a58:	8992      	ldrh	r2, [r2, #12]
 8018a5a:	0952      	lsrs	r2, r2, #5
 8018a5c:	b292      	uxth	r2, r2
 8018a5e:	fbb1 f2f2 	udiv	r2, r1, r2
 8018a62:	b292      	uxth	r2, r2
 8018a64:	4413      	add	r3, r2
 8018a66:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d201      	bcs.n	8018a74 <find_volume+0x314>
 8018a70:	230d      	movs	r3, #13
 8018a72:	e0f1      	b.n	8018c58 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a7c:	8952      	ldrh	r2, [r2, #10]
 8018a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a82:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d101      	bne.n	8018a8e <find_volume+0x32e>
 8018a8a:	230d      	movs	r3, #13
 8018a8c:	e0e4      	b.n	8018c58 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8018a8e:	2303      	movs	r3, #3
 8018a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a96:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8018a9a:	4293      	cmp	r3, r2
 8018a9c:	d802      	bhi.n	8018aa4 <find_volume+0x344>
 8018a9e:	2302      	movs	r3, #2
 8018aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8018aaa:	4293      	cmp	r3, r2
 8018aac:	d802      	bhi.n	8018ab4 <find_volume+0x354>
 8018aae:	2301      	movs	r3, #1
 8018ab0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab6:	1c9a      	adds	r2, r3, #2
 8018ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aba:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8018abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018ac0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018ac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ac6:	441a      	add	r2, r3
 8018ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aca:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8018acc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad0:	441a      	add	r2, r3
 8018ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8018ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018ada:	2b03      	cmp	r3, #3
 8018adc:	d11e      	bne.n	8018b1c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8018ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ae0:	3338      	adds	r3, #56	; 0x38
 8018ae2:	332a      	adds	r3, #42	; 0x2a
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f7fd ffc5 	bl	8016a74 <ld_word>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d001      	beq.n	8018af4 <find_volume+0x394>
 8018af0:	230d      	movs	r3, #13
 8018af2:	e0b1      	b.n	8018c58 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8018af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af6:	891b      	ldrh	r3, [r3, #8]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d001      	beq.n	8018b00 <find_volume+0x3a0>
 8018afc:	230d      	movs	r3, #13
 8018afe:	e0ab      	b.n	8018c58 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8018b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b02:	3338      	adds	r3, #56	; 0x38
 8018b04:	332c      	adds	r3, #44	; 0x2c
 8018b06:	4618      	mov	r0, r3
 8018b08:	f7fd ffcc 	bl	8016aa4 <ld_dword>
 8018b0c:	4602      	mov	r2, r0
 8018b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b10:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8018b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b14:	69db      	ldr	r3, [r3, #28]
 8018b16:	009b      	lsls	r3, r3, #2
 8018b18:	647b      	str	r3, [r7, #68]	; 0x44
 8018b1a:	e01f      	b.n	8018b5c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b1e:	891b      	ldrh	r3, [r3, #8]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d101      	bne.n	8018b28 <find_volume+0x3c8>
 8018b24:	230d      	movs	r3, #13
 8018b26:	e097      	b.n	8018c58 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b2e:	441a      	add	r2, r3
 8018b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b32:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b38:	2b02      	cmp	r3, #2
 8018b3a:	d103      	bne.n	8018b44 <find_volume+0x3e4>
 8018b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b3e:	69db      	ldr	r3, [r3, #28]
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	e00a      	b.n	8018b5a <find_volume+0x3fa>
 8018b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b46:	69da      	ldr	r2, [r3, #28]
 8018b48:	4613      	mov	r3, r2
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	4413      	add	r3, r2
 8018b4e:	085a      	lsrs	r2, r3, #1
 8018b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b52:	69db      	ldr	r3, [r3, #28]
 8018b54:	f003 0301 	and.w	r3, r3, #1
 8018b58:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018b5a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5e:	6a1a      	ldr	r2, [r3, #32]
 8018b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b62:	899b      	ldrh	r3, [r3, #12]
 8018b64:	4619      	mov	r1, r3
 8018b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b68:	440b      	add	r3, r1
 8018b6a:	3b01      	subs	r3, #1
 8018b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018b6e:	8989      	ldrh	r1, [r1, #12]
 8018b70:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b74:	429a      	cmp	r2, r3
 8018b76:	d201      	bcs.n	8018b7c <find_volume+0x41c>
 8018b78:	230d      	movs	r3, #13
 8018b7a:	e06d      	b.n	8018c58 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8018b82:	619a      	str	r2, [r3, #24]
 8018b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b86:	699a      	ldr	r2, [r3, #24]
 8018b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8018b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8e:	2280      	movs	r2, #128	; 0x80
 8018b90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018b92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018b96:	2b03      	cmp	r3, #3
 8018b98:	d149      	bne.n	8018c2e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9c:	3338      	adds	r3, #56	; 0x38
 8018b9e:	3330      	adds	r3, #48	; 0x30
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7fd ff67 	bl	8016a74 <ld_word>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	2b01      	cmp	r3, #1
 8018baa:	d140      	bne.n	8018c2e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bae:	3301      	adds	r3, #1
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018bb4:	f7fe fa0e 	bl	8016fd4 <move_window>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d137      	bne.n	8018c2e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8018bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc0:	2200      	movs	r2, #0
 8018bc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc6:	3338      	adds	r3, #56	; 0x38
 8018bc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7fd ff51 	bl	8016a74 <ld_word>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d127      	bne.n	8018c2e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018be0:	3338      	adds	r3, #56	; 0x38
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7fd ff5e 	bl	8016aa4 <ld_dword>
 8018be8:	4602      	mov	r2, r0
 8018bea:	4b1d      	ldr	r3, [pc, #116]	; (8018c60 <find_volume+0x500>)
 8018bec:	429a      	cmp	r2, r3
 8018bee:	d11e      	bne.n	8018c2e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf2:	3338      	adds	r3, #56	; 0x38
 8018bf4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f7fd ff53 	bl	8016aa4 <ld_dword>
 8018bfe:	4602      	mov	r2, r0
 8018c00:	4b18      	ldr	r3, [pc, #96]	; (8018c64 <find_volume+0x504>)
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d113      	bne.n	8018c2e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c08:	3338      	adds	r3, #56	; 0x38
 8018c0a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7fd ff48 	bl	8016aa4 <ld_dword>
 8018c14:	4602      	mov	r2, r0
 8018c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c18:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c1c:	3338      	adds	r3, #56	; 0x38
 8018c1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018c22:	4618      	mov	r0, r3
 8018c24:	f7fd ff3e 	bl	8016aa4 <ld_dword>
 8018c28:	4602      	mov	r2, r0
 8018c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c2c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018c34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018c36:	4b0c      	ldr	r3, [pc, #48]	; (8018c68 <find_volume+0x508>)
 8018c38:	881b      	ldrh	r3, [r3, #0]
 8018c3a:	3301      	adds	r3, #1
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	4b0a      	ldr	r3, [pc, #40]	; (8018c68 <find_volume+0x508>)
 8018c40:	801a      	strh	r2, [r3, #0]
 8018c42:	4b09      	ldr	r3, [pc, #36]	; (8018c68 <find_volume+0x508>)
 8018c44:	881a      	ldrh	r2, [r3, #0]
 8018c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c48:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c4c:	4a07      	ldr	r2, [pc, #28]	; (8018c6c <find_volume+0x50c>)
 8018c4e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018c52:	f7fe f957 	bl	8016f04 <clear_lock>
#endif
	return FR_OK;
 8018c56:	2300      	movs	r3, #0
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3758      	adds	r7, #88	; 0x58
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	41615252 	.word	0x41615252
 8018c64:	61417272 	.word	0x61417272
 8018c68:	20000404 	.word	0x20000404
 8018c6c:	20000428 	.word	0x20000428

08018c70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018c7a:	2309      	movs	r3, #9
 8018c7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d01c      	beq.n	8018cbe <validate+0x4e>
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d018      	beq.n	8018cbe <validate+0x4e>
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d013      	beq.n	8018cbe <validate+0x4e>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	889a      	ldrh	r2, [r3, #4]
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	88db      	ldrh	r3, [r3, #6]
 8018ca0:	429a      	cmp	r2, r3
 8018ca2:	d10c      	bne.n	8018cbe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	785b      	ldrb	r3, [r3, #1]
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7fd fe44 	bl	8016938 <disk_status>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	f003 0301 	and.w	r3, r3, #1
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d101      	bne.n	8018cbe <validate+0x4e>
			res = FR_OK;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018cbe:	7bfb      	ldrb	r3, [r7, #15]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d102      	bne.n	8018cca <validate+0x5a>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	e000      	b.n	8018ccc <validate+0x5c>
 8018cca:	2300      	movs	r3, #0
 8018ccc:	683a      	ldr	r2, [r7, #0]
 8018cce:	6013      	str	r3, [r2, #0]
	return res;
 8018cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	3710      	adds	r7, #16
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
	...

08018cdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b088      	sub	sp, #32
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	4613      	mov	r3, r2
 8018ce8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018cee:	f107 0310 	add.w	r3, r7, #16
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7ff fc9a 	bl	801862c <get_ldnumber>
 8018cf8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018cfa:	69fb      	ldr	r3, [r7, #28]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	da01      	bge.n	8018d04 <f_mount+0x28>
 8018d00:	230b      	movs	r3, #11
 8018d02:	e02b      	b.n	8018d5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018d04:	4a17      	ldr	r2, [pc, #92]	; (8018d64 <f_mount+0x88>)
 8018d06:	69fb      	ldr	r3, [r7, #28]
 8018d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018d0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018d0e:	69bb      	ldr	r3, [r7, #24]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d005      	beq.n	8018d20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018d14:	69b8      	ldr	r0, [r7, #24]
 8018d16:	f7fe f8f5 	bl	8016f04 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018d1a:	69bb      	ldr	r3, [r7, #24]
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d002      	beq.n	8018d2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	2200      	movs	r2, #0
 8018d2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018d2c:	68fa      	ldr	r2, [r7, #12]
 8018d2e:	490d      	ldr	r1, [pc, #52]	; (8018d64 <f_mount+0x88>)
 8018d30:	69fb      	ldr	r3, [r7, #28]
 8018d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d002      	beq.n	8018d42 <f_mount+0x66>
 8018d3c:	79fb      	ldrb	r3, [r7, #7]
 8018d3e:	2b01      	cmp	r3, #1
 8018d40:	d001      	beq.n	8018d46 <f_mount+0x6a>
 8018d42:	2300      	movs	r3, #0
 8018d44:	e00a      	b.n	8018d5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018d46:	f107 010c 	add.w	r1, r7, #12
 8018d4a:	f107 0308 	add.w	r3, r7, #8
 8018d4e:	2200      	movs	r2, #0
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7ff fd05 	bl	8018760 <find_volume>
 8018d56:	4603      	mov	r3, r0
 8018d58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3720      	adds	r7, #32
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}
 8018d64:	20000400 	.word	0x20000400

08018d68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b09a      	sub	sp, #104	; 0x68
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	60f8      	str	r0, [r7, #12]
 8018d70:	60b9      	str	r1, [r7, #8]
 8018d72:	4613      	mov	r3, r2
 8018d74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d101      	bne.n	8018d80 <f_open+0x18>
 8018d7c:	2309      	movs	r3, #9
 8018d7e:	e1bb      	b.n	80190f8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8018d80:	79fb      	ldrb	r3, [r7, #7]
 8018d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018d86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018d88:	79fa      	ldrb	r2, [r7, #7]
 8018d8a:	f107 0114 	add.w	r1, r7, #20
 8018d8e:	f107 0308 	add.w	r3, r7, #8
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7ff fce4 	bl	8018760 <find_volume>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8018d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f040 819f 	bne.w	80190e6 <f_open+0x37e>
		dj.obj.fs = fs;
 8018da8:	697b      	ldr	r3, [r7, #20]
 8018daa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018dac:	68ba      	ldr	r2, [r7, #8]
 8018dae:	f107 0318 	add.w	r3, r7, #24
 8018db2:	4611      	mov	r1, r2
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7ff fbc3 	bl	8018540 <follow_path>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d11a      	bne.n	8018dfe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018dcc:	b25b      	sxtb	r3, r3
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	da03      	bge.n	8018dda <f_open+0x72>
				res = FR_INVALID_NAME;
 8018dd2:	2306      	movs	r3, #6
 8018dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018dd8:	e011      	b.n	8018dfe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018dda:	79fb      	ldrb	r3, [r7, #7]
 8018ddc:	f023 0301 	bic.w	r3, r3, #1
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	bf14      	ite	ne
 8018de4:	2301      	movne	r3, #1
 8018de6:	2300      	moveq	r3, #0
 8018de8:	b2db      	uxtb	r3, r3
 8018dea:	461a      	mov	r2, r3
 8018dec:	f107 0318 	add.w	r3, r7, #24
 8018df0:	4611      	mov	r1, r2
 8018df2:	4618      	mov	r0, r3
 8018df4:	f7fd ff3e 	bl	8016c74 <chk_lock>
 8018df8:	4603      	mov	r3, r0
 8018dfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018dfe:	79fb      	ldrb	r3, [r7, #7]
 8018e00:	f003 031c 	and.w	r3, r3, #28
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d07f      	beq.n	8018f08 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018e08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d017      	beq.n	8018e40 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e14:	2b04      	cmp	r3, #4
 8018e16:	d10e      	bne.n	8018e36 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018e18:	f7fd ff88 	bl	8016d2c <enq_lock>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d006      	beq.n	8018e30 <f_open+0xc8>
 8018e22:	f107 0318 	add.w	r3, r7, #24
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7ff f8da 	bl	8017fe0 <dir_register>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	e000      	b.n	8018e32 <f_open+0xca>
 8018e30:	2312      	movs	r3, #18
 8018e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018e36:	79fb      	ldrb	r3, [r7, #7]
 8018e38:	f043 0308 	orr.w	r3, r3, #8
 8018e3c:	71fb      	strb	r3, [r7, #7]
 8018e3e:	e010      	b.n	8018e62 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018e40:	7fbb      	ldrb	r3, [r7, #30]
 8018e42:	f003 0311 	and.w	r3, r3, #17
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d003      	beq.n	8018e52 <f_open+0xea>
					res = FR_DENIED;
 8018e4a:	2307      	movs	r3, #7
 8018e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018e50:	e007      	b.n	8018e62 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018e52:	79fb      	ldrb	r3, [r7, #7]
 8018e54:	f003 0304 	and.w	r3, r3, #4
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d002      	beq.n	8018e62 <f_open+0xfa>
 8018e5c:	2308      	movs	r3, #8
 8018e5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d168      	bne.n	8018f3c <f_open+0x1d4>
 8018e6a:	79fb      	ldrb	r3, [r7, #7]
 8018e6c:	f003 0308 	and.w	r3, r3, #8
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d063      	beq.n	8018f3c <f_open+0x1d4>
				dw = GET_FATTIME();
 8018e74:	f7fb ff22 	bl	8014cbc <get_fattime>
 8018e78:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e7c:	330e      	adds	r3, #14
 8018e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7fd fe4d 	bl	8016b20 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e88:	3316      	adds	r3, #22
 8018e8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7fd fe47 	bl	8016b20 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e94:	330b      	adds	r3, #11
 8018e96:	2220      	movs	r2, #32
 8018e98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e9e:	4611      	mov	r1, r2
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7fe fe16 	bl	8017ad2 <ld_clust>
 8018ea6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018eac:	2200      	movs	r2, #0
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7fe fe2e 	bl	8017b10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eb6:	331c      	adds	r3, #28
 8018eb8:	2100      	movs	r1, #0
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7fd fe30 	bl	8016b20 <st_dword>
					fs->wflag = 1;
 8018ec0:	697b      	ldr	r3, [r7, #20]
 8018ec2:	2201      	movs	r2, #1
 8018ec4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d037      	beq.n	8018f3c <f_open+0x1d4>
						dw = fs->winsect;
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ed0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8018ed2:	f107 0318 	add.w	r3, r7, #24
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7fe fb1e 	bl	801751c <remove_chain>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018ee6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d126      	bne.n	8018f3c <f_open+0x1d4>
							res = move_window(fs, dw);
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7fe f86e 	bl	8016fd4 <move_window>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018efe:	697b      	ldr	r3, [r7, #20]
 8018f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018f02:	3a01      	subs	r2, #1
 8018f04:	615a      	str	r2, [r3, #20]
 8018f06:	e019      	b.n	8018f3c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018f08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d115      	bne.n	8018f3c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018f10:	7fbb      	ldrb	r3, [r7, #30]
 8018f12:	f003 0310 	and.w	r3, r3, #16
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d003      	beq.n	8018f22 <f_open+0x1ba>
					res = FR_NO_FILE;
 8018f1a:	2304      	movs	r3, #4
 8018f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018f20:	e00c      	b.n	8018f3c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018f22:	79fb      	ldrb	r3, [r7, #7]
 8018f24:	f003 0302 	and.w	r3, r3, #2
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d007      	beq.n	8018f3c <f_open+0x1d4>
 8018f2c:	7fbb      	ldrb	r3, [r7, #30]
 8018f2e:	f003 0301 	and.w	r3, r3, #1
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d002      	beq.n	8018f3c <f_open+0x1d4>
						res = FR_DENIED;
 8018f36:	2307      	movs	r3, #7
 8018f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d128      	bne.n	8018f96 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018f44:	79fb      	ldrb	r3, [r7, #7]
 8018f46:	f003 0308 	and.w	r3, r3, #8
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d003      	beq.n	8018f56 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018f4e:	79fb      	ldrb	r3, [r7, #7]
 8018f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018f56:	697b      	ldr	r3, [r7, #20]
 8018f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018f64:	79fb      	ldrb	r3, [r7, #7]
 8018f66:	f023 0301 	bic.w	r3, r3, #1
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	bf14      	ite	ne
 8018f6e:	2301      	movne	r3, #1
 8018f70:	2300      	moveq	r3, #0
 8018f72:	b2db      	uxtb	r3, r3
 8018f74:	461a      	mov	r2, r3
 8018f76:	f107 0318 	add.w	r3, r7, #24
 8018f7a:	4611      	mov	r1, r2
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7fd fef7 	bl	8016d70 <inc_lock>
 8018f82:	4602      	mov	r2, r0
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	691b      	ldr	r3, [r3, #16]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d102      	bne.n	8018f96 <f_open+0x22e>
 8018f90:	2302      	movs	r3, #2
 8018f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	f040 80a3 	bne.w	80190e6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018fa4:	4611      	mov	r1, r2
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fe fd93 	bl	8017ad2 <ld_clust>
 8018fac:	4602      	mov	r2, r0
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fb4:	331c      	adds	r3, #28
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7fd fd74 	bl	8016aa4 <ld_dword>
 8018fbc:	4602      	mov	r2, r0
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018fc8:	697a      	ldr	r2, [r7, #20]
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	88da      	ldrh	r2, [r3, #6]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	79fa      	ldrb	r2, [r7, #7]
 8018fda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	2200      	movs	r2, #0
 8018fe0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	2200      	movs	r2, #0
 8018fec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	3330      	adds	r3, #48	; 0x30
 8018ff2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7fd fdde 	bl	8016bba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018ffe:	79fb      	ldrb	r3, [r7, #7]
 8019000:	f003 0320 	and.w	r3, r3, #32
 8019004:	2b00      	cmp	r3, #0
 8019006:	d06e      	beq.n	80190e6 <f_open+0x37e>
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	68db      	ldr	r3, [r3, #12]
 801900c:	2b00      	cmp	r3, #0
 801900e:	d06a      	beq.n	80190e6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	68da      	ldr	r2, [r3, #12]
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	895b      	ldrh	r3, [r3, #10]
 801901c:	461a      	mov	r2, r3
 801901e:	697b      	ldr	r3, [r7, #20]
 8019020:	899b      	ldrh	r3, [r3, #12]
 8019022:	fb03 f302 	mul.w	r3, r3, r2
 8019026:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	689b      	ldr	r3, [r3, #8]
 801902c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	68db      	ldr	r3, [r3, #12]
 8019032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019034:	e016      	b.n	8019064 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801903a:	4618      	mov	r0, r3
 801903c:	f7fe f887 	bl	801714e <get_fat>
 8019040:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019044:	2b01      	cmp	r3, #1
 8019046:	d802      	bhi.n	801904e <f_open+0x2e6>
 8019048:	2302      	movs	r3, #2
 801904a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801904e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019054:	d102      	bne.n	801905c <f_open+0x2f4>
 8019056:	2301      	movs	r3, #1
 8019058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801905c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801905e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019060:	1ad3      	subs	r3, r2, r3
 8019062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019064:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019068:	2b00      	cmp	r3, #0
 801906a:	d103      	bne.n	8019074 <f_open+0x30c>
 801906c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801906e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019070:	429a      	cmp	r2, r3
 8019072:	d8e0      	bhi.n	8019036 <f_open+0x2ce>
				}
				fp->clust = clst;
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019078:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801907a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801907e:	2b00      	cmp	r3, #0
 8019080:	d131      	bne.n	80190e6 <f_open+0x37e>
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	899b      	ldrh	r3, [r3, #12]
 8019086:	461a      	mov	r2, r3
 8019088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801908a:	fbb3 f1f2 	udiv	r1, r3, r2
 801908e:	fb02 f201 	mul.w	r2, r2, r1
 8019092:	1a9b      	subs	r3, r3, r2
 8019094:	2b00      	cmp	r3, #0
 8019096:	d026      	beq.n	80190e6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019098:	697b      	ldr	r3, [r7, #20]
 801909a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801909c:	4618      	mov	r0, r3
 801909e:	f7fe f837 	bl	8017110 <clust2sect>
 80190a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80190a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d103      	bne.n	80190b2 <f_open+0x34a>
						res = FR_INT_ERR;
 80190aa:	2302      	movs	r3, #2
 80190ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80190b0:	e019      	b.n	80190e6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80190b2:	697b      	ldr	r3, [r7, #20]
 80190b4:	899b      	ldrh	r3, [r3, #12]
 80190b6:	461a      	mov	r2, r3
 80190b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80190be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190c0:	441a      	add	r2, r3
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	7858      	ldrb	r0, [r3, #1]
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	6a1a      	ldr	r2, [r3, #32]
 80190d4:	2301      	movs	r3, #1
 80190d6:	f7fd fc6f 	bl	80169b8 <disk_read>
 80190da:	4603      	mov	r3, r0
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d002      	beq.n	80190e6 <f_open+0x37e>
 80190e0:	2301      	movs	r3, #1
 80190e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80190e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d002      	beq.n	80190f4 <f_open+0x38c>
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2200      	movs	r2, #0
 80190f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80190f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3768      	adds	r7, #104	; 0x68
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b08c      	sub	sp, #48	; 0x30
 8019104:	af00      	add	r7, sp, #0
 8019106:	60f8      	str	r0, [r7, #12]
 8019108:	60b9      	str	r1, [r7, #8]
 801910a:	607a      	str	r2, [r7, #4]
 801910c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	2200      	movs	r2, #0
 8019116:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	f107 0210 	add.w	r2, r7, #16
 801911e:	4611      	mov	r1, r2
 8019120:	4618      	mov	r0, r3
 8019122:	f7ff fda5 	bl	8018c70 <validate>
 8019126:	4603      	mov	r3, r0
 8019128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801912c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019130:	2b00      	cmp	r3, #0
 8019132:	d107      	bne.n	8019144 <f_write+0x44>
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	7d5b      	ldrb	r3, [r3, #21]
 8019138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801913c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019140:	2b00      	cmp	r3, #0
 8019142:	d002      	beq.n	801914a <f_write+0x4a>
 8019144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019148:	e16a      	b.n	8019420 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	7d1b      	ldrb	r3, [r3, #20]
 801914e:	f003 0302 	and.w	r3, r3, #2
 8019152:	2b00      	cmp	r3, #0
 8019154:	d101      	bne.n	801915a <f_write+0x5a>
 8019156:	2307      	movs	r3, #7
 8019158:	e162      	b.n	8019420 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	699a      	ldr	r2, [r3, #24]
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	441a      	add	r2, r3
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	699b      	ldr	r3, [r3, #24]
 8019166:	429a      	cmp	r2, r3
 8019168:	f080 814c 	bcs.w	8019404 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	699b      	ldr	r3, [r3, #24]
 8019170:	43db      	mvns	r3, r3
 8019172:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019174:	e146      	b.n	8019404 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	699b      	ldr	r3, [r3, #24]
 801917a:	693a      	ldr	r2, [r7, #16]
 801917c:	8992      	ldrh	r2, [r2, #12]
 801917e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019182:	fb02 f201 	mul.w	r2, r2, r1
 8019186:	1a9b      	subs	r3, r3, r2
 8019188:	2b00      	cmp	r3, #0
 801918a:	f040 80f1 	bne.w	8019370 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	699b      	ldr	r3, [r3, #24]
 8019192:	693a      	ldr	r2, [r7, #16]
 8019194:	8992      	ldrh	r2, [r2, #12]
 8019196:	fbb3 f3f2 	udiv	r3, r3, r2
 801919a:	693a      	ldr	r2, [r7, #16]
 801919c:	8952      	ldrh	r2, [r2, #10]
 801919e:	3a01      	subs	r2, #1
 80191a0:	4013      	ands	r3, r2
 80191a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80191a4:	69bb      	ldr	r3, [r7, #24]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d143      	bne.n	8019232 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	699b      	ldr	r3, [r3, #24]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d10c      	bne.n	80191cc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	689b      	ldr	r3, [r3, #8]
 80191b6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80191b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d11a      	bne.n	80191f4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	2100      	movs	r1, #0
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7fe fa0f 	bl	80175e6 <create_chain>
 80191c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80191ca:	e013      	b.n	80191f4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d007      	beq.n	80191e4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	699b      	ldr	r3, [r3, #24]
 80191d8:	4619      	mov	r1, r3
 80191da:	68f8      	ldr	r0, [r7, #12]
 80191dc:	f7fe fa9b 	bl	8017716 <clmt_clust>
 80191e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80191e2:	e007      	b.n	80191f4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80191e4:	68fa      	ldr	r2, [r7, #12]
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	69db      	ldr	r3, [r3, #28]
 80191ea:	4619      	mov	r1, r3
 80191ec:	4610      	mov	r0, r2
 80191ee:	f7fe f9fa 	bl	80175e6 <create_chain>
 80191f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80191f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f000 8109 	beq.w	801940e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80191fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191fe:	2b01      	cmp	r3, #1
 8019200:	d104      	bne.n	801920c <f_write+0x10c>
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	2202      	movs	r2, #2
 8019206:	755a      	strb	r2, [r3, #21]
 8019208:	2302      	movs	r3, #2
 801920a:	e109      	b.n	8019420 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801920e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019212:	d104      	bne.n	801921e <f_write+0x11e>
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2201      	movs	r2, #1
 8019218:	755a      	strb	r2, [r3, #21]
 801921a:	2301      	movs	r3, #1
 801921c:	e100      	b.n	8019420 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019222:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	689b      	ldr	r3, [r3, #8]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d102      	bne.n	8019232 <f_write+0x132>
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019230:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	7d1b      	ldrb	r3, [r3, #20]
 8019236:	b25b      	sxtb	r3, r3
 8019238:	2b00      	cmp	r3, #0
 801923a:	da18      	bge.n	801926e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801923c:	693b      	ldr	r3, [r7, #16]
 801923e:	7858      	ldrb	r0, [r3, #1]
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	6a1a      	ldr	r2, [r3, #32]
 801924a:	2301      	movs	r3, #1
 801924c:	f7fd fbd4 	bl	80169f8 <disk_write>
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	d004      	beq.n	8019260 <f_write+0x160>
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2201      	movs	r2, #1
 801925a:	755a      	strb	r2, [r3, #21]
 801925c:	2301      	movs	r3, #1
 801925e:	e0df      	b.n	8019420 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	7d1b      	ldrb	r3, [r3, #20]
 8019264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019268:	b2da      	uxtb	r2, r3
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801926e:	693a      	ldr	r2, [r7, #16]
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	69db      	ldr	r3, [r3, #28]
 8019274:	4619      	mov	r1, r3
 8019276:	4610      	mov	r0, r2
 8019278:	f7fd ff4a 	bl	8017110 <clust2sect>
 801927c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d104      	bne.n	801928e <f_write+0x18e>
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	2202      	movs	r2, #2
 8019288:	755a      	strb	r2, [r3, #21]
 801928a:	2302      	movs	r3, #2
 801928c:	e0c8      	b.n	8019420 <f_write+0x320>
			sect += csect;
 801928e:	697a      	ldr	r2, [r7, #20]
 8019290:	69bb      	ldr	r3, [r7, #24]
 8019292:	4413      	add	r3, r2
 8019294:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	899b      	ldrh	r3, [r3, #12]
 801929a:	461a      	mov	r2, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	fbb3 f3f2 	udiv	r3, r3, r2
 80192a2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80192a4:	6a3b      	ldr	r3, [r7, #32]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d043      	beq.n	8019332 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80192aa:	69ba      	ldr	r2, [r7, #24]
 80192ac:	6a3b      	ldr	r3, [r7, #32]
 80192ae:	4413      	add	r3, r2
 80192b0:	693a      	ldr	r2, [r7, #16]
 80192b2:	8952      	ldrh	r2, [r2, #10]
 80192b4:	4293      	cmp	r3, r2
 80192b6:	d905      	bls.n	80192c4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	895b      	ldrh	r3, [r3, #10]
 80192bc:	461a      	mov	r2, r3
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	1ad3      	subs	r3, r2, r3
 80192c2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80192c4:	693b      	ldr	r3, [r7, #16]
 80192c6:	7858      	ldrb	r0, [r3, #1]
 80192c8:	6a3b      	ldr	r3, [r7, #32]
 80192ca:	697a      	ldr	r2, [r7, #20]
 80192cc:	69f9      	ldr	r1, [r7, #28]
 80192ce:	f7fd fb93 	bl	80169f8 <disk_write>
 80192d2:	4603      	mov	r3, r0
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d004      	beq.n	80192e2 <f_write+0x1e2>
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	2201      	movs	r2, #1
 80192dc:	755a      	strb	r2, [r3, #21]
 80192de:	2301      	movs	r3, #1
 80192e0:	e09e      	b.n	8019420 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	6a1a      	ldr	r2, [r3, #32]
 80192e6:	697b      	ldr	r3, [r7, #20]
 80192e8:	1ad3      	subs	r3, r2, r3
 80192ea:	6a3a      	ldr	r2, [r7, #32]
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d918      	bls.n	8019322 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	6a1a      	ldr	r2, [r3, #32]
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	1ad3      	subs	r3, r2, r3
 80192fe:	693a      	ldr	r2, [r7, #16]
 8019300:	8992      	ldrh	r2, [r2, #12]
 8019302:	fb02 f303 	mul.w	r3, r2, r3
 8019306:	69fa      	ldr	r2, [r7, #28]
 8019308:	18d1      	adds	r1, r2, r3
 801930a:	693b      	ldr	r3, [r7, #16]
 801930c:	899b      	ldrh	r3, [r3, #12]
 801930e:	461a      	mov	r2, r3
 8019310:	f7fd fc32 	bl	8016b78 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	7d1b      	ldrb	r3, [r3, #20]
 8019318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801931c:	b2da      	uxtb	r2, r3
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019322:	693b      	ldr	r3, [r7, #16]
 8019324:	899b      	ldrh	r3, [r3, #12]
 8019326:	461a      	mov	r2, r3
 8019328:	6a3b      	ldr	r3, [r7, #32]
 801932a:	fb02 f303 	mul.w	r3, r2, r3
 801932e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019330:	e04b      	b.n	80193ca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	6a1b      	ldr	r3, [r3, #32]
 8019336:	697a      	ldr	r2, [r7, #20]
 8019338:	429a      	cmp	r2, r3
 801933a:	d016      	beq.n	801936a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	699a      	ldr	r2, [r3, #24]
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019344:	429a      	cmp	r2, r3
 8019346:	d210      	bcs.n	801936a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019348:	693b      	ldr	r3, [r7, #16]
 801934a:	7858      	ldrb	r0, [r3, #1]
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019352:	2301      	movs	r3, #1
 8019354:	697a      	ldr	r2, [r7, #20]
 8019356:	f7fd fb2f 	bl	80169b8 <disk_read>
 801935a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801935c:	2b00      	cmp	r3, #0
 801935e:	d004      	beq.n	801936a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	2201      	movs	r2, #1
 8019364:	755a      	strb	r2, [r3, #21]
 8019366:	2301      	movs	r3, #1
 8019368:	e05a      	b.n	8019420 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	697a      	ldr	r2, [r7, #20]
 801936e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	899b      	ldrh	r3, [r3, #12]
 8019374:	4618      	mov	r0, r3
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	699b      	ldr	r3, [r3, #24]
 801937a:	693a      	ldr	r2, [r7, #16]
 801937c:	8992      	ldrh	r2, [r2, #12]
 801937e:	fbb3 f1f2 	udiv	r1, r3, r2
 8019382:	fb02 f201 	mul.w	r2, r2, r1
 8019386:	1a9b      	subs	r3, r3, r2
 8019388:	1ac3      	subs	r3, r0, r3
 801938a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801938c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	429a      	cmp	r2, r3
 8019392:	d901      	bls.n	8019398 <f_write+0x298>
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	699b      	ldr	r3, [r3, #24]
 80193a2:	693a      	ldr	r2, [r7, #16]
 80193a4:	8992      	ldrh	r2, [r2, #12]
 80193a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80193aa:	fb02 f200 	mul.w	r2, r2, r0
 80193ae:	1a9b      	subs	r3, r3, r2
 80193b0:	440b      	add	r3, r1
 80193b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193b4:	69f9      	ldr	r1, [r7, #28]
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7fd fbde 	bl	8016b78 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	7d1b      	ldrb	r3, [r3, #20]
 80193c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80193c4:	b2da      	uxtb	r2, r3
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80193ca:	69fa      	ldr	r2, [r7, #28]
 80193cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ce:	4413      	add	r3, r2
 80193d0:	61fb      	str	r3, [r7, #28]
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	699a      	ldr	r2, [r3, #24]
 80193d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d8:	441a      	add	r2, r3
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	619a      	str	r2, [r3, #24]
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	68da      	ldr	r2, [r3, #12]
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	699b      	ldr	r3, [r3, #24]
 80193e6:	429a      	cmp	r2, r3
 80193e8:	bf38      	it	cc
 80193ea:	461a      	movcc	r2, r3
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	60da      	str	r2, [r3, #12]
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	681a      	ldr	r2, [r3, #0]
 80193f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f6:	441a      	add	r2, r3
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	601a      	str	r2, [r3, #0]
 80193fc:	687a      	ldr	r2, [r7, #4]
 80193fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019400:	1ad3      	subs	r3, r2, r3
 8019402:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	2b00      	cmp	r3, #0
 8019408:	f47f aeb5 	bne.w	8019176 <f_write+0x76>
 801940c:	e000      	b.n	8019410 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801940e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	7d1b      	ldrb	r3, [r3, #20]
 8019414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019418:	b2da      	uxtb	r2, r3
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801941e:	2300      	movs	r3, #0
}
 8019420:	4618      	mov	r0, r3
 8019422:	3730      	adds	r7, #48	; 0x30
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b086      	sub	sp, #24
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f107 0208 	add.w	r2, r7, #8
 8019436:	4611      	mov	r1, r2
 8019438:	4618      	mov	r0, r3
 801943a:	f7ff fc19 	bl	8018c70 <validate>
 801943e:	4603      	mov	r3, r0
 8019440:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019442:	7dfb      	ldrb	r3, [r7, #23]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d168      	bne.n	801951a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	7d1b      	ldrb	r3, [r3, #20]
 801944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019450:	2b00      	cmp	r3, #0
 8019452:	d062      	beq.n	801951a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	7d1b      	ldrb	r3, [r3, #20]
 8019458:	b25b      	sxtb	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	da15      	bge.n	801948a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	7858      	ldrb	r0, [r3, #1]
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	6a1a      	ldr	r2, [r3, #32]
 801946c:	2301      	movs	r3, #1
 801946e:	f7fd fac3 	bl	80169f8 <disk_write>
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d001      	beq.n	801947c <f_sync+0x54>
 8019478:	2301      	movs	r3, #1
 801947a:	e04f      	b.n	801951c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	7d1b      	ldrb	r3, [r3, #20]
 8019480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019484:	b2da      	uxtb	r2, r3
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801948a:	f7fb fc17 	bl	8014cbc <get_fattime>
 801948e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019490:	68ba      	ldr	r2, [r7, #8]
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019496:	4619      	mov	r1, r3
 8019498:	4610      	mov	r0, r2
 801949a:	f7fd fd9b 	bl	8016fd4 <move_window>
 801949e:	4603      	mov	r3, r0
 80194a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80194a2:	7dfb      	ldrb	r3, [r7, #23]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d138      	bne.n	801951a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	330b      	adds	r3, #11
 80194b2:	781a      	ldrb	r2, [r3, #0]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	330b      	adds	r3, #11
 80194b8:	f042 0220 	orr.w	r2, r2, #32
 80194bc:	b2d2      	uxtb	r2, r2
 80194be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6818      	ldr	r0, [r3, #0]
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	689b      	ldr	r3, [r3, #8]
 80194c8:	461a      	mov	r2, r3
 80194ca:	68f9      	ldr	r1, [r7, #12]
 80194cc:	f7fe fb20 	bl	8017b10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	f103 021c 	add.w	r2, r3, #28
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	68db      	ldr	r3, [r3, #12]
 80194da:	4619      	mov	r1, r3
 80194dc:	4610      	mov	r0, r2
 80194de:	f7fd fb1f 	bl	8016b20 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	3316      	adds	r3, #22
 80194e6:	6939      	ldr	r1, [r7, #16]
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7fd fb19 	bl	8016b20 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	3312      	adds	r3, #18
 80194f2:	2100      	movs	r1, #0
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7fd faf8 	bl	8016aea <st_word>
					fs->wflag = 1;
 80194fa:	68bb      	ldr	r3, [r7, #8]
 80194fc:	2201      	movs	r2, #1
 80194fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	4618      	mov	r0, r3
 8019504:	f7fd fd94 	bl	8017030 <sync_fs>
 8019508:	4603      	mov	r3, r0
 801950a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	7d1b      	ldrb	r3, [r3, #20]
 8019510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019514:	b2da      	uxtb	r2, r3
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801951a:	7dfb      	ldrb	r3, [r7, #23]
}
 801951c:	4618      	mov	r0, r3
 801951e:	3718      	adds	r7, #24
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	f7ff ff7b 	bl	8019428 <f_sync>
 8019532:	4603      	mov	r3, r0
 8019534:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019536:	7bfb      	ldrb	r3, [r7, #15]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d118      	bne.n	801956e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	f107 0208 	add.w	r2, r7, #8
 8019542:	4611      	mov	r1, r2
 8019544:	4618      	mov	r0, r3
 8019546:	f7ff fb93 	bl	8018c70 <validate>
 801954a:	4603      	mov	r3, r0
 801954c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801954e:	7bfb      	ldrb	r3, [r7, #15]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d10c      	bne.n	801956e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	691b      	ldr	r3, [r3, #16]
 8019558:	4618      	mov	r0, r3
 801955a:	f7fd fc97 	bl	8016e8c <dec_lock>
 801955e:	4603      	mov	r3, r0
 8019560:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019562:	7bfb      	ldrb	r3, [r7, #15]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d102      	bne.n	801956e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2200      	movs	r2, #0
 801956c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801956e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019570:	4618      	mov	r0, r3
 8019572:	3710      	adds	r7, #16
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}

08019578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019578:	b480      	push	{r7}
 801957a:	b087      	sub	sp, #28
 801957c:	af00      	add	r7, sp, #0
 801957e:	60f8      	str	r0, [r7, #12]
 8019580:	60b9      	str	r1, [r7, #8]
 8019582:	4613      	mov	r3, r2
 8019584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019586:	2301      	movs	r3, #1
 8019588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801958a:	2300      	movs	r3, #0
 801958c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801958e:	4b1f      	ldr	r3, [pc, #124]	; (801960c <FATFS_LinkDriverEx+0x94>)
 8019590:	7a5b      	ldrb	r3, [r3, #9]
 8019592:	b2db      	uxtb	r3, r3
 8019594:	2b00      	cmp	r3, #0
 8019596:	d131      	bne.n	80195fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019598:	4b1c      	ldr	r3, [pc, #112]	; (801960c <FATFS_LinkDriverEx+0x94>)
 801959a:	7a5b      	ldrb	r3, [r3, #9]
 801959c:	b2db      	uxtb	r3, r3
 801959e:	461a      	mov	r2, r3
 80195a0:	4b1a      	ldr	r3, [pc, #104]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195a2:	2100      	movs	r1, #0
 80195a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80195a6:	4b19      	ldr	r3, [pc, #100]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195a8:	7a5b      	ldrb	r3, [r3, #9]
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	4a17      	ldr	r2, [pc, #92]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195ae:	009b      	lsls	r3, r3, #2
 80195b0:	4413      	add	r3, r2
 80195b2:	68fa      	ldr	r2, [r7, #12]
 80195b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80195b6:	4b15      	ldr	r3, [pc, #84]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195b8:	7a5b      	ldrb	r3, [r3, #9]
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	461a      	mov	r2, r3
 80195be:	4b13      	ldr	r3, [pc, #76]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195c0:	4413      	add	r3, r2
 80195c2:	79fa      	ldrb	r2, [r7, #7]
 80195c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80195c6:	4b11      	ldr	r3, [pc, #68]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195c8:	7a5b      	ldrb	r3, [r3, #9]
 80195ca:	b2db      	uxtb	r3, r3
 80195cc:	1c5a      	adds	r2, r3, #1
 80195ce:	b2d1      	uxtb	r1, r2
 80195d0:	4a0e      	ldr	r2, [pc, #56]	; (801960c <FATFS_LinkDriverEx+0x94>)
 80195d2:	7251      	strb	r1, [r2, #9]
 80195d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80195d6:	7dbb      	ldrb	r3, [r7, #22]
 80195d8:	3330      	adds	r3, #48	; 0x30
 80195da:	b2da      	uxtb	r2, r3
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	3301      	adds	r3, #1
 80195e4:	223a      	movs	r2, #58	; 0x3a
 80195e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	3302      	adds	r3, #2
 80195ec:	222f      	movs	r2, #47	; 0x2f
 80195ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80195f0:	68bb      	ldr	r3, [r7, #8]
 80195f2:	3303      	adds	r3, #3
 80195f4:	2200      	movs	r2, #0
 80195f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80195f8:	2300      	movs	r3, #0
 80195fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80195fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80195fe:	4618      	mov	r0, r3
 8019600:	371c      	adds	r7, #28
 8019602:	46bd      	mov	sp, r7
 8019604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019608:	4770      	bx	lr
 801960a:	bf00      	nop
 801960c:	20000628 	.word	0x20000628

08019610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801961a:	2200      	movs	r2, #0
 801961c:	6839      	ldr	r1, [r7, #0]
 801961e:	6878      	ldr	r0, [r7, #4]
 8019620:	f7ff ffaa 	bl	8019578 <FATFS_LinkDriverEx>
 8019624:	4603      	mov	r3, r0
}
 8019626:	4618      	mov	r0, r3
 8019628:	3708      	adds	r7, #8
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
	...

08019630 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019630:	b480      	push	{r7}
 8019632:	b085      	sub	sp, #20
 8019634:	af00      	add	r7, sp, #0
 8019636:	4603      	mov	r3, r0
 8019638:	6039      	str	r1, [r7, #0]
 801963a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801963c:	88fb      	ldrh	r3, [r7, #6]
 801963e:	2b7f      	cmp	r3, #127	; 0x7f
 8019640:	d802      	bhi.n	8019648 <ff_convert+0x18>
		c = chr;
 8019642:	88fb      	ldrh	r3, [r7, #6]
 8019644:	81fb      	strh	r3, [r7, #14]
 8019646:	e025      	b.n	8019694 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d00b      	beq.n	8019666 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801964e:	88fb      	ldrh	r3, [r7, #6]
 8019650:	2bff      	cmp	r3, #255	; 0xff
 8019652:	d805      	bhi.n	8019660 <ff_convert+0x30>
 8019654:	88fb      	ldrh	r3, [r7, #6]
 8019656:	3b80      	subs	r3, #128	; 0x80
 8019658:	4a12      	ldr	r2, [pc, #72]	; (80196a4 <ff_convert+0x74>)
 801965a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801965e:	e000      	b.n	8019662 <ff_convert+0x32>
 8019660:	2300      	movs	r3, #0
 8019662:	81fb      	strh	r3, [r7, #14]
 8019664:	e016      	b.n	8019694 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019666:	2300      	movs	r3, #0
 8019668:	81fb      	strh	r3, [r7, #14]
 801966a:	e009      	b.n	8019680 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801966c:	89fb      	ldrh	r3, [r7, #14]
 801966e:	4a0d      	ldr	r2, [pc, #52]	; (80196a4 <ff_convert+0x74>)
 8019670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019674:	88fa      	ldrh	r2, [r7, #6]
 8019676:	429a      	cmp	r2, r3
 8019678:	d006      	beq.n	8019688 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801967a:	89fb      	ldrh	r3, [r7, #14]
 801967c:	3301      	adds	r3, #1
 801967e:	81fb      	strh	r3, [r7, #14]
 8019680:	89fb      	ldrh	r3, [r7, #14]
 8019682:	2b7f      	cmp	r3, #127	; 0x7f
 8019684:	d9f2      	bls.n	801966c <ff_convert+0x3c>
 8019686:	e000      	b.n	801968a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019688:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801968a:	89fb      	ldrh	r3, [r7, #14]
 801968c:	3380      	adds	r3, #128	; 0x80
 801968e:	b29b      	uxth	r3, r3
 8019690:	b2db      	uxtb	r3, r3
 8019692:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019694:	89fb      	ldrh	r3, [r7, #14]
}
 8019696:	4618      	mov	r0, r3
 8019698:	3714      	adds	r7, #20
 801969a:	46bd      	mov	sp, r7
 801969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a0:	4770      	bx	lr
 80196a2:	bf00      	nop
 80196a4:	0801ec84 	.word	0x0801ec84

080196a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80196a8:	b480      	push	{r7}
 80196aa:	b087      	sub	sp, #28
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	4603      	mov	r3, r0
 80196b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80196b2:	88fb      	ldrh	r3, [r7, #6]
 80196b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80196b8:	d201      	bcs.n	80196be <ff_wtoupper+0x16>
 80196ba:	4b3e      	ldr	r3, [pc, #248]	; (80197b4 <ff_wtoupper+0x10c>)
 80196bc:	e000      	b.n	80196c0 <ff_wtoupper+0x18>
 80196be:	4b3e      	ldr	r3, [pc, #248]	; (80197b8 <ff_wtoupper+0x110>)
 80196c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80196c2:	697b      	ldr	r3, [r7, #20]
 80196c4:	1c9a      	adds	r2, r3, #2
 80196c6:	617a      	str	r2, [r7, #20]
 80196c8:	881b      	ldrh	r3, [r3, #0]
 80196ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80196cc:	8a7b      	ldrh	r3, [r7, #18]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d068      	beq.n	80197a4 <ff_wtoupper+0xfc>
 80196d2:	88fa      	ldrh	r2, [r7, #6]
 80196d4:	8a7b      	ldrh	r3, [r7, #18]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d364      	bcc.n	80197a4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80196da:	697b      	ldr	r3, [r7, #20]
 80196dc:	1c9a      	adds	r2, r3, #2
 80196de:	617a      	str	r2, [r7, #20]
 80196e0:	881b      	ldrh	r3, [r3, #0]
 80196e2:	823b      	strh	r3, [r7, #16]
 80196e4:	8a3b      	ldrh	r3, [r7, #16]
 80196e6:	0a1b      	lsrs	r3, r3, #8
 80196e8:	81fb      	strh	r3, [r7, #14]
 80196ea:	8a3b      	ldrh	r3, [r7, #16]
 80196ec:	b2db      	uxtb	r3, r3
 80196ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80196f0:	88fa      	ldrh	r2, [r7, #6]
 80196f2:	8a79      	ldrh	r1, [r7, #18]
 80196f4:	8a3b      	ldrh	r3, [r7, #16]
 80196f6:	440b      	add	r3, r1
 80196f8:	429a      	cmp	r2, r3
 80196fa:	da49      	bge.n	8019790 <ff_wtoupper+0xe8>
			switch (cmd) {
 80196fc:	89fb      	ldrh	r3, [r7, #14]
 80196fe:	2b08      	cmp	r3, #8
 8019700:	d84f      	bhi.n	80197a2 <ff_wtoupper+0xfa>
 8019702:	a201      	add	r2, pc, #4	; (adr r2, 8019708 <ff_wtoupper+0x60>)
 8019704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019708:	0801972d 	.word	0x0801972d
 801970c:	0801973f 	.word	0x0801973f
 8019710:	08019755 	.word	0x08019755
 8019714:	0801975d 	.word	0x0801975d
 8019718:	08019765 	.word	0x08019765
 801971c:	0801976d 	.word	0x0801976d
 8019720:	08019775 	.word	0x08019775
 8019724:	0801977d 	.word	0x0801977d
 8019728:	08019785 	.word	0x08019785
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801972c:	88fa      	ldrh	r2, [r7, #6]
 801972e:	8a7b      	ldrh	r3, [r7, #18]
 8019730:	1ad3      	subs	r3, r2, r3
 8019732:	005b      	lsls	r3, r3, #1
 8019734:	697a      	ldr	r2, [r7, #20]
 8019736:	4413      	add	r3, r2
 8019738:	881b      	ldrh	r3, [r3, #0]
 801973a:	80fb      	strh	r3, [r7, #6]
 801973c:	e027      	b.n	801978e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801973e:	88fa      	ldrh	r2, [r7, #6]
 8019740:	8a7b      	ldrh	r3, [r7, #18]
 8019742:	1ad3      	subs	r3, r2, r3
 8019744:	b29b      	uxth	r3, r3
 8019746:	f003 0301 	and.w	r3, r3, #1
 801974a:	b29b      	uxth	r3, r3
 801974c:	88fa      	ldrh	r2, [r7, #6]
 801974e:	1ad3      	subs	r3, r2, r3
 8019750:	80fb      	strh	r3, [r7, #6]
 8019752:	e01c      	b.n	801978e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019754:	88fb      	ldrh	r3, [r7, #6]
 8019756:	3b10      	subs	r3, #16
 8019758:	80fb      	strh	r3, [r7, #6]
 801975a:	e018      	b.n	801978e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801975c:	88fb      	ldrh	r3, [r7, #6]
 801975e:	3b20      	subs	r3, #32
 8019760:	80fb      	strh	r3, [r7, #6]
 8019762:	e014      	b.n	801978e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019764:	88fb      	ldrh	r3, [r7, #6]
 8019766:	3b30      	subs	r3, #48	; 0x30
 8019768:	80fb      	strh	r3, [r7, #6]
 801976a:	e010      	b.n	801978e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801976c:	88fb      	ldrh	r3, [r7, #6]
 801976e:	3b1a      	subs	r3, #26
 8019770:	80fb      	strh	r3, [r7, #6]
 8019772:	e00c      	b.n	801978e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019774:	88fb      	ldrh	r3, [r7, #6]
 8019776:	3308      	adds	r3, #8
 8019778:	80fb      	strh	r3, [r7, #6]
 801977a:	e008      	b.n	801978e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801977c:	88fb      	ldrh	r3, [r7, #6]
 801977e:	3b50      	subs	r3, #80	; 0x50
 8019780:	80fb      	strh	r3, [r7, #6]
 8019782:	e004      	b.n	801978e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019784:	88fb      	ldrh	r3, [r7, #6]
 8019786:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801978a:	80fb      	strh	r3, [r7, #6]
 801978c:	bf00      	nop
			}
			break;
 801978e:	e008      	b.n	80197a2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8019790:	89fb      	ldrh	r3, [r7, #14]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d195      	bne.n	80196c2 <ff_wtoupper+0x1a>
 8019796:	8a3b      	ldrh	r3, [r7, #16]
 8019798:	005b      	lsls	r3, r3, #1
 801979a:	697a      	ldr	r2, [r7, #20]
 801979c:	4413      	add	r3, r2
 801979e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80197a0:	e78f      	b.n	80196c2 <ff_wtoupper+0x1a>
			break;
 80197a2:	bf00      	nop
	}

	return chr;
 80197a4:	88fb      	ldrh	r3, [r7, #6]
}
 80197a6:	4618      	mov	r0, r3
 80197a8:	371c      	adds	r7, #28
 80197aa:	46bd      	mov	sp, r7
 80197ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b0:	4770      	bx	lr
 80197b2:	bf00      	nop
 80197b4:	0801ed84 	.word	0x0801ed84
 80197b8:	0801ef78 	.word	0x0801ef78

080197bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80197c0:	2200      	movs	r2, #0
 80197c2:	4912      	ldr	r1, [pc, #72]	; (801980c <MX_USB_DEVICE_Init+0x50>)
 80197c4:	4812      	ldr	r0, [pc, #72]	; (8019810 <MX_USB_DEVICE_Init+0x54>)
 80197c6:	f7fb ffb1 	bl	801572c <USBD_Init>
 80197ca:	4603      	mov	r3, r0
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d001      	beq.n	80197d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80197d0:	f7f0 fad2 	bl	8009d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80197d4:	490f      	ldr	r1, [pc, #60]	; (8019814 <MX_USB_DEVICE_Init+0x58>)
 80197d6:	480e      	ldr	r0, [pc, #56]	; (8019810 <MX_USB_DEVICE_Init+0x54>)
 80197d8:	f7fb ffde 	bl	8015798 <USBD_RegisterClass>
 80197dc:	4603      	mov	r3, r0
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d001      	beq.n	80197e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80197e2:	f7f0 fac9 	bl	8009d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80197e6:	490c      	ldr	r1, [pc, #48]	; (8019818 <MX_USB_DEVICE_Init+0x5c>)
 80197e8:	4809      	ldr	r0, [pc, #36]	; (8019810 <MX_USB_DEVICE_Init+0x54>)
 80197ea:	f7fb ff33 	bl	8015654 <USBD_CDC_RegisterInterface>
 80197ee:	4603      	mov	r3, r0
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d001      	beq.n	80197f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80197f4:	f7f0 fac0 	bl	8009d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80197f8:	4805      	ldr	r0, [pc, #20]	; (8019810 <MX_USB_DEVICE_Init+0x54>)
 80197fa:	f7fb ffee 	bl	80157da <USBD_Start>
 80197fe:	4603      	mov	r3, r0
 8019800:	2b00      	cmp	r3, #0
 8019802:	d001      	beq.n	8019808 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019804:	f7f0 fab8 	bl	8009d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019808:	bf00      	nop
 801980a:	bd80      	pop	{r7, pc}
 801980c:	20000174 	.word	0x20000174
 8019810:	20002ad4 	.word	0x20002ad4
 8019814:	2000005c 	.word	0x2000005c
 8019818:	20000160 	.word	0x20000160

0801981c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019820:	2200      	movs	r2, #0
 8019822:	4905      	ldr	r1, [pc, #20]	; (8019838 <CDC_Init_FS+0x1c>)
 8019824:	4805      	ldr	r0, [pc, #20]	; (801983c <CDC_Init_FS+0x20>)
 8019826:	f7fb ff2a 	bl	801567e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801982a:	4905      	ldr	r1, [pc, #20]	; (8019840 <CDC_Init_FS+0x24>)
 801982c:	4803      	ldr	r0, [pc, #12]	; (801983c <CDC_Init_FS+0x20>)
 801982e:	f7fb ff3f 	bl	80156b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019832:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019834:	4618      	mov	r0, r3
 8019836:	bd80      	pop	{r7, pc}
 8019838:	200035a4 	.word	0x200035a4
 801983c:	20002ad4 	.word	0x20002ad4
 8019840:	20002da4 	.word	0x20002da4

08019844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019844:	b480      	push	{r7}
 8019846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801984a:	4618      	mov	r0, r3
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr

08019854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	4603      	mov	r3, r0
 801985c:	6039      	str	r1, [r7, #0]
 801985e:	71fb      	strb	r3, [r7, #7]
 8019860:	4613      	mov	r3, r2
 8019862:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019864:	79fb      	ldrb	r3, [r7, #7]
 8019866:	2b23      	cmp	r3, #35	; 0x23
 8019868:	d84a      	bhi.n	8019900 <CDC_Control_FS+0xac>
 801986a:	a201      	add	r2, pc, #4	; (adr r2, 8019870 <CDC_Control_FS+0x1c>)
 801986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019870:	08019901 	.word	0x08019901
 8019874:	08019901 	.word	0x08019901
 8019878:	08019901 	.word	0x08019901
 801987c:	08019901 	.word	0x08019901
 8019880:	08019901 	.word	0x08019901
 8019884:	08019901 	.word	0x08019901
 8019888:	08019901 	.word	0x08019901
 801988c:	08019901 	.word	0x08019901
 8019890:	08019901 	.word	0x08019901
 8019894:	08019901 	.word	0x08019901
 8019898:	08019901 	.word	0x08019901
 801989c:	08019901 	.word	0x08019901
 80198a0:	08019901 	.word	0x08019901
 80198a4:	08019901 	.word	0x08019901
 80198a8:	08019901 	.word	0x08019901
 80198ac:	08019901 	.word	0x08019901
 80198b0:	08019901 	.word	0x08019901
 80198b4:	08019901 	.word	0x08019901
 80198b8:	08019901 	.word	0x08019901
 80198bc:	08019901 	.word	0x08019901
 80198c0:	08019901 	.word	0x08019901
 80198c4:	08019901 	.word	0x08019901
 80198c8:	08019901 	.word	0x08019901
 80198cc:	08019901 	.word	0x08019901
 80198d0:	08019901 	.word	0x08019901
 80198d4:	08019901 	.word	0x08019901
 80198d8:	08019901 	.word	0x08019901
 80198dc:	08019901 	.word	0x08019901
 80198e0:	08019901 	.word	0x08019901
 80198e4:	08019901 	.word	0x08019901
 80198e8:	08019901 	.word	0x08019901
 80198ec:	08019901 	.word	0x08019901
 80198f0:	08019901 	.word	0x08019901
 80198f4:	08019901 	.word	0x08019901
 80198f8:	08019901 	.word	0x08019901
 80198fc:	08019901 	.word	0x08019901
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019900:	bf00      	nop
  }

  return (USBD_OK);
 8019902:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019904:	4618      	mov	r0, r3
 8019906:	370c      	adds	r7, #12
 8019908:	46bd      	mov	sp, r7
 801990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801990e:	4770      	bx	lr

08019910 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b082      	sub	sp, #8
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
 8019918:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801991a:	6879      	ldr	r1, [r7, #4]
 801991c:	4805      	ldr	r0, [pc, #20]	; (8019934 <CDC_Receive_FS+0x24>)
 801991e:	f7fb fec7 	bl	80156b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019922:	4804      	ldr	r0, [pc, #16]	; (8019934 <CDC_Receive_FS+0x24>)
 8019924:	f7fb fed8 	bl	80156d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019928:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801992a:	4618      	mov	r0, r3
 801992c:	3708      	adds	r7, #8
 801992e:	46bd      	mov	sp, r7
 8019930:	bd80      	pop	{r7, pc}
 8019932:	bf00      	nop
 8019934:	20002ad4 	.word	0x20002ad4

08019938 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019938:	b480      	push	{r7}
 801993a:	b087      	sub	sp, #28
 801993c:	af00      	add	r7, sp, #0
 801993e:	60f8      	str	r0, [r7, #12]
 8019940:	60b9      	str	r1, [r7, #8]
 8019942:	4613      	mov	r3, r2
 8019944:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019946:	2300      	movs	r3, #0
 8019948:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801994a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801994e:	4618      	mov	r0, r3
 8019950:	371c      	adds	r7, #28
 8019952:	46bd      	mov	sp, r7
 8019954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019958:	4770      	bx	lr
	...

0801995c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801995c:	b480      	push	{r7}
 801995e:	b083      	sub	sp, #12
 8019960:	af00      	add	r7, sp, #0
 8019962:	4603      	mov	r3, r0
 8019964:	6039      	str	r1, [r7, #0]
 8019966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019968:	683b      	ldr	r3, [r7, #0]
 801996a:	2212      	movs	r2, #18
 801996c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801996e:	4b03      	ldr	r3, [pc, #12]	; (801997c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019970:	4618      	mov	r0, r3
 8019972:	370c      	adds	r7, #12
 8019974:	46bd      	mov	sp, r7
 8019976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997a:	4770      	bx	lr
 801997c:	20000190 	.word	0x20000190

08019980 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019980:	b480      	push	{r7}
 8019982:	b083      	sub	sp, #12
 8019984:	af00      	add	r7, sp, #0
 8019986:	4603      	mov	r3, r0
 8019988:	6039      	str	r1, [r7, #0]
 801998a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801998c:	683b      	ldr	r3, [r7, #0]
 801998e:	2204      	movs	r2, #4
 8019990:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019992:	4b03      	ldr	r3, [pc, #12]	; (80199a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019994:	4618      	mov	r0, r3
 8019996:	370c      	adds	r7, #12
 8019998:	46bd      	mov	sp, r7
 801999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999e:	4770      	bx	lr
 80199a0:	200001a4 	.word	0x200001a4

080199a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	4603      	mov	r3, r0
 80199ac:	6039      	str	r1, [r7, #0]
 80199ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80199b0:	79fb      	ldrb	r3, [r7, #7]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d105      	bne.n	80199c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80199b6:	683a      	ldr	r2, [r7, #0]
 80199b8:	4907      	ldr	r1, [pc, #28]	; (80199d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80199ba:	4808      	ldr	r0, [pc, #32]	; (80199dc <USBD_FS_ProductStrDescriptor+0x38>)
 80199bc:	f7fc fedb 	bl	8016776 <USBD_GetString>
 80199c0:	e004      	b.n	80199cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80199c2:	683a      	ldr	r2, [r7, #0]
 80199c4:	4904      	ldr	r1, [pc, #16]	; (80199d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80199c6:	4805      	ldr	r0, [pc, #20]	; (80199dc <USBD_FS_ProductStrDescriptor+0x38>)
 80199c8:	f7fc fed5 	bl	8016776 <USBD_GetString>
  }
  return USBD_StrDesc;
 80199cc:	4b02      	ldr	r3, [pc, #8]	; (80199d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80199ce:	4618      	mov	r0, r3
 80199d0:	3708      	adds	r7, #8
 80199d2:	46bd      	mov	sp, r7
 80199d4:	bd80      	pop	{r7, pc}
 80199d6:	bf00      	nop
 80199d8:	20003da4 	.word	0x20003da4
 80199dc:	0801eb78 	.word	0x0801eb78

080199e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b082      	sub	sp, #8
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	4603      	mov	r3, r0
 80199e8:	6039      	str	r1, [r7, #0]
 80199ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80199ec:	683a      	ldr	r2, [r7, #0]
 80199ee:	4904      	ldr	r1, [pc, #16]	; (8019a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80199f0:	4804      	ldr	r0, [pc, #16]	; (8019a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80199f2:	f7fc fec0 	bl	8016776 <USBD_GetString>
  return USBD_StrDesc;
 80199f6:	4b02      	ldr	r3, [pc, #8]	; (8019a00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3708      	adds	r7, #8
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}
 8019a00:	20003da4 	.word	0x20003da4
 8019a04:	0801eb90 	.word	0x0801eb90

08019a08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	4603      	mov	r3, r0
 8019a10:	6039      	str	r1, [r7, #0]
 8019a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	221a      	movs	r2, #26
 8019a18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019a1a:	f000 f843 	bl	8019aa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019a1e:	4b02      	ldr	r3, [pc, #8]	; (8019a28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019a20:	4618      	mov	r0, r3
 8019a22:	3708      	adds	r7, #8
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd80      	pop	{r7, pc}
 8019a28:	200001a8 	.word	0x200001a8

08019a2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b082      	sub	sp, #8
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	4603      	mov	r3, r0
 8019a34:	6039      	str	r1, [r7, #0]
 8019a36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019a38:	79fb      	ldrb	r3, [r7, #7]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d105      	bne.n	8019a4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019a3e:	683a      	ldr	r2, [r7, #0]
 8019a40:	4907      	ldr	r1, [pc, #28]	; (8019a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019a42:	4808      	ldr	r0, [pc, #32]	; (8019a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019a44:	f7fc fe97 	bl	8016776 <USBD_GetString>
 8019a48:	e004      	b.n	8019a54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019a4a:	683a      	ldr	r2, [r7, #0]
 8019a4c:	4904      	ldr	r1, [pc, #16]	; (8019a60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019a4e:	4805      	ldr	r0, [pc, #20]	; (8019a64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019a50:	f7fc fe91 	bl	8016776 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a54:	4b02      	ldr	r3, [pc, #8]	; (8019a60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019a56:	4618      	mov	r0, r3
 8019a58:	3708      	adds	r7, #8
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}
 8019a5e:	bf00      	nop
 8019a60:	20003da4 	.word	0x20003da4
 8019a64:	0801eba4 	.word	0x0801eba4

08019a68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	4603      	mov	r3, r0
 8019a70:	6039      	str	r1, [r7, #0]
 8019a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a74:	79fb      	ldrb	r3, [r7, #7]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d105      	bne.n	8019a86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019a7a:	683a      	ldr	r2, [r7, #0]
 8019a7c:	4907      	ldr	r1, [pc, #28]	; (8019a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019a7e:	4808      	ldr	r0, [pc, #32]	; (8019aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019a80:	f7fc fe79 	bl	8016776 <USBD_GetString>
 8019a84:	e004      	b.n	8019a90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019a86:	683a      	ldr	r2, [r7, #0]
 8019a88:	4904      	ldr	r1, [pc, #16]	; (8019a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019a8a:	4805      	ldr	r0, [pc, #20]	; (8019aa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019a8c:	f7fc fe73 	bl	8016776 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a90:	4b02      	ldr	r3, [pc, #8]	; (8019a9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3708      	adds	r7, #8
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	20003da4 	.word	0x20003da4
 8019aa0:	0801ebb0 	.word	0x0801ebb0

08019aa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b084      	sub	sp, #16
 8019aa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019aaa:	4b0f      	ldr	r3, [pc, #60]	; (8019ae8 <Get_SerialNum+0x44>)
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019ab0:	4b0e      	ldr	r3, [pc, #56]	; (8019aec <Get_SerialNum+0x48>)
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019ab6:	4b0e      	ldr	r3, [pc, #56]	; (8019af0 <Get_SerialNum+0x4c>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019abc:	68fa      	ldr	r2, [r7, #12]
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	4413      	add	r3, r2
 8019ac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d009      	beq.n	8019ade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019aca:	2208      	movs	r2, #8
 8019acc:	4909      	ldr	r1, [pc, #36]	; (8019af4 <Get_SerialNum+0x50>)
 8019ace:	68f8      	ldr	r0, [r7, #12]
 8019ad0:	f000 f814 	bl	8019afc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019ad4:	2204      	movs	r2, #4
 8019ad6:	4908      	ldr	r1, [pc, #32]	; (8019af8 <Get_SerialNum+0x54>)
 8019ad8:	68b8      	ldr	r0, [r7, #8]
 8019ada:	f000 f80f 	bl	8019afc <IntToUnicode>
  }
}
 8019ade:	bf00      	nop
 8019ae0:	3710      	adds	r7, #16
 8019ae2:	46bd      	mov	sp, r7
 8019ae4:	bd80      	pop	{r7, pc}
 8019ae6:	bf00      	nop
 8019ae8:	1fff7a10 	.word	0x1fff7a10
 8019aec:	1fff7a14 	.word	0x1fff7a14
 8019af0:	1fff7a18 	.word	0x1fff7a18
 8019af4:	200001aa 	.word	0x200001aa
 8019af8:	200001ba 	.word	0x200001ba

08019afc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019afc:	b480      	push	{r7}
 8019afe:	b087      	sub	sp, #28
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	60f8      	str	r0, [r7, #12]
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	4613      	mov	r3, r2
 8019b08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019b0e:	2300      	movs	r3, #0
 8019b10:	75fb      	strb	r3, [r7, #23]
 8019b12:	e027      	b.n	8019b64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	0f1b      	lsrs	r3, r3, #28
 8019b18:	2b09      	cmp	r3, #9
 8019b1a:	d80b      	bhi.n	8019b34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	0f1b      	lsrs	r3, r3, #28
 8019b20:	b2da      	uxtb	r2, r3
 8019b22:	7dfb      	ldrb	r3, [r7, #23]
 8019b24:	005b      	lsls	r3, r3, #1
 8019b26:	4619      	mov	r1, r3
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	440b      	add	r3, r1
 8019b2c:	3230      	adds	r2, #48	; 0x30
 8019b2e:	b2d2      	uxtb	r2, r2
 8019b30:	701a      	strb	r2, [r3, #0]
 8019b32:	e00a      	b.n	8019b4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	0f1b      	lsrs	r3, r3, #28
 8019b38:	b2da      	uxtb	r2, r3
 8019b3a:	7dfb      	ldrb	r3, [r7, #23]
 8019b3c:	005b      	lsls	r3, r3, #1
 8019b3e:	4619      	mov	r1, r3
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	440b      	add	r3, r1
 8019b44:	3237      	adds	r2, #55	; 0x37
 8019b46:	b2d2      	uxtb	r2, r2
 8019b48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	011b      	lsls	r3, r3, #4
 8019b4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019b50:	7dfb      	ldrb	r3, [r7, #23]
 8019b52:	005b      	lsls	r3, r3, #1
 8019b54:	3301      	adds	r3, #1
 8019b56:	68ba      	ldr	r2, [r7, #8]
 8019b58:	4413      	add	r3, r2
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019b5e:	7dfb      	ldrb	r3, [r7, #23]
 8019b60:	3301      	adds	r3, #1
 8019b62:	75fb      	strb	r3, [r7, #23]
 8019b64:	7dfa      	ldrb	r2, [r7, #23]
 8019b66:	79fb      	ldrb	r3, [r7, #7]
 8019b68:	429a      	cmp	r2, r3
 8019b6a:	d3d3      	bcc.n	8019b14 <IntToUnicode+0x18>
  }
}
 8019b6c:	bf00      	nop
 8019b6e:	371c      	adds	r7, #28
 8019b70:	46bd      	mov	sp, r7
 8019b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b76:	4770      	bx	lr

08019b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b08a      	sub	sp, #40	; 0x28
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019b80:	f107 0314 	add.w	r3, r7, #20
 8019b84:	2200      	movs	r2, #0
 8019b86:	601a      	str	r2, [r3, #0]
 8019b88:	605a      	str	r2, [r3, #4]
 8019b8a:	609a      	str	r2, [r3, #8]
 8019b8c:	60da      	str	r2, [r3, #12]
 8019b8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b98:	d147      	bne.n	8019c2a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	613b      	str	r3, [r7, #16]
 8019b9e:	4b25      	ldr	r3, [pc, #148]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ba2:	4a24      	ldr	r2, [pc, #144]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019ba4:	f043 0301 	orr.w	r3, r3, #1
 8019ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8019baa:	4b22      	ldr	r3, [pc, #136]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bae:	f003 0301 	and.w	r3, r3, #1
 8019bb2:	613b      	str	r3, [r7, #16]
 8019bb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8019bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019bc4:	f107 0314 	add.w	r3, r7, #20
 8019bc8:	4619      	mov	r1, r3
 8019bca:	481b      	ldr	r0, [pc, #108]	; (8019c38 <HAL_PCD_MspInit+0xc0>)
 8019bcc:	f7f3 fc2c 	bl	800d428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019bd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019bd6:	2302      	movs	r3, #2
 8019bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019bda:	2300      	movs	r3, #0
 8019bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019bde:	2303      	movs	r3, #3
 8019be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019be2:	230a      	movs	r3, #10
 8019be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019be6:	f107 0314 	add.w	r3, r7, #20
 8019bea:	4619      	mov	r1, r3
 8019bec:	4812      	ldr	r0, [pc, #72]	; (8019c38 <HAL_PCD_MspInit+0xc0>)
 8019bee:	f7f3 fc1b 	bl	800d428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019bf2:	4b10      	ldr	r3, [pc, #64]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bf6:	4a0f      	ldr	r2, [pc, #60]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019bfc:	6353      	str	r3, [r2, #52]	; 0x34
 8019bfe:	2300      	movs	r3, #0
 8019c00:	60fb      	str	r3, [r7, #12]
 8019c02:	4b0c      	ldr	r3, [pc, #48]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c06:	4a0b      	ldr	r2, [pc, #44]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8019c0e:	4b09      	ldr	r3, [pc, #36]	; (8019c34 <HAL_PCD_MspInit+0xbc>)
 8019c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019c16:	60fb      	str	r3, [r7, #12]
 8019c18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	2100      	movs	r1, #0
 8019c1e:	2043      	movs	r0, #67	; 0x43
 8019c20:	f7f2 fcfd 	bl	800c61e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019c24:	2043      	movs	r0, #67	; 0x43
 8019c26:	f7f2 fd16 	bl	800c656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019c2a:	bf00      	nop
 8019c2c:	3728      	adds	r7, #40	; 0x28
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}
 8019c32:	bf00      	nop
 8019c34:	40023800 	.word	0x40023800
 8019c38:	40020000 	.word	0x40020000

08019c3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b082      	sub	sp, #8
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019c50:	4619      	mov	r1, r3
 8019c52:	4610      	mov	r0, r2
 8019c54:	f7fb fe0c 	bl	8015870 <USBD_LL_SetupStage>
}
 8019c58:	bf00      	nop
 8019c5a:	3708      	adds	r7, #8
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b082      	sub	sp, #8
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	460b      	mov	r3, r1
 8019c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019c72:	78fa      	ldrb	r2, [r7, #3]
 8019c74:	6879      	ldr	r1, [r7, #4]
 8019c76:	4613      	mov	r3, r2
 8019c78:	00db      	lsls	r3, r3, #3
 8019c7a:	1a9b      	subs	r3, r3, r2
 8019c7c:	009b      	lsls	r3, r3, #2
 8019c7e:	440b      	add	r3, r1
 8019c80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019c84:	681a      	ldr	r2, [r3, #0]
 8019c86:	78fb      	ldrb	r3, [r7, #3]
 8019c88:	4619      	mov	r1, r3
 8019c8a:	f7fb fe44 	bl	8015916 <USBD_LL_DataOutStage>
}
 8019c8e:	bf00      	nop
 8019c90:	3708      	adds	r7, #8
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}

08019c96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019c96:	b580      	push	{r7, lr}
 8019c98:	b082      	sub	sp, #8
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019ca8:	78fa      	ldrb	r2, [r7, #3]
 8019caa:	6879      	ldr	r1, [r7, #4]
 8019cac:	4613      	mov	r3, r2
 8019cae:	00db      	lsls	r3, r3, #3
 8019cb0:	1a9b      	subs	r3, r3, r2
 8019cb2:	009b      	lsls	r3, r3, #2
 8019cb4:	440b      	add	r3, r1
 8019cb6:	3348      	adds	r3, #72	; 0x48
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	78fb      	ldrb	r3, [r7, #3]
 8019cbc:	4619      	mov	r1, r3
 8019cbe:	f7fb fe8d 	bl	80159dc <USBD_LL_DataInStage>
}
 8019cc2:	bf00      	nop
 8019cc4:	3708      	adds	r7, #8
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}

08019cca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cca:	b580      	push	{r7, lr}
 8019ccc:	b082      	sub	sp, #8
 8019cce:	af00      	add	r7, sp, #0
 8019cd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f7fb ff91 	bl	8015c00 <USBD_LL_SOF>
}
 8019cde:	bf00      	nop
 8019ce0:	3708      	adds	r7, #8
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}

08019ce6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8019ce6:	b580      	push	{r7, lr}
 8019ce8:	b084      	sub	sp, #16
 8019cea:	af00      	add	r7, sp, #0
 8019cec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019cee:	2301      	movs	r3, #1
 8019cf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d102      	bne.n	8019d00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	73fb      	strb	r3, [r7, #15]
 8019cfe:	e008      	b.n	8019d12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	68db      	ldr	r3, [r3, #12]
 8019d04:	2b02      	cmp	r3, #2
 8019d06:	d102      	bne.n	8019d0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019d08:	2301      	movs	r3, #1
 8019d0a:	73fb      	strb	r3, [r7, #15]
 8019d0c:	e001      	b.n	8019d12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019d0e:	f7f0 f833 	bl	8009d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d18:	7bfa      	ldrb	r2, [r7, #15]
 8019d1a:	4611      	mov	r1, r2
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7fb ff34 	bl	8015b8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f7fb feed 	bl	8015b08 <USBD_LL_Reset>
}
 8019d2e:	bf00      	nop
 8019d30:	3710      	adds	r7, #16
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
	...

08019d38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d46:	4618      	mov	r0, r3
 8019d48:	f7fb ff2f 	bl	8015baa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	6812      	ldr	r2, [r2, #0]
 8019d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019d5e:	f043 0301 	orr.w	r3, r3, #1
 8019d62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	6a1b      	ldr	r3, [r3, #32]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d005      	beq.n	8019d78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019d6c:	4b04      	ldr	r3, [pc, #16]	; (8019d80 <HAL_PCD_SuspendCallback+0x48>)
 8019d6e:	691b      	ldr	r3, [r3, #16]
 8019d70:	4a03      	ldr	r2, [pc, #12]	; (8019d80 <HAL_PCD_SuspendCallback+0x48>)
 8019d72:	f043 0306 	orr.w	r3, r3, #6
 8019d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019d78:	bf00      	nop
 8019d7a:	3708      	adds	r7, #8
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}
 8019d80:	e000ed00 	.word	0xe000ed00

08019d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b082      	sub	sp, #8
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019d92:	4618      	mov	r0, r3
 8019d94:	f7fb ff1e 	bl	8015bd4 <USBD_LL_Resume>
}
 8019d98:	bf00      	nop
 8019d9a:	3708      	adds	r7, #8
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}

08019da0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
 8019da8:	460b      	mov	r3, r1
 8019daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019db2:	78fa      	ldrb	r2, [r7, #3]
 8019db4:	4611      	mov	r1, r2
 8019db6:	4618      	mov	r0, r3
 8019db8:	f7fb ff49 	bl	8015c4e <USBD_LL_IsoOUTIncomplete>
}
 8019dbc:	bf00      	nop
 8019dbe:	3708      	adds	r7, #8
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	460b      	mov	r3, r1
 8019dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019dd6:	78fa      	ldrb	r2, [r7, #3]
 8019dd8:	4611      	mov	r1, r2
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7fb ff2a 	bl	8015c34 <USBD_LL_IsoINIncomplete>
}
 8019de0:	bf00      	nop
 8019de2:	3708      	adds	r7, #8
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}

08019de8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019df6:	4618      	mov	r0, r3
 8019df8:	f7fb ff36 	bl	8015c68 <USBD_LL_DevConnected>
}
 8019dfc:	bf00      	nop
 8019dfe:	3708      	adds	r7, #8
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd80      	pop	{r7, pc}

08019e04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b082      	sub	sp, #8
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019e12:	4618      	mov	r0, r3
 8019e14:	f7fb ff33 	bl	8015c7e <USBD_LL_DevDisconnected>
}
 8019e18:	bf00      	nop
 8019e1a:	3708      	adds	r7, #8
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}

08019e20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d13c      	bne.n	8019eaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019e30:	4a20      	ldr	r2, [pc, #128]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	4a1e      	ldr	r2, [pc, #120]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019e40:	4b1c      	ldr	r3, [pc, #112]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019e46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019e48:	4b1a      	ldr	r3, [pc, #104]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e4a:	2204      	movs	r2, #4
 8019e4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019e4e:	4b19      	ldr	r3, [pc, #100]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e50:	2202      	movs	r2, #2
 8019e52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019e54:	4b17      	ldr	r3, [pc, #92]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e56:	2200      	movs	r2, #0
 8019e58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019e5a:	4b16      	ldr	r3, [pc, #88]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e5c:	2202      	movs	r2, #2
 8019e5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019e60:	4b14      	ldr	r3, [pc, #80]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e62:	2200      	movs	r2, #0
 8019e64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019e66:	4b13      	ldr	r3, [pc, #76]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e68:	2200      	movs	r2, #0
 8019e6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019e6c:	4b11      	ldr	r3, [pc, #68]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e6e:	2200      	movs	r2, #0
 8019e70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8019e72:	4b10      	ldr	r3, [pc, #64]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e74:	2201      	movs	r2, #1
 8019e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019e78:	4b0e      	ldr	r3, [pc, #56]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e7a:	2200      	movs	r2, #0
 8019e7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019e7e:	480d      	ldr	r0, [pc, #52]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e80:	f7f4 fd68 	bl	800e954 <HAL_PCD_Init>
 8019e84:	4603      	mov	r3, r0
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d001      	beq.n	8019e8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019e8a:	f7ef ff75 	bl	8009d78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019e8e:	2180      	movs	r1, #128	; 0x80
 8019e90:	4808      	ldr	r0, [pc, #32]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e92:	f7f5 fec6 	bl	800fc22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019e96:	2240      	movs	r2, #64	; 0x40
 8019e98:	2100      	movs	r1, #0
 8019e9a:	4806      	ldr	r0, [pc, #24]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019e9c:	f7f5 fe7a 	bl	800fb94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019ea0:	2280      	movs	r2, #128	; 0x80
 8019ea2:	2101      	movs	r1, #1
 8019ea4:	4803      	ldr	r0, [pc, #12]	; (8019eb4 <USBD_LL_Init+0x94>)
 8019ea6:	f7f5 fe75 	bl	800fb94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019eaa:	2300      	movs	r3, #0
}
 8019eac:	4618      	mov	r0, r3
 8019eae:	3708      	adds	r7, #8
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}
 8019eb4:	20003fa4 	.word	0x20003fa4

08019eb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b084      	sub	sp, #16
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f7f4 fe5d 	bl	800eb8e <HAL_PCD_Start>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8019ed8:	7bfb      	ldrb	r3, [r7, #15]
 8019eda:	4618      	mov	r0, r3
 8019edc:	f000 f92a 	bl	801a134 <USBD_Get_USB_Status>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3710      	adds	r7, #16
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}

08019eee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019eee:	b580      	push	{r7, lr}
 8019ef0:	b084      	sub	sp, #16
 8019ef2:	af00      	add	r7, sp, #0
 8019ef4:	6078      	str	r0, [r7, #4]
 8019ef6:	4608      	mov	r0, r1
 8019ef8:	4611      	mov	r1, r2
 8019efa:	461a      	mov	r2, r3
 8019efc:	4603      	mov	r3, r0
 8019efe:	70fb      	strb	r3, [r7, #3]
 8019f00:	460b      	mov	r3, r1
 8019f02:	70bb      	strb	r3, [r7, #2]
 8019f04:	4613      	mov	r3, r2
 8019f06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f08:	2300      	movs	r3, #0
 8019f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f0c:	2300      	movs	r3, #0
 8019f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019f16:	78bb      	ldrb	r3, [r7, #2]
 8019f18:	883a      	ldrh	r2, [r7, #0]
 8019f1a:	78f9      	ldrb	r1, [r7, #3]
 8019f1c:	f7f5 fa41 	bl	800f3a2 <HAL_PCD_EP_Open>
 8019f20:	4603      	mov	r3, r0
 8019f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f24:	7bfb      	ldrb	r3, [r7, #15]
 8019f26:	4618      	mov	r0, r3
 8019f28:	f000 f904 	bl	801a134 <USBD_Get_USB_Status>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3710      	adds	r7, #16
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}

08019f3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f3a:	b580      	push	{r7, lr}
 8019f3c:	b084      	sub	sp, #16
 8019f3e:	af00      	add	r7, sp, #0
 8019f40:	6078      	str	r0, [r7, #4]
 8019f42:	460b      	mov	r3, r1
 8019f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f46:	2300      	movs	r3, #0
 8019f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f54:	78fa      	ldrb	r2, [r7, #3]
 8019f56:	4611      	mov	r1, r2
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f7f5 fa8a 	bl	800f472 <HAL_PCD_EP_Close>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8019f62:	7bfb      	ldrb	r3, [r7, #15]
 8019f64:	4618      	mov	r0, r3
 8019f66:	f000 f8e5 	bl	801a134 <USBD_Get_USB_Status>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8019f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	3710      	adds	r7, #16
 8019f74:	46bd      	mov	sp, r7
 8019f76:	bd80      	pop	{r7, pc}

08019f78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b084      	sub	sp, #16
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
 8019f80:	460b      	mov	r3, r1
 8019f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f84:	2300      	movs	r3, #0
 8019f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f88:	2300      	movs	r3, #0
 8019f8a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019f92:	78fa      	ldrb	r2, [r7, #3]
 8019f94:	4611      	mov	r1, r2
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7f5 fb62 	bl	800f660 <HAL_PCD_EP_SetStall>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fa0:	7bfb      	ldrb	r3, [r7, #15]
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	f000 f8c6 	bl	801a134 <USBD_Get_USB_Status>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8019fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3710      	adds	r7, #16
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bd80      	pop	{r7, pc}

08019fb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fb6:	b580      	push	{r7, lr}
 8019fb8:	b084      	sub	sp, #16
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
 8019fbe:	460b      	mov	r3, r1
 8019fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019fd0:	78fa      	ldrb	r2, [r7, #3]
 8019fd2:	4611      	mov	r1, r2
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	f7f5 fba7 	bl	800f728 <HAL_PCD_EP_ClrStall>
 8019fda:	4603      	mov	r3, r0
 8019fdc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8019fde:	7bfb      	ldrb	r3, [r7, #15]
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f000 f8a7 	bl	801a134 <USBD_Get_USB_Status>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8019fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	3710      	adds	r7, #16
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}

08019ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	b085      	sub	sp, #20
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	460b      	mov	r3, r1
 8019ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a006:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	da0b      	bge.n	801a028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a010:	78fb      	ldrb	r3, [r7, #3]
 801a012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a016:	68f9      	ldr	r1, [r7, #12]
 801a018:	4613      	mov	r3, r2
 801a01a:	00db      	lsls	r3, r3, #3
 801a01c:	1a9b      	subs	r3, r3, r2
 801a01e:	009b      	lsls	r3, r3, #2
 801a020:	440b      	add	r3, r1
 801a022:	333e      	adds	r3, #62	; 0x3e
 801a024:	781b      	ldrb	r3, [r3, #0]
 801a026:	e00b      	b.n	801a040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a028:	78fb      	ldrb	r3, [r7, #3]
 801a02a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a02e:	68f9      	ldr	r1, [r7, #12]
 801a030:	4613      	mov	r3, r2
 801a032:	00db      	lsls	r3, r3, #3
 801a034:	1a9b      	subs	r3, r3, r2
 801a036:	009b      	lsls	r3, r3, #2
 801a038:	440b      	add	r3, r1
 801a03a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a03e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a040:	4618      	mov	r0, r3
 801a042:	3714      	adds	r7, #20
 801a044:	46bd      	mov	sp, r7
 801a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04a:	4770      	bx	lr

0801a04c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
 801a054:	460b      	mov	r3, r1
 801a056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a058:	2300      	movs	r3, #0
 801a05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a05c:	2300      	movs	r3, #0
 801a05e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a066:	78fa      	ldrb	r2, [r7, #3]
 801a068:	4611      	mov	r1, r2
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7f5 f974 	bl	800f358 <HAL_PCD_SetAddress>
 801a070:	4603      	mov	r3, r0
 801a072:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a074:	7bfb      	ldrb	r3, [r7, #15]
 801a076:	4618      	mov	r0, r3
 801a078:	f000 f85c 	bl	801a134 <USBD_Get_USB_Status>
 801a07c:	4603      	mov	r3, r0
 801a07e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a080:	7bbb      	ldrb	r3, [r7, #14]
}
 801a082:	4618      	mov	r0, r3
 801a084:	3710      	adds	r7, #16
 801a086:	46bd      	mov	sp, r7
 801a088:	bd80      	pop	{r7, pc}

0801a08a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a08a:	b580      	push	{r7, lr}
 801a08c:	b086      	sub	sp, #24
 801a08e:	af00      	add	r7, sp, #0
 801a090:	60f8      	str	r0, [r7, #12]
 801a092:	607a      	str	r2, [r7, #4]
 801a094:	603b      	str	r3, [r7, #0]
 801a096:	460b      	mov	r3, r1
 801a098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a09a:	2300      	movs	r3, #0
 801a09c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a09e:	2300      	movs	r3, #0
 801a0a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a0a8:	7af9      	ldrb	r1, [r7, #11]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	687a      	ldr	r2, [r7, #4]
 801a0ae:	f7f5 fa8d 	bl	800f5cc <HAL_PCD_EP_Transmit>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a0b6:	7dfb      	ldrb	r3, [r7, #23]
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f000 f83b 	bl	801a134 <USBD_Get_USB_Status>
 801a0be:	4603      	mov	r3, r0
 801a0c0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a0c2:	7dbb      	ldrb	r3, [r7, #22]
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3718      	adds	r7, #24
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b086      	sub	sp, #24
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	60f8      	str	r0, [r7, #12]
 801a0d4:	607a      	str	r2, [r7, #4]
 801a0d6:	603b      	str	r3, [r7, #0]
 801a0d8:	460b      	mov	r3, r1
 801a0da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a0ea:	7af9      	ldrb	r1, [r7, #11]
 801a0ec:	683b      	ldr	r3, [r7, #0]
 801a0ee:	687a      	ldr	r2, [r7, #4]
 801a0f0:	f7f5 fa09 	bl	800f506 <HAL_PCD_EP_Receive>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a0f8:	7dfb      	ldrb	r3, [r7, #23]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f000 f81a 	bl	801a134 <USBD_Get_USB_Status>
 801a100:	4603      	mov	r3, r0
 801a102:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a104:	7dbb      	ldrb	r3, [r7, #22]
}
 801a106:	4618      	mov	r0, r3
 801a108:	3718      	adds	r7, #24
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}

0801a10e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a10e:	b580      	push	{r7, lr}
 801a110:	b082      	sub	sp, #8
 801a112:	af00      	add	r7, sp, #0
 801a114:	6078      	str	r0, [r7, #4]
 801a116:	460b      	mov	r3, r1
 801a118:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a120:	78fa      	ldrb	r2, [r7, #3]
 801a122:	4611      	mov	r1, r2
 801a124:	4618      	mov	r0, r3
 801a126:	f7f5 fa39 	bl	800f59c <HAL_PCD_EP_GetRxCount>
 801a12a:	4603      	mov	r3, r0
}
 801a12c:	4618      	mov	r0, r3
 801a12e:	3708      	adds	r7, #8
 801a130:	46bd      	mov	sp, r7
 801a132:	bd80      	pop	{r7, pc}

0801a134 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a134:	b480      	push	{r7}
 801a136:	b085      	sub	sp, #20
 801a138:	af00      	add	r7, sp, #0
 801a13a:	4603      	mov	r3, r0
 801a13c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a13e:	2300      	movs	r3, #0
 801a140:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a142:	79fb      	ldrb	r3, [r7, #7]
 801a144:	2b03      	cmp	r3, #3
 801a146:	d817      	bhi.n	801a178 <USBD_Get_USB_Status+0x44>
 801a148:	a201      	add	r2, pc, #4	; (adr r2, 801a150 <USBD_Get_USB_Status+0x1c>)
 801a14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a14e:	bf00      	nop
 801a150:	0801a161 	.word	0x0801a161
 801a154:	0801a167 	.word	0x0801a167
 801a158:	0801a16d 	.word	0x0801a16d
 801a15c:	0801a173 	.word	0x0801a173
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a160:	2300      	movs	r3, #0
 801a162:	73fb      	strb	r3, [r7, #15]
    break;
 801a164:	e00b      	b.n	801a17e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a166:	2303      	movs	r3, #3
 801a168:	73fb      	strb	r3, [r7, #15]
    break;
 801a16a:	e008      	b.n	801a17e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a16c:	2301      	movs	r3, #1
 801a16e:	73fb      	strb	r3, [r7, #15]
    break;
 801a170:	e005      	b.n	801a17e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a172:	2303      	movs	r3, #3
 801a174:	73fb      	strb	r3, [r7, #15]
    break;
 801a176:	e002      	b.n	801a17e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a178:	2303      	movs	r3, #3
 801a17a:	73fb      	strb	r3, [r7, #15]
    break;
 801a17c:	bf00      	nop
  }
  return usb_status;
 801a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a180:	4618      	mov	r0, r3
 801a182:	3714      	adds	r7, #20
 801a184:	46bd      	mov	sp, r7
 801a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18a:	4770      	bx	lr

0801a18c <__errno>:
 801a18c:	4b01      	ldr	r3, [pc, #4]	; (801a194 <__errno+0x8>)
 801a18e:	6818      	ldr	r0, [r3, #0]
 801a190:	4770      	bx	lr
 801a192:	bf00      	nop
 801a194:	200001c4 	.word	0x200001c4

0801a198 <__libc_init_array>:
 801a198:	b570      	push	{r4, r5, r6, lr}
 801a19a:	4e0d      	ldr	r6, [pc, #52]	; (801a1d0 <__libc_init_array+0x38>)
 801a19c:	4c0d      	ldr	r4, [pc, #52]	; (801a1d4 <__libc_init_array+0x3c>)
 801a19e:	1ba4      	subs	r4, r4, r6
 801a1a0:	10a4      	asrs	r4, r4, #2
 801a1a2:	2500      	movs	r5, #0
 801a1a4:	42a5      	cmp	r5, r4
 801a1a6:	d109      	bne.n	801a1bc <__libc_init_array+0x24>
 801a1a8:	4e0b      	ldr	r6, [pc, #44]	; (801a1d8 <__libc_init_array+0x40>)
 801a1aa:	4c0c      	ldr	r4, [pc, #48]	; (801a1dc <__libc_init_array+0x44>)
 801a1ac:	f004 fb22 	bl	801e7f4 <_init>
 801a1b0:	1ba4      	subs	r4, r4, r6
 801a1b2:	10a4      	asrs	r4, r4, #2
 801a1b4:	2500      	movs	r5, #0
 801a1b6:	42a5      	cmp	r5, r4
 801a1b8:	d105      	bne.n	801a1c6 <__libc_init_array+0x2e>
 801a1ba:	bd70      	pop	{r4, r5, r6, pc}
 801a1bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a1c0:	4798      	blx	r3
 801a1c2:	3501      	adds	r5, #1
 801a1c4:	e7ee      	b.n	801a1a4 <__libc_init_array+0xc>
 801a1c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a1ca:	4798      	blx	r3
 801a1cc:	3501      	adds	r5, #1
 801a1ce:	e7f2      	b.n	801a1b6 <__libc_init_array+0x1e>
 801a1d0:	0801f480 	.word	0x0801f480
 801a1d4:	0801f480 	.word	0x0801f480
 801a1d8:	0801f480 	.word	0x0801f480
 801a1dc:	0801f484 	.word	0x0801f484

0801a1e0 <__locale_ctype_ptr>:
 801a1e0:	4b04      	ldr	r3, [pc, #16]	; (801a1f4 <__locale_ctype_ptr+0x14>)
 801a1e2:	4a05      	ldr	r2, [pc, #20]	; (801a1f8 <__locale_ctype_ptr+0x18>)
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	6a1b      	ldr	r3, [r3, #32]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	bf08      	it	eq
 801a1ec:	4613      	moveq	r3, r2
 801a1ee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801a1f2:	4770      	bx	lr
 801a1f4:	200001c4 	.word	0x200001c4
 801a1f8:	20000228 	.word	0x20000228

0801a1fc <malloc>:
 801a1fc:	4b02      	ldr	r3, [pc, #8]	; (801a208 <malloc+0xc>)
 801a1fe:	4601      	mov	r1, r0
 801a200:	6818      	ldr	r0, [r3, #0]
 801a202:	f000 b87f 	b.w	801a304 <_malloc_r>
 801a206:	bf00      	nop
 801a208:	200001c4 	.word	0x200001c4

0801a20c <free>:
 801a20c:	4b02      	ldr	r3, [pc, #8]	; (801a218 <free+0xc>)
 801a20e:	4601      	mov	r1, r0
 801a210:	6818      	ldr	r0, [r3, #0]
 801a212:	f000 b829 	b.w	801a268 <_free_r>
 801a216:	bf00      	nop
 801a218:	200001c4 	.word	0x200001c4

0801a21c <__ascii_mbtowc>:
 801a21c:	b082      	sub	sp, #8
 801a21e:	b901      	cbnz	r1, 801a222 <__ascii_mbtowc+0x6>
 801a220:	a901      	add	r1, sp, #4
 801a222:	b142      	cbz	r2, 801a236 <__ascii_mbtowc+0x1a>
 801a224:	b14b      	cbz	r3, 801a23a <__ascii_mbtowc+0x1e>
 801a226:	7813      	ldrb	r3, [r2, #0]
 801a228:	600b      	str	r3, [r1, #0]
 801a22a:	7812      	ldrb	r2, [r2, #0]
 801a22c:	1c10      	adds	r0, r2, #0
 801a22e:	bf18      	it	ne
 801a230:	2001      	movne	r0, #1
 801a232:	b002      	add	sp, #8
 801a234:	4770      	bx	lr
 801a236:	4610      	mov	r0, r2
 801a238:	e7fb      	b.n	801a232 <__ascii_mbtowc+0x16>
 801a23a:	f06f 0001 	mvn.w	r0, #1
 801a23e:	e7f8      	b.n	801a232 <__ascii_mbtowc+0x16>

0801a240 <memcpy>:
 801a240:	b510      	push	{r4, lr}
 801a242:	1e43      	subs	r3, r0, #1
 801a244:	440a      	add	r2, r1
 801a246:	4291      	cmp	r1, r2
 801a248:	d100      	bne.n	801a24c <memcpy+0xc>
 801a24a:	bd10      	pop	{r4, pc}
 801a24c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a250:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a254:	e7f7      	b.n	801a246 <memcpy+0x6>

0801a256 <memset>:
 801a256:	4402      	add	r2, r0
 801a258:	4603      	mov	r3, r0
 801a25a:	4293      	cmp	r3, r2
 801a25c:	d100      	bne.n	801a260 <memset+0xa>
 801a25e:	4770      	bx	lr
 801a260:	f803 1b01 	strb.w	r1, [r3], #1
 801a264:	e7f9      	b.n	801a25a <memset+0x4>
	...

0801a268 <_free_r>:
 801a268:	b538      	push	{r3, r4, r5, lr}
 801a26a:	4605      	mov	r5, r0
 801a26c:	2900      	cmp	r1, #0
 801a26e:	d045      	beq.n	801a2fc <_free_r+0x94>
 801a270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a274:	1f0c      	subs	r4, r1, #4
 801a276:	2b00      	cmp	r3, #0
 801a278:	bfb8      	it	lt
 801a27a:	18e4      	addlt	r4, r4, r3
 801a27c:	f001 fb8a 	bl	801b994 <__malloc_lock>
 801a280:	4a1f      	ldr	r2, [pc, #124]	; (801a300 <_free_r+0x98>)
 801a282:	6813      	ldr	r3, [r2, #0]
 801a284:	4610      	mov	r0, r2
 801a286:	b933      	cbnz	r3, 801a296 <_free_r+0x2e>
 801a288:	6063      	str	r3, [r4, #4]
 801a28a:	6014      	str	r4, [r2, #0]
 801a28c:	4628      	mov	r0, r5
 801a28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a292:	f001 bb80 	b.w	801b996 <__malloc_unlock>
 801a296:	42a3      	cmp	r3, r4
 801a298:	d90c      	bls.n	801a2b4 <_free_r+0x4c>
 801a29a:	6821      	ldr	r1, [r4, #0]
 801a29c:	1862      	adds	r2, r4, r1
 801a29e:	4293      	cmp	r3, r2
 801a2a0:	bf04      	itt	eq
 801a2a2:	681a      	ldreq	r2, [r3, #0]
 801a2a4:	685b      	ldreq	r3, [r3, #4]
 801a2a6:	6063      	str	r3, [r4, #4]
 801a2a8:	bf04      	itt	eq
 801a2aa:	1852      	addeq	r2, r2, r1
 801a2ac:	6022      	streq	r2, [r4, #0]
 801a2ae:	6004      	str	r4, [r0, #0]
 801a2b0:	e7ec      	b.n	801a28c <_free_r+0x24>
 801a2b2:	4613      	mov	r3, r2
 801a2b4:	685a      	ldr	r2, [r3, #4]
 801a2b6:	b10a      	cbz	r2, 801a2bc <_free_r+0x54>
 801a2b8:	42a2      	cmp	r2, r4
 801a2ba:	d9fa      	bls.n	801a2b2 <_free_r+0x4a>
 801a2bc:	6819      	ldr	r1, [r3, #0]
 801a2be:	1858      	adds	r0, r3, r1
 801a2c0:	42a0      	cmp	r0, r4
 801a2c2:	d10b      	bne.n	801a2dc <_free_r+0x74>
 801a2c4:	6820      	ldr	r0, [r4, #0]
 801a2c6:	4401      	add	r1, r0
 801a2c8:	1858      	adds	r0, r3, r1
 801a2ca:	4282      	cmp	r2, r0
 801a2cc:	6019      	str	r1, [r3, #0]
 801a2ce:	d1dd      	bne.n	801a28c <_free_r+0x24>
 801a2d0:	6810      	ldr	r0, [r2, #0]
 801a2d2:	6852      	ldr	r2, [r2, #4]
 801a2d4:	605a      	str	r2, [r3, #4]
 801a2d6:	4401      	add	r1, r0
 801a2d8:	6019      	str	r1, [r3, #0]
 801a2da:	e7d7      	b.n	801a28c <_free_r+0x24>
 801a2dc:	d902      	bls.n	801a2e4 <_free_r+0x7c>
 801a2de:	230c      	movs	r3, #12
 801a2e0:	602b      	str	r3, [r5, #0]
 801a2e2:	e7d3      	b.n	801a28c <_free_r+0x24>
 801a2e4:	6820      	ldr	r0, [r4, #0]
 801a2e6:	1821      	adds	r1, r4, r0
 801a2e8:	428a      	cmp	r2, r1
 801a2ea:	bf04      	itt	eq
 801a2ec:	6811      	ldreq	r1, [r2, #0]
 801a2ee:	6852      	ldreq	r2, [r2, #4]
 801a2f0:	6062      	str	r2, [r4, #4]
 801a2f2:	bf04      	itt	eq
 801a2f4:	1809      	addeq	r1, r1, r0
 801a2f6:	6021      	streq	r1, [r4, #0]
 801a2f8:	605c      	str	r4, [r3, #4]
 801a2fa:	e7c7      	b.n	801a28c <_free_r+0x24>
 801a2fc:	bd38      	pop	{r3, r4, r5, pc}
 801a2fe:	bf00      	nop
 801a300:	20000634 	.word	0x20000634

0801a304 <_malloc_r>:
 801a304:	b570      	push	{r4, r5, r6, lr}
 801a306:	1ccd      	adds	r5, r1, #3
 801a308:	f025 0503 	bic.w	r5, r5, #3
 801a30c:	3508      	adds	r5, #8
 801a30e:	2d0c      	cmp	r5, #12
 801a310:	bf38      	it	cc
 801a312:	250c      	movcc	r5, #12
 801a314:	2d00      	cmp	r5, #0
 801a316:	4606      	mov	r6, r0
 801a318:	db01      	blt.n	801a31e <_malloc_r+0x1a>
 801a31a:	42a9      	cmp	r1, r5
 801a31c:	d903      	bls.n	801a326 <_malloc_r+0x22>
 801a31e:	230c      	movs	r3, #12
 801a320:	6033      	str	r3, [r6, #0]
 801a322:	2000      	movs	r0, #0
 801a324:	bd70      	pop	{r4, r5, r6, pc}
 801a326:	f001 fb35 	bl	801b994 <__malloc_lock>
 801a32a:	4a21      	ldr	r2, [pc, #132]	; (801a3b0 <_malloc_r+0xac>)
 801a32c:	6814      	ldr	r4, [r2, #0]
 801a32e:	4621      	mov	r1, r4
 801a330:	b991      	cbnz	r1, 801a358 <_malloc_r+0x54>
 801a332:	4c20      	ldr	r4, [pc, #128]	; (801a3b4 <_malloc_r+0xb0>)
 801a334:	6823      	ldr	r3, [r4, #0]
 801a336:	b91b      	cbnz	r3, 801a340 <_malloc_r+0x3c>
 801a338:	4630      	mov	r0, r6
 801a33a:	f000 fc99 	bl	801ac70 <_sbrk_r>
 801a33e:	6020      	str	r0, [r4, #0]
 801a340:	4629      	mov	r1, r5
 801a342:	4630      	mov	r0, r6
 801a344:	f000 fc94 	bl	801ac70 <_sbrk_r>
 801a348:	1c43      	adds	r3, r0, #1
 801a34a:	d124      	bne.n	801a396 <_malloc_r+0x92>
 801a34c:	230c      	movs	r3, #12
 801a34e:	6033      	str	r3, [r6, #0]
 801a350:	4630      	mov	r0, r6
 801a352:	f001 fb20 	bl	801b996 <__malloc_unlock>
 801a356:	e7e4      	b.n	801a322 <_malloc_r+0x1e>
 801a358:	680b      	ldr	r3, [r1, #0]
 801a35a:	1b5b      	subs	r3, r3, r5
 801a35c:	d418      	bmi.n	801a390 <_malloc_r+0x8c>
 801a35e:	2b0b      	cmp	r3, #11
 801a360:	d90f      	bls.n	801a382 <_malloc_r+0x7e>
 801a362:	600b      	str	r3, [r1, #0]
 801a364:	50cd      	str	r5, [r1, r3]
 801a366:	18cc      	adds	r4, r1, r3
 801a368:	4630      	mov	r0, r6
 801a36a:	f001 fb14 	bl	801b996 <__malloc_unlock>
 801a36e:	f104 000b 	add.w	r0, r4, #11
 801a372:	1d23      	adds	r3, r4, #4
 801a374:	f020 0007 	bic.w	r0, r0, #7
 801a378:	1ac3      	subs	r3, r0, r3
 801a37a:	d0d3      	beq.n	801a324 <_malloc_r+0x20>
 801a37c:	425a      	negs	r2, r3
 801a37e:	50e2      	str	r2, [r4, r3]
 801a380:	e7d0      	b.n	801a324 <_malloc_r+0x20>
 801a382:	428c      	cmp	r4, r1
 801a384:	684b      	ldr	r3, [r1, #4]
 801a386:	bf16      	itet	ne
 801a388:	6063      	strne	r3, [r4, #4]
 801a38a:	6013      	streq	r3, [r2, #0]
 801a38c:	460c      	movne	r4, r1
 801a38e:	e7eb      	b.n	801a368 <_malloc_r+0x64>
 801a390:	460c      	mov	r4, r1
 801a392:	6849      	ldr	r1, [r1, #4]
 801a394:	e7cc      	b.n	801a330 <_malloc_r+0x2c>
 801a396:	1cc4      	adds	r4, r0, #3
 801a398:	f024 0403 	bic.w	r4, r4, #3
 801a39c:	42a0      	cmp	r0, r4
 801a39e:	d005      	beq.n	801a3ac <_malloc_r+0xa8>
 801a3a0:	1a21      	subs	r1, r4, r0
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	f000 fc64 	bl	801ac70 <_sbrk_r>
 801a3a8:	3001      	adds	r0, #1
 801a3aa:	d0cf      	beq.n	801a34c <_malloc_r+0x48>
 801a3ac:	6025      	str	r5, [r4, #0]
 801a3ae:	e7db      	b.n	801a368 <_malloc_r+0x64>
 801a3b0:	20000634 	.word	0x20000634
 801a3b4:	20000638 	.word	0x20000638

0801a3b8 <__cvt>:
 801a3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3bc:	ec55 4b10 	vmov	r4, r5, d0
 801a3c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801a3c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a3c6:	2d00      	cmp	r5, #0
 801a3c8:	460e      	mov	r6, r1
 801a3ca:	4691      	mov	r9, r2
 801a3cc:	4619      	mov	r1, r3
 801a3ce:	bfb8      	it	lt
 801a3d0:	4622      	movlt	r2, r4
 801a3d2:	462b      	mov	r3, r5
 801a3d4:	f027 0720 	bic.w	r7, r7, #32
 801a3d8:	bfbb      	ittet	lt
 801a3da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a3de:	461d      	movlt	r5, r3
 801a3e0:	2300      	movge	r3, #0
 801a3e2:	232d      	movlt	r3, #45	; 0x2d
 801a3e4:	bfb8      	it	lt
 801a3e6:	4614      	movlt	r4, r2
 801a3e8:	2f46      	cmp	r7, #70	; 0x46
 801a3ea:	700b      	strb	r3, [r1, #0]
 801a3ec:	d004      	beq.n	801a3f8 <__cvt+0x40>
 801a3ee:	2f45      	cmp	r7, #69	; 0x45
 801a3f0:	d100      	bne.n	801a3f4 <__cvt+0x3c>
 801a3f2:	3601      	adds	r6, #1
 801a3f4:	2102      	movs	r1, #2
 801a3f6:	e000      	b.n	801a3fa <__cvt+0x42>
 801a3f8:	2103      	movs	r1, #3
 801a3fa:	ab03      	add	r3, sp, #12
 801a3fc:	9301      	str	r3, [sp, #4]
 801a3fe:	ab02      	add	r3, sp, #8
 801a400:	9300      	str	r3, [sp, #0]
 801a402:	4632      	mov	r2, r6
 801a404:	4653      	mov	r3, sl
 801a406:	ec45 4b10 	vmov	d0, r4, r5
 801a40a:	f000 fcfd 	bl	801ae08 <_dtoa_r>
 801a40e:	2f47      	cmp	r7, #71	; 0x47
 801a410:	4680      	mov	r8, r0
 801a412:	d102      	bne.n	801a41a <__cvt+0x62>
 801a414:	f019 0f01 	tst.w	r9, #1
 801a418:	d026      	beq.n	801a468 <__cvt+0xb0>
 801a41a:	2f46      	cmp	r7, #70	; 0x46
 801a41c:	eb08 0906 	add.w	r9, r8, r6
 801a420:	d111      	bne.n	801a446 <__cvt+0x8e>
 801a422:	f898 3000 	ldrb.w	r3, [r8]
 801a426:	2b30      	cmp	r3, #48	; 0x30
 801a428:	d10a      	bne.n	801a440 <__cvt+0x88>
 801a42a:	2200      	movs	r2, #0
 801a42c:	2300      	movs	r3, #0
 801a42e:	4620      	mov	r0, r4
 801a430:	4629      	mov	r1, r5
 801a432:	f7e6 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 801a436:	b918      	cbnz	r0, 801a440 <__cvt+0x88>
 801a438:	f1c6 0601 	rsb	r6, r6, #1
 801a43c:	f8ca 6000 	str.w	r6, [sl]
 801a440:	f8da 3000 	ldr.w	r3, [sl]
 801a444:	4499      	add	r9, r3
 801a446:	2200      	movs	r2, #0
 801a448:	2300      	movs	r3, #0
 801a44a:	4620      	mov	r0, r4
 801a44c:	4629      	mov	r1, r5
 801a44e:	f7e6 fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 801a452:	b938      	cbnz	r0, 801a464 <__cvt+0xac>
 801a454:	2230      	movs	r2, #48	; 0x30
 801a456:	9b03      	ldr	r3, [sp, #12]
 801a458:	454b      	cmp	r3, r9
 801a45a:	d205      	bcs.n	801a468 <__cvt+0xb0>
 801a45c:	1c59      	adds	r1, r3, #1
 801a45e:	9103      	str	r1, [sp, #12]
 801a460:	701a      	strb	r2, [r3, #0]
 801a462:	e7f8      	b.n	801a456 <__cvt+0x9e>
 801a464:	f8cd 900c 	str.w	r9, [sp, #12]
 801a468:	9b03      	ldr	r3, [sp, #12]
 801a46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a46c:	eba3 0308 	sub.w	r3, r3, r8
 801a470:	4640      	mov	r0, r8
 801a472:	6013      	str	r3, [r2, #0]
 801a474:	b004      	add	sp, #16
 801a476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a47a <__exponent>:
 801a47a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a47c:	2900      	cmp	r1, #0
 801a47e:	4604      	mov	r4, r0
 801a480:	bfba      	itte	lt
 801a482:	4249      	neglt	r1, r1
 801a484:	232d      	movlt	r3, #45	; 0x2d
 801a486:	232b      	movge	r3, #43	; 0x2b
 801a488:	2909      	cmp	r1, #9
 801a48a:	f804 2b02 	strb.w	r2, [r4], #2
 801a48e:	7043      	strb	r3, [r0, #1]
 801a490:	dd20      	ble.n	801a4d4 <__exponent+0x5a>
 801a492:	f10d 0307 	add.w	r3, sp, #7
 801a496:	461f      	mov	r7, r3
 801a498:	260a      	movs	r6, #10
 801a49a:	fb91 f5f6 	sdiv	r5, r1, r6
 801a49e:	fb06 1115 	mls	r1, r6, r5, r1
 801a4a2:	3130      	adds	r1, #48	; 0x30
 801a4a4:	2d09      	cmp	r5, #9
 801a4a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a4aa:	f103 32ff 	add.w	r2, r3, #4294967295
 801a4ae:	4629      	mov	r1, r5
 801a4b0:	dc09      	bgt.n	801a4c6 <__exponent+0x4c>
 801a4b2:	3130      	adds	r1, #48	; 0x30
 801a4b4:	3b02      	subs	r3, #2
 801a4b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a4ba:	42bb      	cmp	r3, r7
 801a4bc:	4622      	mov	r2, r4
 801a4be:	d304      	bcc.n	801a4ca <__exponent+0x50>
 801a4c0:	1a10      	subs	r0, r2, r0
 801a4c2:	b003      	add	sp, #12
 801a4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4c6:	4613      	mov	r3, r2
 801a4c8:	e7e7      	b.n	801a49a <__exponent+0x20>
 801a4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4ce:	f804 2b01 	strb.w	r2, [r4], #1
 801a4d2:	e7f2      	b.n	801a4ba <__exponent+0x40>
 801a4d4:	2330      	movs	r3, #48	; 0x30
 801a4d6:	4419      	add	r1, r3
 801a4d8:	7083      	strb	r3, [r0, #2]
 801a4da:	1d02      	adds	r2, r0, #4
 801a4dc:	70c1      	strb	r1, [r0, #3]
 801a4de:	e7ef      	b.n	801a4c0 <__exponent+0x46>

0801a4e0 <_printf_float>:
 801a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e4:	b08d      	sub	sp, #52	; 0x34
 801a4e6:	460c      	mov	r4, r1
 801a4e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a4ec:	4616      	mov	r6, r2
 801a4ee:	461f      	mov	r7, r3
 801a4f0:	4605      	mov	r5, r0
 801a4f2:	f001 fa41 	bl	801b978 <_localeconv_r>
 801a4f6:	6803      	ldr	r3, [r0, #0]
 801a4f8:	9304      	str	r3, [sp, #16]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7e5 fe68 	bl	80001d0 <strlen>
 801a500:	2300      	movs	r3, #0
 801a502:	930a      	str	r3, [sp, #40]	; 0x28
 801a504:	f8d8 3000 	ldr.w	r3, [r8]
 801a508:	9005      	str	r0, [sp, #20]
 801a50a:	3307      	adds	r3, #7
 801a50c:	f023 0307 	bic.w	r3, r3, #7
 801a510:	f103 0208 	add.w	r2, r3, #8
 801a514:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a518:	f8d4 b000 	ldr.w	fp, [r4]
 801a51c:	f8c8 2000 	str.w	r2, [r8]
 801a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a524:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a528:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a52c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a530:	9307      	str	r3, [sp, #28]
 801a532:	f8cd 8018 	str.w	r8, [sp, #24]
 801a536:	f04f 32ff 	mov.w	r2, #4294967295
 801a53a:	4ba7      	ldr	r3, [pc, #668]	; (801a7d8 <_printf_float+0x2f8>)
 801a53c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a540:	f7e6 faf4 	bl	8000b2c <__aeabi_dcmpun>
 801a544:	bb70      	cbnz	r0, 801a5a4 <_printf_float+0xc4>
 801a546:	f04f 32ff 	mov.w	r2, #4294967295
 801a54a:	4ba3      	ldr	r3, [pc, #652]	; (801a7d8 <_printf_float+0x2f8>)
 801a54c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a550:	f7e6 face 	bl	8000af0 <__aeabi_dcmple>
 801a554:	bb30      	cbnz	r0, 801a5a4 <_printf_float+0xc4>
 801a556:	2200      	movs	r2, #0
 801a558:	2300      	movs	r3, #0
 801a55a:	4640      	mov	r0, r8
 801a55c:	4649      	mov	r1, r9
 801a55e:	f7e6 fabd 	bl	8000adc <__aeabi_dcmplt>
 801a562:	b110      	cbz	r0, 801a56a <_printf_float+0x8a>
 801a564:	232d      	movs	r3, #45	; 0x2d
 801a566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a56a:	4a9c      	ldr	r2, [pc, #624]	; (801a7dc <_printf_float+0x2fc>)
 801a56c:	4b9c      	ldr	r3, [pc, #624]	; (801a7e0 <_printf_float+0x300>)
 801a56e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801a572:	bf8c      	ite	hi
 801a574:	4690      	movhi	r8, r2
 801a576:	4698      	movls	r8, r3
 801a578:	2303      	movs	r3, #3
 801a57a:	f02b 0204 	bic.w	r2, fp, #4
 801a57e:	6123      	str	r3, [r4, #16]
 801a580:	6022      	str	r2, [r4, #0]
 801a582:	f04f 0900 	mov.w	r9, #0
 801a586:	9700      	str	r7, [sp, #0]
 801a588:	4633      	mov	r3, r6
 801a58a:	aa0b      	add	r2, sp, #44	; 0x2c
 801a58c:	4621      	mov	r1, r4
 801a58e:	4628      	mov	r0, r5
 801a590:	f000 f9e6 	bl	801a960 <_printf_common>
 801a594:	3001      	adds	r0, #1
 801a596:	f040 808d 	bne.w	801a6b4 <_printf_float+0x1d4>
 801a59a:	f04f 30ff 	mov.w	r0, #4294967295
 801a59e:	b00d      	add	sp, #52	; 0x34
 801a5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a4:	4642      	mov	r2, r8
 801a5a6:	464b      	mov	r3, r9
 801a5a8:	4640      	mov	r0, r8
 801a5aa:	4649      	mov	r1, r9
 801a5ac:	f7e6 fabe 	bl	8000b2c <__aeabi_dcmpun>
 801a5b0:	b110      	cbz	r0, 801a5b8 <_printf_float+0xd8>
 801a5b2:	4a8c      	ldr	r2, [pc, #560]	; (801a7e4 <_printf_float+0x304>)
 801a5b4:	4b8c      	ldr	r3, [pc, #560]	; (801a7e8 <_printf_float+0x308>)
 801a5b6:	e7da      	b.n	801a56e <_printf_float+0x8e>
 801a5b8:	6861      	ldr	r1, [r4, #4]
 801a5ba:	1c4b      	adds	r3, r1, #1
 801a5bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801a5c0:	a80a      	add	r0, sp, #40	; 0x28
 801a5c2:	d13e      	bne.n	801a642 <_printf_float+0x162>
 801a5c4:	2306      	movs	r3, #6
 801a5c6:	6063      	str	r3, [r4, #4]
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a5ce:	ab09      	add	r3, sp, #36	; 0x24
 801a5d0:	9300      	str	r3, [sp, #0]
 801a5d2:	ec49 8b10 	vmov	d0, r8, r9
 801a5d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a5da:	6022      	str	r2, [r4, #0]
 801a5dc:	f8cd a004 	str.w	sl, [sp, #4]
 801a5e0:	6861      	ldr	r1, [r4, #4]
 801a5e2:	4628      	mov	r0, r5
 801a5e4:	f7ff fee8 	bl	801a3b8 <__cvt>
 801a5e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801a5ec:	2b47      	cmp	r3, #71	; 0x47
 801a5ee:	4680      	mov	r8, r0
 801a5f0:	d109      	bne.n	801a606 <_printf_float+0x126>
 801a5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5f4:	1cd8      	adds	r0, r3, #3
 801a5f6:	db02      	blt.n	801a5fe <_printf_float+0x11e>
 801a5f8:	6862      	ldr	r2, [r4, #4]
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	dd47      	ble.n	801a68e <_printf_float+0x1ae>
 801a5fe:	f1aa 0a02 	sub.w	sl, sl, #2
 801a602:	fa5f fa8a 	uxtb.w	sl, sl
 801a606:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801a60a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a60c:	d824      	bhi.n	801a658 <_printf_float+0x178>
 801a60e:	3901      	subs	r1, #1
 801a610:	4652      	mov	r2, sl
 801a612:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a616:	9109      	str	r1, [sp, #36]	; 0x24
 801a618:	f7ff ff2f 	bl	801a47a <__exponent>
 801a61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a61e:	1813      	adds	r3, r2, r0
 801a620:	2a01      	cmp	r2, #1
 801a622:	4681      	mov	r9, r0
 801a624:	6123      	str	r3, [r4, #16]
 801a626:	dc02      	bgt.n	801a62e <_printf_float+0x14e>
 801a628:	6822      	ldr	r2, [r4, #0]
 801a62a:	07d1      	lsls	r1, r2, #31
 801a62c:	d501      	bpl.n	801a632 <_printf_float+0x152>
 801a62e:	3301      	adds	r3, #1
 801a630:	6123      	str	r3, [r4, #16]
 801a632:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a636:	2b00      	cmp	r3, #0
 801a638:	d0a5      	beq.n	801a586 <_printf_float+0xa6>
 801a63a:	232d      	movs	r3, #45	; 0x2d
 801a63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a640:	e7a1      	b.n	801a586 <_printf_float+0xa6>
 801a642:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801a646:	f000 8177 	beq.w	801a938 <_printf_float+0x458>
 801a64a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801a64e:	d1bb      	bne.n	801a5c8 <_printf_float+0xe8>
 801a650:	2900      	cmp	r1, #0
 801a652:	d1b9      	bne.n	801a5c8 <_printf_float+0xe8>
 801a654:	2301      	movs	r3, #1
 801a656:	e7b6      	b.n	801a5c6 <_printf_float+0xe6>
 801a658:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801a65c:	d119      	bne.n	801a692 <_printf_float+0x1b2>
 801a65e:	2900      	cmp	r1, #0
 801a660:	6863      	ldr	r3, [r4, #4]
 801a662:	dd0c      	ble.n	801a67e <_printf_float+0x19e>
 801a664:	6121      	str	r1, [r4, #16]
 801a666:	b913      	cbnz	r3, 801a66e <_printf_float+0x18e>
 801a668:	6822      	ldr	r2, [r4, #0]
 801a66a:	07d2      	lsls	r2, r2, #31
 801a66c:	d502      	bpl.n	801a674 <_printf_float+0x194>
 801a66e:	3301      	adds	r3, #1
 801a670:	440b      	add	r3, r1
 801a672:	6123      	str	r3, [r4, #16]
 801a674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a676:	65a3      	str	r3, [r4, #88]	; 0x58
 801a678:	f04f 0900 	mov.w	r9, #0
 801a67c:	e7d9      	b.n	801a632 <_printf_float+0x152>
 801a67e:	b913      	cbnz	r3, 801a686 <_printf_float+0x1a6>
 801a680:	6822      	ldr	r2, [r4, #0]
 801a682:	07d0      	lsls	r0, r2, #31
 801a684:	d501      	bpl.n	801a68a <_printf_float+0x1aa>
 801a686:	3302      	adds	r3, #2
 801a688:	e7f3      	b.n	801a672 <_printf_float+0x192>
 801a68a:	2301      	movs	r3, #1
 801a68c:	e7f1      	b.n	801a672 <_printf_float+0x192>
 801a68e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801a692:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a696:	4293      	cmp	r3, r2
 801a698:	db05      	blt.n	801a6a6 <_printf_float+0x1c6>
 801a69a:	6822      	ldr	r2, [r4, #0]
 801a69c:	6123      	str	r3, [r4, #16]
 801a69e:	07d1      	lsls	r1, r2, #31
 801a6a0:	d5e8      	bpl.n	801a674 <_printf_float+0x194>
 801a6a2:	3301      	adds	r3, #1
 801a6a4:	e7e5      	b.n	801a672 <_printf_float+0x192>
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	bfd4      	ite	le
 801a6aa:	f1c3 0302 	rsble	r3, r3, #2
 801a6ae:	2301      	movgt	r3, #1
 801a6b0:	4413      	add	r3, r2
 801a6b2:	e7de      	b.n	801a672 <_printf_float+0x192>
 801a6b4:	6823      	ldr	r3, [r4, #0]
 801a6b6:	055a      	lsls	r2, r3, #21
 801a6b8:	d407      	bmi.n	801a6ca <_printf_float+0x1ea>
 801a6ba:	6923      	ldr	r3, [r4, #16]
 801a6bc:	4642      	mov	r2, r8
 801a6be:	4631      	mov	r1, r6
 801a6c0:	4628      	mov	r0, r5
 801a6c2:	47b8      	blx	r7
 801a6c4:	3001      	adds	r0, #1
 801a6c6:	d12b      	bne.n	801a720 <_printf_float+0x240>
 801a6c8:	e767      	b.n	801a59a <_printf_float+0xba>
 801a6ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801a6ce:	f240 80dc 	bls.w	801a88a <_printf_float+0x3aa>
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a6da:	f7e6 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	d033      	beq.n	801a74a <_printf_float+0x26a>
 801a6e2:	2301      	movs	r3, #1
 801a6e4:	4a41      	ldr	r2, [pc, #260]	; (801a7ec <_printf_float+0x30c>)
 801a6e6:	4631      	mov	r1, r6
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	47b8      	blx	r7
 801a6ec:	3001      	adds	r0, #1
 801a6ee:	f43f af54 	beq.w	801a59a <_printf_float+0xba>
 801a6f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a6f6:	429a      	cmp	r2, r3
 801a6f8:	db02      	blt.n	801a700 <_printf_float+0x220>
 801a6fa:	6823      	ldr	r3, [r4, #0]
 801a6fc:	07d8      	lsls	r0, r3, #31
 801a6fe:	d50f      	bpl.n	801a720 <_printf_float+0x240>
 801a700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a704:	4631      	mov	r1, r6
 801a706:	4628      	mov	r0, r5
 801a708:	47b8      	blx	r7
 801a70a:	3001      	adds	r0, #1
 801a70c:	f43f af45 	beq.w	801a59a <_printf_float+0xba>
 801a710:	f04f 0800 	mov.w	r8, #0
 801a714:	f104 091a 	add.w	r9, r4, #26
 801a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a71a:	3b01      	subs	r3, #1
 801a71c:	4543      	cmp	r3, r8
 801a71e:	dc09      	bgt.n	801a734 <_printf_float+0x254>
 801a720:	6823      	ldr	r3, [r4, #0]
 801a722:	079b      	lsls	r3, r3, #30
 801a724:	f100 8103 	bmi.w	801a92e <_printf_float+0x44e>
 801a728:	68e0      	ldr	r0, [r4, #12]
 801a72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a72c:	4298      	cmp	r0, r3
 801a72e:	bfb8      	it	lt
 801a730:	4618      	movlt	r0, r3
 801a732:	e734      	b.n	801a59e <_printf_float+0xbe>
 801a734:	2301      	movs	r3, #1
 801a736:	464a      	mov	r2, r9
 801a738:	4631      	mov	r1, r6
 801a73a:	4628      	mov	r0, r5
 801a73c:	47b8      	blx	r7
 801a73e:	3001      	adds	r0, #1
 801a740:	f43f af2b 	beq.w	801a59a <_printf_float+0xba>
 801a744:	f108 0801 	add.w	r8, r8, #1
 801a748:	e7e6      	b.n	801a718 <_printf_float+0x238>
 801a74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	dc2b      	bgt.n	801a7a8 <_printf_float+0x2c8>
 801a750:	2301      	movs	r3, #1
 801a752:	4a26      	ldr	r2, [pc, #152]	; (801a7ec <_printf_float+0x30c>)
 801a754:	4631      	mov	r1, r6
 801a756:	4628      	mov	r0, r5
 801a758:	47b8      	blx	r7
 801a75a:	3001      	adds	r0, #1
 801a75c:	f43f af1d 	beq.w	801a59a <_printf_float+0xba>
 801a760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a762:	b923      	cbnz	r3, 801a76e <_printf_float+0x28e>
 801a764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a766:	b913      	cbnz	r3, 801a76e <_printf_float+0x28e>
 801a768:	6823      	ldr	r3, [r4, #0]
 801a76a:	07d9      	lsls	r1, r3, #31
 801a76c:	d5d8      	bpl.n	801a720 <_printf_float+0x240>
 801a76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a772:	4631      	mov	r1, r6
 801a774:	4628      	mov	r0, r5
 801a776:	47b8      	blx	r7
 801a778:	3001      	adds	r0, #1
 801a77a:	f43f af0e 	beq.w	801a59a <_printf_float+0xba>
 801a77e:	f04f 0900 	mov.w	r9, #0
 801a782:	f104 0a1a 	add.w	sl, r4, #26
 801a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a788:	425b      	negs	r3, r3
 801a78a:	454b      	cmp	r3, r9
 801a78c:	dc01      	bgt.n	801a792 <_printf_float+0x2b2>
 801a78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a790:	e794      	b.n	801a6bc <_printf_float+0x1dc>
 801a792:	2301      	movs	r3, #1
 801a794:	4652      	mov	r2, sl
 801a796:	4631      	mov	r1, r6
 801a798:	4628      	mov	r0, r5
 801a79a:	47b8      	blx	r7
 801a79c:	3001      	adds	r0, #1
 801a79e:	f43f aefc 	beq.w	801a59a <_printf_float+0xba>
 801a7a2:	f109 0901 	add.w	r9, r9, #1
 801a7a6:	e7ee      	b.n	801a786 <_printf_float+0x2a6>
 801a7a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a7ac:	429a      	cmp	r2, r3
 801a7ae:	bfa8      	it	ge
 801a7b0:	461a      	movge	r2, r3
 801a7b2:	2a00      	cmp	r2, #0
 801a7b4:	4691      	mov	r9, r2
 801a7b6:	dd07      	ble.n	801a7c8 <_printf_float+0x2e8>
 801a7b8:	4613      	mov	r3, r2
 801a7ba:	4631      	mov	r1, r6
 801a7bc:	4642      	mov	r2, r8
 801a7be:	4628      	mov	r0, r5
 801a7c0:	47b8      	blx	r7
 801a7c2:	3001      	adds	r0, #1
 801a7c4:	f43f aee9 	beq.w	801a59a <_printf_float+0xba>
 801a7c8:	f104 031a 	add.w	r3, r4, #26
 801a7cc:	f04f 0b00 	mov.w	fp, #0
 801a7d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a7d4:	9306      	str	r3, [sp, #24]
 801a7d6:	e015      	b.n	801a804 <_printf_float+0x324>
 801a7d8:	7fefffff 	.word	0x7fefffff
 801a7dc:	0801f042 	.word	0x0801f042
 801a7e0:	0801f03e 	.word	0x0801f03e
 801a7e4:	0801f04a 	.word	0x0801f04a
 801a7e8:	0801f046 	.word	0x0801f046
 801a7ec:	0801f04e 	.word	0x0801f04e
 801a7f0:	2301      	movs	r3, #1
 801a7f2:	9a06      	ldr	r2, [sp, #24]
 801a7f4:	4631      	mov	r1, r6
 801a7f6:	4628      	mov	r0, r5
 801a7f8:	47b8      	blx	r7
 801a7fa:	3001      	adds	r0, #1
 801a7fc:	f43f aecd 	beq.w	801a59a <_printf_float+0xba>
 801a800:	f10b 0b01 	add.w	fp, fp, #1
 801a804:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801a808:	ebaa 0309 	sub.w	r3, sl, r9
 801a80c:	455b      	cmp	r3, fp
 801a80e:	dcef      	bgt.n	801a7f0 <_printf_float+0x310>
 801a810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a814:	429a      	cmp	r2, r3
 801a816:	44d0      	add	r8, sl
 801a818:	db15      	blt.n	801a846 <_printf_float+0x366>
 801a81a:	6823      	ldr	r3, [r4, #0]
 801a81c:	07da      	lsls	r2, r3, #31
 801a81e:	d412      	bmi.n	801a846 <_printf_float+0x366>
 801a820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a822:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a824:	eba3 020a 	sub.w	r2, r3, sl
 801a828:	eba3 0a01 	sub.w	sl, r3, r1
 801a82c:	4592      	cmp	sl, r2
 801a82e:	bfa8      	it	ge
 801a830:	4692      	movge	sl, r2
 801a832:	f1ba 0f00 	cmp.w	sl, #0
 801a836:	dc0e      	bgt.n	801a856 <_printf_float+0x376>
 801a838:	f04f 0800 	mov.w	r8, #0
 801a83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a840:	f104 091a 	add.w	r9, r4, #26
 801a844:	e019      	b.n	801a87a <_printf_float+0x39a>
 801a846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a84a:	4631      	mov	r1, r6
 801a84c:	4628      	mov	r0, r5
 801a84e:	47b8      	blx	r7
 801a850:	3001      	adds	r0, #1
 801a852:	d1e5      	bne.n	801a820 <_printf_float+0x340>
 801a854:	e6a1      	b.n	801a59a <_printf_float+0xba>
 801a856:	4653      	mov	r3, sl
 801a858:	4642      	mov	r2, r8
 801a85a:	4631      	mov	r1, r6
 801a85c:	4628      	mov	r0, r5
 801a85e:	47b8      	blx	r7
 801a860:	3001      	adds	r0, #1
 801a862:	d1e9      	bne.n	801a838 <_printf_float+0x358>
 801a864:	e699      	b.n	801a59a <_printf_float+0xba>
 801a866:	2301      	movs	r3, #1
 801a868:	464a      	mov	r2, r9
 801a86a:	4631      	mov	r1, r6
 801a86c:	4628      	mov	r0, r5
 801a86e:	47b8      	blx	r7
 801a870:	3001      	adds	r0, #1
 801a872:	f43f ae92 	beq.w	801a59a <_printf_float+0xba>
 801a876:	f108 0801 	add.w	r8, r8, #1
 801a87a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a87e:	1a9b      	subs	r3, r3, r2
 801a880:	eba3 030a 	sub.w	r3, r3, sl
 801a884:	4543      	cmp	r3, r8
 801a886:	dcee      	bgt.n	801a866 <_printf_float+0x386>
 801a888:	e74a      	b.n	801a720 <_printf_float+0x240>
 801a88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a88c:	2a01      	cmp	r2, #1
 801a88e:	dc01      	bgt.n	801a894 <_printf_float+0x3b4>
 801a890:	07db      	lsls	r3, r3, #31
 801a892:	d53a      	bpl.n	801a90a <_printf_float+0x42a>
 801a894:	2301      	movs	r3, #1
 801a896:	4642      	mov	r2, r8
 801a898:	4631      	mov	r1, r6
 801a89a:	4628      	mov	r0, r5
 801a89c:	47b8      	blx	r7
 801a89e:	3001      	adds	r0, #1
 801a8a0:	f43f ae7b 	beq.w	801a59a <_printf_float+0xba>
 801a8a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8a8:	4631      	mov	r1, r6
 801a8aa:	4628      	mov	r0, r5
 801a8ac:	47b8      	blx	r7
 801a8ae:	3001      	adds	r0, #1
 801a8b0:	f108 0801 	add.w	r8, r8, #1
 801a8b4:	f43f ae71 	beq.w	801a59a <_printf_float+0xba>
 801a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	f103 3aff 	add.w	sl, r3, #4294967295
 801a8c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	f7e6 f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8ca:	b9c8      	cbnz	r0, 801a900 <_printf_float+0x420>
 801a8cc:	4653      	mov	r3, sl
 801a8ce:	4642      	mov	r2, r8
 801a8d0:	4631      	mov	r1, r6
 801a8d2:	4628      	mov	r0, r5
 801a8d4:	47b8      	blx	r7
 801a8d6:	3001      	adds	r0, #1
 801a8d8:	d10e      	bne.n	801a8f8 <_printf_float+0x418>
 801a8da:	e65e      	b.n	801a59a <_printf_float+0xba>
 801a8dc:	2301      	movs	r3, #1
 801a8de:	4652      	mov	r2, sl
 801a8e0:	4631      	mov	r1, r6
 801a8e2:	4628      	mov	r0, r5
 801a8e4:	47b8      	blx	r7
 801a8e6:	3001      	adds	r0, #1
 801a8e8:	f43f ae57 	beq.w	801a59a <_printf_float+0xba>
 801a8ec:	f108 0801 	add.w	r8, r8, #1
 801a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8f2:	3b01      	subs	r3, #1
 801a8f4:	4543      	cmp	r3, r8
 801a8f6:	dcf1      	bgt.n	801a8dc <_printf_float+0x3fc>
 801a8f8:	464b      	mov	r3, r9
 801a8fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a8fe:	e6de      	b.n	801a6be <_printf_float+0x1de>
 801a900:	f04f 0800 	mov.w	r8, #0
 801a904:	f104 0a1a 	add.w	sl, r4, #26
 801a908:	e7f2      	b.n	801a8f0 <_printf_float+0x410>
 801a90a:	2301      	movs	r3, #1
 801a90c:	e7df      	b.n	801a8ce <_printf_float+0x3ee>
 801a90e:	2301      	movs	r3, #1
 801a910:	464a      	mov	r2, r9
 801a912:	4631      	mov	r1, r6
 801a914:	4628      	mov	r0, r5
 801a916:	47b8      	blx	r7
 801a918:	3001      	adds	r0, #1
 801a91a:	f43f ae3e 	beq.w	801a59a <_printf_float+0xba>
 801a91e:	f108 0801 	add.w	r8, r8, #1
 801a922:	68e3      	ldr	r3, [r4, #12]
 801a924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a926:	1a9b      	subs	r3, r3, r2
 801a928:	4543      	cmp	r3, r8
 801a92a:	dcf0      	bgt.n	801a90e <_printf_float+0x42e>
 801a92c:	e6fc      	b.n	801a728 <_printf_float+0x248>
 801a92e:	f04f 0800 	mov.w	r8, #0
 801a932:	f104 0919 	add.w	r9, r4, #25
 801a936:	e7f4      	b.n	801a922 <_printf_float+0x442>
 801a938:	2900      	cmp	r1, #0
 801a93a:	f43f ae8b 	beq.w	801a654 <_printf_float+0x174>
 801a93e:	2300      	movs	r3, #0
 801a940:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801a944:	ab09      	add	r3, sp, #36	; 0x24
 801a946:	9300      	str	r3, [sp, #0]
 801a948:	ec49 8b10 	vmov	d0, r8, r9
 801a94c:	6022      	str	r2, [r4, #0]
 801a94e:	f8cd a004 	str.w	sl, [sp, #4]
 801a952:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a956:	4628      	mov	r0, r5
 801a958:	f7ff fd2e 	bl	801a3b8 <__cvt>
 801a95c:	4680      	mov	r8, r0
 801a95e:	e648      	b.n	801a5f2 <_printf_float+0x112>

0801a960 <_printf_common>:
 801a960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a964:	4691      	mov	r9, r2
 801a966:	461f      	mov	r7, r3
 801a968:	688a      	ldr	r2, [r1, #8]
 801a96a:	690b      	ldr	r3, [r1, #16]
 801a96c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a970:	4293      	cmp	r3, r2
 801a972:	bfb8      	it	lt
 801a974:	4613      	movlt	r3, r2
 801a976:	f8c9 3000 	str.w	r3, [r9]
 801a97a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a97e:	4606      	mov	r6, r0
 801a980:	460c      	mov	r4, r1
 801a982:	b112      	cbz	r2, 801a98a <_printf_common+0x2a>
 801a984:	3301      	adds	r3, #1
 801a986:	f8c9 3000 	str.w	r3, [r9]
 801a98a:	6823      	ldr	r3, [r4, #0]
 801a98c:	0699      	lsls	r1, r3, #26
 801a98e:	bf42      	ittt	mi
 801a990:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a994:	3302      	addmi	r3, #2
 801a996:	f8c9 3000 	strmi.w	r3, [r9]
 801a99a:	6825      	ldr	r5, [r4, #0]
 801a99c:	f015 0506 	ands.w	r5, r5, #6
 801a9a0:	d107      	bne.n	801a9b2 <_printf_common+0x52>
 801a9a2:	f104 0a19 	add.w	sl, r4, #25
 801a9a6:	68e3      	ldr	r3, [r4, #12]
 801a9a8:	f8d9 2000 	ldr.w	r2, [r9]
 801a9ac:	1a9b      	subs	r3, r3, r2
 801a9ae:	42ab      	cmp	r3, r5
 801a9b0:	dc28      	bgt.n	801aa04 <_printf_common+0xa4>
 801a9b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a9b6:	6822      	ldr	r2, [r4, #0]
 801a9b8:	3300      	adds	r3, #0
 801a9ba:	bf18      	it	ne
 801a9bc:	2301      	movne	r3, #1
 801a9be:	0692      	lsls	r2, r2, #26
 801a9c0:	d42d      	bmi.n	801aa1e <_printf_common+0xbe>
 801a9c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9c6:	4639      	mov	r1, r7
 801a9c8:	4630      	mov	r0, r6
 801a9ca:	47c0      	blx	r8
 801a9cc:	3001      	adds	r0, #1
 801a9ce:	d020      	beq.n	801aa12 <_printf_common+0xb2>
 801a9d0:	6823      	ldr	r3, [r4, #0]
 801a9d2:	68e5      	ldr	r5, [r4, #12]
 801a9d4:	f8d9 2000 	ldr.w	r2, [r9]
 801a9d8:	f003 0306 	and.w	r3, r3, #6
 801a9dc:	2b04      	cmp	r3, #4
 801a9de:	bf08      	it	eq
 801a9e0:	1aad      	subeq	r5, r5, r2
 801a9e2:	68a3      	ldr	r3, [r4, #8]
 801a9e4:	6922      	ldr	r2, [r4, #16]
 801a9e6:	bf0c      	ite	eq
 801a9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9ec:	2500      	movne	r5, #0
 801a9ee:	4293      	cmp	r3, r2
 801a9f0:	bfc4      	itt	gt
 801a9f2:	1a9b      	subgt	r3, r3, r2
 801a9f4:	18ed      	addgt	r5, r5, r3
 801a9f6:	f04f 0900 	mov.w	r9, #0
 801a9fa:	341a      	adds	r4, #26
 801a9fc:	454d      	cmp	r5, r9
 801a9fe:	d11a      	bne.n	801aa36 <_printf_common+0xd6>
 801aa00:	2000      	movs	r0, #0
 801aa02:	e008      	b.n	801aa16 <_printf_common+0xb6>
 801aa04:	2301      	movs	r3, #1
 801aa06:	4652      	mov	r2, sl
 801aa08:	4639      	mov	r1, r7
 801aa0a:	4630      	mov	r0, r6
 801aa0c:	47c0      	blx	r8
 801aa0e:	3001      	adds	r0, #1
 801aa10:	d103      	bne.n	801aa1a <_printf_common+0xba>
 801aa12:	f04f 30ff 	mov.w	r0, #4294967295
 801aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa1a:	3501      	adds	r5, #1
 801aa1c:	e7c3      	b.n	801a9a6 <_printf_common+0x46>
 801aa1e:	18e1      	adds	r1, r4, r3
 801aa20:	1c5a      	adds	r2, r3, #1
 801aa22:	2030      	movs	r0, #48	; 0x30
 801aa24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa28:	4422      	add	r2, r4
 801aa2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa32:	3302      	adds	r3, #2
 801aa34:	e7c5      	b.n	801a9c2 <_printf_common+0x62>
 801aa36:	2301      	movs	r3, #1
 801aa38:	4622      	mov	r2, r4
 801aa3a:	4639      	mov	r1, r7
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	47c0      	blx	r8
 801aa40:	3001      	adds	r0, #1
 801aa42:	d0e6      	beq.n	801aa12 <_printf_common+0xb2>
 801aa44:	f109 0901 	add.w	r9, r9, #1
 801aa48:	e7d8      	b.n	801a9fc <_printf_common+0x9c>
	...

0801aa4c <_printf_i>:
 801aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801aa54:	460c      	mov	r4, r1
 801aa56:	7e09      	ldrb	r1, [r1, #24]
 801aa58:	b085      	sub	sp, #20
 801aa5a:	296e      	cmp	r1, #110	; 0x6e
 801aa5c:	4617      	mov	r7, r2
 801aa5e:	4606      	mov	r6, r0
 801aa60:	4698      	mov	r8, r3
 801aa62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa64:	f000 80b3 	beq.w	801abce <_printf_i+0x182>
 801aa68:	d822      	bhi.n	801aab0 <_printf_i+0x64>
 801aa6a:	2963      	cmp	r1, #99	; 0x63
 801aa6c:	d036      	beq.n	801aadc <_printf_i+0x90>
 801aa6e:	d80a      	bhi.n	801aa86 <_printf_i+0x3a>
 801aa70:	2900      	cmp	r1, #0
 801aa72:	f000 80b9 	beq.w	801abe8 <_printf_i+0x19c>
 801aa76:	2958      	cmp	r1, #88	; 0x58
 801aa78:	f000 8083 	beq.w	801ab82 <_printf_i+0x136>
 801aa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801aa84:	e032      	b.n	801aaec <_printf_i+0xa0>
 801aa86:	2964      	cmp	r1, #100	; 0x64
 801aa88:	d001      	beq.n	801aa8e <_printf_i+0x42>
 801aa8a:	2969      	cmp	r1, #105	; 0x69
 801aa8c:	d1f6      	bne.n	801aa7c <_printf_i+0x30>
 801aa8e:	6820      	ldr	r0, [r4, #0]
 801aa90:	6813      	ldr	r3, [r2, #0]
 801aa92:	0605      	lsls	r5, r0, #24
 801aa94:	f103 0104 	add.w	r1, r3, #4
 801aa98:	d52a      	bpl.n	801aaf0 <_printf_i+0xa4>
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	6011      	str	r1, [r2, #0]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	da03      	bge.n	801aaaa <_printf_i+0x5e>
 801aaa2:	222d      	movs	r2, #45	; 0x2d
 801aaa4:	425b      	negs	r3, r3
 801aaa6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801aaaa:	486f      	ldr	r0, [pc, #444]	; (801ac68 <_printf_i+0x21c>)
 801aaac:	220a      	movs	r2, #10
 801aaae:	e039      	b.n	801ab24 <_printf_i+0xd8>
 801aab0:	2973      	cmp	r1, #115	; 0x73
 801aab2:	f000 809d 	beq.w	801abf0 <_printf_i+0x1a4>
 801aab6:	d808      	bhi.n	801aaca <_printf_i+0x7e>
 801aab8:	296f      	cmp	r1, #111	; 0x6f
 801aaba:	d020      	beq.n	801aafe <_printf_i+0xb2>
 801aabc:	2970      	cmp	r1, #112	; 0x70
 801aabe:	d1dd      	bne.n	801aa7c <_printf_i+0x30>
 801aac0:	6823      	ldr	r3, [r4, #0]
 801aac2:	f043 0320 	orr.w	r3, r3, #32
 801aac6:	6023      	str	r3, [r4, #0]
 801aac8:	e003      	b.n	801aad2 <_printf_i+0x86>
 801aaca:	2975      	cmp	r1, #117	; 0x75
 801aacc:	d017      	beq.n	801aafe <_printf_i+0xb2>
 801aace:	2978      	cmp	r1, #120	; 0x78
 801aad0:	d1d4      	bne.n	801aa7c <_printf_i+0x30>
 801aad2:	2378      	movs	r3, #120	; 0x78
 801aad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aad8:	4864      	ldr	r0, [pc, #400]	; (801ac6c <_printf_i+0x220>)
 801aada:	e055      	b.n	801ab88 <_printf_i+0x13c>
 801aadc:	6813      	ldr	r3, [r2, #0]
 801aade:	1d19      	adds	r1, r3, #4
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	6011      	str	r1, [r2, #0]
 801aae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aaec:	2301      	movs	r3, #1
 801aaee:	e08c      	b.n	801ac0a <_printf_i+0x1be>
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	6011      	str	r1, [r2, #0]
 801aaf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aaf8:	bf18      	it	ne
 801aafa:	b21b      	sxthne	r3, r3
 801aafc:	e7cf      	b.n	801aa9e <_printf_i+0x52>
 801aafe:	6813      	ldr	r3, [r2, #0]
 801ab00:	6825      	ldr	r5, [r4, #0]
 801ab02:	1d18      	adds	r0, r3, #4
 801ab04:	6010      	str	r0, [r2, #0]
 801ab06:	0628      	lsls	r0, r5, #24
 801ab08:	d501      	bpl.n	801ab0e <_printf_i+0xc2>
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	e002      	b.n	801ab14 <_printf_i+0xc8>
 801ab0e:	0668      	lsls	r0, r5, #25
 801ab10:	d5fb      	bpl.n	801ab0a <_printf_i+0xbe>
 801ab12:	881b      	ldrh	r3, [r3, #0]
 801ab14:	4854      	ldr	r0, [pc, #336]	; (801ac68 <_printf_i+0x21c>)
 801ab16:	296f      	cmp	r1, #111	; 0x6f
 801ab18:	bf14      	ite	ne
 801ab1a:	220a      	movne	r2, #10
 801ab1c:	2208      	moveq	r2, #8
 801ab1e:	2100      	movs	r1, #0
 801ab20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab24:	6865      	ldr	r5, [r4, #4]
 801ab26:	60a5      	str	r5, [r4, #8]
 801ab28:	2d00      	cmp	r5, #0
 801ab2a:	f2c0 8095 	blt.w	801ac58 <_printf_i+0x20c>
 801ab2e:	6821      	ldr	r1, [r4, #0]
 801ab30:	f021 0104 	bic.w	r1, r1, #4
 801ab34:	6021      	str	r1, [r4, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d13d      	bne.n	801abb6 <_printf_i+0x16a>
 801ab3a:	2d00      	cmp	r5, #0
 801ab3c:	f040 808e 	bne.w	801ac5c <_printf_i+0x210>
 801ab40:	4665      	mov	r5, ip
 801ab42:	2a08      	cmp	r2, #8
 801ab44:	d10b      	bne.n	801ab5e <_printf_i+0x112>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	07db      	lsls	r3, r3, #31
 801ab4a:	d508      	bpl.n	801ab5e <_printf_i+0x112>
 801ab4c:	6923      	ldr	r3, [r4, #16]
 801ab4e:	6862      	ldr	r2, [r4, #4]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	bfde      	ittt	le
 801ab54:	2330      	movle	r3, #48	; 0x30
 801ab56:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ab5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ab5e:	ebac 0305 	sub.w	r3, ip, r5
 801ab62:	6123      	str	r3, [r4, #16]
 801ab64:	f8cd 8000 	str.w	r8, [sp]
 801ab68:	463b      	mov	r3, r7
 801ab6a:	aa03      	add	r2, sp, #12
 801ab6c:	4621      	mov	r1, r4
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f7ff fef6 	bl	801a960 <_printf_common>
 801ab74:	3001      	adds	r0, #1
 801ab76:	d14d      	bne.n	801ac14 <_printf_i+0x1c8>
 801ab78:	f04f 30ff 	mov.w	r0, #4294967295
 801ab7c:	b005      	add	sp, #20
 801ab7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab82:	4839      	ldr	r0, [pc, #228]	; (801ac68 <_printf_i+0x21c>)
 801ab84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ab88:	6813      	ldr	r3, [r2, #0]
 801ab8a:	6821      	ldr	r1, [r4, #0]
 801ab8c:	1d1d      	adds	r5, r3, #4
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	6015      	str	r5, [r2, #0]
 801ab92:	060a      	lsls	r2, r1, #24
 801ab94:	d50b      	bpl.n	801abae <_printf_i+0x162>
 801ab96:	07ca      	lsls	r2, r1, #31
 801ab98:	bf44      	itt	mi
 801ab9a:	f041 0120 	orrmi.w	r1, r1, #32
 801ab9e:	6021      	strmi	r1, [r4, #0]
 801aba0:	b91b      	cbnz	r3, 801abaa <_printf_i+0x15e>
 801aba2:	6822      	ldr	r2, [r4, #0]
 801aba4:	f022 0220 	bic.w	r2, r2, #32
 801aba8:	6022      	str	r2, [r4, #0]
 801abaa:	2210      	movs	r2, #16
 801abac:	e7b7      	b.n	801ab1e <_printf_i+0xd2>
 801abae:	064d      	lsls	r5, r1, #25
 801abb0:	bf48      	it	mi
 801abb2:	b29b      	uxthmi	r3, r3
 801abb4:	e7ef      	b.n	801ab96 <_printf_i+0x14a>
 801abb6:	4665      	mov	r5, ip
 801abb8:	fbb3 f1f2 	udiv	r1, r3, r2
 801abbc:	fb02 3311 	mls	r3, r2, r1, r3
 801abc0:	5cc3      	ldrb	r3, [r0, r3]
 801abc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801abc6:	460b      	mov	r3, r1
 801abc8:	2900      	cmp	r1, #0
 801abca:	d1f5      	bne.n	801abb8 <_printf_i+0x16c>
 801abcc:	e7b9      	b.n	801ab42 <_printf_i+0xf6>
 801abce:	6813      	ldr	r3, [r2, #0]
 801abd0:	6825      	ldr	r5, [r4, #0]
 801abd2:	6961      	ldr	r1, [r4, #20]
 801abd4:	1d18      	adds	r0, r3, #4
 801abd6:	6010      	str	r0, [r2, #0]
 801abd8:	0628      	lsls	r0, r5, #24
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	d501      	bpl.n	801abe2 <_printf_i+0x196>
 801abde:	6019      	str	r1, [r3, #0]
 801abe0:	e002      	b.n	801abe8 <_printf_i+0x19c>
 801abe2:	066a      	lsls	r2, r5, #25
 801abe4:	d5fb      	bpl.n	801abde <_printf_i+0x192>
 801abe6:	8019      	strh	r1, [r3, #0]
 801abe8:	2300      	movs	r3, #0
 801abea:	6123      	str	r3, [r4, #16]
 801abec:	4665      	mov	r5, ip
 801abee:	e7b9      	b.n	801ab64 <_printf_i+0x118>
 801abf0:	6813      	ldr	r3, [r2, #0]
 801abf2:	1d19      	adds	r1, r3, #4
 801abf4:	6011      	str	r1, [r2, #0]
 801abf6:	681d      	ldr	r5, [r3, #0]
 801abf8:	6862      	ldr	r2, [r4, #4]
 801abfa:	2100      	movs	r1, #0
 801abfc:	4628      	mov	r0, r5
 801abfe:	f7e5 faef 	bl	80001e0 <memchr>
 801ac02:	b108      	cbz	r0, 801ac08 <_printf_i+0x1bc>
 801ac04:	1b40      	subs	r0, r0, r5
 801ac06:	6060      	str	r0, [r4, #4]
 801ac08:	6863      	ldr	r3, [r4, #4]
 801ac0a:	6123      	str	r3, [r4, #16]
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac12:	e7a7      	b.n	801ab64 <_printf_i+0x118>
 801ac14:	6923      	ldr	r3, [r4, #16]
 801ac16:	462a      	mov	r2, r5
 801ac18:	4639      	mov	r1, r7
 801ac1a:	4630      	mov	r0, r6
 801ac1c:	47c0      	blx	r8
 801ac1e:	3001      	adds	r0, #1
 801ac20:	d0aa      	beq.n	801ab78 <_printf_i+0x12c>
 801ac22:	6823      	ldr	r3, [r4, #0]
 801ac24:	079b      	lsls	r3, r3, #30
 801ac26:	d413      	bmi.n	801ac50 <_printf_i+0x204>
 801ac28:	68e0      	ldr	r0, [r4, #12]
 801ac2a:	9b03      	ldr	r3, [sp, #12]
 801ac2c:	4298      	cmp	r0, r3
 801ac2e:	bfb8      	it	lt
 801ac30:	4618      	movlt	r0, r3
 801ac32:	e7a3      	b.n	801ab7c <_printf_i+0x130>
 801ac34:	2301      	movs	r3, #1
 801ac36:	464a      	mov	r2, r9
 801ac38:	4639      	mov	r1, r7
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	47c0      	blx	r8
 801ac3e:	3001      	adds	r0, #1
 801ac40:	d09a      	beq.n	801ab78 <_printf_i+0x12c>
 801ac42:	3501      	adds	r5, #1
 801ac44:	68e3      	ldr	r3, [r4, #12]
 801ac46:	9a03      	ldr	r2, [sp, #12]
 801ac48:	1a9b      	subs	r3, r3, r2
 801ac4a:	42ab      	cmp	r3, r5
 801ac4c:	dcf2      	bgt.n	801ac34 <_printf_i+0x1e8>
 801ac4e:	e7eb      	b.n	801ac28 <_printf_i+0x1dc>
 801ac50:	2500      	movs	r5, #0
 801ac52:	f104 0919 	add.w	r9, r4, #25
 801ac56:	e7f5      	b.n	801ac44 <_printf_i+0x1f8>
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d1ac      	bne.n	801abb6 <_printf_i+0x16a>
 801ac5c:	7803      	ldrb	r3, [r0, #0]
 801ac5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac66:	e76c      	b.n	801ab42 <_printf_i+0xf6>
 801ac68:	0801f050 	.word	0x0801f050
 801ac6c:	0801f061 	.word	0x0801f061

0801ac70 <_sbrk_r>:
 801ac70:	b538      	push	{r3, r4, r5, lr}
 801ac72:	4c06      	ldr	r4, [pc, #24]	; (801ac8c <_sbrk_r+0x1c>)
 801ac74:	2300      	movs	r3, #0
 801ac76:	4605      	mov	r5, r0
 801ac78:	4608      	mov	r0, r1
 801ac7a:	6023      	str	r3, [r4, #0]
 801ac7c:	f7f0 fc7e 	bl	800b57c <_sbrk>
 801ac80:	1c43      	adds	r3, r0, #1
 801ac82:	d102      	bne.n	801ac8a <_sbrk_r+0x1a>
 801ac84:	6823      	ldr	r3, [r4, #0]
 801ac86:	b103      	cbz	r3, 801ac8a <_sbrk_r+0x1a>
 801ac88:	602b      	str	r3, [r5, #0]
 801ac8a:	bd38      	pop	{r3, r4, r5, pc}
 801ac8c:	200043ac 	.word	0x200043ac

0801ac90 <siprintf>:
 801ac90:	b40e      	push	{r1, r2, r3}
 801ac92:	b500      	push	{lr}
 801ac94:	b09c      	sub	sp, #112	; 0x70
 801ac96:	ab1d      	add	r3, sp, #116	; 0x74
 801ac98:	9002      	str	r0, [sp, #8]
 801ac9a:	9006      	str	r0, [sp, #24]
 801ac9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aca0:	4809      	ldr	r0, [pc, #36]	; (801acc8 <siprintf+0x38>)
 801aca2:	9107      	str	r1, [sp, #28]
 801aca4:	9104      	str	r1, [sp, #16]
 801aca6:	4909      	ldr	r1, [pc, #36]	; (801accc <siprintf+0x3c>)
 801aca8:	f853 2b04 	ldr.w	r2, [r3], #4
 801acac:	9105      	str	r1, [sp, #20]
 801acae:	6800      	ldr	r0, [r0, #0]
 801acb0:	9301      	str	r3, [sp, #4]
 801acb2:	a902      	add	r1, sp, #8
 801acb4:	f001 f9b4 	bl	801c020 <_svfiprintf_r>
 801acb8:	9b02      	ldr	r3, [sp, #8]
 801acba:	2200      	movs	r2, #0
 801acbc:	701a      	strb	r2, [r3, #0]
 801acbe:	b01c      	add	sp, #112	; 0x70
 801acc0:	f85d eb04 	ldr.w	lr, [sp], #4
 801acc4:	b003      	add	sp, #12
 801acc6:	4770      	bx	lr
 801acc8:	200001c4 	.word	0x200001c4
 801accc:	ffff0208 	.word	0xffff0208

0801acd0 <__ascii_wctomb>:
 801acd0:	b149      	cbz	r1, 801ace6 <__ascii_wctomb+0x16>
 801acd2:	2aff      	cmp	r2, #255	; 0xff
 801acd4:	bf85      	ittet	hi
 801acd6:	238a      	movhi	r3, #138	; 0x8a
 801acd8:	6003      	strhi	r3, [r0, #0]
 801acda:	700a      	strbls	r2, [r1, #0]
 801acdc:	f04f 30ff 	movhi.w	r0, #4294967295
 801ace0:	bf98      	it	ls
 801ace2:	2001      	movls	r0, #1
 801ace4:	4770      	bx	lr
 801ace6:	4608      	mov	r0, r1
 801ace8:	4770      	bx	lr

0801acea <quorem>:
 801acea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acee:	6903      	ldr	r3, [r0, #16]
 801acf0:	690c      	ldr	r4, [r1, #16]
 801acf2:	42a3      	cmp	r3, r4
 801acf4:	4680      	mov	r8, r0
 801acf6:	f2c0 8082 	blt.w	801adfe <quorem+0x114>
 801acfa:	3c01      	subs	r4, #1
 801acfc:	f101 0714 	add.w	r7, r1, #20
 801ad00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801ad04:	f100 0614 	add.w	r6, r0, #20
 801ad08:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801ad0c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801ad10:	eb06 030c 	add.w	r3, r6, ip
 801ad14:	3501      	adds	r5, #1
 801ad16:	eb07 090c 	add.w	r9, r7, ip
 801ad1a:	9301      	str	r3, [sp, #4]
 801ad1c:	fbb0 f5f5 	udiv	r5, r0, r5
 801ad20:	b395      	cbz	r5, 801ad88 <quorem+0x9e>
 801ad22:	f04f 0a00 	mov.w	sl, #0
 801ad26:	4638      	mov	r0, r7
 801ad28:	46b6      	mov	lr, r6
 801ad2a:	46d3      	mov	fp, sl
 801ad2c:	f850 2b04 	ldr.w	r2, [r0], #4
 801ad30:	b293      	uxth	r3, r2
 801ad32:	fb05 a303 	mla	r3, r5, r3, sl
 801ad36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ad3a:	b29b      	uxth	r3, r3
 801ad3c:	ebab 0303 	sub.w	r3, fp, r3
 801ad40:	0c12      	lsrs	r2, r2, #16
 801ad42:	f8de b000 	ldr.w	fp, [lr]
 801ad46:	fb05 a202 	mla	r2, r5, r2, sl
 801ad4a:	fa13 f38b 	uxtah	r3, r3, fp
 801ad4e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801ad52:	fa1f fb82 	uxth.w	fp, r2
 801ad56:	f8de 2000 	ldr.w	r2, [lr]
 801ad5a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801ad5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad62:	b29b      	uxth	r3, r3
 801ad64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad68:	4581      	cmp	r9, r0
 801ad6a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801ad6e:	f84e 3b04 	str.w	r3, [lr], #4
 801ad72:	d2db      	bcs.n	801ad2c <quorem+0x42>
 801ad74:	f856 300c 	ldr.w	r3, [r6, ip]
 801ad78:	b933      	cbnz	r3, 801ad88 <quorem+0x9e>
 801ad7a:	9b01      	ldr	r3, [sp, #4]
 801ad7c:	3b04      	subs	r3, #4
 801ad7e:	429e      	cmp	r6, r3
 801ad80:	461a      	mov	r2, r3
 801ad82:	d330      	bcc.n	801ade6 <quorem+0xfc>
 801ad84:	f8c8 4010 	str.w	r4, [r8, #16]
 801ad88:	4640      	mov	r0, r8
 801ad8a:	f001 f81b 	bl	801bdc4 <__mcmp>
 801ad8e:	2800      	cmp	r0, #0
 801ad90:	db25      	blt.n	801adde <quorem+0xf4>
 801ad92:	3501      	adds	r5, #1
 801ad94:	4630      	mov	r0, r6
 801ad96:	f04f 0c00 	mov.w	ip, #0
 801ad9a:	f857 2b04 	ldr.w	r2, [r7], #4
 801ad9e:	f8d0 e000 	ldr.w	lr, [r0]
 801ada2:	b293      	uxth	r3, r2
 801ada4:	ebac 0303 	sub.w	r3, ip, r3
 801ada8:	0c12      	lsrs	r2, r2, #16
 801adaa:	fa13 f38e 	uxtah	r3, r3, lr
 801adae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801adb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801adb6:	b29b      	uxth	r3, r3
 801adb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801adbc:	45b9      	cmp	r9, r7
 801adbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801adc2:	f840 3b04 	str.w	r3, [r0], #4
 801adc6:	d2e8      	bcs.n	801ad9a <quorem+0xb0>
 801adc8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801adcc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801add0:	b92a      	cbnz	r2, 801adde <quorem+0xf4>
 801add2:	3b04      	subs	r3, #4
 801add4:	429e      	cmp	r6, r3
 801add6:	461a      	mov	r2, r3
 801add8:	d30b      	bcc.n	801adf2 <quorem+0x108>
 801adda:	f8c8 4010 	str.w	r4, [r8, #16]
 801adde:	4628      	mov	r0, r5
 801ade0:	b003      	add	sp, #12
 801ade2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ade6:	6812      	ldr	r2, [r2, #0]
 801ade8:	3b04      	subs	r3, #4
 801adea:	2a00      	cmp	r2, #0
 801adec:	d1ca      	bne.n	801ad84 <quorem+0x9a>
 801adee:	3c01      	subs	r4, #1
 801adf0:	e7c5      	b.n	801ad7e <quorem+0x94>
 801adf2:	6812      	ldr	r2, [r2, #0]
 801adf4:	3b04      	subs	r3, #4
 801adf6:	2a00      	cmp	r2, #0
 801adf8:	d1ef      	bne.n	801adda <quorem+0xf0>
 801adfa:	3c01      	subs	r4, #1
 801adfc:	e7ea      	b.n	801add4 <quorem+0xea>
 801adfe:	2000      	movs	r0, #0
 801ae00:	e7ee      	b.n	801ade0 <quorem+0xf6>
 801ae02:	0000      	movs	r0, r0
 801ae04:	0000      	movs	r0, r0
	...

0801ae08 <_dtoa_r>:
 801ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae0c:	ec57 6b10 	vmov	r6, r7, d0
 801ae10:	b097      	sub	sp, #92	; 0x5c
 801ae12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ae14:	9106      	str	r1, [sp, #24]
 801ae16:	4604      	mov	r4, r0
 801ae18:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae1a:	9312      	str	r3, [sp, #72]	; 0x48
 801ae1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ae20:	e9cd 6700 	strd	r6, r7, [sp]
 801ae24:	b93d      	cbnz	r5, 801ae36 <_dtoa_r+0x2e>
 801ae26:	2010      	movs	r0, #16
 801ae28:	f7ff f9e8 	bl	801a1fc <malloc>
 801ae2c:	6260      	str	r0, [r4, #36]	; 0x24
 801ae2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ae32:	6005      	str	r5, [r0, #0]
 801ae34:	60c5      	str	r5, [r0, #12]
 801ae36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae38:	6819      	ldr	r1, [r3, #0]
 801ae3a:	b151      	cbz	r1, 801ae52 <_dtoa_r+0x4a>
 801ae3c:	685a      	ldr	r2, [r3, #4]
 801ae3e:	604a      	str	r2, [r1, #4]
 801ae40:	2301      	movs	r3, #1
 801ae42:	4093      	lsls	r3, r2
 801ae44:	608b      	str	r3, [r1, #8]
 801ae46:	4620      	mov	r0, r4
 801ae48:	f000 fdda 	bl	801ba00 <_Bfree>
 801ae4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae4e:	2200      	movs	r2, #0
 801ae50:	601a      	str	r2, [r3, #0]
 801ae52:	1e3b      	subs	r3, r7, #0
 801ae54:	bfbb      	ittet	lt
 801ae56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ae5a:	9301      	strlt	r3, [sp, #4]
 801ae5c:	2300      	movge	r3, #0
 801ae5e:	2201      	movlt	r2, #1
 801ae60:	bfac      	ite	ge
 801ae62:	f8c8 3000 	strge.w	r3, [r8]
 801ae66:	f8c8 2000 	strlt.w	r2, [r8]
 801ae6a:	4baf      	ldr	r3, [pc, #700]	; (801b128 <_dtoa_r+0x320>)
 801ae6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ae70:	ea33 0308 	bics.w	r3, r3, r8
 801ae74:	d114      	bne.n	801aea0 <_dtoa_r+0x98>
 801ae76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae78:	f242 730f 	movw	r3, #9999	; 0x270f
 801ae7c:	6013      	str	r3, [r2, #0]
 801ae7e:	9b00      	ldr	r3, [sp, #0]
 801ae80:	b923      	cbnz	r3, 801ae8c <_dtoa_r+0x84>
 801ae82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801ae86:	2800      	cmp	r0, #0
 801ae88:	f000 8542 	beq.w	801b910 <_dtoa_r+0xb08>
 801ae8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801b13c <_dtoa_r+0x334>
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	f000 8544 	beq.w	801b920 <_dtoa_r+0xb18>
 801ae98:	f10b 0303 	add.w	r3, fp, #3
 801ae9c:	f000 bd3e 	b.w	801b91c <_dtoa_r+0xb14>
 801aea0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801aea4:	2200      	movs	r2, #0
 801aea6:	2300      	movs	r3, #0
 801aea8:	4630      	mov	r0, r6
 801aeaa:	4639      	mov	r1, r7
 801aeac:	f7e5 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 801aeb0:	4681      	mov	r9, r0
 801aeb2:	b168      	cbz	r0, 801aed0 <_dtoa_r+0xc8>
 801aeb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aeb6:	2301      	movs	r3, #1
 801aeb8:	6013      	str	r3, [r2, #0]
 801aeba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	f000 8524 	beq.w	801b90a <_dtoa_r+0xb02>
 801aec2:	4b9a      	ldr	r3, [pc, #616]	; (801b12c <_dtoa_r+0x324>)
 801aec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801aec6:	f103 3bff 	add.w	fp, r3, #4294967295
 801aeca:	6013      	str	r3, [r2, #0]
 801aecc:	f000 bd28 	b.w	801b920 <_dtoa_r+0xb18>
 801aed0:	aa14      	add	r2, sp, #80	; 0x50
 801aed2:	a915      	add	r1, sp, #84	; 0x54
 801aed4:	ec47 6b10 	vmov	d0, r6, r7
 801aed8:	4620      	mov	r0, r4
 801aeda:	f000 ffea 	bl	801beb2 <__d2b>
 801aede:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801aee2:	9004      	str	r0, [sp, #16]
 801aee4:	2d00      	cmp	r5, #0
 801aee6:	d07c      	beq.n	801afe2 <_dtoa_r+0x1da>
 801aee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801aeec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801aef0:	46b2      	mov	sl, r6
 801aef2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801aef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aefa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801aefe:	2200      	movs	r2, #0
 801af00:	4b8b      	ldr	r3, [pc, #556]	; (801b130 <_dtoa_r+0x328>)
 801af02:	4650      	mov	r0, sl
 801af04:	4659      	mov	r1, fp
 801af06:	f7e5 f9bf 	bl	8000288 <__aeabi_dsub>
 801af0a:	a381      	add	r3, pc, #516	; (adr r3, 801b110 <_dtoa_r+0x308>)
 801af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af10:	f7e5 fb72 	bl	80005f8 <__aeabi_dmul>
 801af14:	a380      	add	r3, pc, #512	; (adr r3, 801b118 <_dtoa_r+0x310>)
 801af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1a:	f7e5 f9b7 	bl	800028c <__adddf3>
 801af1e:	4606      	mov	r6, r0
 801af20:	4628      	mov	r0, r5
 801af22:	460f      	mov	r7, r1
 801af24:	f7e5 fafe 	bl	8000524 <__aeabi_i2d>
 801af28:	a37d      	add	r3, pc, #500	; (adr r3, 801b120 <_dtoa_r+0x318>)
 801af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af2e:	f7e5 fb63 	bl	80005f8 <__aeabi_dmul>
 801af32:	4602      	mov	r2, r0
 801af34:	460b      	mov	r3, r1
 801af36:	4630      	mov	r0, r6
 801af38:	4639      	mov	r1, r7
 801af3a:	f7e5 f9a7 	bl	800028c <__adddf3>
 801af3e:	4606      	mov	r6, r0
 801af40:	460f      	mov	r7, r1
 801af42:	f7e5 fe09 	bl	8000b58 <__aeabi_d2iz>
 801af46:	2200      	movs	r2, #0
 801af48:	4682      	mov	sl, r0
 801af4a:	2300      	movs	r3, #0
 801af4c:	4630      	mov	r0, r6
 801af4e:	4639      	mov	r1, r7
 801af50:	f7e5 fdc4 	bl	8000adc <__aeabi_dcmplt>
 801af54:	b148      	cbz	r0, 801af6a <_dtoa_r+0x162>
 801af56:	4650      	mov	r0, sl
 801af58:	f7e5 fae4 	bl	8000524 <__aeabi_i2d>
 801af5c:	4632      	mov	r2, r6
 801af5e:	463b      	mov	r3, r7
 801af60:	f7e5 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 801af64:	b908      	cbnz	r0, 801af6a <_dtoa_r+0x162>
 801af66:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af6a:	f1ba 0f16 	cmp.w	sl, #22
 801af6e:	d859      	bhi.n	801b024 <_dtoa_r+0x21c>
 801af70:	4970      	ldr	r1, [pc, #448]	; (801b134 <_dtoa_r+0x32c>)
 801af72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801af76:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af7e:	f7e5 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 801af82:	2800      	cmp	r0, #0
 801af84:	d050      	beq.n	801b028 <_dtoa_r+0x220>
 801af86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af8a:	2300      	movs	r3, #0
 801af8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801af8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801af90:	1b5d      	subs	r5, r3, r5
 801af92:	f1b5 0801 	subs.w	r8, r5, #1
 801af96:	bf49      	itett	mi
 801af98:	f1c5 0301 	rsbmi	r3, r5, #1
 801af9c:	2300      	movpl	r3, #0
 801af9e:	9305      	strmi	r3, [sp, #20]
 801afa0:	f04f 0800 	movmi.w	r8, #0
 801afa4:	bf58      	it	pl
 801afa6:	9305      	strpl	r3, [sp, #20]
 801afa8:	f1ba 0f00 	cmp.w	sl, #0
 801afac:	db3e      	blt.n	801b02c <_dtoa_r+0x224>
 801afae:	2300      	movs	r3, #0
 801afb0:	44d0      	add	r8, sl
 801afb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801afb6:	9307      	str	r3, [sp, #28]
 801afb8:	9b06      	ldr	r3, [sp, #24]
 801afba:	2b09      	cmp	r3, #9
 801afbc:	f200 8090 	bhi.w	801b0e0 <_dtoa_r+0x2d8>
 801afc0:	2b05      	cmp	r3, #5
 801afc2:	bfc4      	itt	gt
 801afc4:	3b04      	subgt	r3, #4
 801afc6:	9306      	strgt	r3, [sp, #24]
 801afc8:	9b06      	ldr	r3, [sp, #24]
 801afca:	f1a3 0302 	sub.w	r3, r3, #2
 801afce:	bfcc      	ite	gt
 801afd0:	2500      	movgt	r5, #0
 801afd2:	2501      	movle	r5, #1
 801afd4:	2b03      	cmp	r3, #3
 801afd6:	f200 808f 	bhi.w	801b0f8 <_dtoa_r+0x2f0>
 801afda:	e8df f003 	tbb	[pc, r3]
 801afde:	7f7d      	.short	0x7f7d
 801afe0:	7131      	.short	0x7131
 801afe2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801afe6:	441d      	add	r5, r3
 801afe8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801afec:	2820      	cmp	r0, #32
 801afee:	dd13      	ble.n	801b018 <_dtoa_r+0x210>
 801aff0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801aff4:	9b00      	ldr	r3, [sp, #0]
 801aff6:	fa08 f800 	lsl.w	r8, r8, r0
 801affa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801affe:	fa23 f000 	lsr.w	r0, r3, r0
 801b002:	ea48 0000 	orr.w	r0, r8, r0
 801b006:	f7e5 fa7d 	bl	8000504 <__aeabi_ui2d>
 801b00a:	2301      	movs	r3, #1
 801b00c:	4682      	mov	sl, r0
 801b00e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801b012:	3d01      	subs	r5, #1
 801b014:	9313      	str	r3, [sp, #76]	; 0x4c
 801b016:	e772      	b.n	801aefe <_dtoa_r+0xf6>
 801b018:	9b00      	ldr	r3, [sp, #0]
 801b01a:	f1c0 0020 	rsb	r0, r0, #32
 801b01e:	fa03 f000 	lsl.w	r0, r3, r0
 801b022:	e7f0      	b.n	801b006 <_dtoa_r+0x1fe>
 801b024:	2301      	movs	r3, #1
 801b026:	e7b1      	b.n	801af8c <_dtoa_r+0x184>
 801b028:	900f      	str	r0, [sp, #60]	; 0x3c
 801b02a:	e7b0      	b.n	801af8e <_dtoa_r+0x186>
 801b02c:	9b05      	ldr	r3, [sp, #20]
 801b02e:	eba3 030a 	sub.w	r3, r3, sl
 801b032:	9305      	str	r3, [sp, #20]
 801b034:	f1ca 0300 	rsb	r3, sl, #0
 801b038:	9307      	str	r3, [sp, #28]
 801b03a:	2300      	movs	r3, #0
 801b03c:	930e      	str	r3, [sp, #56]	; 0x38
 801b03e:	e7bb      	b.n	801afb8 <_dtoa_r+0x1b0>
 801b040:	2301      	movs	r3, #1
 801b042:	930a      	str	r3, [sp, #40]	; 0x28
 801b044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b046:	2b00      	cmp	r3, #0
 801b048:	dd59      	ble.n	801b0fe <_dtoa_r+0x2f6>
 801b04a:	9302      	str	r3, [sp, #8]
 801b04c:	4699      	mov	r9, r3
 801b04e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b050:	2200      	movs	r2, #0
 801b052:	6072      	str	r2, [r6, #4]
 801b054:	2204      	movs	r2, #4
 801b056:	f102 0014 	add.w	r0, r2, #20
 801b05a:	4298      	cmp	r0, r3
 801b05c:	6871      	ldr	r1, [r6, #4]
 801b05e:	d953      	bls.n	801b108 <_dtoa_r+0x300>
 801b060:	4620      	mov	r0, r4
 801b062:	f000 fc99 	bl	801b998 <_Balloc>
 801b066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b068:	6030      	str	r0, [r6, #0]
 801b06a:	f1b9 0f0e 	cmp.w	r9, #14
 801b06e:	f8d3 b000 	ldr.w	fp, [r3]
 801b072:	f200 80e6 	bhi.w	801b242 <_dtoa_r+0x43a>
 801b076:	2d00      	cmp	r5, #0
 801b078:	f000 80e3 	beq.w	801b242 <_dtoa_r+0x43a>
 801b07c:	ed9d 7b00 	vldr	d7, [sp]
 801b080:	f1ba 0f00 	cmp.w	sl, #0
 801b084:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801b088:	dd74      	ble.n	801b174 <_dtoa_r+0x36c>
 801b08a:	4a2a      	ldr	r2, [pc, #168]	; (801b134 <_dtoa_r+0x32c>)
 801b08c:	f00a 030f 	and.w	r3, sl, #15
 801b090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b094:	ed93 7b00 	vldr	d7, [r3]
 801b098:	ea4f 162a 	mov.w	r6, sl, asr #4
 801b09c:	06f0      	lsls	r0, r6, #27
 801b09e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b0a2:	d565      	bpl.n	801b170 <_dtoa_r+0x368>
 801b0a4:	4b24      	ldr	r3, [pc, #144]	; (801b138 <_dtoa_r+0x330>)
 801b0a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b0aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b0ae:	f7e5 fbcd 	bl	800084c <__aeabi_ddiv>
 801b0b2:	e9cd 0100 	strd	r0, r1, [sp]
 801b0b6:	f006 060f 	and.w	r6, r6, #15
 801b0ba:	2503      	movs	r5, #3
 801b0bc:	4f1e      	ldr	r7, [pc, #120]	; (801b138 <_dtoa_r+0x330>)
 801b0be:	e04c      	b.n	801b15a <_dtoa_r+0x352>
 801b0c0:	2301      	movs	r3, #1
 801b0c2:	930a      	str	r3, [sp, #40]	; 0x28
 801b0c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0c6:	4453      	add	r3, sl
 801b0c8:	f103 0901 	add.w	r9, r3, #1
 801b0cc:	9302      	str	r3, [sp, #8]
 801b0ce:	464b      	mov	r3, r9
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	bfb8      	it	lt
 801b0d4:	2301      	movlt	r3, #1
 801b0d6:	e7ba      	b.n	801b04e <_dtoa_r+0x246>
 801b0d8:	2300      	movs	r3, #0
 801b0da:	e7b2      	b.n	801b042 <_dtoa_r+0x23a>
 801b0dc:	2300      	movs	r3, #0
 801b0de:	e7f0      	b.n	801b0c2 <_dtoa_r+0x2ba>
 801b0e0:	2501      	movs	r5, #1
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	9306      	str	r3, [sp, #24]
 801b0e6:	950a      	str	r5, [sp, #40]	; 0x28
 801b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 801b0ec:	9302      	str	r3, [sp, #8]
 801b0ee:	4699      	mov	r9, r3
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	2312      	movs	r3, #18
 801b0f4:	920b      	str	r2, [sp, #44]	; 0x2c
 801b0f6:	e7aa      	b.n	801b04e <_dtoa_r+0x246>
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	930a      	str	r3, [sp, #40]	; 0x28
 801b0fc:	e7f4      	b.n	801b0e8 <_dtoa_r+0x2e0>
 801b0fe:	2301      	movs	r3, #1
 801b100:	9302      	str	r3, [sp, #8]
 801b102:	4699      	mov	r9, r3
 801b104:	461a      	mov	r2, r3
 801b106:	e7f5      	b.n	801b0f4 <_dtoa_r+0x2ec>
 801b108:	3101      	adds	r1, #1
 801b10a:	6071      	str	r1, [r6, #4]
 801b10c:	0052      	lsls	r2, r2, #1
 801b10e:	e7a2      	b.n	801b056 <_dtoa_r+0x24e>
 801b110:	636f4361 	.word	0x636f4361
 801b114:	3fd287a7 	.word	0x3fd287a7
 801b118:	8b60c8b3 	.word	0x8b60c8b3
 801b11c:	3fc68a28 	.word	0x3fc68a28
 801b120:	509f79fb 	.word	0x509f79fb
 801b124:	3fd34413 	.word	0x3fd34413
 801b128:	7ff00000 	.word	0x7ff00000
 801b12c:	0801f04f 	.word	0x0801f04f
 801b130:	3ff80000 	.word	0x3ff80000
 801b134:	0801f1a8 	.word	0x0801f1a8
 801b138:	0801f180 	.word	0x0801f180
 801b13c:	0801f17c 	.word	0x0801f17c
 801b140:	07f1      	lsls	r1, r6, #31
 801b142:	d508      	bpl.n	801b156 <_dtoa_r+0x34e>
 801b144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b148:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b14c:	f7e5 fa54 	bl	80005f8 <__aeabi_dmul>
 801b150:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b154:	3501      	adds	r5, #1
 801b156:	1076      	asrs	r6, r6, #1
 801b158:	3708      	adds	r7, #8
 801b15a:	2e00      	cmp	r6, #0
 801b15c:	d1f0      	bne.n	801b140 <_dtoa_r+0x338>
 801b15e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b162:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b166:	f7e5 fb71 	bl	800084c <__aeabi_ddiv>
 801b16a:	e9cd 0100 	strd	r0, r1, [sp]
 801b16e:	e01a      	b.n	801b1a6 <_dtoa_r+0x39e>
 801b170:	2502      	movs	r5, #2
 801b172:	e7a3      	b.n	801b0bc <_dtoa_r+0x2b4>
 801b174:	f000 80a0 	beq.w	801b2b8 <_dtoa_r+0x4b0>
 801b178:	f1ca 0600 	rsb	r6, sl, #0
 801b17c:	4b9f      	ldr	r3, [pc, #636]	; (801b3fc <_dtoa_r+0x5f4>)
 801b17e:	4fa0      	ldr	r7, [pc, #640]	; (801b400 <_dtoa_r+0x5f8>)
 801b180:	f006 020f 	and.w	r2, r6, #15
 801b184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b18c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b190:	f7e5 fa32 	bl	80005f8 <__aeabi_dmul>
 801b194:	e9cd 0100 	strd	r0, r1, [sp]
 801b198:	1136      	asrs	r6, r6, #4
 801b19a:	2300      	movs	r3, #0
 801b19c:	2502      	movs	r5, #2
 801b19e:	2e00      	cmp	r6, #0
 801b1a0:	d17f      	bne.n	801b2a2 <_dtoa_r+0x49a>
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d1e1      	bne.n	801b16a <_dtoa_r+0x362>
 801b1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	f000 8087 	beq.w	801b2bc <_dtoa_r+0x4b4>
 801b1ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	4b93      	ldr	r3, [pc, #588]	; (801b404 <_dtoa_r+0x5fc>)
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	4639      	mov	r1, r7
 801b1ba:	f7e5 fc8f 	bl	8000adc <__aeabi_dcmplt>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d07c      	beq.n	801b2bc <_dtoa_r+0x4b4>
 801b1c2:	f1b9 0f00 	cmp.w	r9, #0
 801b1c6:	d079      	beq.n	801b2bc <_dtoa_r+0x4b4>
 801b1c8:	9b02      	ldr	r3, [sp, #8]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	dd35      	ble.n	801b23a <_dtoa_r+0x432>
 801b1ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b1d2:	9308      	str	r3, [sp, #32]
 801b1d4:	4639      	mov	r1, r7
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	4b8b      	ldr	r3, [pc, #556]	; (801b408 <_dtoa_r+0x600>)
 801b1da:	4630      	mov	r0, r6
 801b1dc:	f7e5 fa0c 	bl	80005f8 <__aeabi_dmul>
 801b1e0:	e9cd 0100 	strd	r0, r1, [sp]
 801b1e4:	9f02      	ldr	r7, [sp, #8]
 801b1e6:	3501      	adds	r5, #1
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	f7e5 f99b 	bl	8000524 <__aeabi_i2d>
 801b1ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b1f2:	f7e5 fa01 	bl	80005f8 <__aeabi_dmul>
 801b1f6:	2200      	movs	r2, #0
 801b1f8:	4b84      	ldr	r3, [pc, #528]	; (801b40c <_dtoa_r+0x604>)
 801b1fa:	f7e5 f847 	bl	800028c <__adddf3>
 801b1fe:	4605      	mov	r5, r0
 801b200:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801b204:	2f00      	cmp	r7, #0
 801b206:	d15d      	bne.n	801b2c4 <_dtoa_r+0x4bc>
 801b208:	2200      	movs	r2, #0
 801b20a:	4b81      	ldr	r3, [pc, #516]	; (801b410 <_dtoa_r+0x608>)
 801b20c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b210:	f7e5 f83a 	bl	8000288 <__aeabi_dsub>
 801b214:	462a      	mov	r2, r5
 801b216:	4633      	mov	r3, r6
 801b218:	e9cd 0100 	strd	r0, r1, [sp]
 801b21c:	f7e5 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 801b220:	2800      	cmp	r0, #0
 801b222:	f040 8288 	bne.w	801b736 <_dtoa_r+0x92e>
 801b226:	462a      	mov	r2, r5
 801b228:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b22c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b230:	f7e5 fc54 	bl	8000adc <__aeabi_dcmplt>
 801b234:	2800      	cmp	r0, #0
 801b236:	f040 827c 	bne.w	801b732 <_dtoa_r+0x92a>
 801b23a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b23e:	e9cd 2300 	strd	r2, r3, [sp]
 801b242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b244:	2b00      	cmp	r3, #0
 801b246:	f2c0 8150 	blt.w	801b4ea <_dtoa_r+0x6e2>
 801b24a:	f1ba 0f0e 	cmp.w	sl, #14
 801b24e:	f300 814c 	bgt.w	801b4ea <_dtoa_r+0x6e2>
 801b252:	4b6a      	ldr	r3, [pc, #424]	; (801b3fc <_dtoa_r+0x5f4>)
 801b254:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b258:	ed93 7b00 	vldr	d7, [r3]
 801b25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b25e:	2b00      	cmp	r3, #0
 801b260:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b264:	f280 80d8 	bge.w	801b418 <_dtoa_r+0x610>
 801b268:	f1b9 0f00 	cmp.w	r9, #0
 801b26c:	f300 80d4 	bgt.w	801b418 <_dtoa_r+0x610>
 801b270:	f040 825e 	bne.w	801b730 <_dtoa_r+0x928>
 801b274:	2200      	movs	r2, #0
 801b276:	4b66      	ldr	r3, [pc, #408]	; (801b410 <_dtoa_r+0x608>)
 801b278:	ec51 0b17 	vmov	r0, r1, d7
 801b27c:	f7e5 f9bc 	bl	80005f8 <__aeabi_dmul>
 801b280:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b284:	f7e5 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 801b288:	464f      	mov	r7, r9
 801b28a:	464e      	mov	r6, r9
 801b28c:	2800      	cmp	r0, #0
 801b28e:	f040 8234 	bne.w	801b6fa <_dtoa_r+0x8f2>
 801b292:	2331      	movs	r3, #49	; 0x31
 801b294:	f10b 0501 	add.w	r5, fp, #1
 801b298:	f88b 3000 	strb.w	r3, [fp]
 801b29c:	f10a 0a01 	add.w	sl, sl, #1
 801b2a0:	e22f      	b.n	801b702 <_dtoa_r+0x8fa>
 801b2a2:	07f2      	lsls	r2, r6, #31
 801b2a4:	d505      	bpl.n	801b2b2 <_dtoa_r+0x4aa>
 801b2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b2aa:	f7e5 f9a5 	bl	80005f8 <__aeabi_dmul>
 801b2ae:	3501      	adds	r5, #1
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	1076      	asrs	r6, r6, #1
 801b2b4:	3708      	adds	r7, #8
 801b2b6:	e772      	b.n	801b19e <_dtoa_r+0x396>
 801b2b8:	2502      	movs	r5, #2
 801b2ba:	e774      	b.n	801b1a6 <_dtoa_r+0x39e>
 801b2bc:	f8cd a020 	str.w	sl, [sp, #32]
 801b2c0:	464f      	mov	r7, r9
 801b2c2:	e791      	b.n	801b1e8 <_dtoa_r+0x3e0>
 801b2c4:	4b4d      	ldr	r3, [pc, #308]	; (801b3fc <_dtoa_r+0x5f4>)
 801b2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b2ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d047      	beq.n	801b364 <_dtoa_r+0x55c>
 801b2d4:	4602      	mov	r2, r0
 801b2d6:	460b      	mov	r3, r1
 801b2d8:	2000      	movs	r0, #0
 801b2da:	494e      	ldr	r1, [pc, #312]	; (801b414 <_dtoa_r+0x60c>)
 801b2dc:	f7e5 fab6 	bl	800084c <__aeabi_ddiv>
 801b2e0:	462a      	mov	r2, r5
 801b2e2:	4633      	mov	r3, r6
 801b2e4:	f7e4 ffd0 	bl	8000288 <__aeabi_dsub>
 801b2e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b2ec:	465d      	mov	r5, fp
 801b2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b2f2:	f7e5 fc31 	bl	8000b58 <__aeabi_d2iz>
 801b2f6:	4606      	mov	r6, r0
 801b2f8:	f7e5 f914 	bl	8000524 <__aeabi_i2d>
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	460b      	mov	r3, r1
 801b300:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b304:	f7e4 ffc0 	bl	8000288 <__aeabi_dsub>
 801b308:	3630      	adds	r6, #48	; 0x30
 801b30a:	f805 6b01 	strb.w	r6, [r5], #1
 801b30e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b312:	e9cd 0100 	strd	r0, r1, [sp]
 801b316:	f7e5 fbe1 	bl	8000adc <__aeabi_dcmplt>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	d163      	bne.n	801b3e6 <_dtoa_r+0x5de>
 801b31e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b322:	2000      	movs	r0, #0
 801b324:	4937      	ldr	r1, [pc, #220]	; (801b404 <_dtoa_r+0x5fc>)
 801b326:	f7e4 ffaf 	bl	8000288 <__aeabi_dsub>
 801b32a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b32e:	f7e5 fbd5 	bl	8000adc <__aeabi_dcmplt>
 801b332:	2800      	cmp	r0, #0
 801b334:	f040 80b7 	bne.w	801b4a6 <_dtoa_r+0x69e>
 801b338:	eba5 030b 	sub.w	r3, r5, fp
 801b33c:	429f      	cmp	r7, r3
 801b33e:	f77f af7c 	ble.w	801b23a <_dtoa_r+0x432>
 801b342:	2200      	movs	r2, #0
 801b344:	4b30      	ldr	r3, [pc, #192]	; (801b408 <_dtoa_r+0x600>)
 801b346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b34a:	f7e5 f955 	bl	80005f8 <__aeabi_dmul>
 801b34e:	2200      	movs	r2, #0
 801b350:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b354:	4b2c      	ldr	r3, [pc, #176]	; (801b408 <_dtoa_r+0x600>)
 801b356:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b35a:	f7e5 f94d 	bl	80005f8 <__aeabi_dmul>
 801b35e:	e9cd 0100 	strd	r0, r1, [sp]
 801b362:	e7c4      	b.n	801b2ee <_dtoa_r+0x4e6>
 801b364:	462a      	mov	r2, r5
 801b366:	4633      	mov	r3, r6
 801b368:	f7e5 f946 	bl	80005f8 <__aeabi_dmul>
 801b36c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b370:	eb0b 0507 	add.w	r5, fp, r7
 801b374:	465e      	mov	r6, fp
 801b376:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b37a:	f7e5 fbed 	bl	8000b58 <__aeabi_d2iz>
 801b37e:	4607      	mov	r7, r0
 801b380:	f7e5 f8d0 	bl	8000524 <__aeabi_i2d>
 801b384:	3730      	adds	r7, #48	; 0x30
 801b386:	4602      	mov	r2, r0
 801b388:	460b      	mov	r3, r1
 801b38a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b38e:	f7e4 ff7b 	bl	8000288 <__aeabi_dsub>
 801b392:	f806 7b01 	strb.w	r7, [r6], #1
 801b396:	42ae      	cmp	r6, r5
 801b398:	e9cd 0100 	strd	r0, r1, [sp]
 801b39c:	f04f 0200 	mov.w	r2, #0
 801b3a0:	d126      	bne.n	801b3f0 <_dtoa_r+0x5e8>
 801b3a2:	4b1c      	ldr	r3, [pc, #112]	; (801b414 <_dtoa_r+0x60c>)
 801b3a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b3a8:	f7e4 ff70 	bl	800028c <__adddf3>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	460b      	mov	r3, r1
 801b3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b3b4:	f7e5 fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 801b3b8:	2800      	cmp	r0, #0
 801b3ba:	d174      	bne.n	801b4a6 <_dtoa_r+0x69e>
 801b3bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b3c0:	2000      	movs	r0, #0
 801b3c2:	4914      	ldr	r1, [pc, #80]	; (801b414 <_dtoa_r+0x60c>)
 801b3c4:	f7e4 ff60 	bl	8000288 <__aeabi_dsub>
 801b3c8:	4602      	mov	r2, r0
 801b3ca:	460b      	mov	r3, r1
 801b3cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b3d0:	f7e5 fb84 	bl	8000adc <__aeabi_dcmplt>
 801b3d4:	2800      	cmp	r0, #0
 801b3d6:	f43f af30 	beq.w	801b23a <_dtoa_r+0x432>
 801b3da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b3de:	2b30      	cmp	r3, #48	; 0x30
 801b3e0:	f105 32ff 	add.w	r2, r5, #4294967295
 801b3e4:	d002      	beq.n	801b3ec <_dtoa_r+0x5e4>
 801b3e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b3ea:	e04a      	b.n	801b482 <_dtoa_r+0x67a>
 801b3ec:	4615      	mov	r5, r2
 801b3ee:	e7f4      	b.n	801b3da <_dtoa_r+0x5d2>
 801b3f0:	4b05      	ldr	r3, [pc, #20]	; (801b408 <_dtoa_r+0x600>)
 801b3f2:	f7e5 f901 	bl	80005f8 <__aeabi_dmul>
 801b3f6:	e9cd 0100 	strd	r0, r1, [sp]
 801b3fa:	e7bc      	b.n	801b376 <_dtoa_r+0x56e>
 801b3fc:	0801f1a8 	.word	0x0801f1a8
 801b400:	0801f180 	.word	0x0801f180
 801b404:	3ff00000 	.word	0x3ff00000
 801b408:	40240000 	.word	0x40240000
 801b40c:	401c0000 	.word	0x401c0000
 801b410:	40140000 	.word	0x40140000
 801b414:	3fe00000 	.word	0x3fe00000
 801b418:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b41c:	465d      	mov	r5, fp
 801b41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b422:	4630      	mov	r0, r6
 801b424:	4639      	mov	r1, r7
 801b426:	f7e5 fa11 	bl	800084c <__aeabi_ddiv>
 801b42a:	f7e5 fb95 	bl	8000b58 <__aeabi_d2iz>
 801b42e:	4680      	mov	r8, r0
 801b430:	f7e5 f878 	bl	8000524 <__aeabi_i2d>
 801b434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b438:	f7e5 f8de 	bl	80005f8 <__aeabi_dmul>
 801b43c:	4602      	mov	r2, r0
 801b43e:	460b      	mov	r3, r1
 801b440:	4630      	mov	r0, r6
 801b442:	4639      	mov	r1, r7
 801b444:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801b448:	f7e4 ff1e 	bl	8000288 <__aeabi_dsub>
 801b44c:	f805 6b01 	strb.w	r6, [r5], #1
 801b450:	eba5 060b 	sub.w	r6, r5, fp
 801b454:	45b1      	cmp	r9, r6
 801b456:	4602      	mov	r2, r0
 801b458:	460b      	mov	r3, r1
 801b45a:	d139      	bne.n	801b4d0 <_dtoa_r+0x6c8>
 801b45c:	f7e4 ff16 	bl	800028c <__adddf3>
 801b460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b464:	4606      	mov	r6, r0
 801b466:	460f      	mov	r7, r1
 801b468:	f7e5 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 801b46c:	b9c8      	cbnz	r0, 801b4a2 <_dtoa_r+0x69a>
 801b46e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b472:	4630      	mov	r0, r6
 801b474:	4639      	mov	r1, r7
 801b476:	f7e5 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 801b47a:	b110      	cbz	r0, 801b482 <_dtoa_r+0x67a>
 801b47c:	f018 0f01 	tst.w	r8, #1
 801b480:	d10f      	bne.n	801b4a2 <_dtoa_r+0x69a>
 801b482:	9904      	ldr	r1, [sp, #16]
 801b484:	4620      	mov	r0, r4
 801b486:	f000 fabb 	bl	801ba00 <_Bfree>
 801b48a:	2300      	movs	r3, #0
 801b48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b48e:	702b      	strb	r3, [r5, #0]
 801b490:	f10a 0301 	add.w	r3, sl, #1
 801b494:	6013      	str	r3, [r2, #0]
 801b496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b498:	2b00      	cmp	r3, #0
 801b49a:	f000 8241 	beq.w	801b920 <_dtoa_r+0xb18>
 801b49e:	601d      	str	r5, [r3, #0]
 801b4a0:	e23e      	b.n	801b920 <_dtoa_r+0xb18>
 801b4a2:	f8cd a020 	str.w	sl, [sp, #32]
 801b4a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b4aa:	2a39      	cmp	r2, #57	; 0x39
 801b4ac:	f105 33ff 	add.w	r3, r5, #4294967295
 801b4b0:	d108      	bne.n	801b4c4 <_dtoa_r+0x6bc>
 801b4b2:	459b      	cmp	fp, r3
 801b4b4:	d10a      	bne.n	801b4cc <_dtoa_r+0x6c4>
 801b4b6:	9b08      	ldr	r3, [sp, #32]
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	9308      	str	r3, [sp, #32]
 801b4bc:	2330      	movs	r3, #48	; 0x30
 801b4be:	f88b 3000 	strb.w	r3, [fp]
 801b4c2:	465b      	mov	r3, fp
 801b4c4:	781a      	ldrb	r2, [r3, #0]
 801b4c6:	3201      	adds	r2, #1
 801b4c8:	701a      	strb	r2, [r3, #0]
 801b4ca:	e78c      	b.n	801b3e6 <_dtoa_r+0x5de>
 801b4cc:	461d      	mov	r5, r3
 801b4ce:	e7ea      	b.n	801b4a6 <_dtoa_r+0x69e>
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	4b9b      	ldr	r3, [pc, #620]	; (801b740 <_dtoa_r+0x938>)
 801b4d4:	f7e5 f890 	bl	80005f8 <__aeabi_dmul>
 801b4d8:	2200      	movs	r2, #0
 801b4da:	2300      	movs	r3, #0
 801b4dc:	4606      	mov	r6, r0
 801b4de:	460f      	mov	r7, r1
 801b4e0:	f7e5 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 801b4e4:	2800      	cmp	r0, #0
 801b4e6:	d09a      	beq.n	801b41e <_dtoa_r+0x616>
 801b4e8:	e7cb      	b.n	801b482 <_dtoa_r+0x67a>
 801b4ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b4ec:	2a00      	cmp	r2, #0
 801b4ee:	f000 808b 	beq.w	801b608 <_dtoa_r+0x800>
 801b4f2:	9a06      	ldr	r2, [sp, #24]
 801b4f4:	2a01      	cmp	r2, #1
 801b4f6:	dc6e      	bgt.n	801b5d6 <_dtoa_r+0x7ce>
 801b4f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b4fa:	2a00      	cmp	r2, #0
 801b4fc:	d067      	beq.n	801b5ce <_dtoa_r+0x7c6>
 801b4fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b502:	9f07      	ldr	r7, [sp, #28]
 801b504:	9d05      	ldr	r5, [sp, #20]
 801b506:	9a05      	ldr	r2, [sp, #20]
 801b508:	2101      	movs	r1, #1
 801b50a:	441a      	add	r2, r3
 801b50c:	4620      	mov	r0, r4
 801b50e:	9205      	str	r2, [sp, #20]
 801b510:	4498      	add	r8, r3
 801b512:	f000 fb15 	bl	801bb40 <__i2b>
 801b516:	4606      	mov	r6, r0
 801b518:	2d00      	cmp	r5, #0
 801b51a:	dd0c      	ble.n	801b536 <_dtoa_r+0x72e>
 801b51c:	f1b8 0f00 	cmp.w	r8, #0
 801b520:	dd09      	ble.n	801b536 <_dtoa_r+0x72e>
 801b522:	4545      	cmp	r5, r8
 801b524:	9a05      	ldr	r2, [sp, #20]
 801b526:	462b      	mov	r3, r5
 801b528:	bfa8      	it	ge
 801b52a:	4643      	movge	r3, r8
 801b52c:	1ad2      	subs	r2, r2, r3
 801b52e:	9205      	str	r2, [sp, #20]
 801b530:	1aed      	subs	r5, r5, r3
 801b532:	eba8 0803 	sub.w	r8, r8, r3
 801b536:	9b07      	ldr	r3, [sp, #28]
 801b538:	b1eb      	cbz	r3, 801b576 <_dtoa_r+0x76e>
 801b53a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d067      	beq.n	801b610 <_dtoa_r+0x808>
 801b540:	b18f      	cbz	r7, 801b566 <_dtoa_r+0x75e>
 801b542:	4631      	mov	r1, r6
 801b544:	463a      	mov	r2, r7
 801b546:	4620      	mov	r0, r4
 801b548:	f000 fb9a 	bl	801bc80 <__pow5mult>
 801b54c:	9a04      	ldr	r2, [sp, #16]
 801b54e:	4601      	mov	r1, r0
 801b550:	4606      	mov	r6, r0
 801b552:	4620      	mov	r0, r4
 801b554:	f000 fafd 	bl	801bb52 <__multiply>
 801b558:	9904      	ldr	r1, [sp, #16]
 801b55a:	9008      	str	r0, [sp, #32]
 801b55c:	4620      	mov	r0, r4
 801b55e:	f000 fa4f 	bl	801ba00 <_Bfree>
 801b562:	9b08      	ldr	r3, [sp, #32]
 801b564:	9304      	str	r3, [sp, #16]
 801b566:	9b07      	ldr	r3, [sp, #28]
 801b568:	1bda      	subs	r2, r3, r7
 801b56a:	d004      	beq.n	801b576 <_dtoa_r+0x76e>
 801b56c:	9904      	ldr	r1, [sp, #16]
 801b56e:	4620      	mov	r0, r4
 801b570:	f000 fb86 	bl	801bc80 <__pow5mult>
 801b574:	9004      	str	r0, [sp, #16]
 801b576:	2101      	movs	r1, #1
 801b578:	4620      	mov	r0, r4
 801b57a:	f000 fae1 	bl	801bb40 <__i2b>
 801b57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b580:	4607      	mov	r7, r0
 801b582:	2b00      	cmp	r3, #0
 801b584:	f000 81d0 	beq.w	801b928 <_dtoa_r+0xb20>
 801b588:	461a      	mov	r2, r3
 801b58a:	4601      	mov	r1, r0
 801b58c:	4620      	mov	r0, r4
 801b58e:	f000 fb77 	bl	801bc80 <__pow5mult>
 801b592:	9b06      	ldr	r3, [sp, #24]
 801b594:	2b01      	cmp	r3, #1
 801b596:	4607      	mov	r7, r0
 801b598:	dc40      	bgt.n	801b61c <_dtoa_r+0x814>
 801b59a:	9b00      	ldr	r3, [sp, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d139      	bne.n	801b614 <_dtoa_r+0x80c>
 801b5a0:	9b01      	ldr	r3, [sp, #4]
 801b5a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d136      	bne.n	801b618 <_dtoa_r+0x810>
 801b5aa:	9b01      	ldr	r3, [sp, #4]
 801b5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b5b0:	0d1b      	lsrs	r3, r3, #20
 801b5b2:	051b      	lsls	r3, r3, #20
 801b5b4:	b12b      	cbz	r3, 801b5c2 <_dtoa_r+0x7ba>
 801b5b6:	9b05      	ldr	r3, [sp, #20]
 801b5b8:	3301      	adds	r3, #1
 801b5ba:	9305      	str	r3, [sp, #20]
 801b5bc:	f108 0801 	add.w	r8, r8, #1
 801b5c0:	2301      	movs	r3, #1
 801b5c2:	9307      	str	r3, [sp, #28]
 801b5c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d12a      	bne.n	801b620 <_dtoa_r+0x818>
 801b5ca:	2001      	movs	r0, #1
 801b5cc:	e030      	b.n	801b630 <_dtoa_r+0x828>
 801b5ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b5d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b5d4:	e795      	b.n	801b502 <_dtoa_r+0x6fa>
 801b5d6:	9b07      	ldr	r3, [sp, #28]
 801b5d8:	f109 37ff 	add.w	r7, r9, #4294967295
 801b5dc:	42bb      	cmp	r3, r7
 801b5de:	bfbf      	itttt	lt
 801b5e0:	9b07      	ldrlt	r3, [sp, #28]
 801b5e2:	9707      	strlt	r7, [sp, #28]
 801b5e4:	1afa      	sublt	r2, r7, r3
 801b5e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801b5e8:	bfbb      	ittet	lt
 801b5ea:	189b      	addlt	r3, r3, r2
 801b5ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b5ee:	1bdf      	subge	r7, r3, r7
 801b5f0:	2700      	movlt	r7, #0
 801b5f2:	f1b9 0f00 	cmp.w	r9, #0
 801b5f6:	bfb5      	itete	lt
 801b5f8:	9b05      	ldrlt	r3, [sp, #20]
 801b5fa:	9d05      	ldrge	r5, [sp, #20]
 801b5fc:	eba3 0509 	sublt.w	r5, r3, r9
 801b600:	464b      	movge	r3, r9
 801b602:	bfb8      	it	lt
 801b604:	2300      	movlt	r3, #0
 801b606:	e77e      	b.n	801b506 <_dtoa_r+0x6fe>
 801b608:	9f07      	ldr	r7, [sp, #28]
 801b60a:	9d05      	ldr	r5, [sp, #20]
 801b60c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801b60e:	e783      	b.n	801b518 <_dtoa_r+0x710>
 801b610:	9a07      	ldr	r2, [sp, #28]
 801b612:	e7ab      	b.n	801b56c <_dtoa_r+0x764>
 801b614:	2300      	movs	r3, #0
 801b616:	e7d4      	b.n	801b5c2 <_dtoa_r+0x7ba>
 801b618:	9b00      	ldr	r3, [sp, #0]
 801b61a:	e7d2      	b.n	801b5c2 <_dtoa_r+0x7ba>
 801b61c:	2300      	movs	r3, #0
 801b61e:	9307      	str	r3, [sp, #28]
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b626:	6918      	ldr	r0, [r3, #16]
 801b628:	f000 fa3c 	bl	801baa4 <__hi0bits>
 801b62c:	f1c0 0020 	rsb	r0, r0, #32
 801b630:	4440      	add	r0, r8
 801b632:	f010 001f 	ands.w	r0, r0, #31
 801b636:	d047      	beq.n	801b6c8 <_dtoa_r+0x8c0>
 801b638:	f1c0 0320 	rsb	r3, r0, #32
 801b63c:	2b04      	cmp	r3, #4
 801b63e:	dd3b      	ble.n	801b6b8 <_dtoa_r+0x8b0>
 801b640:	9b05      	ldr	r3, [sp, #20]
 801b642:	f1c0 001c 	rsb	r0, r0, #28
 801b646:	4403      	add	r3, r0
 801b648:	9305      	str	r3, [sp, #20]
 801b64a:	4405      	add	r5, r0
 801b64c:	4480      	add	r8, r0
 801b64e:	9b05      	ldr	r3, [sp, #20]
 801b650:	2b00      	cmp	r3, #0
 801b652:	dd05      	ble.n	801b660 <_dtoa_r+0x858>
 801b654:	461a      	mov	r2, r3
 801b656:	9904      	ldr	r1, [sp, #16]
 801b658:	4620      	mov	r0, r4
 801b65a:	f000 fb5f 	bl	801bd1c <__lshift>
 801b65e:	9004      	str	r0, [sp, #16]
 801b660:	f1b8 0f00 	cmp.w	r8, #0
 801b664:	dd05      	ble.n	801b672 <_dtoa_r+0x86a>
 801b666:	4639      	mov	r1, r7
 801b668:	4642      	mov	r2, r8
 801b66a:	4620      	mov	r0, r4
 801b66c:	f000 fb56 	bl	801bd1c <__lshift>
 801b670:	4607      	mov	r7, r0
 801b672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b674:	b353      	cbz	r3, 801b6cc <_dtoa_r+0x8c4>
 801b676:	4639      	mov	r1, r7
 801b678:	9804      	ldr	r0, [sp, #16]
 801b67a:	f000 fba3 	bl	801bdc4 <__mcmp>
 801b67e:	2800      	cmp	r0, #0
 801b680:	da24      	bge.n	801b6cc <_dtoa_r+0x8c4>
 801b682:	2300      	movs	r3, #0
 801b684:	220a      	movs	r2, #10
 801b686:	9904      	ldr	r1, [sp, #16]
 801b688:	4620      	mov	r0, r4
 801b68a:	f000 f9d0 	bl	801ba2e <__multadd>
 801b68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b690:	9004      	str	r0, [sp, #16]
 801b692:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b696:	2b00      	cmp	r3, #0
 801b698:	f000 814d 	beq.w	801b936 <_dtoa_r+0xb2e>
 801b69c:	2300      	movs	r3, #0
 801b69e:	4631      	mov	r1, r6
 801b6a0:	220a      	movs	r2, #10
 801b6a2:	4620      	mov	r0, r4
 801b6a4:	f000 f9c3 	bl	801ba2e <__multadd>
 801b6a8:	9b02      	ldr	r3, [sp, #8]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	4606      	mov	r6, r0
 801b6ae:	dc4f      	bgt.n	801b750 <_dtoa_r+0x948>
 801b6b0:	9b06      	ldr	r3, [sp, #24]
 801b6b2:	2b02      	cmp	r3, #2
 801b6b4:	dd4c      	ble.n	801b750 <_dtoa_r+0x948>
 801b6b6:	e011      	b.n	801b6dc <_dtoa_r+0x8d4>
 801b6b8:	d0c9      	beq.n	801b64e <_dtoa_r+0x846>
 801b6ba:	9a05      	ldr	r2, [sp, #20]
 801b6bc:	331c      	adds	r3, #28
 801b6be:	441a      	add	r2, r3
 801b6c0:	9205      	str	r2, [sp, #20]
 801b6c2:	441d      	add	r5, r3
 801b6c4:	4498      	add	r8, r3
 801b6c6:	e7c2      	b.n	801b64e <_dtoa_r+0x846>
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	e7f6      	b.n	801b6ba <_dtoa_r+0x8b2>
 801b6cc:	f1b9 0f00 	cmp.w	r9, #0
 801b6d0:	dc38      	bgt.n	801b744 <_dtoa_r+0x93c>
 801b6d2:	9b06      	ldr	r3, [sp, #24]
 801b6d4:	2b02      	cmp	r3, #2
 801b6d6:	dd35      	ble.n	801b744 <_dtoa_r+0x93c>
 801b6d8:	f8cd 9008 	str.w	r9, [sp, #8]
 801b6dc:	9b02      	ldr	r3, [sp, #8]
 801b6de:	b963      	cbnz	r3, 801b6fa <_dtoa_r+0x8f2>
 801b6e0:	4639      	mov	r1, r7
 801b6e2:	2205      	movs	r2, #5
 801b6e4:	4620      	mov	r0, r4
 801b6e6:	f000 f9a2 	bl	801ba2e <__multadd>
 801b6ea:	4601      	mov	r1, r0
 801b6ec:	4607      	mov	r7, r0
 801b6ee:	9804      	ldr	r0, [sp, #16]
 801b6f0:	f000 fb68 	bl	801bdc4 <__mcmp>
 801b6f4:	2800      	cmp	r0, #0
 801b6f6:	f73f adcc 	bgt.w	801b292 <_dtoa_r+0x48a>
 801b6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6fc:	465d      	mov	r5, fp
 801b6fe:	ea6f 0a03 	mvn.w	sl, r3
 801b702:	f04f 0900 	mov.w	r9, #0
 801b706:	4639      	mov	r1, r7
 801b708:	4620      	mov	r0, r4
 801b70a:	f000 f979 	bl	801ba00 <_Bfree>
 801b70e:	2e00      	cmp	r6, #0
 801b710:	f43f aeb7 	beq.w	801b482 <_dtoa_r+0x67a>
 801b714:	f1b9 0f00 	cmp.w	r9, #0
 801b718:	d005      	beq.n	801b726 <_dtoa_r+0x91e>
 801b71a:	45b1      	cmp	r9, r6
 801b71c:	d003      	beq.n	801b726 <_dtoa_r+0x91e>
 801b71e:	4649      	mov	r1, r9
 801b720:	4620      	mov	r0, r4
 801b722:	f000 f96d 	bl	801ba00 <_Bfree>
 801b726:	4631      	mov	r1, r6
 801b728:	4620      	mov	r0, r4
 801b72a:	f000 f969 	bl	801ba00 <_Bfree>
 801b72e:	e6a8      	b.n	801b482 <_dtoa_r+0x67a>
 801b730:	2700      	movs	r7, #0
 801b732:	463e      	mov	r6, r7
 801b734:	e7e1      	b.n	801b6fa <_dtoa_r+0x8f2>
 801b736:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b73a:	463e      	mov	r6, r7
 801b73c:	e5a9      	b.n	801b292 <_dtoa_r+0x48a>
 801b73e:	bf00      	nop
 801b740:	40240000 	.word	0x40240000
 801b744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b746:	f8cd 9008 	str.w	r9, [sp, #8]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	f000 80fa 	beq.w	801b944 <_dtoa_r+0xb3c>
 801b750:	2d00      	cmp	r5, #0
 801b752:	dd05      	ble.n	801b760 <_dtoa_r+0x958>
 801b754:	4631      	mov	r1, r6
 801b756:	462a      	mov	r2, r5
 801b758:	4620      	mov	r0, r4
 801b75a:	f000 fadf 	bl	801bd1c <__lshift>
 801b75e:	4606      	mov	r6, r0
 801b760:	9b07      	ldr	r3, [sp, #28]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d04c      	beq.n	801b800 <_dtoa_r+0x9f8>
 801b766:	6871      	ldr	r1, [r6, #4]
 801b768:	4620      	mov	r0, r4
 801b76a:	f000 f915 	bl	801b998 <_Balloc>
 801b76e:	6932      	ldr	r2, [r6, #16]
 801b770:	3202      	adds	r2, #2
 801b772:	4605      	mov	r5, r0
 801b774:	0092      	lsls	r2, r2, #2
 801b776:	f106 010c 	add.w	r1, r6, #12
 801b77a:	300c      	adds	r0, #12
 801b77c:	f7fe fd60 	bl	801a240 <memcpy>
 801b780:	2201      	movs	r2, #1
 801b782:	4629      	mov	r1, r5
 801b784:	4620      	mov	r0, r4
 801b786:	f000 fac9 	bl	801bd1c <__lshift>
 801b78a:	9b00      	ldr	r3, [sp, #0]
 801b78c:	f8cd b014 	str.w	fp, [sp, #20]
 801b790:	f003 0301 	and.w	r3, r3, #1
 801b794:	46b1      	mov	r9, r6
 801b796:	9307      	str	r3, [sp, #28]
 801b798:	4606      	mov	r6, r0
 801b79a:	4639      	mov	r1, r7
 801b79c:	9804      	ldr	r0, [sp, #16]
 801b79e:	f7ff faa4 	bl	801acea <quorem>
 801b7a2:	4649      	mov	r1, r9
 801b7a4:	4605      	mov	r5, r0
 801b7a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b7aa:	9804      	ldr	r0, [sp, #16]
 801b7ac:	f000 fb0a 	bl	801bdc4 <__mcmp>
 801b7b0:	4632      	mov	r2, r6
 801b7b2:	9000      	str	r0, [sp, #0]
 801b7b4:	4639      	mov	r1, r7
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	f000 fb1e 	bl	801bdf8 <__mdiff>
 801b7bc:	68c3      	ldr	r3, [r0, #12]
 801b7be:	4602      	mov	r2, r0
 801b7c0:	bb03      	cbnz	r3, 801b804 <_dtoa_r+0x9fc>
 801b7c2:	4601      	mov	r1, r0
 801b7c4:	9008      	str	r0, [sp, #32]
 801b7c6:	9804      	ldr	r0, [sp, #16]
 801b7c8:	f000 fafc 	bl	801bdc4 <__mcmp>
 801b7cc:	9a08      	ldr	r2, [sp, #32]
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	4611      	mov	r1, r2
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	9308      	str	r3, [sp, #32]
 801b7d6:	f000 f913 	bl	801ba00 <_Bfree>
 801b7da:	9b08      	ldr	r3, [sp, #32]
 801b7dc:	b9a3      	cbnz	r3, 801b808 <_dtoa_r+0xa00>
 801b7de:	9a06      	ldr	r2, [sp, #24]
 801b7e0:	b992      	cbnz	r2, 801b808 <_dtoa_r+0xa00>
 801b7e2:	9a07      	ldr	r2, [sp, #28]
 801b7e4:	b982      	cbnz	r2, 801b808 <_dtoa_r+0xa00>
 801b7e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b7ea:	d029      	beq.n	801b840 <_dtoa_r+0xa38>
 801b7ec:	9b00      	ldr	r3, [sp, #0]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	dd01      	ble.n	801b7f6 <_dtoa_r+0x9ee>
 801b7f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801b7f6:	9b05      	ldr	r3, [sp, #20]
 801b7f8:	1c5d      	adds	r5, r3, #1
 801b7fa:	f883 8000 	strb.w	r8, [r3]
 801b7fe:	e782      	b.n	801b706 <_dtoa_r+0x8fe>
 801b800:	4630      	mov	r0, r6
 801b802:	e7c2      	b.n	801b78a <_dtoa_r+0x982>
 801b804:	2301      	movs	r3, #1
 801b806:	e7e3      	b.n	801b7d0 <_dtoa_r+0x9c8>
 801b808:	9a00      	ldr	r2, [sp, #0]
 801b80a:	2a00      	cmp	r2, #0
 801b80c:	db04      	blt.n	801b818 <_dtoa_r+0xa10>
 801b80e:	d125      	bne.n	801b85c <_dtoa_r+0xa54>
 801b810:	9a06      	ldr	r2, [sp, #24]
 801b812:	bb1a      	cbnz	r2, 801b85c <_dtoa_r+0xa54>
 801b814:	9a07      	ldr	r2, [sp, #28]
 801b816:	bb0a      	cbnz	r2, 801b85c <_dtoa_r+0xa54>
 801b818:	2b00      	cmp	r3, #0
 801b81a:	ddec      	ble.n	801b7f6 <_dtoa_r+0x9ee>
 801b81c:	2201      	movs	r2, #1
 801b81e:	9904      	ldr	r1, [sp, #16]
 801b820:	4620      	mov	r0, r4
 801b822:	f000 fa7b 	bl	801bd1c <__lshift>
 801b826:	4639      	mov	r1, r7
 801b828:	9004      	str	r0, [sp, #16]
 801b82a:	f000 facb 	bl	801bdc4 <__mcmp>
 801b82e:	2800      	cmp	r0, #0
 801b830:	dc03      	bgt.n	801b83a <_dtoa_r+0xa32>
 801b832:	d1e0      	bne.n	801b7f6 <_dtoa_r+0x9ee>
 801b834:	f018 0f01 	tst.w	r8, #1
 801b838:	d0dd      	beq.n	801b7f6 <_dtoa_r+0x9ee>
 801b83a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b83e:	d1d8      	bne.n	801b7f2 <_dtoa_r+0x9ea>
 801b840:	9b05      	ldr	r3, [sp, #20]
 801b842:	9a05      	ldr	r2, [sp, #20]
 801b844:	1c5d      	adds	r5, r3, #1
 801b846:	2339      	movs	r3, #57	; 0x39
 801b848:	7013      	strb	r3, [r2, #0]
 801b84a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b84e:	2b39      	cmp	r3, #57	; 0x39
 801b850:	f105 32ff 	add.w	r2, r5, #4294967295
 801b854:	d04f      	beq.n	801b8f6 <_dtoa_r+0xaee>
 801b856:	3301      	adds	r3, #1
 801b858:	7013      	strb	r3, [r2, #0]
 801b85a:	e754      	b.n	801b706 <_dtoa_r+0x8fe>
 801b85c:	9a05      	ldr	r2, [sp, #20]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	f102 0501 	add.w	r5, r2, #1
 801b864:	dd06      	ble.n	801b874 <_dtoa_r+0xa6c>
 801b866:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801b86a:	d0e9      	beq.n	801b840 <_dtoa_r+0xa38>
 801b86c:	f108 0801 	add.w	r8, r8, #1
 801b870:	9b05      	ldr	r3, [sp, #20]
 801b872:	e7c2      	b.n	801b7fa <_dtoa_r+0x9f2>
 801b874:	9a02      	ldr	r2, [sp, #8]
 801b876:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b87a:	eba5 030b 	sub.w	r3, r5, fp
 801b87e:	4293      	cmp	r3, r2
 801b880:	d021      	beq.n	801b8c6 <_dtoa_r+0xabe>
 801b882:	2300      	movs	r3, #0
 801b884:	220a      	movs	r2, #10
 801b886:	9904      	ldr	r1, [sp, #16]
 801b888:	4620      	mov	r0, r4
 801b88a:	f000 f8d0 	bl	801ba2e <__multadd>
 801b88e:	45b1      	cmp	r9, r6
 801b890:	9004      	str	r0, [sp, #16]
 801b892:	f04f 0300 	mov.w	r3, #0
 801b896:	f04f 020a 	mov.w	r2, #10
 801b89a:	4649      	mov	r1, r9
 801b89c:	4620      	mov	r0, r4
 801b89e:	d105      	bne.n	801b8ac <_dtoa_r+0xaa4>
 801b8a0:	f000 f8c5 	bl	801ba2e <__multadd>
 801b8a4:	4681      	mov	r9, r0
 801b8a6:	4606      	mov	r6, r0
 801b8a8:	9505      	str	r5, [sp, #20]
 801b8aa:	e776      	b.n	801b79a <_dtoa_r+0x992>
 801b8ac:	f000 f8bf 	bl	801ba2e <__multadd>
 801b8b0:	4631      	mov	r1, r6
 801b8b2:	4681      	mov	r9, r0
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	220a      	movs	r2, #10
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f000 f8b8 	bl	801ba2e <__multadd>
 801b8be:	4606      	mov	r6, r0
 801b8c0:	e7f2      	b.n	801b8a8 <_dtoa_r+0xaa0>
 801b8c2:	f04f 0900 	mov.w	r9, #0
 801b8c6:	2201      	movs	r2, #1
 801b8c8:	9904      	ldr	r1, [sp, #16]
 801b8ca:	4620      	mov	r0, r4
 801b8cc:	f000 fa26 	bl	801bd1c <__lshift>
 801b8d0:	4639      	mov	r1, r7
 801b8d2:	9004      	str	r0, [sp, #16]
 801b8d4:	f000 fa76 	bl	801bdc4 <__mcmp>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	dcb6      	bgt.n	801b84a <_dtoa_r+0xa42>
 801b8dc:	d102      	bne.n	801b8e4 <_dtoa_r+0xadc>
 801b8de:	f018 0f01 	tst.w	r8, #1
 801b8e2:	d1b2      	bne.n	801b84a <_dtoa_r+0xa42>
 801b8e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b8e8:	2b30      	cmp	r3, #48	; 0x30
 801b8ea:	f105 32ff 	add.w	r2, r5, #4294967295
 801b8ee:	f47f af0a 	bne.w	801b706 <_dtoa_r+0x8fe>
 801b8f2:	4615      	mov	r5, r2
 801b8f4:	e7f6      	b.n	801b8e4 <_dtoa_r+0xadc>
 801b8f6:	4593      	cmp	fp, r2
 801b8f8:	d105      	bne.n	801b906 <_dtoa_r+0xafe>
 801b8fa:	2331      	movs	r3, #49	; 0x31
 801b8fc:	f10a 0a01 	add.w	sl, sl, #1
 801b900:	f88b 3000 	strb.w	r3, [fp]
 801b904:	e6ff      	b.n	801b706 <_dtoa_r+0x8fe>
 801b906:	4615      	mov	r5, r2
 801b908:	e79f      	b.n	801b84a <_dtoa_r+0xa42>
 801b90a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801b970 <_dtoa_r+0xb68>
 801b90e:	e007      	b.n	801b920 <_dtoa_r+0xb18>
 801b910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b912:	f8df b060 	ldr.w	fp, [pc, #96]	; 801b974 <_dtoa_r+0xb6c>
 801b916:	b11b      	cbz	r3, 801b920 <_dtoa_r+0xb18>
 801b918:	f10b 0308 	add.w	r3, fp, #8
 801b91c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b91e:	6013      	str	r3, [r2, #0]
 801b920:	4658      	mov	r0, fp
 801b922:	b017      	add	sp, #92	; 0x5c
 801b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b928:	9b06      	ldr	r3, [sp, #24]
 801b92a:	2b01      	cmp	r3, #1
 801b92c:	f77f ae35 	ble.w	801b59a <_dtoa_r+0x792>
 801b930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b932:	9307      	str	r3, [sp, #28]
 801b934:	e649      	b.n	801b5ca <_dtoa_r+0x7c2>
 801b936:	9b02      	ldr	r3, [sp, #8]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	dc03      	bgt.n	801b944 <_dtoa_r+0xb3c>
 801b93c:	9b06      	ldr	r3, [sp, #24]
 801b93e:	2b02      	cmp	r3, #2
 801b940:	f73f aecc 	bgt.w	801b6dc <_dtoa_r+0x8d4>
 801b944:	465d      	mov	r5, fp
 801b946:	4639      	mov	r1, r7
 801b948:	9804      	ldr	r0, [sp, #16]
 801b94a:	f7ff f9ce 	bl	801acea <quorem>
 801b94e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801b952:	f805 8b01 	strb.w	r8, [r5], #1
 801b956:	9a02      	ldr	r2, [sp, #8]
 801b958:	eba5 030b 	sub.w	r3, r5, fp
 801b95c:	429a      	cmp	r2, r3
 801b95e:	ddb0      	ble.n	801b8c2 <_dtoa_r+0xaba>
 801b960:	2300      	movs	r3, #0
 801b962:	220a      	movs	r2, #10
 801b964:	9904      	ldr	r1, [sp, #16]
 801b966:	4620      	mov	r0, r4
 801b968:	f000 f861 	bl	801ba2e <__multadd>
 801b96c:	9004      	str	r0, [sp, #16]
 801b96e:	e7ea      	b.n	801b946 <_dtoa_r+0xb3e>
 801b970:	0801f04e 	.word	0x0801f04e
 801b974:	0801f173 	.word	0x0801f173

0801b978 <_localeconv_r>:
 801b978:	4b04      	ldr	r3, [pc, #16]	; (801b98c <_localeconv_r+0x14>)
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	6a18      	ldr	r0, [r3, #32]
 801b97e:	4b04      	ldr	r3, [pc, #16]	; (801b990 <_localeconv_r+0x18>)
 801b980:	2800      	cmp	r0, #0
 801b982:	bf08      	it	eq
 801b984:	4618      	moveq	r0, r3
 801b986:	30f0      	adds	r0, #240	; 0xf0
 801b988:	4770      	bx	lr
 801b98a:	bf00      	nop
 801b98c:	200001c4 	.word	0x200001c4
 801b990:	20000228 	.word	0x20000228

0801b994 <__malloc_lock>:
 801b994:	4770      	bx	lr

0801b996 <__malloc_unlock>:
 801b996:	4770      	bx	lr

0801b998 <_Balloc>:
 801b998:	b570      	push	{r4, r5, r6, lr}
 801b99a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b99c:	4604      	mov	r4, r0
 801b99e:	460e      	mov	r6, r1
 801b9a0:	b93d      	cbnz	r5, 801b9b2 <_Balloc+0x1a>
 801b9a2:	2010      	movs	r0, #16
 801b9a4:	f7fe fc2a 	bl	801a1fc <malloc>
 801b9a8:	6260      	str	r0, [r4, #36]	; 0x24
 801b9aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b9ae:	6005      	str	r5, [r0, #0]
 801b9b0:	60c5      	str	r5, [r0, #12]
 801b9b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b9b4:	68eb      	ldr	r3, [r5, #12]
 801b9b6:	b183      	cbz	r3, 801b9da <_Balloc+0x42>
 801b9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b9c0:	b9b8      	cbnz	r0, 801b9f2 <_Balloc+0x5a>
 801b9c2:	2101      	movs	r1, #1
 801b9c4:	fa01 f506 	lsl.w	r5, r1, r6
 801b9c8:	1d6a      	adds	r2, r5, #5
 801b9ca:	0092      	lsls	r2, r2, #2
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	f000 fabf 	bl	801bf50 <_calloc_r>
 801b9d2:	b160      	cbz	r0, 801b9ee <_Balloc+0x56>
 801b9d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801b9d8:	e00e      	b.n	801b9f8 <_Balloc+0x60>
 801b9da:	2221      	movs	r2, #33	; 0x21
 801b9dc:	2104      	movs	r1, #4
 801b9de:	4620      	mov	r0, r4
 801b9e0:	f000 fab6 	bl	801bf50 <_calloc_r>
 801b9e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9e6:	60e8      	str	r0, [r5, #12]
 801b9e8:	68db      	ldr	r3, [r3, #12]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d1e4      	bne.n	801b9b8 <_Balloc+0x20>
 801b9ee:	2000      	movs	r0, #0
 801b9f0:	bd70      	pop	{r4, r5, r6, pc}
 801b9f2:	6802      	ldr	r2, [r0, #0]
 801b9f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b9fe:	e7f7      	b.n	801b9f0 <_Balloc+0x58>

0801ba00 <_Bfree>:
 801ba00:	b570      	push	{r4, r5, r6, lr}
 801ba02:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801ba04:	4606      	mov	r6, r0
 801ba06:	460d      	mov	r5, r1
 801ba08:	b93c      	cbnz	r4, 801ba1a <_Bfree+0x1a>
 801ba0a:	2010      	movs	r0, #16
 801ba0c:	f7fe fbf6 	bl	801a1fc <malloc>
 801ba10:	6270      	str	r0, [r6, #36]	; 0x24
 801ba12:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ba16:	6004      	str	r4, [r0, #0]
 801ba18:	60c4      	str	r4, [r0, #12]
 801ba1a:	b13d      	cbz	r5, 801ba2c <_Bfree+0x2c>
 801ba1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ba1e:	686a      	ldr	r2, [r5, #4]
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ba26:	6029      	str	r1, [r5, #0]
 801ba28:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801ba2c:	bd70      	pop	{r4, r5, r6, pc}

0801ba2e <__multadd>:
 801ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba32:	690d      	ldr	r5, [r1, #16]
 801ba34:	461f      	mov	r7, r3
 801ba36:	4606      	mov	r6, r0
 801ba38:	460c      	mov	r4, r1
 801ba3a:	f101 0c14 	add.w	ip, r1, #20
 801ba3e:	2300      	movs	r3, #0
 801ba40:	f8dc 0000 	ldr.w	r0, [ip]
 801ba44:	b281      	uxth	r1, r0
 801ba46:	fb02 7101 	mla	r1, r2, r1, r7
 801ba4a:	0c0f      	lsrs	r7, r1, #16
 801ba4c:	0c00      	lsrs	r0, r0, #16
 801ba4e:	fb02 7000 	mla	r0, r2, r0, r7
 801ba52:	b289      	uxth	r1, r1
 801ba54:	3301      	adds	r3, #1
 801ba56:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801ba5a:	429d      	cmp	r5, r3
 801ba5c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801ba60:	f84c 1b04 	str.w	r1, [ip], #4
 801ba64:	dcec      	bgt.n	801ba40 <__multadd+0x12>
 801ba66:	b1d7      	cbz	r7, 801ba9e <__multadd+0x70>
 801ba68:	68a3      	ldr	r3, [r4, #8]
 801ba6a:	42ab      	cmp	r3, r5
 801ba6c:	dc12      	bgt.n	801ba94 <__multadd+0x66>
 801ba6e:	6861      	ldr	r1, [r4, #4]
 801ba70:	4630      	mov	r0, r6
 801ba72:	3101      	adds	r1, #1
 801ba74:	f7ff ff90 	bl	801b998 <_Balloc>
 801ba78:	6922      	ldr	r2, [r4, #16]
 801ba7a:	3202      	adds	r2, #2
 801ba7c:	f104 010c 	add.w	r1, r4, #12
 801ba80:	4680      	mov	r8, r0
 801ba82:	0092      	lsls	r2, r2, #2
 801ba84:	300c      	adds	r0, #12
 801ba86:	f7fe fbdb 	bl	801a240 <memcpy>
 801ba8a:	4621      	mov	r1, r4
 801ba8c:	4630      	mov	r0, r6
 801ba8e:	f7ff ffb7 	bl	801ba00 <_Bfree>
 801ba92:	4644      	mov	r4, r8
 801ba94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ba98:	3501      	adds	r5, #1
 801ba9a:	615f      	str	r7, [r3, #20]
 801ba9c:	6125      	str	r5, [r4, #16]
 801ba9e:	4620      	mov	r0, r4
 801baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801baa4 <__hi0bits>:
 801baa4:	0c02      	lsrs	r2, r0, #16
 801baa6:	0412      	lsls	r2, r2, #16
 801baa8:	4603      	mov	r3, r0
 801baaa:	b9b2      	cbnz	r2, 801bada <__hi0bits+0x36>
 801baac:	0403      	lsls	r3, r0, #16
 801baae:	2010      	movs	r0, #16
 801bab0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bab4:	bf04      	itt	eq
 801bab6:	021b      	lsleq	r3, r3, #8
 801bab8:	3008      	addeq	r0, #8
 801baba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801babe:	bf04      	itt	eq
 801bac0:	011b      	lsleq	r3, r3, #4
 801bac2:	3004      	addeq	r0, #4
 801bac4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bac8:	bf04      	itt	eq
 801baca:	009b      	lsleq	r3, r3, #2
 801bacc:	3002      	addeq	r0, #2
 801bace:	2b00      	cmp	r3, #0
 801bad0:	db06      	blt.n	801bae0 <__hi0bits+0x3c>
 801bad2:	005b      	lsls	r3, r3, #1
 801bad4:	d503      	bpl.n	801bade <__hi0bits+0x3a>
 801bad6:	3001      	adds	r0, #1
 801bad8:	4770      	bx	lr
 801bada:	2000      	movs	r0, #0
 801badc:	e7e8      	b.n	801bab0 <__hi0bits+0xc>
 801bade:	2020      	movs	r0, #32
 801bae0:	4770      	bx	lr

0801bae2 <__lo0bits>:
 801bae2:	6803      	ldr	r3, [r0, #0]
 801bae4:	f013 0207 	ands.w	r2, r3, #7
 801bae8:	4601      	mov	r1, r0
 801baea:	d00b      	beq.n	801bb04 <__lo0bits+0x22>
 801baec:	07da      	lsls	r2, r3, #31
 801baee:	d423      	bmi.n	801bb38 <__lo0bits+0x56>
 801baf0:	0798      	lsls	r0, r3, #30
 801baf2:	bf49      	itett	mi
 801baf4:	085b      	lsrmi	r3, r3, #1
 801baf6:	089b      	lsrpl	r3, r3, #2
 801baf8:	2001      	movmi	r0, #1
 801bafa:	600b      	strmi	r3, [r1, #0]
 801bafc:	bf5c      	itt	pl
 801bafe:	600b      	strpl	r3, [r1, #0]
 801bb00:	2002      	movpl	r0, #2
 801bb02:	4770      	bx	lr
 801bb04:	b298      	uxth	r0, r3
 801bb06:	b9a8      	cbnz	r0, 801bb34 <__lo0bits+0x52>
 801bb08:	0c1b      	lsrs	r3, r3, #16
 801bb0a:	2010      	movs	r0, #16
 801bb0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bb10:	bf04      	itt	eq
 801bb12:	0a1b      	lsreq	r3, r3, #8
 801bb14:	3008      	addeq	r0, #8
 801bb16:	071a      	lsls	r2, r3, #28
 801bb18:	bf04      	itt	eq
 801bb1a:	091b      	lsreq	r3, r3, #4
 801bb1c:	3004      	addeq	r0, #4
 801bb1e:	079a      	lsls	r2, r3, #30
 801bb20:	bf04      	itt	eq
 801bb22:	089b      	lsreq	r3, r3, #2
 801bb24:	3002      	addeq	r0, #2
 801bb26:	07da      	lsls	r2, r3, #31
 801bb28:	d402      	bmi.n	801bb30 <__lo0bits+0x4e>
 801bb2a:	085b      	lsrs	r3, r3, #1
 801bb2c:	d006      	beq.n	801bb3c <__lo0bits+0x5a>
 801bb2e:	3001      	adds	r0, #1
 801bb30:	600b      	str	r3, [r1, #0]
 801bb32:	4770      	bx	lr
 801bb34:	4610      	mov	r0, r2
 801bb36:	e7e9      	b.n	801bb0c <__lo0bits+0x2a>
 801bb38:	2000      	movs	r0, #0
 801bb3a:	4770      	bx	lr
 801bb3c:	2020      	movs	r0, #32
 801bb3e:	4770      	bx	lr

0801bb40 <__i2b>:
 801bb40:	b510      	push	{r4, lr}
 801bb42:	460c      	mov	r4, r1
 801bb44:	2101      	movs	r1, #1
 801bb46:	f7ff ff27 	bl	801b998 <_Balloc>
 801bb4a:	2201      	movs	r2, #1
 801bb4c:	6144      	str	r4, [r0, #20]
 801bb4e:	6102      	str	r2, [r0, #16]
 801bb50:	bd10      	pop	{r4, pc}

0801bb52 <__multiply>:
 801bb52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb56:	4614      	mov	r4, r2
 801bb58:	690a      	ldr	r2, [r1, #16]
 801bb5a:	6923      	ldr	r3, [r4, #16]
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	bfb8      	it	lt
 801bb60:	460b      	movlt	r3, r1
 801bb62:	4688      	mov	r8, r1
 801bb64:	bfbc      	itt	lt
 801bb66:	46a0      	movlt	r8, r4
 801bb68:	461c      	movlt	r4, r3
 801bb6a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bb6e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801bb72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bb76:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bb7a:	eb07 0609 	add.w	r6, r7, r9
 801bb7e:	42b3      	cmp	r3, r6
 801bb80:	bfb8      	it	lt
 801bb82:	3101      	addlt	r1, #1
 801bb84:	f7ff ff08 	bl	801b998 <_Balloc>
 801bb88:	f100 0514 	add.w	r5, r0, #20
 801bb8c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801bb90:	462b      	mov	r3, r5
 801bb92:	2200      	movs	r2, #0
 801bb94:	4573      	cmp	r3, lr
 801bb96:	d316      	bcc.n	801bbc6 <__multiply+0x74>
 801bb98:	f104 0214 	add.w	r2, r4, #20
 801bb9c:	f108 0114 	add.w	r1, r8, #20
 801bba0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801bba4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801bba8:	9300      	str	r3, [sp, #0]
 801bbaa:	9b00      	ldr	r3, [sp, #0]
 801bbac:	9201      	str	r2, [sp, #4]
 801bbae:	4293      	cmp	r3, r2
 801bbb0:	d80c      	bhi.n	801bbcc <__multiply+0x7a>
 801bbb2:	2e00      	cmp	r6, #0
 801bbb4:	dd03      	ble.n	801bbbe <__multiply+0x6c>
 801bbb6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d05d      	beq.n	801bc7a <__multiply+0x128>
 801bbbe:	6106      	str	r6, [r0, #16]
 801bbc0:	b003      	add	sp, #12
 801bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc6:	f843 2b04 	str.w	r2, [r3], #4
 801bbca:	e7e3      	b.n	801bb94 <__multiply+0x42>
 801bbcc:	f8b2 b000 	ldrh.w	fp, [r2]
 801bbd0:	f1bb 0f00 	cmp.w	fp, #0
 801bbd4:	d023      	beq.n	801bc1e <__multiply+0xcc>
 801bbd6:	4689      	mov	r9, r1
 801bbd8:	46ac      	mov	ip, r5
 801bbda:	f04f 0800 	mov.w	r8, #0
 801bbde:	f859 4b04 	ldr.w	r4, [r9], #4
 801bbe2:	f8dc a000 	ldr.w	sl, [ip]
 801bbe6:	b2a3      	uxth	r3, r4
 801bbe8:	fa1f fa8a 	uxth.w	sl, sl
 801bbec:	fb0b a303 	mla	r3, fp, r3, sl
 801bbf0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801bbf4:	f8dc 4000 	ldr.w	r4, [ip]
 801bbf8:	4443      	add	r3, r8
 801bbfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801bbfe:	fb0b 840a 	mla	r4, fp, sl, r8
 801bc02:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801bc06:	46e2      	mov	sl, ip
 801bc08:	b29b      	uxth	r3, r3
 801bc0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801bc0e:	454f      	cmp	r7, r9
 801bc10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801bc14:	f84a 3b04 	str.w	r3, [sl], #4
 801bc18:	d82b      	bhi.n	801bc72 <__multiply+0x120>
 801bc1a:	f8cc 8004 	str.w	r8, [ip, #4]
 801bc1e:	9b01      	ldr	r3, [sp, #4]
 801bc20:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801bc24:	3204      	adds	r2, #4
 801bc26:	f1ba 0f00 	cmp.w	sl, #0
 801bc2a:	d020      	beq.n	801bc6e <__multiply+0x11c>
 801bc2c:	682b      	ldr	r3, [r5, #0]
 801bc2e:	4689      	mov	r9, r1
 801bc30:	46a8      	mov	r8, r5
 801bc32:	f04f 0b00 	mov.w	fp, #0
 801bc36:	f8b9 c000 	ldrh.w	ip, [r9]
 801bc3a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801bc3e:	fb0a 440c 	mla	r4, sl, ip, r4
 801bc42:	445c      	add	r4, fp
 801bc44:	46c4      	mov	ip, r8
 801bc46:	b29b      	uxth	r3, r3
 801bc48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801bc4c:	f84c 3b04 	str.w	r3, [ip], #4
 801bc50:	f859 3b04 	ldr.w	r3, [r9], #4
 801bc54:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801bc58:	0c1b      	lsrs	r3, r3, #16
 801bc5a:	fb0a b303 	mla	r3, sl, r3, fp
 801bc5e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801bc62:	454f      	cmp	r7, r9
 801bc64:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801bc68:	d805      	bhi.n	801bc76 <__multiply+0x124>
 801bc6a:	f8c8 3004 	str.w	r3, [r8, #4]
 801bc6e:	3504      	adds	r5, #4
 801bc70:	e79b      	b.n	801bbaa <__multiply+0x58>
 801bc72:	46d4      	mov	ip, sl
 801bc74:	e7b3      	b.n	801bbde <__multiply+0x8c>
 801bc76:	46e0      	mov	r8, ip
 801bc78:	e7dd      	b.n	801bc36 <__multiply+0xe4>
 801bc7a:	3e01      	subs	r6, #1
 801bc7c:	e799      	b.n	801bbb2 <__multiply+0x60>
	...

0801bc80 <__pow5mult>:
 801bc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc84:	4615      	mov	r5, r2
 801bc86:	f012 0203 	ands.w	r2, r2, #3
 801bc8a:	4606      	mov	r6, r0
 801bc8c:	460f      	mov	r7, r1
 801bc8e:	d007      	beq.n	801bca0 <__pow5mult+0x20>
 801bc90:	3a01      	subs	r2, #1
 801bc92:	4c21      	ldr	r4, [pc, #132]	; (801bd18 <__pow5mult+0x98>)
 801bc94:	2300      	movs	r3, #0
 801bc96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bc9a:	f7ff fec8 	bl	801ba2e <__multadd>
 801bc9e:	4607      	mov	r7, r0
 801bca0:	10ad      	asrs	r5, r5, #2
 801bca2:	d035      	beq.n	801bd10 <__pow5mult+0x90>
 801bca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bca6:	b93c      	cbnz	r4, 801bcb8 <__pow5mult+0x38>
 801bca8:	2010      	movs	r0, #16
 801bcaa:	f7fe faa7 	bl	801a1fc <malloc>
 801bcae:	6270      	str	r0, [r6, #36]	; 0x24
 801bcb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bcb4:	6004      	str	r4, [r0, #0]
 801bcb6:	60c4      	str	r4, [r0, #12]
 801bcb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bcbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bcc0:	b94c      	cbnz	r4, 801bcd6 <__pow5mult+0x56>
 801bcc2:	f240 2171 	movw	r1, #625	; 0x271
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	f7ff ff3a 	bl	801bb40 <__i2b>
 801bccc:	2300      	movs	r3, #0
 801bcce:	f8c8 0008 	str.w	r0, [r8, #8]
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	6003      	str	r3, [r0, #0]
 801bcd6:	f04f 0800 	mov.w	r8, #0
 801bcda:	07eb      	lsls	r3, r5, #31
 801bcdc:	d50a      	bpl.n	801bcf4 <__pow5mult+0x74>
 801bcde:	4639      	mov	r1, r7
 801bce0:	4622      	mov	r2, r4
 801bce2:	4630      	mov	r0, r6
 801bce4:	f7ff ff35 	bl	801bb52 <__multiply>
 801bce8:	4639      	mov	r1, r7
 801bcea:	4681      	mov	r9, r0
 801bcec:	4630      	mov	r0, r6
 801bcee:	f7ff fe87 	bl	801ba00 <_Bfree>
 801bcf2:	464f      	mov	r7, r9
 801bcf4:	106d      	asrs	r5, r5, #1
 801bcf6:	d00b      	beq.n	801bd10 <__pow5mult+0x90>
 801bcf8:	6820      	ldr	r0, [r4, #0]
 801bcfa:	b938      	cbnz	r0, 801bd0c <__pow5mult+0x8c>
 801bcfc:	4622      	mov	r2, r4
 801bcfe:	4621      	mov	r1, r4
 801bd00:	4630      	mov	r0, r6
 801bd02:	f7ff ff26 	bl	801bb52 <__multiply>
 801bd06:	6020      	str	r0, [r4, #0]
 801bd08:	f8c0 8000 	str.w	r8, [r0]
 801bd0c:	4604      	mov	r4, r0
 801bd0e:	e7e4      	b.n	801bcda <__pow5mult+0x5a>
 801bd10:	4638      	mov	r0, r7
 801bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd16:	bf00      	nop
 801bd18:	0801f270 	.word	0x0801f270

0801bd1c <__lshift>:
 801bd1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd20:	460c      	mov	r4, r1
 801bd22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bd26:	6923      	ldr	r3, [r4, #16]
 801bd28:	6849      	ldr	r1, [r1, #4]
 801bd2a:	eb0a 0903 	add.w	r9, sl, r3
 801bd2e:	68a3      	ldr	r3, [r4, #8]
 801bd30:	4607      	mov	r7, r0
 801bd32:	4616      	mov	r6, r2
 801bd34:	f109 0501 	add.w	r5, r9, #1
 801bd38:	42ab      	cmp	r3, r5
 801bd3a:	db32      	blt.n	801bda2 <__lshift+0x86>
 801bd3c:	4638      	mov	r0, r7
 801bd3e:	f7ff fe2b 	bl	801b998 <_Balloc>
 801bd42:	2300      	movs	r3, #0
 801bd44:	4680      	mov	r8, r0
 801bd46:	f100 0114 	add.w	r1, r0, #20
 801bd4a:	461a      	mov	r2, r3
 801bd4c:	4553      	cmp	r3, sl
 801bd4e:	db2b      	blt.n	801bda8 <__lshift+0x8c>
 801bd50:	6920      	ldr	r0, [r4, #16]
 801bd52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bd56:	f104 0314 	add.w	r3, r4, #20
 801bd5a:	f016 021f 	ands.w	r2, r6, #31
 801bd5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bd62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bd66:	d025      	beq.n	801bdb4 <__lshift+0x98>
 801bd68:	f1c2 0e20 	rsb	lr, r2, #32
 801bd6c:	2000      	movs	r0, #0
 801bd6e:	681e      	ldr	r6, [r3, #0]
 801bd70:	468a      	mov	sl, r1
 801bd72:	4096      	lsls	r6, r2
 801bd74:	4330      	orrs	r0, r6
 801bd76:	f84a 0b04 	str.w	r0, [sl], #4
 801bd7a:	f853 0b04 	ldr.w	r0, [r3], #4
 801bd7e:	459c      	cmp	ip, r3
 801bd80:	fa20 f00e 	lsr.w	r0, r0, lr
 801bd84:	d814      	bhi.n	801bdb0 <__lshift+0x94>
 801bd86:	6048      	str	r0, [r1, #4]
 801bd88:	b108      	cbz	r0, 801bd8e <__lshift+0x72>
 801bd8a:	f109 0502 	add.w	r5, r9, #2
 801bd8e:	3d01      	subs	r5, #1
 801bd90:	4638      	mov	r0, r7
 801bd92:	f8c8 5010 	str.w	r5, [r8, #16]
 801bd96:	4621      	mov	r1, r4
 801bd98:	f7ff fe32 	bl	801ba00 <_Bfree>
 801bd9c:	4640      	mov	r0, r8
 801bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bda2:	3101      	adds	r1, #1
 801bda4:	005b      	lsls	r3, r3, #1
 801bda6:	e7c7      	b.n	801bd38 <__lshift+0x1c>
 801bda8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bdac:	3301      	adds	r3, #1
 801bdae:	e7cd      	b.n	801bd4c <__lshift+0x30>
 801bdb0:	4651      	mov	r1, sl
 801bdb2:	e7dc      	b.n	801bd6e <__lshift+0x52>
 801bdb4:	3904      	subs	r1, #4
 801bdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdba:	f841 2f04 	str.w	r2, [r1, #4]!
 801bdbe:	459c      	cmp	ip, r3
 801bdc0:	d8f9      	bhi.n	801bdb6 <__lshift+0x9a>
 801bdc2:	e7e4      	b.n	801bd8e <__lshift+0x72>

0801bdc4 <__mcmp>:
 801bdc4:	6903      	ldr	r3, [r0, #16]
 801bdc6:	690a      	ldr	r2, [r1, #16]
 801bdc8:	1a9b      	subs	r3, r3, r2
 801bdca:	b530      	push	{r4, r5, lr}
 801bdcc:	d10c      	bne.n	801bde8 <__mcmp+0x24>
 801bdce:	0092      	lsls	r2, r2, #2
 801bdd0:	3014      	adds	r0, #20
 801bdd2:	3114      	adds	r1, #20
 801bdd4:	1884      	adds	r4, r0, r2
 801bdd6:	4411      	add	r1, r2
 801bdd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bde0:	4295      	cmp	r5, r2
 801bde2:	d003      	beq.n	801bdec <__mcmp+0x28>
 801bde4:	d305      	bcc.n	801bdf2 <__mcmp+0x2e>
 801bde6:	2301      	movs	r3, #1
 801bde8:	4618      	mov	r0, r3
 801bdea:	bd30      	pop	{r4, r5, pc}
 801bdec:	42a0      	cmp	r0, r4
 801bdee:	d3f3      	bcc.n	801bdd8 <__mcmp+0x14>
 801bdf0:	e7fa      	b.n	801bde8 <__mcmp+0x24>
 801bdf2:	f04f 33ff 	mov.w	r3, #4294967295
 801bdf6:	e7f7      	b.n	801bde8 <__mcmp+0x24>

0801bdf8 <__mdiff>:
 801bdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdfc:	460d      	mov	r5, r1
 801bdfe:	4607      	mov	r7, r0
 801be00:	4611      	mov	r1, r2
 801be02:	4628      	mov	r0, r5
 801be04:	4614      	mov	r4, r2
 801be06:	f7ff ffdd 	bl	801bdc4 <__mcmp>
 801be0a:	1e06      	subs	r6, r0, #0
 801be0c:	d108      	bne.n	801be20 <__mdiff+0x28>
 801be0e:	4631      	mov	r1, r6
 801be10:	4638      	mov	r0, r7
 801be12:	f7ff fdc1 	bl	801b998 <_Balloc>
 801be16:	2301      	movs	r3, #1
 801be18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be20:	bfa4      	itt	ge
 801be22:	4623      	movge	r3, r4
 801be24:	462c      	movge	r4, r5
 801be26:	4638      	mov	r0, r7
 801be28:	6861      	ldr	r1, [r4, #4]
 801be2a:	bfa6      	itte	ge
 801be2c:	461d      	movge	r5, r3
 801be2e:	2600      	movge	r6, #0
 801be30:	2601      	movlt	r6, #1
 801be32:	f7ff fdb1 	bl	801b998 <_Balloc>
 801be36:	692b      	ldr	r3, [r5, #16]
 801be38:	60c6      	str	r6, [r0, #12]
 801be3a:	6926      	ldr	r6, [r4, #16]
 801be3c:	f105 0914 	add.w	r9, r5, #20
 801be40:	f104 0214 	add.w	r2, r4, #20
 801be44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801be48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801be4c:	f100 0514 	add.w	r5, r0, #20
 801be50:	f04f 0e00 	mov.w	lr, #0
 801be54:	f852 ab04 	ldr.w	sl, [r2], #4
 801be58:	f859 4b04 	ldr.w	r4, [r9], #4
 801be5c:	fa1e f18a 	uxtah	r1, lr, sl
 801be60:	b2a3      	uxth	r3, r4
 801be62:	1ac9      	subs	r1, r1, r3
 801be64:	0c23      	lsrs	r3, r4, #16
 801be66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801be6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801be6e:	b289      	uxth	r1, r1
 801be70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801be74:	45c8      	cmp	r8, r9
 801be76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801be7a:	4694      	mov	ip, r2
 801be7c:	f845 3b04 	str.w	r3, [r5], #4
 801be80:	d8e8      	bhi.n	801be54 <__mdiff+0x5c>
 801be82:	45bc      	cmp	ip, r7
 801be84:	d304      	bcc.n	801be90 <__mdiff+0x98>
 801be86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801be8a:	b183      	cbz	r3, 801beae <__mdiff+0xb6>
 801be8c:	6106      	str	r6, [r0, #16]
 801be8e:	e7c5      	b.n	801be1c <__mdiff+0x24>
 801be90:	f85c 1b04 	ldr.w	r1, [ip], #4
 801be94:	fa1e f381 	uxtah	r3, lr, r1
 801be98:	141a      	asrs	r2, r3, #16
 801be9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801be9e:	b29b      	uxth	r3, r3
 801bea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bea4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801bea8:	f845 3b04 	str.w	r3, [r5], #4
 801beac:	e7e9      	b.n	801be82 <__mdiff+0x8a>
 801beae:	3e01      	subs	r6, #1
 801beb0:	e7e9      	b.n	801be86 <__mdiff+0x8e>

0801beb2 <__d2b>:
 801beb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801beb6:	460e      	mov	r6, r1
 801beb8:	2101      	movs	r1, #1
 801beba:	ec59 8b10 	vmov	r8, r9, d0
 801bebe:	4615      	mov	r5, r2
 801bec0:	f7ff fd6a 	bl	801b998 <_Balloc>
 801bec4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801bec8:	4607      	mov	r7, r0
 801beca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bece:	bb34      	cbnz	r4, 801bf1e <__d2b+0x6c>
 801bed0:	9301      	str	r3, [sp, #4]
 801bed2:	f1b8 0300 	subs.w	r3, r8, #0
 801bed6:	d027      	beq.n	801bf28 <__d2b+0x76>
 801bed8:	a802      	add	r0, sp, #8
 801beda:	f840 3d08 	str.w	r3, [r0, #-8]!
 801bede:	f7ff fe00 	bl	801bae2 <__lo0bits>
 801bee2:	9900      	ldr	r1, [sp, #0]
 801bee4:	b1f0      	cbz	r0, 801bf24 <__d2b+0x72>
 801bee6:	9a01      	ldr	r2, [sp, #4]
 801bee8:	f1c0 0320 	rsb	r3, r0, #32
 801beec:	fa02 f303 	lsl.w	r3, r2, r3
 801bef0:	430b      	orrs	r3, r1
 801bef2:	40c2      	lsrs	r2, r0
 801bef4:	617b      	str	r3, [r7, #20]
 801bef6:	9201      	str	r2, [sp, #4]
 801bef8:	9b01      	ldr	r3, [sp, #4]
 801befa:	61bb      	str	r3, [r7, #24]
 801befc:	2b00      	cmp	r3, #0
 801befe:	bf14      	ite	ne
 801bf00:	2102      	movne	r1, #2
 801bf02:	2101      	moveq	r1, #1
 801bf04:	6139      	str	r1, [r7, #16]
 801bf06:	b1c4      	cbz	r4, 801bf3a <__d2b+0x88>
 801bf08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801bf0c:	4404      	add	r4, r0
 801bf0e:	6034      	str	r4, [r6, #0]
 801bf10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bf14:	6028      	str	r0, [r5, #0]
 801bf16:	4638      	mov	r0, r7
 801bf18:	b003      	add	sp, #12
 801bf1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf22:	e7d5      	b.n	801bed0 <__d2b+0x1e>
 801bf24:	6179      	str	r1, [r7, #20]
 801bf26:	e7e7      	b.n	801bef8 <__d2b+0x46>
 801bf28:	a801      	add	r0, sp, #4
 801bf2a:	f7ff fdda 	bl	801bae2 <__lo0bits>
 801bf2e:	9b01      	ldr	r3, [sp, #4]
 801bf30:	617b      	str	r3, [r7, #20]
 801bf32:	2101      	movs	r1, #1
 801bf34:	6139      	str	r1, [r7, #16]
 801bf36:	3020      	adds	r0, #32
 801bf38:	e7e5      	b.n	801bf06 <__d2b+0x54>
 801bf3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801bf3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bf42:	6030      	str	r0, [r6, #0]
 801bf44:	6918      	ldr	r0, [r3, #16]
 801bf46:	f7ff fdad 	bl	801baa4 <__hi0bits>
 801bf4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801bf4e:	e7e1      	b.n	801bf14 <__d2b+0x62>

0801bf50 <_calloc_r>:
 801bf50:	b538      	push	{r3, r4, r5, lr}
 801bf52:	fb02 f401 	mul.w	r4, r2, r1
 801bf56:	4621      	mov	r1, r4
 801bf58:	f7fe f9d4 	bl	801a304 <_malloc_r>
 801bf5c:	4605      	mov	r5, r0
 801bf5e:	b118      	cbz	r0, 801bf68 <_calloc_r+0x18>
 801bf60:	4622      	mov	r2, r4
 801bf62:	2100      	movs	r1, #0
 801bf64:	f7fe f977 	bl	801a256 <memset>
 801bf68:	4628      	mov	r0, r5
 801bf6a:	bd38      	pop	{r3, r4, r5, pc}

0801bf6c <__ssputs_r>:
 801bf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf70:	688e      	ldr	r6, [r1, #8]
 801bf72:	429e      	cmp	r6, r3
 801bf74:	4682      	mov	sl, r0
 801bf76:	460c      	mov	r4, r1
 801bf78:	4690      	mov	r8, r2
 801bf7a:	4699      	mov	r9, r3
 801bf7c:	d837      	bhi.n	801bfee <__ssputs_r+0x82>
 801bf7e:	898a      	ldrh	r2, [r1, #12]
 801bf80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bf84:	d031      	beq.n	801bfea <__ssputs_r+0x7e>
 801bf86:	6825      	ldr	r5, [r4, #0]
 801bf88:	6909      	ldr	r1, [r1, #16]
 801bf8a:	1a6f      	subs	r7, r5, r1
 801bf8c:	6965      	ldr	r5, [r4, #20]
 801bf8e:	2302      	movs	r3, #2
 801bf90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf94:	fb95 f5f3 	sdiv	r5, r5, r3
 801bf98:	f109 0301 	add.w	r3, r9, #1
 801bf9c:	443b      	add	r3, r7
 801bf9e:	429d      	cmp	r5, r3
 801bfa0:	bf38      	it	cc
 801bfa2:	461d      	movcc	r5, r3
 801bfa4:	0553      	lsls	r3, r2, #21
 801bfa6:	d530      	bpl.n	801c00a <__ssputs_r+0x9e>
 801bfa8:	4629      	mov	r1, r5
 801bfaa:	f7fe f9ab 	bl	801a304 <_malloc_r>
 801bfae:	4606      	mov	r6, r0
 801bfb0:	b950      	cbnz	r0, 801bfc8 <__ssputs_r+0x5c>
 801bfb2:	230c      	movs	r3, #12
 801bfb4:	f8ca 3000 	str.w	r3, [sl]
 801bfb8:	89a3      	ldrh	r3, [r4, #12]
 801bfba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bfbe:	81a3      	strh	r3, [r4, #12]
 801bfc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfc8:	463a      	mov	r2, r7
 801bfca:	6921      	ldr	r1, [r4, #16]
 801bfcc:	f7fe f938 	bl	801a240 <memcpy>
 801bfd0:	89a3      	ldrh	r3, [r4, #12]
 801bfd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bfda:	81a3      	strh	r3, [r4, #12]
 801bfdc:	6126      	str	r6, [r4, #16]
 801bfde:	6165      	str	r5, [r4, #20]
 801bfe0:	443e      	add	r6, r7
 801bfe2:	1bed      	subs	r5, r5, r7
 801bfe4:	6026      	str	r6, [r4, #0]
 801bfe6:	60a5      	str	r5, [r4, #8]
 801bfe8:	464e      	mov	r6, r9
 801bfea:	454e      	cmp	r6, r9
 801bfec:	d900      	bls.n	801bff0 <__ssputs_r+0x84>
 801bfee:	464e      	mov	r6, r9
 801bff0:	4632      	mov	r2, r6
 801bff2:	4641      	mov	r1, r8
 801bff4:	6820      	ldr	r0, [r4, #0]
 801bff6:	f000 f90b 	bl	801c210 <memmove>
 801bffa:	68a3      	ldr	r3, [r4, #8]
 801bffc:	1b9b      	subs	r3, r3, r6
 801bffe:	60a3      	str	r3, [r4, #8]
 801c000:	6823      	ldr	r3, [r4, #0]
 801c002:	441e      	add	r6, r3
 801c004:	6026      	str	r6, [r4, #0]
 801c006:	2000      	movs	r0, #0
 801c008:	e7dc      	b.n	801bfc4 <__ssputs_r+0x58>
 801c00a:	462a      	mov	r2, r5
 801c00c:	f000 f919 	bl	801c242 <_realloc_r>
 801c010:	4606      	mov	r6, r0
 801c012:	2800      	cmp	r0, #0
 801c014:	d1e2      	bne.n	801bfdc <__ssputs_r+0x70>
 801c016:	6921      	ldr	r1, [r4, #16]
 801c018:	4650      	mov	r0, sl
 801c01a:	f7fe f925 	bl	801a268 <_free_r>
 801c01e:	e7c8      	b.n	801bfb2 <__ssputs_r+0x46>

0801c020 <_svfiprintf_r>:
 801c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c024:	461d      	mov	r5, r3
 801c026:	898b      	ldrh	r3, [r1, #12]
 801c028:	061f      	lsls	r7, r3, #24
 801c02a:	b09d      	sub	sp, #116	; 0x74
 801c02c:	4680      	mov	r8, r0
 801c02e:	460c      	mov	r4, r1
 801c030:	4616      	mov	r6, r2
 801c032:	d50f      	bpl.n	801c054 <_svfiprintf_r+0x34>
 801c034:	690b      	ldr	r3, [r1, #16]
 801c036:	b96b      	cbnz	r3, 801c054 <_svfiprintf_r+0x34>
 801c038:	2140      	movs	r1, #64	; 0x40
 801c03a:	f7fe f963 	bl	801a304 <_malloc_r>
 801c03e:	6020      	str	r0, [r4, #0]
 801c040:	6120      	str	r0, [r4, #16]
 801c042:	b928      	cbnz	r0, 801c050 <_svfiprintf_r+0x30>
 801c044:	230c      	movs	r3, #12
 801c046:	f8c8 3000 	str.w	r3, [r8]
 801c04a:	f04f 30ff 	mov.w	r0, #4294967295
 801c04e:	e0c8      	b.n	801c1e2 <_svfiprintf_r+0x1c2>
 801c050:	2340      	movs	r3, #64	; 0x40
 801c052:	6163      	str	r3, [r4, #20]
 801c054:	2300      	movs	r3, #0
 801c056:	9309      	str	r3, [sp, #36]	; 0x24
 801c058:	2320      	movs	r3, #32
 801c05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c05e:	2330      	movs	r3, #48	; 0x30
 801c060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c064:	9503      	str	r5, [sp, #12]
 801c066:	f04f 0b01 	mov.w	fp, #1
 801c06a:	4637      	mov	r7, r6
 801c06c:	463d      	mov	r5, r7
 801c06e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c072:	b10b      	cbz	r3, 801c078 <_svfiprintf_r+0x58>
 801c074:	2b25      	cmp	r3, #37	; 0x25
 801c076:	d13e      	bne.n	801c0f6 <_svfiprintf_r+0xd6>
 801c078:	ebb7 0a06 	subs.w	sl, r7, r6
 801c07c:	d00b      	beq.n	801c096 <_svfiprintf_r+0x76>
 801c07e:	4653      	mov	r3, sl
 801c080:	4632      	mov	r2, r6
 801c082:	4621      	mov	r1, r4
 801c084:	4640      	mov	r0, r8
 801c086:	f7ff ff71 	bl	801bf6c <__ssputs_r>
 801c08a:	3001      	adds	r0, #1
 801c08c:	f000 80a4 	beq.w	801c1d8 <_svfiprintf_r+0x1b8>
 801c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c092:	4453      	add	r3, sl
 801c094:	9309      	str	r3, [sp, #36]	; 0x24
 801c096:	783b      	ldrb	r3, [r7, #0]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	f000 809d 	beq.w	801c1d8 <_svfiprintf_r+0x1b8>
 801c09e:	2300      	movs	r3, #0
 801c0a0:	f04f 32ff 	mov.w	r2, #4294967295
 801c0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c0a8:	9304      	str	r3, [sp, #16]
 801c0aa:	9307      	str	r3, [sp, #28]
 801c0ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c0b0:	931a      	str	r3, [sp, #104]	; 0x68
 801c0b2:	462f      	mov	r7, r5
 801c0b4:	2205      	movs	r2, #5
 801c0b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c0ba:	4850      	ldr	r0, [pc, #320]	; (801c1fc <_svfiprintf_r+0x1dc>)
 801c0bc:	f7e4 f890 	bl	80001e0 <memchr>
 801c0c0:	9b04      	ldr	r3, [sp, #16]
 801c0c2:	b9d0      	cbnz	r0, 801c0fa <_svfiprintf_r+0xda>
 801c0c4:	06d9      	lsls	r1, r3, #27
 801c0c6:	bf44      	itt	mi
 801c0c8:	2220      	movmi	r2, #32
 801c0ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c0ce:	071a      	lsls	r2, r3, #28
 801c0d0:	bf44      	itt	mi
 801c0d2:	222b      	movmi	r2, #43	; 0x2b
 801c0d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c0d8:	782a      	ldrb	r2, [r5, #0]
 801c0da:	2a2a      	cmp	r2, #42	; 0x2a
 801c0dc:	d015      	beq.n	801c10a <_svfiprintf_r+0xea>
 801c0de:	9a07      	ldr	r2, [sp, #28]
 801c0e0:	462f      	mov	r7, r5
 801c0e2:	2000      	movs	r0, #0
 801c0e4:	250a      	movs	r5, #10
 801c0e6:	4639      	mov	r1, r7
 801c0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c0ec:	3b30      	subs	r3, #48	; 0x30
 801c0ee:	2b09      	cmp	r3, #9
 801c0f0:	d94d      	bls.n	801c18e <_svfiprintf_r+0x16e>
 801c0f2:	b1b8      	cbz	r0, 801c124 <_svfiprintf_r+0x104>
 801c0f4:	e00f      	b.n	801c116 <_svfiprintf_r+0xf6>
 801c0f6:	462f      	mov	r7, r5
 801c0f8:	e7b8      	b.n	801c06c <_svfiprintf_r+0x4c>
 801c0fa:	4a40      	ldr	r2, [pc, #256]	; (801c1fc <_svfiprintf_r+0x1dc>)
 801c0fc:	1a80      	subs	r0, r0, r2
 801c0fe:	fa0b f000 	lsl.w	r0, fp, r0
 801c102:	4318      	orrs	r0, r3
 801c104:	9004      	str	r0, [sp, #16]
 801c106:	463d      	mov	r5, r7
 801c108:	e7d3      	b.n	801c0b2 <_svfiprintf_r+0x92>
 801c10a:	9a03      	ldr	r2, [sp, #12]
 801c10c:	1d11      	adds	r1, r2, #4
 801c10e:	6812      	ldr	r2, [r2, #0]
 801c110:	9103      	str	r1, [sp, #12]
 801c112:	2a00      	cmp	r2, #0
 801c114:	db01      	blt.n	801c11a <_svfiprintf_r+0xfa>
 801c116:	9207      	str	r2, [sp, #28]
 801c118:	e004      	b.n	801c124 <_svfiprintf_r+0x104>
 801c11a:	4252      	negs	r2, r2
 801c11c:	f043 0302 	orr.w	r3, r3, #2
 801c120:	9207      	str	r2, [sp, #28]
 801c122:	9304      	str	r3, [sp, #16]
 801c124:	783b      	ldrb	r3, [r7, #0]
 801c126:	2b2e      	cmp	r3, #46	; 0x2e
 801c128:	d10c      	bne.n	801c144 <_svfiprintf_r+0x124>
 801c12a:	787b      	ldrb	r3, [r7, #1]
 801c12c:	2b2a      	cmp	r3, #42	; 0x2a
 801c12e:	d133      	bne.n	801c198 <_svfiprintf_r+0x178>
 801c130:	9b03      	ldr	r3, [sp, #12]
 801c132:	1d1a      	adds	r2, r3, #4
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	9203      	str	r2, [sp, #12]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	bfb8      	it	lt
 801c13c:	f04f 33ff 	movlt.w	r3, #4294967295
 801c140:	3702      	adds	r7, #2
 801c142:	9305      	str	r3, [sp, #20]
 801c144:	4d2e      	ldr	r5, [pc, #184]	; (801c200 <_svfiprintf_r+0x1e0>)
 801c146:	7839      	ldrb	r1, [r7, #0]
 801c148:	2203      	movs	r2, #3
 801c14a:	4628      	mov	r0, r5
 801c14c:	f7e4 f848 	bl	80001e0 <memchr>
 801c150:	b138      	cbz	r0, 801c162 <_svfiprintf_r+0x142>
 801c152:	2340      	movs	r3, #64	; 0x40
 801c154:	1b40      	subs	r0, r0, r5
 801c156:	fa03 f000 	lsl.w	r0, r3, r0
 801c15a:	9b04      	ldr	r3, [sp, #16]
 801c15c:	4303      	orrs	r3, r0
 801c15e:	3701      	adds	r7, #1
 801c160:	9304      	str	r3, [sp, #16]
 801c162:	7839      	ldrb	r1, [r7, #0]
 801c164:	4827      	ldr	r0, [pc, #156]	; (801c204 <_svfiprintf_r+0x1e4>)
 801c166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c16a:	2206      	movs	r2, #6
 801c16c:	1c7e      	adds	r6, r7, #1
 801c16e:	f7e4 f837 	bl	80001e0 <memchr>
 801c172:	2800      	cmp	r0, #0
 801c174:	d038      	beq.n	801c1e8 <_svfiprintf_r+0x1c8>
 801c176:	4b24      	ldr	r3, [pc, #144]	; (801c208 <_svfiprintf_r+0x1e8>)
 801c178:	bb13      	cbnz	r3, 801c1c0 <_svfiprintf_r+0x1a0>
 801c17a:	9b03      	ldr	r3, [sp, #12]
 801c17c:	3307      	adds	r3, #7
 801c17e:	f023 0307 	bic.w	r3, r3, #7
 801c182:	3308      	adds	r3, #8
 801c184:	9303      	str	r3, [sp, #12]
 801c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c188:	444b      	add	r3, r9
 801c18a:	9309      	str	r3, [sp, #36]	; 0x24
 801c18c:	e76d      	b.n	801c06a <_svfiprintf_r+0x4a>
 801c18e:	fb05 3202 	mla	r2, r5, r2, r3
 801c192:	2001      	movs	r0, #1
 801c194:	460f      	mov	r7, r1
 801c196:	e7a6      	b.n	801c0e6 <_svfiprintf_r+0xc6>
 801c198:	2300      	movs	r3, #0
 801c19a:	3701      	adds	r7, #1
 801c19c:	9305      	str	r3, [sp, #20]
 801c19e:	4619      	mov	r1, r3
 801c1a0:	250a      	movs	r5, #10
 801c1a2:	4638      	mov	r0, r7
 801c1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c1a8:	3a30      	subs	r2, #48	; 0x30
 801c1aa:	2a09      	cmp	r2, #9
 801c1ac:	d903      	bls.n	801c1b6 <_svfiprintf_r+0x196>
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d0c8      	beq.n	801c144 <_svfiprintf_r+0x124>
 801c1b2:	9105      	str	r1, [sp, #20]
 801c1b4:	e7c6      	b.n	801c144 <_svfiprintf_r+0x124>
 801c1b6:	fb05 2101 	mla	r1, r5, r1, r2
 801c1ba:	2301      	movs	r3, #1
 801c1bc:	4607      	mov	r7, r0
 801c1be:	e7f0      	b.n	801c1a2 <_svfiprintf_r+0x182>
 801c1c0:	ab03      	add	r3, sp, #12
 801c1c2:	9300      	str	r3, [sp, #0]
 801c1c4:	4622      	mov	r2, r4
 801c1c6:	4b11      	ldr	r3, [pc, #68]	; (801c20c <_svfiprintf_r+0x1ec>)
 801c1c8:	a904      	add	r1, sp, #16
 801c1ca:	4640      	mov	r0, r8
 801c1cc:	f7fe f988 	bl	801a4e0 <_printf_float>
 801c1d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c1d4:	4681      	mov	r9, r0
 801c1d6:	d1d6      	bne.n	801c186 <_svfiprintf_r+0x166>
 801c1d8:	89a3      	ldrh	r3, [r4, #12]
 801c1da:	065b      	lsls	r3, r3, #25
 801c1dc:	f53f af35 	bmi.w	801c04a <_svfiprintf_r+0x2a>
 801c1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c1e2:	b01d      	add	sp, #116	; 0x74
 801c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e8:	ab03      	add	r3, sp, #12
 801c1ea:	9300      	str	r3, [sp, #0]
 801c1ec:	4622      	mov	r2, r4
 801c1ee:	4b07      	ldr	r3, [pc, #28]	; (801c20c <_svfiprintf_r+0x1ec>)
 801c1f0:	a904      	add	r1, sp, #16
 801c1f2:	4640      	mov	r0, r8
 801c1f4:	f7fe fc2a 	bl	801aa4c <_printf_i>
 801c1f8:	e7ea      	b.n	801c1d0 <_svfiprintf_r+0x1b0>
 801c1fa:	bf00      	nop
 801c1fc:	0801f27c 	.word	0x0801f27c
 801c200:	0801f282 	.word	0x0801f282
 801c204:	0801f286 	.word	0x0801f286
 801c208:	0801a4e1 	.word	0x0801a4e1
 801c20c:	0801bf6d 	.word	0x0801bf6d

0801c210 <memmove>:
 801c210:	4288      	cmp	r0, r1
 801c212:	b510      	push	{r4, lr}
 801c214:	eb01 0302 	add.w	r3, r1, r2
 801c218:	d807      	bhi.n	801c22a <memmove+0x1a>
 801c21a:	1e42      	subs	r2, r0, #1
 801c21c:	4299      	cmp	r1, r3
 801c21e:	d00a      	beq.n	801c236 <memmove+0x26>
 801c220:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c224:	f802 4f01 	strb.w	r4, [r2, #1]!
 801c228:	e7f8      	b.n	801c21c <memmove+0xc>
 801c22a:	4283      	cmp	r3, r0
 801c22c:	d9f5      	bls.n	801c21a <memmove+0xa>
 801c22e:	1881      	adds	r1, r0, r2
 801c230:	1ad2      	subs	r2, r2, r3
 801c232:	42d3      	cmn	r3, r2
 801c234:	d100      	bne.n	801c238 <memmove+0x28>
 801c236:	bd10      	pop	{r4, pc}
 801c238:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c23c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801c240:	e7f7      	b.n	801c232 <memmove+0x22>

0801c242 <_realloc_r>:
 801c242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c244:	4607      	mov	r7, r0
 801c246:	4614      	mov	r4, r2
 801c248:	460e      	mov	r6, r1
 801c24a:	b921      	cbnz	r1, 801c256 <_realloc_r+0x14>
 801c24c:	4611      	mov	r1, r2
 801c24e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c252:	f7fe b857 	b.w	801a304 <_malloc_r>
 801c256:	b922      	cbnz	r2, 801c262 <_realloc_r+0x20>
 801c258:	f7fe f806 	bl	801a268 <_free_r>
 801c25c:	4625      	mov	r5, r4
 801c25e:	4628      	mov	r0, r5
 801c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c262:	f000 f814 	bl	801c28e <_malloc_usable_size_r>
 801c266:	42a0      	cmp	r0, r4
 801c268:	d20f      	bcs.n	801c28a <_realloc_r+0x48>
 801c26a:	4621      	mov	r1, r4
 801c26c:	4638      	mov	r0, r7
 801c26e:	f7fe f849 	bl	801a304 <_malloc_r>
 801c272:	4605      	mov	r5, r0
 801c274:	2800      	cmp	r0, #0
 801c276:	d0f2      	beq.n	801c25e <_realloc_r+0x1c>
 801c278:	4631      	mov	r1, r6
 801c27a:	4622      	mov	r2, r4
 801c27c:	f7fd ffe0 	bl	801a240 <memcpy>
 801c280:	4631      	mov	r1, r6
 801c282:	4638      	mov	r0, r7
 801c284:	f7fd fff0 	bl	801a268 <_free_r>
 801c288:	e7e9      	b.n	801c25e <_realloc_r+0x1c>
 801c28a:	4635      	mov	r5, r6
 801c28c:	e7e7      	b.n	801c25e <_realloc_r+0x1c>

0801c28e <_malloc_usable_size_r>:
 801c28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c292:	1f18      	subs	r0, r3, #4
 801c294:	2b00      	cmp	r3, #0
 801c296:	bfbc      	itt	lt
 801c298:	580b      	ldrlt	r3, [r1, r0]
 801c29a:	18c0      	addlt	r0, r0, r3
 801c29c:	4770      	bx	lr
	...

0801c2a0 <cos>:
 801c2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c2a2:	ec51 0b10 	vmov	r0, r1, d0
 801c2a6:	4a1e      	ldr	r2, [pc, #120]	; (801c320 <cos+0x80>)
 801c2a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c2ac:	4293      	cmp	r3, r2
 801c2ae:	dc06      	bgt.n	801c2be <cos+0x1e>
 801c2b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 801c318 <cos+0x78>
 801c2b4:	f001 faf8 	bl	801d8a8 <__kernel_cos>
 801c2b8:	ec51 0b10 	vmov	r0, r1, d0
 801c2bc:	e007      	b.n	801c2ce <cos+0x2e>
 801c2be:	4a19      	ldr	r2, [pc, #100]	; (801c324 <cos+0x84>)
 801c2c0:	4293      	cmp	r3, r2
 801c2c2:	dd09      	ble.n	801c2d8 <cos+0x38>
 801c2c4:	ee10 2a10 	vmov	r2, s0
 801c2c8:	460b      	mov	r3, r1
 801c2ca:	f7e3 ffdd 	bl	8000288 <__aeabi_dsub>
 801c2ce:	ec41 0b10 	vmov	d0, r0, r1
 801c2d2:	b005      	add	sp, #20
 801c2d4:	f85d fb04 	ldr.w	pc, [sp], #4
 801c2d8:	4668      	mov	r0, sp
 801c2da:	f001 f841 	bl	801d360 <__ieee754_rem_pio2>
 801c2de:	f000 0003 	and.w	r0, r0, #3
 801c2e2:	2801      	cmp	r0, #1
 801c2e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c2e8:	ed9d 0b00 	vldr	d0, [sp]
 801c2ec:	d007      	beq.n	801c2fe <cos+0x5e>
 801c2ee:	2802      	cmp	r0, #2
 801c2f0:	d00e      	beq.n	801c310 <cos+0x70>
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	d0de      	beq.n	801c2b4 <cos+0x14>
 801c2f6:	2001      	movs	r0, #1
 801c2f8:	f001 fede 	bl	801e0b8 <__kernel_sin>
 801c2fc:	e7dc      	b.n	801c2b8 <cos+0x18>
 801c2fe:	f001 fedb 	bl	801e0b8 <__kernel_sin>
 801c302:	ec53 2b10 	vmov	r2, r3, d0
 801c306:	ee10 0a10 	vmov	r0, s0
 801c30a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c30e:	e7de      	b.n	801c2ce <cos+0x2e>
 801c310:	f001 faca 	bl	801d8a8 <__kernel_cos>
 801c314:	e7f5      	b.n	801c302 <cos+0x62>
 801c316:	bf00      	nop
	...
 801c320:	3fe921fb 	.word	0x3fe921fb
 801c324:	7fefffff 	.word	0x7fefffff

0801c328 <fabs>:
 801c328:	ec51 0b10 	vmov	r0, r1, d0
 801c32c:	ee10 2a10 	vmov	r2, s0
 801c330:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c334:	ec43 2b10 	vmov	d0, r2, r3
 801c338:	4770      	bx	lr
	...

0801c33c <round>:
 801c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c33e:	ec57 6b10 	vmov	r6, r7, d0
 801c342:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801c346:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801c34a:	2c13      	cmp	r4, #19
 801c34c:	463b      	mov	r3, r7
 801c34e:	463d      	mov	r5, r7
 801c350:	dc17      	bgt.n	801c382 <round+0x46>
 801c352:	2c00      	cmp	r4, #0
 801c354:	da09      	bge.n	801c36a <round+0x2e>
 801c356:	3401      	adds	r4, #1
 801c358:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801c35c:	d103      	bne.n	801c366 <round+0x2a>
 801c35e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801c362:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c366:	2100      	movs	r1, #0
 801c368:	e02c      	b.n	801c3c4 <round+0x88>
 801c36a:	4a18      	ldr	r2, [pc, #96]	; (801c3cc <round+0x90>)
 801c36c:	4122      	asrs	r2, r4
 801c36e:	4217      	tst	r7, r2
 801c370:	d100      	bne.n	801c374 <round+0x38>
 801c372:	b19e      	cbz	r6, 801c39c <round+0x60>
 801c374:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801c378:	4123      	asrs	r3, r4
 801c37a:	442b      	add	r3, r5
 801c37c:	ea23 0302 	bic.w	r3, r3, r2
 801c380:	e7f1      	b.n	801c366 <round+0x2a>
 801c382:	2c33      	cmp	r4, #51	; 0x33
 801c384:	dd0d      	ble.n	801c3a2 <round+0x66>
 801c386:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801c38a:	d107      	bne.n	801c39c <round+0x60>
 801c38c:	4630      	mov	r0, r6
 801c38e:	4639      	mov	r1, r7
 801c390:	ee10 2a10 	vmov	r2, s0
 801c394:	f7e3 ff7a 	bl	800028c <__adddf3>
 801c398:	4606      	mov	r6, r0
 801c39a:	460f      	mov	r7, r1
 801c39c:	ec47 6b10 	vmov	d0, r6, r7
 801c3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3a2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801c3a6:	f04f 30ff 	mov.w	r0, #4294967295
 801c3aa:	40d0      	lsrs	r0, r2
 801c3ac:	4206      	tst	r6, r0
 801c3ae:	d0f5      	beq.n	801c39c <round+0x60>
 801c3b0:	2201      	movs	r2, #1
 801c3b2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801c3b6:	fa02 f404 	lsl.w	r4, r2, r4
 801c3ba:	1931      	adds	r1, r6, r4
 801c3bc:	bf28      	it	cs
 801c3be:	189b      	addcs	r3, r3, r2
 801c3c0:	ea21 0100 	bic.w	r1, r1, r0
 801c3c4:	461f      	mov	r7, r3
 801c3c6:	460e      	mov	r6, r1
 801c3c8:	e7e8      	b.n	801c39c <round+0x60>
 801c3ca:	bf00      	nop
 801c3cc:	000fffff 	.word	0x000fffff

0801c3d0 <sin>:
 801c3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c3d2:	ec51 0b10 	vmov	r0, r1, d0
 801c3d6:	4a20      	ldr	r2, [pc, #128]	; (801c458 <sin+0x88>)
 801c3d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c3dc:	4293      	cmp	r3, r2
 801c3de:	dc07      	bgt.n	801c3f0 <sin+0x20>
 801c3e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 801c450 <sin+0x80>
 801c3e4:	2000      	movs	r0, #0
 801c3e6:	f001 fe67 	bl	801e0b8 <__kernel_sin>
 801c3ea:	ec51 0b10 	vmov	r0, r1, d0
 801c3ee:	e007      	b.n	801c400 <sin+0x30>
 801c3f0:	4a1a      	ldr	r2, [pc, #104]	; (801c45c <sin+0x8c>)
 801c3f2:	4293      	cmp	r3, r2
 801c3f4:	dd09      	ble.n	801c40a <sin+0x3a>
 801c3f6:	ee10 2a10 	vmov	r2, s0
 801c3fa:	460b      	mov	r3, r1
 801c3fc:	f7e3 ff44 	bl	8000288 <__aeabi_dsub>
 801c400:	ec41 0b10 	vmov	d0, r0, r1
 801c404:	b005      	add	sp, #20
 801c406:	f85d fb04 	ldr.w	pc, [sp], #4
 801c40a:	4668      	mov	r0, sp
 801c40c:	f000 ffa8 	bl	801d360 <__ieee754_rem_pio2>
 801c410:	f000 0003 	and.w	r0, r0, #3
 801c414:	2801      	cmp	r0, #1
 801c416:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c41a:	ed9d 0b00 	vldr	d0, [sp]
 801c41e:	d004      	beq.n	801c42a <sin+0x5a>
 801c420:	2802      	cmp	r0, #2
 801c422:	d005      	beq.n	801c430 <sin+0x60>
 801c424:	b970      	cbnz	r0, 801c444 <sin+0x74>
 801c426:	2001      	movs	r0, #1
 801c428:	e7dd      	b.n	801c3e6 <sin+0x16>
 801c42a:	f001 fa3d 	bl	801d8a8 <__kernel_cos>
 801c42e:	e7dc      	b.n	801c3ea <sin+0x1a>
 801c430:	2001      	movs	r0, #1
 801c432:	f001 fe41 	bl	801e0b8 <__kernel_sin>
 801c436:	ec53 2b10 	vmov	r2, r3, d0
 801c43a:	ee10 0a10 	vmov	r0, s0
 801c43e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c442:	e7dd      	b.n	801c400 <sin+0x30>
 801c444:	f001 fa30 	bl	801d8a8 <__kernel_cos>
 801c448:	e7f5      	b.n	801c436 <sin+0x66>
 801c44a:	bf00      	nop
 801c44c:	f3af 8000 	nop.w
	...
 801c458:	3fe921fb 	.word	0x3fe921fb
 801c45c:	7fefffff 	.word	0x7fefffff

0801c460 <tan>:
 801c460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c462:	ec51 0b10 	vmov	r0, r1, d0
 801c466:	4a14      	ldr	r2, [pc, #80]	; (801c4b8 <tan+0x58>)
 801c468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c46c:	4293      	cmp	r3, r2
 801c46e:	dc05      	bgt.n	801c47c <tan+0x1c>
 801c470:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 801c4b0 <tan+0x50>
 801c474:	2001      	movs	r0, #1
 801c476:	f001 fedb 	bl	801e230 <__kernel_tan>
 801c47a:	e009      	b.n	801c490 <tan+0x30>
 801c47c:	4a0f      	ldr	r2, [pc, #60]	; (801c4bc <tan+0x5c>)
 801c47e:	4293      	cmp	r3, r2
 801c480:	dd09      	ble.n	801c496 <tan+0x36>
 801c482:	ee10 2a10 	vmov	r2, s0
 801c486:	460b      	mov	r3, r1
 801c488:	f7e3 fefe 	bl	8000288 <__aeabi_dsub>
 801c48c:	ec41 0b10 	vmov	d0, r0, r1
 801c490:	b005      	add	sp, #20
 801c492:	f85d fb04 	ldr.w	pc, [sp], #4
 801c496:	4668      	mov	r0, sp
 801c498:	f000 ff62 	bl	801d360 <__ieee754_rem_pio2>
 801c49c:	0040      	lsls	r0, r0, #1
 801c49e:	f000 0002 	and.w	r0, r0, #2
 801c4a2:	f1c0 0001 	rsb	r0, r0, #1
 801c4a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801c4aa:	ed9d 0b00 	vldr	d0, [sp]
 801c4ae:	e7e2      	b.n	801c476 <tan+0x16>
	...
 801c4b8:	3fe921fb 	.word	0x3fe921fb
 801c4bc:	7fefffff 	.word	0x7fefffff

0801c4c0 <acos>:
 801c4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4c2:	ed2d 8b02 	vpush	{d8}
 801c4c6:	4e26      	ldr	r6, [pc, #152]	; (801c560 <acos+0xa0>)
 801c4c8:	b08b      	sub	sp, #44	; 0x2c
 801c4ca:	ec55 4b10 	vmov	r4, r5, d0
 801c4ce:	f000 f927 	bl	801c720 <__ieee754_acos>
 801c4d2:	f996 3000 	ldrsb.w	r3, [r6]
 801c4d6:	eeb0 8a40 	vmov.f32	s16, s0
 801c4da:	eef0 8a60 	vmov.f32	s17, s1
 801c4de:	3301      	adds	r3, #1
 801c4e0:	d036      	beq.n	801c550 <acos+0x90>
 801c4e2:	4622      	mov	r2, r4
 801c4e4:	462b      	mov	r3, r5
 801c4e6:	4620      	mov	r0, r4
 801c4e8:	4629      	mov	r1, r5
 801c4ea:	f7e4 fb1f 	bl	8000b2c <__aeabi_dcmpun>
 801c4ee:	4607      	mov	r7, r0
 801c4f0:	bb70      	cbnz	r0, 801c550 <acos+0x90>
 801c4f2:	ec45 4b10 	vmov	d0, r4, r5
 801c4f6:	f7ff ff17 	bl	801c328 <fabs>
 801c4fa:	2200      	movs	r2, #0
 801c4fc:	4b19      	ldr	r3, [pc, #100]	; (801c564 <acos+0xa4>)
 801c4fe:	ec51 0b10 	vmov	r0, r1, d0
 801c502:	f7e4 fb09 	bl	8000b18 <__aeabi_dcmpgt>
 801c506:	b318      	cbz	r0, 801c550 <acos+0x90>
 801c508:	2301      	movs	r3, #1
 801c50a:	9300      	str	r3, [sp, #0]
 801c50c:	4816      	ldr	r0, [pc, #88]	; (801c568 <acos+0xa8>)
 801c50e:	4b17      	ldr	r3, [pc, #92]	; (801c56c <acos+0xac>)
 801c510:	9301      	str	r3, [sp, #4]
 801c512:	9708      	str	r7, [sp, #32]
 801c514:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c518:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c51c:	f002 f8dc 	bl	801e6d8 <nan>
 801c520:	f996 3000 	ldrsb.w	r3, [r6]
 801c524:	2b02      	cmp	r3, #2
 801c526:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c52a:	d104      	bne.n	801c536 <acos+0x76>
 801c52c:	f7fd fe2e 	bl	801a18c <__errno>
 801c530:	2321      	movs	r3, #33	; 0x21
 801c532:	6003      	str	r3, [r0, #0]
 801c534:	e004      	b.n	801c540 <acos+0x80>
 801c536:	4668      	mov	r0, sp
 801c538:	f002 f8ca 	bl	801e6d0 <matherr>
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d0f5      	beq.n	801c52c <acos+0x6c>
 801c540:	9b08      	ldr	r3, [sp, #32]
 801c542:	b11b      	cbz	r3, 801c54c <acos+0x8c>
 801c544:	f7fd fe22 	bl	801a18c <__errno>
 801c548:	9b08      	ldr	r3, [sp, #32]
 801c54a:	6003      	str	r3, [r0, #0]
 801c54c:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c550:	eeb0 0a48 	vmov.f32	s0, s16
 801c554:	eef0 0a68 	vmov.f32	s1, s17
 801c558:	b00b      	add	sp, #44	; 0x2c
 801c55a:	ecbd 8b02 	vpop	{d8}
 801c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c560:	20000394 	.word	0x20000394
 801c564:	3ff00000 	.word	0x3ff00000
 801c568:	0801f281 	.word	0x0801f281
 801c56c:	0801f28d 	.word	0x0801f28d

0801c570 <asin>:
 801c570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c572:	ed2d 8b02 	vpush	{d8}
 801c576:	4e26      	ldr	r6, [pc, #152]	; (801c610 <asin+0xa0>)
 801c578:	b08b      	sub	sp, #44	; 0x2c
 801c57a:	ec55 4b10 	vmov	r4, r5, d0
 801c57e:	f000 fb2b 	bl	801cbd8 <__ieee754_asin>
 801c582:	f996 3000 	ldrsb.w	r3, [r6]
 801c586:	eeb0 8a40 	vmov.f32	s16, s0
 801c58a:	eef0 8a60 	vmov.f32	s17, s1
 801c58e:	3301      	adds	r3, #1
 801c590:	d036      	beq.n	801c600 <asin+0x90>
 801c592:	4622      	mov	r2, r4
 801c594:	462b      	mov	r3, r5
 801c596:	4620      	mov	r0, r4
 801c598:	4629      	mov	r1, r5
 801c59a:	f7e4 fac7 	bl	8000b2c <__aeabi_dcmpun>
 801c59e:	4607      	mov	r7, r0
 801c5a0:	bb70      	cbnz	r0, 801c600 <asin+0x90>
 801c5a2:	ec45 4b10 	vmov	d0, r4, r5
 801c5a6:	f7ff febf 	bl	801c328 <fabs>
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	4b19      	ldr	r3, [pc, #100]	; (801c614 <asin+0xa4>)
 801c5ae:	ec51 0b10 	vmov	r0, r1, d0
 801c5b2:	f7e4 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 801c5b6:	b318      	cbz	r0, 801c600 <asin+0x90>
 801c5b8:	2301      	movs	r3, #1
 801c5ba:	9300      	str	r3, [sp, #0]
 801c5bc:	4816      	ldr	r0, [pc, #88]	; (801c618 <asin+0xa8>)
 801c5be:	4b17      	ldr	r3, [pc, #92]	; (801c61c <asin+0xac>)
 801c5c0:	9301      	str	r3, [sp, #4]
 801c5c2:	9708      	str	r7, [sp, #32]
 801c5c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c5c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c5cc:	f002 f884 	bl	801e6d8 <nan>
 801c5d0:	f996 3000 	ldrsb.w	r3, [r6]
 801c5d4:	2b02      	cmp	r3, #2
 801c5d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c5da:	d104      	bne.n	801c5e6 <asin+0x76>
 801c5dc:	f7fd fdd6 	bl	801a18c <__errno>
 801c5e0:	2321      	movs	r3, #33	; 0x21
 801c5e2:	6003      	str	r3, [r0, #0]
 801c5e4:	e004      	b.n	801c5f0 <asin+0x80>
 801c5e6:	4668      	mov	r0, sp
 801c5e8:	f002 f872 	bl	801e6d0 <matherr>
 801c5ec:	2800      	cmp	r0, #0
 801c5ee:	d0f5      	beq.n	801c5dc <asin+0x6c>
 801c5f0:	9b08      	ldr	r3, [sp, #32]
 801c5f2:	b11b      	cbz	r3, 801c5fc <asin+0x8c>
 801c5f4:	f7fd fdca 	bl	801a18c <__errno>
 801c5f8:	9b08      	ldr	r3, [sp, #32]
 801c5fa:	6003      	str	r3, [r0, #0]
 801c5fc:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c600:	eeb0 0a48 	vmov.f32	s0, s16
 801c604:	eef0 0a68 	vmov.f32	s1, s17
 801c608:	b00b      	add	sp, #44	; 0x2c
 801c60a:	ecbd 8b02 	vpop	{d8}
 801c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c610:	20000394 	.word	0x20000394
 801c614:	3ff00000 	.word	0x3ff00000
 801c618:	0801f281 	.word	0x0801f281
 801c61c:	0801f292 	.word	0x0801f292

0801c620 <log>:
 801c620:	b570      	push	{r4, r5, r6, lr}
 801c622:	ed2d 8b02 	vpush	{d8}
 801c626:	b08a      	sub	sp, #40	; 0x28
 801c628:	ec55 4b10 	vmov	r4, r5, d0
 801c62c:	f000 fce4 	bl	801cff8 <__ieee754_log>
 801c630:	4b36      	ldr	r3, [pc, #216]	; (801c70c <log+0xec>)
 801c632:	eeb0 8a40 	vmov.f32	s16, s0
 801c636:	eef0 8a60 	vmov.f32	s17, s1
 801c63a:	f993 6000 	ldrsb.w	r6, [r3]
 801c63e:	1c73      	adds	r3, r6, #1
 801c640:	d05b      	beq.n	801c6fa <log+0xda>
 801c642:	4622      	mov	r2, r4
 801c644:	462b      	mov	r3, r5
 801c646:	4620      	mov	r0, r4
 801c648:	4629      	mov	r1, r5
 801c64a:	f7e4 fa6f 	bl	8000b2c <__aeabi_dcmpun>
 801c64e:	2800      	cmp	r0, #0
 801c650:	d153      	bne.n	801c6fa <log+0xda>
 801c652:	2200      	movs	r2, #0
 801c654:	2300      	movs	r3, #0
 801c656:	4620      	mov	r0, r4
 801c658:	4629      	mov	r1, r5
 801c65a:	f7e4 fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 801c65e:	2800      	cmp	r0, #0
 801c660:	d14b      	bne.n	801c6fa <log+0xda>
 801c662:	4b2b      	ldr	r3, [pc, #172]	; (801c710 <log+0xf0>)
 801c664:	9301      	str	r3, [sp, #4]
 801c666:	9008      	str	r0, [sp, #32]
 801c668:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c66c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801c670:	b9a6      	cbnz	r6, 801c69c <log+0x7c>
 801c672:	4b28      	ldr	r3, [pc, #160]	; (801c714 <log+0xf4>)
 801c674:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801c678:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c67c:	4620      	mov	r0, r4
 801c67e:	2200      	movs	r2, #0
 801c680:	2300      	movs	r3, #0
 801c682:	4629      	mov	r1, r5
 801c684:	f7e4 fa20 	bl	8000ac8 <__aeabi_dcmpeq>
 801c688:	bb40      	cbnz	r0, 801c6dc <log+0xbc>
 801c68a:	2301      	movs	r3, #1
 801c68c:	2e02      	cmp	r6, #2
 801c68e:	9300      	str	r3, [sp, #0]
 801c690:	d119      	bne.n	801c6c6 <log+0xa6>
 801c692:	f7fd fd7b 	bl	801a18c <__errno>
 801c696:	2321      	movs	r3, #33	; 0x21
 801c698:	6003      	str	r3, [r0, #0]
 801c69a:	e019      	b.n	801c6d0 <log+0xb0>
 801c69c:	4b1e      	ldr	r3, [pc, #120]	; (801c718 <log+0xf8>)
 801c69e:	2200      	movs	r2, #0
 801c6a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4629      	mov	r1, r5
 801c6ac:	f7e4 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 801c6b0:	2800      	cmp	r0, #0
 801c6b2:	d0ea      	beq.n	801c68a <log+0x6a>
 801c6b4:	2302      	movs	r3, #2
 801c6b6:	429e      	cmp	r6, r3
 801c6b8:	9300      	str	r3, [sp, #0]
 801c6ba:	d111      	bne.n	801c6e0 <log+0xc0>
 801c6bc:	f7fd fd66 	bl	801a18c <__errno>
 801c6c0:	2322      	movs	r3, #34	; 0x22
 801c6c2:	6003      	str	r3, [r0, #0]
 801c6c4:	e011      	b.n	801c6ea <log+0xca>
 801c6c6:	4668      	mov	r0, sp
 801c6c8:	f002 f802 	bl	801e6d0 <matherr>
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	d0e0      	beq.n	801c692 <log+0x72>
 801c6d0:	4812      	ldr	r0, [pc, #72]	; (801c71c <log+0xfc>)
 801c6d2:	f002 f801 	bl	801e6d8 <nan>
 801c6d6:	ed8d 0b06 	vstr	d0, [sp, #24]
 801c6da:	e006      	b.n	801c6ea <log+0xca>
 801c6dc:	2302      	movs	r3, #2
 801c6de:	9300      	str	r3, [sp, #0]
 801c6e0:	4668      	mov	r0, sp
 801c6e2:	f001 fff5 	bl	801e6d0 <matherr>
 801c6e6:	2800      	cmp	r0, #0
 801c6e8:	d0e8      	beq.n	801c6bc <log+0x9c>
 801c6ea:	9b08      	ldr	r3, [sp, #32]
 801c6ec:	b11b      	cbz	r3, 801c6f6 <log+0xd6>
 801c6ee:	f7fd fd4d 	bl	801a18c <__errno>
 801c6f2:	9b08      	ldr	r3, [sp, #32]
 801c6f4:	6003      	str	r3, [r0, #0]
 801c6f6:	ed9d 8b06 	vldr	d8, [sp, #24]
 801c6fa:	eeb0 0a48 	vmov.f32	s0, s16
 801c6fe:	eef0 0a68 	vmov.f32	s1, s17
 801c702:	b00a      	add	sp, #40	; 0x28
 801c704:	ecbd 8b02 	vpop	{d8}
 801c708:	bd70      	pop	{r4, r5, r6, pc}
 801c70a:	bf00      	nop
 801c70c:	20000394 	.word	0x20000394
 801c710:	0801f297 	.word	0x0801f297
 801c714:	c7efffff 	.word	0xc7efffff
 801c718:	fff00000 	.word	0xfff00000
 801c71c:	0801f281 	.word	0x0801f281

0801c720 <__ieee754_acos>:
 801c720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c724:	ec55 4b10 	vmov	r4, r5, d0
 801c728:	49b7      	ldr	r1, [pc, #732]	; (801ca08 <__ieee754_acos+0x2e8>)
 801c72a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c72e:	428b      	cmp	r3, r1
 801c730:	dd1b      	ble.n	801c76a <__ieee754_acos+0x4a>
 801c732:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801c736:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c73a:	4323      	orrs	r3, r4
 801c73c:	d109      	bne.n	801c752 <__ieee754_acos+0x32>
 801c73e:	2d00      	cmp	r5, #0
 801c740:	f300 8211 	bgt.w	801cb66 <__ieee754_acos+0x446>
 801c744:	a196      	add	r1, pc, #600	; (adr r1, 801c9a0 <__ieee754_acos+0x280>)
 801c746:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c74a:	ec41 0b10 	vmov	d0, r0, r1
 801c74e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c752:	ee10 2a10 	vmov	r2, s0
 801c756:	462b      	mov	r3, r5
 801c758:	4620      	mov	r0, r4
 801c75a:	4629      	mov	r1, r5
 801c75c:	f7e3 fd94 	bl	8000288 <__aeabi_dsub>
 801c760:	4602      	mov	r2, r0
 801c762:	460b      	mov	r3, r1
 801c764:	f7e4 f872 	bl	800084c <__aeabi_ddiv>
 801c768:	e7ef      	b.n	801c74a <__ieee754_acos+0x2a>
 801c76a:	49a8      	ldr	r1, [pc, #672]	; (801ca0c <__ieee754_acos+0x2ec>)
 801c76c:	428b      	cmp	r3, r1
 801c76e:	f300 8087 	bgt.w	801c880 <__ieee754_acos+0x160>
 801c772:	4aa7      	ldr	r2, [pc, #668]	; (801ca10 <__ieee754_acos+0x2f0>)
 801c774:	4293      	cmp	r3, r2
 801c776:	f340 81f9 	ble.w	801cb6c <__ieee754_acos+0x44c>
 801c77a:	ee10 2a10 	vmov	r2, s0
 801c77e:	ee10 0a10 	vmov	r0, s0
 801c782:	462b      	mov	r3, r5
 801c784:	4629      	mov	r1, r5
 801c786:	f7e3 ff37 	bl	80005f8 <__aeabi_dmul>
 801c78a:	a387      	add	r3, pc, #540	; (adr r3, 801c9a8 <__ieee754_acos+0x288>)
 801c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c790:	4606      	mov	r6, r0
 801c792:	460f      	mov	r7, r1
 801c794:	f7e3 ff30 	bl	80005f8 <__aeabi_dmul>
 801c798:	a385      	add	r3, pc, #532	; (adr r3, 801c9b0 <__ieee754_acos+0x290>)
 801c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c79e:	f7e3 fd75 	bl	800028c <__adddf3>
 801c7a2:	4632      	mov	r2, r6
 801c7a4:	463b      	mov	r3, r7
 801c7a6:	f7e3 ff27 	bl	80005f8 <__aeabi_dmul>
 801c7aa:	a383      	add	r3, pc, #524	; (adr r3, 801c9b8 <__ieee754_acos+0x298>)
 801c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b0:	f7e3 fd6a 	bl	8000288 <__aeabi_dsub>
 801c7b4:	4632      	mov	r2, r6
 801c7b6:	463b      	mov	r3, r7
 801c7b8:	f7e3 ff1e 	bl	80005f8 <__aeabi_dmul>
 801c7bc:	a380      	add	r3, pc, #512	; (adr r3, 801c9c0 <__ieee754_acos+0x2a0>)
 801c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c2:	f7e3 fd63 	bl	800028c <__adddf3>
 801c7c6:	4632      	mov	r2, r6
 801c7c8:	463b      	mov	r3, r7
 801c7ca:	f7e3 ff15 	bl	80005f8 <__aeabi_dmul>
 801c7ce:	a37e      	add	r3, pc, #504	; (adr r3, 801c9c8 <__ieee754_acos+0x2a8>)
 801c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7d4:	f7e3 fd58 	bl	8000288 <__aeabi_dsub>
 801c7d8:	4632      	mov	r2, r6
 801c7da:	463b      	mov	r3, r7
 801c7dc:	f7e3 ff0c 	bl	80005f8 <__aeabi_dmul>
 801c7e0:	a37b      	add	r3, pc, #492	; (adr r3, 801c9d0 <__ieee754_acos+0x2b0>)
 801c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e6:	f7e3 fd51 	bl	800028c <__adddf3>
 801c7ea:	4632      	mov	r2, r6
 801c7ec:	463b      	mov	r3, r7
 801c7ee:	f7e3 ff03 	bl	80005f8 <__aeabi_dmul>
 801c7f2:	a379      	add	r3, pc, #484	; (adr r3, 801c9d8 <__ieee754_acos+0x2b8>)
 801c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7f8:	4680      	mov	r8, r0
 801c7fa:	4689      	mov	r9, r1
 801c7fc:	4630      	mov	r0, r6
 801c7fe:	4639      	mov	r1, r7
 801c800:	f7e3 fefa 	bl	80005f8 <__aeabi_dmul>
 801c804:	a376      	add	r3, pc, #472	; (adr r3, 801c9e0 <__ieee754_acos+0x2c0>)
 801c806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c80a:	f7e3 fd3d 	bl	8000288 <__aeabi_dsub>
 801c80e:	4632      	mov	r2, r6
 801c810:	463b      	mov	r3, r7
 801c812:	f7e3 fef1 	bl	80005f8 <__aeabi_dmul>
 801c816:	a374      	add	r3, pc, #464	; (adr r3, 801c9e8 <__ieee754_acos+0x2c8>)
 801c818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81c:	f7e3 fd36 	bl	800028c <__adddf3>
 801c820:	4632      	mov	r2, r6
 801c822:	463b      	mov	r3, r7
 801c824:	f7e3 fee8 	bl	80005f8 <__aeabi_dmul>
 801c828:	a371      	add	r3, pc, #452	; (adr r3, 801c9f0 <__ieee754_acos+0x2d0>)
 801c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c82e:	f7e3 fd2b 	bl	8000288 <__aeabi_dsub>
 801c832:	4632      	mov	r2, r6
 801c834:	463b      	mov	r3, r7
 801c836:	f7e3 fedf 	bl	80005f8 <__aeabi_dmul>
 801c83a:	2200      	movs	r2, #0
 801c83c:	4b75      	ldr	r3, [pc, #468]	; (801ca14 <__ieee754_acos+0x2f4>)
 801c83e:	f7e3 fd25 	bl	800028c <__adddf3>
 801c842:	4602      	mov	r2, r0
 801c844:	460b      	mov	r3, r1
 801c846:	4640      	mov	r0, r8
 801c848:	4649      	mov	r1, r9
 801c84a:	f7e3 ffff 	bl	800084c <__aeabi_ddiv>
 801c84e:	4622      	mov	r2, r4
 801c850:	462b      	mov	r3, r5
 801c852:	f7e3 fed1 	bl	80005f8 <__aeabi_dmul>
 801c856:	4602      	mov	r2, r0
 801c858:	460b      	mov	r3, r1
 801c85a:	a167      	add	r1, pc, #412	; (adr r1, 801c9f8 <__ieee754_acos+0x2d8>)
 801c85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c860:	f7e3 fd12 	bl	8000288 <__aeabi_dsub>
 801c864:	4602      	mov	r2, r0
 801c866:	460b      	mov	r3, r1
 801c868:	4620      	mov	r0, r4
 801c86a:	4629      	mov	r1, r5
 801c86c:	f7e3 fd0c 	bl	8000288 <__aeabi_dsub>
 801c870:	4602      	mov	r2, r0
 801c872:	460b      	mov	r3, r1
 801c874:	a162      	add	r1, pc, #392	; (adr r1, 801ca00 <__ieee754_acos+0x2e0>)
 801c876:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c87a:	f7e3 fd05 	bl	8000288 <__aeabi_dsub>
 801c87e:	e764      	b.n	801c74a <__ieee754_acos+0x2a>
 801c880:	2d00      	cmp	r5, #0
 801c882:	f280 80cb 	bge.w	801ca1c <__ieee754_acos+0x2fc>
 801c886:	ee10 0a10 	vmov	r0, s0
 801c88a:	2200      	movs	r2, #0
 801c88c:	4b61      	ldr	r3, [pc, #388]	; (801ca14 <__ieee754_acos+0x2f4>)
 801c88e:	4629      	mov	r1, r5
 801c890:	f7e3 fcfc 	bl	800028c <__adddf3>
 801c894:	2200      	movs	r2, #0
 801c896:	4b60      	ldr	r3, [pc, #384]	; (801ca18 <__ieee754_acos+0x2f8>)
 801c898:	f7e3 feae 	bl	80005f8 <__aeabi_dmul>
 801c89c:	a342      	add	r3, pc, #264	; (adr r3, 801c9a8 <__ieee754_acos+0x288>)
 801c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a2:	4604      	mov	r4, r0
 801c8a4:	460d      	mov	r5, r1
 801c8a6:	f7e3 fea7 	bl	80005f8 <__aeabi_dmul>
 801c8aa:	a341      	add	r3, pc, #260	; (adr r3, 801c9b0 <__ieee754_acos+0x290>)
 801c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8b0:	f7e3 fcec 	bl	800028c <__adddf3>
 801c8b4:	4622      	mov	r2, r4
 801c8b6:	462b      	mov	r3, r5
 801c8b8:	f7e3 fe9e 	bl	80005f8 <__aeabi_dmul>
 801c8bc:	a33e      	add	r3, pc, #248	; (adr r3, 801c9b8 <__ieee754_acos+0x298>)
 801c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c2:	f7e3 fce1 	bl	8000288 <__aeabi_dsub>
 801c8c6:	4622      	mov	r2, r4
 801c8c8:	462b      	mov	r3, r5
 801c8ca:	f7e3 fe95 	bl	80005f8 <__aeabi_dmul>
 801c8ce:	a33c      	add	r3, pc, #240	; (adr r3, 801c9c0 <__ieee754_acos+0x2a0>)
 801c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8d4:	f7e3 fcda 	bl	800028c <__adddf3>
 801c8d8:	4622      	mov	r2, r4
 801c8da:	462b      	mov	r3, r5
 801c8dc:	f7e3 fe8c 	bl	80005f8 <__aeabi_dmul>
 801c8e0:	a339      	add	r3, pc, #228	; (adr r3, 801c9c8 <__ieee754_acos+0x2a8>)
 801c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e6:	f7e3 fccf 	bl	8000288 <__aeabi_dsub>
 801c8ea:	4622      	mov	r2, r4
 801c8ec:	462b      	mov	r3, r5
 801c8ee:	f7e3 fe83 	bl	80005f8 <__aeabi_dmul>
 801c8f2:	a337      	add	r3, pc, #220	; (adr r3, 801c9d0 <__ieee754_acos+0x2b0>)
 801c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8f8:	f7e3 fcc8 	bl	800028c <__adddf3>
 801c8fc:	4622      	mov	r2, r4
 801c8fe:	462b      	mov	r3, r5
 801c900:	f7e3 fe7a 	bl	80005f8 <__aeabi_dmul>
 801c904:	ec45 4b10 	vmov	d0, r4, r5
 801c908:	4680      	mov	r8, r0
 801c90a:	4689      	mov	r9, r1
 801c90c:	f000 ff1a 	bl	801d744 <__ieee754_sqrt>
 801c910:	a331      	add	r3, pc, #196	; (adr r3, 801c9d8 <__ieee754_acos+0x2b8>)
 801c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c916:	4620      	mov	r0, r4
 801c918:	4629      	mov	r1, r5
 801c91a:	ec57 6b10 	vmov	r6, r7, d0
 801c91e:	f7e3 fe6b 	bl	80005f8 <__aeabi_dmul>
 801c922:	a32f      	add	r3, pc, #188	; (adr r3, 801c9e0 <__ieee754_acos+0x2c0>)
 801c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c928:	f7e3 fcae 	bl	8000288 <__aeabi_dsub>
 801c92c:	4622      	mov	r2, r4
 801c92e:	462b      	mov	r3, r5
 801c930:	f7e3 fe62 	bl	80005f8 <__aeabi_dmul>
 801c934:	a32c      	add	r3, pc, #176	; (adr r3, 801c9e8 <__ieee754_acos+0x2c8>)
 801c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c93a:	f7e3 fca7 	bl	800028c <__adddf3>
 801c93e:	4622      	mov	r2, r4
 801c940:	462b      	mov	r3, r5
 801c942:	f7e3 fe59 	bl	80005f8 <__aeabi_dmul>
 801c946:	a32a      	add	r3, pc, #168	; (adr r3, 801c9f0 <__ieee754_acos+0x2d0>)
 801c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c94c:	f7e3 fc9c 	bl	8000288 <__aeabi_dsub>
 801c950:	4622      	mov	r2, r4
 801c952:	462b      	mov	r3, r5
 801c954:	f7e3 fe50 	bl	80005f8 <__aeabi_dmul>
 801c958:	2200      	movs	r2, #0
 801c95a:	4b2e      	ldr	r3, [pc, #184]	; (801ca14 <__ieee754_acos+0x2f4>)
 801c95c:	f7e3 fc96 	bl	800028c <__adddf3>
 801c960:	4602      	mov	r2, r0
 801c962:	460b      	mov	r3, r1
 801c964:	4640      	mov	r0, r8
 801c966:	4649      	mov	r1, r9
 801c968:	f7e3 ff70 	bl	800084c <__aeabi_ddiv>
 801c96c:	4632      	mov	r2, r6
 801c96e:	463b      	mov	r3, r7
 801c970:	f7e3 fe42 	bl	80005f8 <__aeabi_dmul>
 801c974:	a320      	add	r3, pc, #128	; (adr r3, 801c9f8 <__ieee754_acos+0x2d8>)
 801c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97a:	f7e3 fc85 	bl	8000288 <__aeabi_dsub>
 801c97e:	4632      	mov	r2, r6
 801c980:	463b      	mov	r3, r7
 801c982:	f7e3 fc83 	bl	800028c <__adddf3>
 801c986:	4602      	mov	r2, r0
 801c988:	460b      	mov	r3, r1
 801c98a:	f7e3 fc7f 	bl	800028c <__adddf3>
 801c98e:	4602      	mov	r2, r0
 801c990:	460b      	mov	r3, r1
 801c992:	a103      	add	r1, pc, #12	; (adr r1, 801c9a0 <__ieee754_acos+0x280>)
 801c994:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c998:	e76f      	b.n	801c87a <__ieee754_acos+0x15a>
 801c99a:	bf00      	nop
 801c99c:	f3af 8000 	nop.w
 801c9a0:	54442d18 	.word	0x54442d18
 801c9a4:	400921fb 	.word	0x400921fb
 801c9a8:	0dfdf709 	.word	0x0dfdf709
 801c9ac:	3f023de1 	.word	0x3f023de1
 801c9b0:	7501b288 	.word	0x7501b288
 801c9b4:	3f49efe0 	.word	0x3f49efe0
 801c9b8:	b5688f3b 	.word	0xb5688f3b
 801c9bc:	3fa48228 	.word	0x3fa48228
 801c9c0:	0e884455 	.word	0x0e884455
 801c9c4:	3fc9c155 	.word	0x3fc9c155
 801c9c8:	03eb6f7d 	.word	0x03eb6f7d
 801c9cc:	3fd4d612 	.word	0x3fd4d612
 801c9d0:	55555555 	.word	0x55555555
 801c9d4:	3fc55555 	.word	0x3fc55555
 801c9d8:	b12e9282 	.word	0xb12e9282
 801c9dc:	3fb3b8c5 	.word	0x3fb3b8c5
 801c9e0:	1b8d0159 	.word	0x1b8d0159
 801c9e4:	3fe6066c 	.word	0x3fe6066c
 801c9e8:	9c598ac8 	.word	0x9c598ac8
 801c9ec:	40002ae5 	.word	0x40002ae5
 801c9f0:	1c8a2d4b 	.word	0x1c8a2d4b
 801c9f4:	40033a27 	.word	0x40033a27
 801c9f8:	33145c07 	.word	0x33145c07
 801c9fc:	3c91a626 	.word	0x3c91a626
 801ca00:	54442d18 	.word	0x54442d18
 801ca04:	3ff921fb 	.word	0x3ff921fb
 801ca08:	3fefffff 	.word	0x3fefffff
 801ca0c:	3fdfffff 	.word	0x3fdfffff
 801ca10:	3c600000 	.word	0x3c600000
 801ca14:	3ff00000 	.word	0x3ff00000
 801ca18:	3fe00000 	.word	0x3fe00000
 801ca1c:	ee10 2a10 	vmov	r2, s0
 801ca20:	462b      	mov	r3, r5
 801ca22:	2000      	movs	r0, #0
 801ca24:	496a      	ldr	r1, [pc, #424]	; (801cbd0 <__ieee754_acos+0x4b0>)
 801ca26:	f7e3 fc2f 	bl	8000288 <__aeabi_dsub>
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	4b69      	ldr	r3, [pc, #420]	; (801cbd4 <__ieee754_acos+0x4b4>)
 801ca2e:	f7e3 fde3 	bl	80005f8 <__aeabi_dmul>
 801ca32:	4604      	mov	r4, r0
 801ca34:	460d      	mov	r5, r1
 801ca36:	ec45 4b10 	vmov	d0, r4, r5
 801ca3a:	f000 fe83 	bl	801d744 <__ieee754_sqrt>
 801ca3e:	a34e      	add	r3, pc, #312	; (adr r3, 801cb78 <__ieee754_acos+0x458>)
 801ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca44:	4620      	mov	r0, r4
 801ca46:	4629      	mov	r1, r5
 801ca48:	ec59 8b10 	vmov	r8, r9, d0
 801ca4c:	f7e3 fdd4 	bl	80005f8 <__aeabi_dmul>
 801ca50:	a34b      	add	r3, pc, #300	; (adr r3, 801cb80 <__ieee754_acos+0x460>)
 801ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca56:	f7e3 fc19 	bl	800028c <__adddf3>
 801ca5a:	4622      	mov	r2, r4
 801ca5c:	462b      	mov	r3, r5
 801ca5e:	f7e3 fdcb 	bl	80005f8 <__aeabi_dmul>
 801ca62:	a349      	add	r3, pc, #292	; (adr r3, 801cb88 <__ieee754_acos+0x468>)
 801ca64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca68:	f7e3 fc0e 	bl	8000288 <__aeabi_dsub>
 801ca6c:	4622      	mov	r2, r4
 801ca6e:	462b      	mov	r3, r5
 801ca70:	f7e3 fdc2 	bl	80005f8 <__aeabi_dmul>
 801ca74:	a346      	add	r3, pc, #280	; (adr r3, 801cb90 <__ieee754_acos+0x470>)
 801ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca7a:	f7e3 fc07 	bl	800028c <__adddf3>
 801ca7e:	4622      	mov	r2, r4
 801ca80:	462b      	mov	r3, r5
 801ca82:	f7e3 fdb9 	bl	80005f8 <__aeabi_dmul>
 801ca86:	a344      	add	r3, pc, #272	; (adr r3, 801cb98 <__ieee754_acos+0x478>)
 801ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca8c:	f7e3 fbfc 	bl	8000288 <__aeabi_dsub>
 801ca90:	4622      	mov	r2, r4
 801ca92:	462b      	mov	r3, r5
 801ca94:	f7e3 fdb0 	bl	80005f8 <__aeabi_dmul>
 801ca98:	a341      	add	r3, pc, #260	; (adr r3, 801cba0 <__ieee754_acos+0x480>)
 801ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca9e:	f7e3 fbf5 	bl	800028c <__adddf3>
 801caa2:	4622      	mov	r2, r4
 801caa4:	462b      	mov	r3, r5
 801caa6:	f7e3 fda7 	bl	80005f8 <__aeabi_dmul>
 801caaa:	a33f      	add	r3, pc, #252	; (adr r3, 801cba8 <__ieee754_acos+0x488>)
 801caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cab0:	4682      	mov	sl, r0
 801cab2:	468b      	mov	fp, r1
 801cab4:	4620      	mov	r0, r4
 801cab6:	4629      	mov	r1, r5
 801cab8:	f7e3 fd9e 	bl	80005f8 <__aeabi_dmul>
 801cabc:	a33c      	add	r3, pc, #240	; (adr r3, 801cbb0 <__ieee754_acos+0x490>)
 801cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cac2:	f7e3 fbe1 	bl	8000288 <__aeabi_dsub>
 801cac6:	4622      	mov	r2, r4
 801cac8:	462b      	mov	r3, r5
 801caca:	f7e3 fd95 	bl	80005f8 <__aeabi_dmul>
 801cace:	a33a      	add	r3, pc, #232	; (adr r3, 801cbb8 <__ieee754_acos+0x498>)
 801cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad4:	f7e3 fbda 	bl	800028c <__adddf3>
 801cad8:	4622      	mov	r2, r4
 801cada:	462b      	mov	r3, r5
 801cadc:	f7e3 fd8c 	bl	80005f8 <__aeabi_dmul>
 801cae0:	a337      	add	r3, pc, #220	; (adr r3, 801cbc0 <__ieee754_acos+0x4a0>)
 801cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cae6:	f7e3 fbcf 	bl	8000288 <__aeabi_dsub>
 801caea:	4622      	mov	r2, r4
 801caec:	462b      	mov	r3, r5
 801caee:	f7e3 fd83 	bl	80005f8 <__aeabi_dmul>
 801caf2:	2200      	movs	r2, #0
 801caf4:	4b36      	ldr	r3, [pc, #216]	; (801cbd0 <__ieee754_acos+0x4b0>)
 801caf6:	f7e3 fbc9 	bl	800028c <__adddf3>
 801cafa:	4602      	mov	r2, r0
 801cafc:	460b      	mov	r3, r1
 801cafe:	4650      	mov	r0, sl
 801cb00:	4659      	mov	r1, fp
 801cb02:	f7e3 fea3 	bl	800084c <__aeabi_ddiv>
 801cb06:	4642      	mov	r2, r8
 801cb08:	464b      	mov	r3, r9
 801cb0a:	f7e3 fd75 	bl	80005f8 <__aeabi_dmul>
 801cb0e:	2600      	movs	r6, #0
 801cb10:	4682      	mov	sl, r0
 801cb12:	468b      	mov	fp, r1
 801cb14:	4632      	mov	r2, r6
 801cb16:	464b      	mov	r3, r9
 801cb18:	4630      	mov	r0, r6
 801cb1a:	4649      	mov	r1, r9
 801cb1c:	f7e3 fd6c 	bl	80005f8 <__aeabi_dmul>
 801cb20:	4602      	mov	r2, r0
 801cb22:	460b      	mov	r3, r1
 801cb24:	4620      	mov	r0, r4
 801cb26:	4629      	mov	r1, r5
 801cb28:	f7e3 fbae 	bl	8000288 <__aeabi_dsub>
 801cb2c:	4632      	mov	r2, r6
 801cb2e:	4604      	mov	r4, r0
 801cb30:	460d      	mov	r5, r1
 801cb32:	464b      	mov	r3, r9
 801cb34:	4640      	mov	r0, r8
 801cb36:	4649      	mov	r1, r9
 801cb38:	f7e3 fba8 	bl	800028c <__adddf3>
 801cb3c:	4602      	mov	r2, r0
 801cb3e:	460b      	mov	r3, r1
 801cb40:	4620      	mov	r0, r4
 801cb42:	4629      	mov	r1, r5
 801cb44:	f7e3 fe82 	bl	800084c <__aeabi_ddiv>
 801cb48:	4602      	mov	r2, r0
 801cb4a:	460b      	mov	r3, r1
 801cb4c:	4650      	mov	r0, sl
 801cb4e:	4659      	mov	r1, fp
 801cb50:	f7e3 fb9c 	bl	800028c <__adddf3>
 801cb54:	4632      	mov	r2, r6
 801cb56:	464b      	mov	r3, r9
 801cb58:	f7e3 fb98 	bl	800028c <__adddf3>
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	460b      	mov	r3, r1
 801cb60:	f7e3 fb94 	bl	800028c <__adddf3>
 801cb64:	e5f1      	b.n	801c74a <__ieee754_acos+0x2a>
 801cb66:	2000      	movs	r0, #0
 801cb68:	2100      	movs	r1, #0
 801cb6a:	e5ee      	b.n	801c74a <__ieee754_acos+0x2a>
 801cb6c:	a116      	add	r1, pc, #88	; (adr r1, 801cbc8 <__ieee754_acos+0x4a8>)
 801cb6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb72:	e5ea      	b.n	801c74a <__ieee754_acos+0x2a>
 801cb74:	f3af 8000 	nop.w
 801cb78:	0dfdf709 	.word	0x0dfdf709
 801cb7c:	3f023de1 	.word	0x3f023de1
 801cb80:	7501b288 	.word	0x7501b288
 801cb84:	3f49efe0 	.word	0x3f49efe0
 801cb88:	b5688f3b 	.word	0xb5688f3b
 801cb8c:	3fa48228 	.word	0x3fa48228
 801cb90:	0e884455 	.word	0x0e884455
 801cb94:	3fc9c155 	.word	0x3fc9c155
 801cb98:	03eb6f7d 	.word	0x03eb6f7d
 801cb9c:	3fd4d612 	.word	0x3fd4d612
 801cba0:	55555555 	.word	0x55555555
 801cba4:	3fc55555 	.word	0x3fc55555
 801cba8:	b12e9282 	.word	0xb12e9282
 801cbac:	3fb3b8c5 	.word	0x3fb3b8c5
 801cbb0:	1b8d0159 	.word	0x1b8d0159
 801cbb4:	3fe6066c 	.word	0x3fe6066c
 801cbb8:	9c598ac8 	.word	0x9c598ac8
 801cbbc:	40002ae5 	.word	0x40002ae5
 801cbc0:	1c8a2d4b 	.word	0x1c8a2d4b
 801cbc4:	40033a27 	.word	0x40033a27
 801cbc8:	54442d18 	.word	0x54442d18
 801cbcc:	3ff921fb 	.word	0x3ff921fb
 801cbd0:	3ff00000 	.word	0x3ff00000
 801cbd4:	3fe00000 	.word	0x3fe00000

0801cbd8 <__ieee754_asin>:
 801cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbdc:	ec55 4b10 	vmov	r4, r5, d0
 801cbe0:	4bcb      	ldr	r3, [pc, #812]	; (801cf10 <__ieee754_asin+0x338>)
 801cbe2:	b087      	sub	sp, #28
 801cbe4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801cbe8:	429f      	cmp	r7, r3
 801cbea:	9501      	str	r5, [sp, #4]
 801cbec:	dd31      	ble.n	801cc52 <__ieee754_asin+0x7a>
 801cbee:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801cbf2:	ee10 3a10 	vmov	r3, s0
 801cbf6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801cbfa:	433b      	orrs	r3, r7
 801cbfc:	d117      	bne.n	801cc2e <__ieee754_asin+0x56>
 801cbfe:	a3aa      	add	r3, pc, #680	; (adr r3, 801cea8 <__ieee754_asin+0x2d0>)
 801cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc04:	ee10 0a10 	vmov	r0, s0
 801cc08:	4629      	mov	r1, r5
 801cc0a:	f7e3 fcf5 	bl	80005f8 <__aeabi_dmul>
 801cc0e:	a3a8      	add	r3, pc, #672	; (adr r3, 801ceb0 <__ieee754_asin+0x2d8>)
 801cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc14:	4606      	mov	r6, r0
 801cc16:	460f      	mov	r7, r1
 801cc18:	4620      	mov	r0, r4
 801cc1a:	4629      	mov	r1, r5
 801cc1c:	f7e3 fcec 	bl	80005f8 <__aeabi_dmul>
 801cc20:	4602      	mov	r2, r0
 801cc22:	460b      	mov	r3, r1
 801cc24:	4630      	mov	r0, r6
 801cc26:	4639      	mov	r1, r7
 801cc28:	f7e3 fb30 	bl	800028c <__adddf3>
 801cc2c:	e00a      	b.n	801cc44 <__ieee754_asin+0x6c>
 801cc2e:	ee10 2a10 	vmov	r2, s0
 801cc32:	462b      	mov	r3, r5
 801cc34:	4620      	mov	r0, r4
 801cc36:	4629      	mov	r1, r5
 801cc38:	f7e3 fb26 	bl	8000288 <__aeabi_dsub>
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	f7e3 fe04 	bl	800084c <__aeabi_ddiv>
 801cc44:	4604      	mov	r4, r0
 801cc46:	460d      	mov	r5, r1
 801cc48:	ec45 4b10 	vmov	d0, r4, r5
 801cc4c:	b007      	add	sp, #28
 801cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc52:	4bb0      	ldr	r3, [pc, #704]	; (801cf14 <__ieee754_asin+0x33c>)
 801cc54:	429f      	cmp	r7, r3
 801cc56:	dc11      	bgt.n	801cc7c <__ieee754_asin+0xa4>
 801cc58:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801cc5c:	f280 80ae 	bge.w	801cdbc <__ieee754_asin+0x1e4>
 801cc60:	a395      	add	r3, pc, #596	; (adr r3, 801ceb8 <__ieee754_asin+0x2e0>)
 801cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc66:	ee10 0a10 	vmov	r0, s0
 801cc6a:	4629      	mov	r1, r5
 801cc6c:	f7e3 fb0e 	bl	800028c <__adddf3>
 801cc70:	2200      	movs	r2, #0
 801cc72:	4ba9      	ldr	r3, [pc, #676]	; (801cf18 <__ieee754_asin+0x340>)
 801cc74:	f7e3 ff50 	bl	8000b18 <__aeabi_dcmpgt>
 801cc78:	2800      	cmp	r0, #0
 801cc7a:	d1e5      	bne.n	801cc48 <__ieee754_asin+0x70>
 801cc7c:	ec45 4b10 	vmov	d0, r4, r5
 801cc80:	f7ff fb52 	bl	801c328 <fabs>
 801cc84:	2000      	movs	r0, #0
 801cc86:	ec53 2b10 	vmov	r2, r3, d0
 801cc8a:	49a3      	ldr	r1, [pc, #652]	; (801cf18 <__ieee754_asin+0x340>)
 801cc8c:	f7e3 fafc 	bl	8000288 <__aeabi_dsub>
 801cc90:	2200      	movs	r2, #0
 801cc92:	4ba2      	ldr	r3, [pc, #648]	; (801cf1c <__ieee754_asin+0x344>)
 801cc94:	f7e3 fcb0 	bl	80005f8 <__aeabi_dmul>
 801cc98:	a389      	add	r3, pc, #548	; (adr r3, 801cec0 <__ieee754_asin+0x2e8>)
 801cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc9e:	4604      	mov	r4, r0
 801cca0:	460d      	mov	r5, r1
 801cca2:	f7e3 fca9 	bl	80005f8 <__aeabi_dmul>
 801cca6:	a388      	add	r3, pc, #544	; (adr r3, 801cec8 <__ieee754_asin+0x2f0>)
 801cca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccac:	f7e3 faee 	bl	800028c <__adddf3>
 801ccb0:	4622      	mov	r2, r4
 801ccb2:	462b      	mov	r3, r5
 801ccb4:	f7e3 fca0 	bl	80005f8 <__aeabi_dmul>
 801ccb8:	a385      	add	r3, pc, #532	; (adr r3, 801ced0 <__ieee754_asin+0x2f8>)
 801ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccbe:	f7e3 fae3 	bl	8000288 <__aeabi_dsub>
 801ccc2:	4622      	mov	r2, r4
 801ccc4:	462b      	mov	r3, r5
 801ccc6:	f7e3 fc97 	bl	80005f8 <__aeabi_dmul>
 801ccca:	a383      	add	r3, pc, #524	; (adr r3, 801ced8 <__ieee754_asin+0x300>)
 801cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccd0:	f7e3 fadc 	bl	800028c <__adddf3>
 801ccd4:	4622      	mov	r2, r4
 801ccd6:	462b      	mov	r3, r5
 801ccd8:	f7e3 fc8e 	bl	80005f8 <__aeabi_dmul>
 801ccdc:	a380      	add	r3, pc, #512	; (adr r3, 801cee0 <__ieee754_asin+0x308>)
 801ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce2:	f7e3 fad1 	bl	8000288 <__aeabi_dsub>
 801cce6:	4622      	mov	r2, r4
 801cce8:	462b      	mov	r3, r5
 801ccea:	f7e3 fc85 	bl	80005f8 <__aeabi_dmul>
 801ccee:	a37e      	add	r3, pc, #504	; (adr r3, 801cee8 <__ieee754_asin+0x310>)
 801ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf4:	f7e3 faca 	bl	800028c <__adddf3>
 801ccf8:	4622      	mov	r2, r4
 801ccfa:	462b      	mov	r3, r5
 801ccfc:	f7e3 fc7c 	bl	80005f8 <__aeabi_dmul>
 801cd00:	a37b      	add	r3, pc, #492	; (adr r3, 801cef0 <__ieee754_asin+0x318>)
 801cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd06:	4680      	mov	r8, r0
 801cd08:	4689      	mov	r9, r1
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	4629      	mov	r1, r5
 801cd0e:	f7e3 fc73 	bl	80005f8 <__aeabi_dmul>
 801cd12:	a379      	add	r3, pc, #484	; (adr r3, 801cef8 <__ieee754_asin+0x320>)
 801cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd18:	f7e3 fab6 	bl	8000288 <__aeabi_dsub>
 801cd1c:	4622      	mov	r2, r4
 801cd1e:	462b      	mov	r3, r5
 801cd20:	f7e3 fc6a 	bl	80005f8 <__aeabi_dmul>
 801cd24:	a376      	add	r3, pc, #472	; (adr r3, 801cf00 <__ieee754_asin+0x328>)
 801cd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd2a:	f7e3 faaf 	bl	800028c <__adddf3>
 801cd2e:	4622      	mov	r2, r4
 801cd30:	462b      	mov	r3, r5
 801cd32:	f7e3 fc61 	bl	80005f8 <__aeabi_dmul>
 801cd36:	a374      	add	r3, pc, #464	; (adr r3, 801cf08 <__ieee754_asin+0x330>)
 801cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd3c:	f7e3 faa4 	bl	8000288 <__aeabi_dsub>
 801cd40:	4622      	mov	r2, r4
 801cd42:	462b      	mov	r3, r5
 801cd44:	f7e3 fc58 	bl	80005f8 <__aeabi_dmul>
 801cd48:	4b73      	ldr	r3, [pc, #460]	; (801cf18 <__ieee754_asin+0x340>)
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	f7e3 fa9e 	bl	800028c <__adddf3>
 801cd50:	ec45 4b10 	vmov	d0, r4, r5
 801cd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cd58:	f000 fcf4 	bl	801d744 <__ieee754_sqrt>
 801cd5c:	4b70      	ldr	r3, [pc, #448]	; (801cf20 <__ieee754_asin+0x348>)
 801cd5e:	429f      	cmp	r7, r3
 801cd60:	ec5b ab10 	vmov	sl, fp, d0
 801cd64:	f340 80de 	ble.w	801cf24 <__ieee754_asin+0x34c>
 801cd68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cd6c:	4640      	mov	r0, r8
 801cd6e:	4649      	mov	r1, r9
 801cd70:	f7e3 fd6c 	bl	800084c <__aeabi_ddiv>
 801cd74:	4652      	mov	r2, sl
 801cd76:	465b      	mov	r3, fp
 801cd78:	f7e3 fc3e 	bl	80005f8 <__aeabi_dmul>
 801cd7c:	4652      	mov	r2, sl
 801cd7e:	465b      	mov	r3, fp
 801cd80:	f7e3 fa84 	bl	800028c <__adddf3>
 801cd84:	4602      	mov	r2, r0
 801cd86:	460b      	mov	r3, r1
 801cd88:	f7e3 fa80 	bl	800028c <__adddf3>
 801cd8c:	a348      	add	r3, pc, #288	; (adr r3, 801ceb0 <__ieee754_asin+0x2d8>)
 801cd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd92:	f7e3 fa79 	bl	8000288 <__aeabi_dsub>
 801cd96:	4602      	mov	r2, r0
 801cd98:	460b      	mov	r3, r1
 801cd9a:	a143      	add	r1, pc, #268	; (adr r1, 801cea8 <__ieee754_asin+0x2d0>)
 801cd9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cda0:	f7e3 fa72 	bl	8000288 <__aeabi_dsub>
 801cda4:	9b01      	ldr	r3, [sp, #4]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	bfdc      	itt	le
 801cdaa:	4602      	movle	r2, r0
 801cdac:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801cdb0:	4604      	mov	r4, r0
 801cdb2:	460d      	mov	r5, r1
 801cdb4:	bfdc      	itt	le
 801cdb6:	4614      	movle	r4, r2
 801cdb8:	461d      	movle	r5, r3
 801cdba:	e745      	b.n	801cc48 <__ieee754_asin+0x70>
 801cdbc:	ee10 2a10 	vmov	r2, s0
 801cdc0:	ee10 0a10 	vmov	r0, s0
 801cdc4:	462b      	mov	r3, r5
 801cdc6:	4629      	mov	r1, r5
 801cdc8:	f7e3 fc16 	bl	80005f8 <__aeabi_dmul>
 801cdcc:	a33c      	add	r3, pc, #240	; (adr r3, 801cec0 <__ieee754_asin+0x2e8>)
 801cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdd2:	4606      	mov	r6, r0
 801cdd4:	460f      	mov	r7, r1
 801cdd6:	f7e3 fc0f 	bl	80005f8 <__aeabi_dmul>
 801cdda:	a33b      	add	r3, pc, #236	; (adr r3, 801cec8 <__ieee754_asin+0x2f0>)
 801cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde0:	f7e3 fa54 	bl	800028c <__adddf3>
 801cde4:	4632      	mov	r2, r6
 801cde6:	463b      	mov	r3, r7
 801cde8:	f7e3 fc06 	bl	80005f8 <__aeabi_dmul>
 801cdec:	a338      	add	r3, pc, #224	; (adr r3, 801ced0 <__ieee754_asin+0x2f8>)
 801cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdf2:	f7e3 fa49 	bl	8000288 <__aeabi_dsub>
 801cdf6:	4632      	mov	r2, r6
 801cdf8:	463b      	mov	r3, r7
 801cdfa:	f7e3 fbfd 	bl	80005f8 <__aeabi_dmul>
 801cdfe:	a336      	add	r3, pc, #216	; (adr r3, 801ced8 <__ieee754_asin+0x300>)
 801ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce04:	f7e3 fa42 	bl	800028c <__adddf3>
 801ce08:	4632      	mov	r2, r6
 801ce0a:	463b      	mov	r3, r7
 801ce0c:	f7e3 fbf4 	bl	80005f8 <__aeabi_dmul>
 801ce10:	a333      	add	r3, pc, #204	; (adr r3, 801cee0 <__ieee754_asin+0x308>)
 801ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce16:	f7e3 fa37 	bl	8000288 <__aeabi_dsub>
 801ce1a:	4632      	mov	r2, r6
 801ce1c:	463b      	mov	r3, r7
 801ce1e:	f7e3 fbeb 	bl	80005f8 <__aeabi_dmul>
 801ce22:	a331      	add	r3, pc, #196	; (adr r3, 801cee8 <__ieee754_asin+0x310>)
 801ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce28:	f7e3 fa30 	bl	800028c <__adddf3>
 801ce2c:	4632      	mov	r2, r6
 801ce2e:	463b      	mov	r3, r7
 801ce30:	f7e3 fbe2 	bl	80005f8 <__aeabi_dmul>
 801ce34:	a32e      	add	r3, pc, #184	; (adr r3, 801cef0 <__ieee754_asin+0x318>)
 801ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce3a:	4680      	mov	r8, r0
 801ce3c:	4689      	mov	r9, r1
 801ce3e:	4630      	mov	r0, r6
 801ce40:	4639      	mov	r1, r7
 801ce42:	f7e3 fbd9 	bl	80005f8 <__aeabi_dmul>
 801ce46:	a32c      	add	r3, pc, #176	; (adr r3, 801cef8 <__ieee754_asin+0x320>)
 801ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce4c:	f7e3 fa1c 	bl	8000288 <__aeabi_dsub>
 801ce50:	4632      	mov	r2, r6
 801ce52:	463b      	mov	r3, r7
 801ce54:	f7e3 fbd0 	bl	80005f8 <__aeabi_dmul>
 801ce58:	a329      	add	r3, pc, #164	; (adr r3, 801cf00 <__ieee754_asin+0x328>)
 801ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce5e:	f7e3 fa15 	bl	800028c <__adddf3>
 801ce62:	4632      	mov	r2, r6
 801ce64:	463b      	mov	r3, r7
 801ce66:	f7e3 fbc7 	bl	80005f8 <__aeabi_dmul>
 801ce6a:	a327      	add	r3, pc, #156	; (adr r3, 801cf08 <__ieee754_asin+0x330>)
 801ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce70:	f7e3 fa0a 	bl	8000288 <__aeabi_dsub>
 801ce74:	4632      	mov	r2, r6
 801ce76:	463b      	mov	r3, r7
 801ce78:	f7e3 fbbe 	bl	80005f8 <__aeabi_dmul>
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	4b26      	ldr	r3, [pc, #152]	; (801cf18 <__ieee754_asin+0x340>)
 801ce80:	f7e3 fa04 	bl	800028c <__adddf3>
 801ce84:	4602      	mov	r2, r0
 801ce86:	460b      	mov	r3, r1
 801ce88:	4640      	mov	r0, r8
 801ce8a:	4649      	mov	r1, r9
 801ce8c:	f7e3 fcde 	bl	800084c <__aeabi_ddiv>
 801ce90:	4622      	mov	r2, r4
 801ce92:	462b      	mov	r3, r5
 801ce94:	f7e3 fbb0 	bl	80005f8 <__aeabi_dmul>
 801ce98:	4602      	mov	r2, r0
 801ce9a:	460b      	mov	r3, r1
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	4629      	mov	r1, r5
 801cea0:	e6c2      	b.n	801cc28 <__ieee754_asin+0x50>
 801cea2:	bf00      	nop
 801cea4:	f3af 8000 	nop.w
 801cea8:	54442d18 	.word	0x54442d18
 801ceac:	3ff921fb 	.word	0x3ff921fb
 801ceb0:	33145c07 	.word	0x33145c07
 801ceb4:	3c91a626 	.word	0x3c91a626
 801ceb8:	8800759c 	.word	0x8800759c
 801cebc:	7e37e43c 	.word	0x7e37e43c
 801cec0:	0dfdf709 	.word	0x0dfdf709
 801cec4:	3f023de1 	.word	0x3f023de1
 801cec8:	7501b288 	.word	0x7501b288
 801cecc:	3f49efe0 	.word	0x3f49efe0
 801ced0:	b5688f3b 	.word	0xb5688f3b
 801ced4:	3fa48228 	.word	0x3fa48228
 801ced8:	0e884455 	.word	0x0e884455
 801cedc:	3fc9c155 	.word	0x3fc9c155
 801cee0:	03eb6f7d 	.word	0x03eb6f7d
 801cee4:	3fd4d612 	.word	0x3fd4d612
 801cee8:	55555555 	.word	0x55555555
 801ceec:	3fc55555 	.word	0x3fc55555
 801cef0:	b12e9282 	.word	0xb12e9282
 801cef4:	3fb3b8c5 	.word	0x3fb3b8c5
 801cef8:	1b8d0159 	.word	0x1b8d0159
 801cefc:	3fe6066c 	.word	0x3fe6066c
 801cf00:	9c598ac8 	.word	0x9c598ac8
 801cf04:	40002ae5 	.word	0x40002ae5
 801cf08:	1c8a2d4b 	.word	0x1c8a2d4b
 801cf0c:	40033a27 	.word	0x40033a27
 801cf10:	3fefffff 	.word	0x3fefffff
 801cf14:	3fdfffff 	.word	0x3fdfffff
 801cf18:	3ff00000 	.word	0x3ff00000
 801cf1c:	3fe00000 	.word	0x3fe00000
 801cf20:	3fef3332 	.word	0x3fef3332
 801cf24:	ee10 2a10 	vmov	r2, s0
 801cf28:	ee10 0a10 	vmov	r0, s0
 801cf2c:	465b      	mov	r3, fp
 801cf2e:	4659      	mov	r1, fp
 801cf30:	f7e3 f9ac 	bl	800028c <__adddf3>
 801cf34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cf38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf3c:	4640      	mov	r0, r8
 801cf3e:	4649      	mov	r1, r9
 801cf40:	f7e3 fc84 	bl	800084c <__aeabi_ddiv>
 801cf44:	4602      	mov	r2, r0
 801cf46:	460b      	mov	r3, r1
 801cf48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cf4c:	f7e3 fb54 	bl	80005f8 <__aeabi_dmul>
 801cf50:	2600      	movs	r6, #0
 801cf52:	4680      	mov	r8, r0
 801cf54:	4689      	mov	r9, r1
 801cf56:	4632      	mov	r2, r6
 801cf58:	465b      	mov	r3, fp
 801cf5a:	4630      	mov	r0, r6
 801cf5c:	4659      	mov	r1, fp
 801cf5e:	f7e3 fb4b 	bl	80005f8 <__aeabi_dmul>
 801cf62:	4602      	mov	r2, r0
 801cf64:	460b      	mov	r3, r1
 801cf66:	4620      	mov	r0, r4
 801cf68:	4629      	mov	r1, r5
 801cf6a:	f7e3 f98d 	bl	8000288 <__aeabi_dsub>
 801cf6e:	4632      	mov	r2, r6
 801cf70:	4604      	mov	r4, r0
 801cf72:	460d      	mov	r5, r1
 801cf74:	465b      	mov	r3, fp
 801cf76:	4650      	mov	r0, sl
 801cf78:	4659      	mov	r1, fp
 801cf7a:	f7e3 f987 	bl	800028c <__adddf3>
 801cf7e:	4602      	mov	r2, r0
 801cf80:	460b      	mov	r3, r1
 801cf82:	4620      	mov	r0, r4
 801cf84:	4629      	mov	r1, r5
 801cf86:	f7e3 fc61 	bl	800084c <__aeabi_ddiv>
 801cf8a:	4602      	mov	r2, r0
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	f7e3 f97d 	bl	800028c <__adddf3>
 801cf92:	4602      	mov	r2, r0
 801cf94:	460b      	mov	r3, r1
 801cf96:	a114      	add	r1, pc, #80	; (adr r1, 801cfe8 <__ieee754_asin+0x410>)
 801cf98:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf9c:	f7e3 f974 	bl	8000288 <__aeabi_dsub>
 801cfa0:	4602      	mov	r2, r0
 801cfa2:	460b      	mov	r3, r1
 801cfa4:	4640      	mov	r0, r8
 801cfa6:	4649      	mov	r1, r9
 801cfa8:	f7e3 f96e 	bl	8000288 <__aeabi_dsub>
 801cfac:	465f      	mov	r7, fp
 801cfae:	4604      	mov	r4, r0
 801cfb0:	460d      	mov	r5, r1
 801cfb2:	4632      	mov	r2, r6
 801cfb4:	465b      	mov	r3, fp
 801cfb6:	4630      	mov	r0, r6
 801cfb8:	4639      	mov	r1, r7
 801cfba:	f7e3 f967 	bl	800028c <__adddf3>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	460b      	mov	r3, r1
 801cfc2:	a10b      	add	r1, pc, #44	; (adr r1, 801cff0 <__ieee754_asin+0x418>)
 801cfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfc8:	f7e3 f95e 	bl	8000288 <__aeabi_dsub>
 801cfcc:	4602      	mov	r2, r0
 801cfce:	460b      	mov	r3, r1
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	4629      	mov	r1, r5
 801cfd4:	f7e3 f958 	bl	8000288 <__aeabi_dsub>
 801cfd8:	4602      	mov	r2, r0
 801cfda:	460b      	mov	r3, r1
 801cfdc:	a104      	add	r1, pc, #16	; (adr r1, 801cff0 <__ieee754_asin+0x418>)
 801cfde:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfe2:	e6dd      	b.n	801cda0 <__ieee754_asin+0x1c8>
 801cfe4:	f3af 8000 	nop.w
 801cfe8:	33145c07 	.word	0x33145c07
 801cfec:	3c91a626 	.word	0x3c91a626
 801cff0:	54442d18 	.word	0x54442d18
 801cff4:	3fe921fb 	.word	0x3fe921fb

0801cff8 <__ieee754_log>:
 801cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cffc:	ec51 0b10 	vmov	r0, r1, d0
 801d000:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801d004:	b087      	sub	sp, #28
 801d006:	460d      	mov	r5, r1
 801d008:	da27      	bge.n	801d05a <__ieee754_log+0x62>
 801d00a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d00e:	4303      	orrs	r3, r0
 801d010:	ee10 2a10 	vmov	r2, s0
 801d014:	d10a      	bne.n	801d02c <__ieee754_log+0x34>
 801d016:	49cc      	ldr	r1, [pc, #816]	; (801d348 <__ieee754_log+0x350>)
 801d018:	2200      	movs	r2, #0
 801d01a:	2300      	movs	r3, #0
 801d01c:	2000      	movs	r0, #0
 801d01e:	f7e3 fc15 	bl	800084c <__aeabi_ddiv>
 801d022:	ec41 0b10 	vmov	d0, r0, r1
 801d026:	b007      	add	sp, #28
 801d028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d02c:	2900      	cmp	r1, #0
 801d02e:	da05      	bge.n	801d03c <__ieee754_log+0x44>
 801d030:	460b      	mov	r3, r1
 801d032:	f7e3 f929 	bl	8000288 <__aeabi_dsub>
 801d036:	2200      	movs	r2, #0
 801d038:	2300      	movs	r3, #0
 801d03a:	e7f0      	b.n	801d01e <__ieee754_log+0x26>
 801d03c:	4bc3      	ldr	r3, [pc, #780]	; (801d34c <__ieee754_log+0x354>)
 801d03e:	2200      	movs	r2, #0
 801d040:	f7e3 fada 	bl	80005f8 <__aeabi_dmul>
 801d044:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801d048:	460d      	mov	r5, r1
 801d04a:	4ac1      	ldr	r2, [pc, #772]	; (801d350 <__ieee754_log+0x358>)
 801d04c:	4295      	cmp	r5, r2
 801d04e:	dd06      	ble.n	801d05e <__ieee754_log+0x66>
 801d050:	4602      	mov	r2, r0
 801d052:	460b      	mov	r3, r1
 801d054:	f7e3 f91a 	bl	800028c <__adddf3>
 801d058:	e7e3      	b.n	801d022 <__ieee754_log+0x2a>
 801d05a:	2300      	movs	r3, #0
 801d05c:	e7f5      	b.n	801d04a <__ieee754_log+0x52>
 801d05e:	152c      	asrs	r4, r5, #20
 801d060:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801d064:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801d068:	441c      	add	r4, r3
 801d06a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801d06e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801d072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d076:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801d07a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801d07e:	ea42 0105 	orr.w	r1, r2, r5
 801d082:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801d086:	2200      	movs	r2, #0
 801d088:	4bb2      	ldr	r3, [pc, #712]	; (801d354 <__ieee754_log+0x35c>)
 801d08a:	f7e3 f8fd 	bl	8000288 <__aeabi_dsub>
 801d08e:	1cab      	adds	r3, r5, #2
 801d090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d094:	2b02      	cmp	r3, #2
 801d096:	4682      	mov	sl, r0
 801d098:	468b      	mov	fp, r1
 801d09a:	f04f 0200 	mov.w	r2, #0
 801d09e:	dc53      	bgt.n	801d148 <__ieee754_log+0x150>
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	f7e3 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 801d0a6:	b1d0      	cbz	r0, 801d0de <__ieee754_log+0xe6>
 801d0a8:	2c00      	cmp	r4, #0
 801d0aa:	f000 8120 	beq.w	801d2ee <__ieee754_log+0x2f6>
 801d0ae:	4620      	mov	r0, r4
 801d0b0:	f7e3 fa38 	bl	8000524 <__aeabi_i2d>
 801d0b4:	a390      	add	r3, pc, #576	; (adr r3, 801d2f8 <__ieee754_log+0x300>)
 801d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0ba:	4606      	mov	r6, r0
 801d0bc:	460f      	mov	r7, r1
 801d0be:	f7e3 fa9b 	bl	80005f8 <__aeabi_dmul>
 801d0c2:	a38f      	add	r3, pc, #572	; (adr r3, 801d300 <__ieee754_log+0x308>)
 801d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0c8:	4604      	mov	r4, r0
 801d0ca:	460d      	mov	r5, r1
 801d0cc:	4630      	mov	r0, r6
 801d0ce:	4639      	mov	r1, r7
 801d0d0:	f7e3 fa92 	bl	80005f8 <__aeabi_dmul>
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	460b      	mov	r3, r1
 801d0d8:	4620      	mov	r0, r4
 801d0da:	4629      	mov	r1, r5
 801d0dc:	e7ba      	b.n	801d054 <__ieee754_log+0x5c>
 801d0de:	a38a      	add	r3, pc, #552	; (adr r3, 801d308 <__ieee754_log+0x310>)
 801d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e4:	4650      	mov	r0, sl
 801d0e6:	4659      	mov	r1, fp
 801d0e8:	f7e3 fa86 	bl	80005f8 <__aeabi_dmul>
 801d0ec:	4602      	mov	r2, r0
 801d0ee:	460b      	mov	r3, r1
 801d0f0:	2000      	movs	r0, #0
 801d0f2:	4999      	ldr	r1, [pc, #612]	; (801d358 <__ieee754_log+0x360>)
 801d0f4:	f7e3 f8c8 	bl	8000288 <__aeabi_dsub>
 801d0f8:	4652      	mov	r2, sl
 801d0fa:	4606      	mov	r6, r0
 801d0fc:	460f      	mov	r7, r1
 801d0fe:	465b      	mov	r3, fp
 801d100:	4650      	mov	r0, sl
 801d102:	4659      	mov	r1, fp
 801d104:	f7e3 fa78 	bl	80005f8 <__aeabi_dmul>
 801d108:	4602      	mov	r2, r0
 801d10a:	460b      	mov	r3, r1
 801d10c:	4630      	mov	r0, r6
 801d10e:	4639      	mov	r1, r7
 801d110:	f7e3 fa72 	bl	80005f8 <__aeabi_dmul>
 801d114:	4606      	mov	r6, r0
 801d116:	460f      	mov	r7, r1
 801d118:	b914      	cbnz	r4, 801d120 <__ieee754_log+0x128>
 801d11a:	4632      	mov	r2, r6
 801d11c:	463b      	mov	r3, r7
 801d11e:	e0a0      	b.n	801d262 <__ieee754_log+0x26a>
 801d120:	4620      	mov	r0, r4
 801d122:	f7e3 f9ff 	bl	8000524 <__aeabi_i2d>
 801d126:	a374      	add	r3, pc, #464	; (adr r3, 801d2f8 <__ieee754_log+0x300>)
 801d128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d12c:	4680      	mov	r8, r0
 801d12e:	4689      	mov	r9, r1
 801d130:	f7e3 fa62 	bl	80005f8 <__aeabi_dmul>
 801d134:	a372      	add	r3, pc, #456	; (adr r3, 801d300 <__ieee754_log+0x308>)
 801d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13a:	4604      	mov	r4, r0
 801d13c:	460d      	mov	r5, r1
 801d13e:	4640      	mov	r0, r8
 801d140:	4649      	mov	r1, r9
 801d142:	f7e3 fa59 	bl	80005f8 <__aeabi_dmul>
 801d146:	e0a5      	b.n	801d294 <__ieee754_log+0x29c>
 801d148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d14c:	f7e3 f89e 	bl	800028c <__adddf3>
 801d150:	4602      	mov	r2, r0
 801d152:	460b      	mov	r3, r1
 801d154:	4650      	mov	r0, sl
 801d156:	4659      	mov	r1, fp
 801d158:	f7e3 fb78 	bl	800084c <__aeabi_ddiv>
 801d15c:	e9cd 0100 	strd	r0, r1, [sp]
 801d160:	4620      	mov	r0, r4
 801d162:	f7e3 f9df 	bl	8000524 <__aeabi_i2d>
 801d166:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d16e:	4610      	mov	r0, r2
 801d170:	4619      	mov	r1, r3
 801d172:	f7e3 fa41 	bl	80005f8 <__aeabi_dmul>
 801d176:	4602      	mov	r2, r0
 801d178:	460b      	mov	r3, r1
 801d17a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d17e:	f7e3 fa3b 	bl	80005f8 <__aeabi_dmul>
 801d182:	a363      	add	r3, pc, #396	; (adr r3, 801d310 <__ieee754_log+0x318>)
 801d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d188:	4680      	mov	r8, r0
 801d18a:	4689      	mov	r9, r1
 801d18c:	f7e3 fa34 	bl	80005f8 <__aeabi_dmul>
 801d190:	a361      	add	r3, pc, #388	; (adr r3, 801d318 <__ieee754_log+0x320>)
 801d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d196:	f7e3 f879 	bl	800028c <__adddf3>
 801d19a:	4642      	mov	r2, r8
 801d19c:	464b      	mov	r3, r9
 801d19e:	f7e3 fa2b 	bl	80005f8 <__aeabi_dmul>
 801d1a2:	a35f      	add	r3, pc, #380	; (adr r3, 801d320 <__ieee754_log+0x328>)
 801d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1a8:	f7e3 f870 	bl	800028c <__adddf3>
 801d1ac:	4642      	mov	r2, r8
 801d1ae:	464b      	mov	r3, r9
 801d1b0:	f7e3 fa22 	bl	80005f8 <__aeabi_dmul>
 801d1b4:	a35c      	add	r3, pc, #368	; (adr r3, 801d328 <__ieee754_log+0x330>)
 801d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1ba:	f7e3 f867 	bl	800028c <__adddf3>
 801d1be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d1c2:	f7e3 fa19 	bl	80005f8 <__aeabi_dmul>
 801d1c6:	a35a      	add	r3, pc, #360	; (adr r3, 801d330 <__ieee754_log+0x338>)
 801d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d1d0:	4640      	mov	r0, r8
 801d1d2:	4649      	mov	r1, r9
 801d1d4:	f7e3 fa10 	bl	80005f8 <__aeabi_dmul>
 801d1d8:	a357      	add	r3, pc, #348	; (adr r3, 801d338 <__ieee754_log+0x340>)
 801d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1de:	f7e3 f855 	bl	800028c <__adddf3>
 801d1e2:	4642      	mov	r2, r8
 801d1e4:	464b      	mov	r3, r9
 801d1e6:	f7e3 fa07 	bl	80005f8 <__aeabi_dmul>
 801d1ea:	a355      	add	r3, pc, #340	; (adr r3, 801d340 <__ieee754_log+0x348>)
 801d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f0:	f7e3 f84c 	bl	800028c <__adddf3>
 801d1f4:	4642      	mov	r2, r8
 801d1f6:	464b      	mov	r3, r9
 801d1f8:	f7e3 f9fe 	bl	80005f8 <__aeabi_dmul>
 801d1fc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 801d200:	4602      	mov	r2, r0
 801d202:	460b      	mov	r3, r1
 801d204:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801d208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d20c:	f7e3 f83e 	bl	800028c <__adddf3>
 801d210:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801d214:	3551      	adds	r5, #81	; 0x51
 801d216:	4335      	orrs	r5, r6
 801d218:	2d00      	cmp	r5, #0
 801d21a:	4680      	mov	r8, r0
 801d21c:	4689      	mov	r9, r1
 801d21e:	dd48      	ble.n	801d2b2 <__ieee754_log+0x2ba>
 801d220:	2200      	movs	r2, #0
 801d222:	4b4d      	ldr	r3, [pc, #308]	; (801d358 <__ieee754_log+0x360>)
 801d224:	4650      	mov	r0, sl
 801d226:	4659      	mov	r1, fp
 801d228:	f7e3 f9e6 	bl	80005f8 <__aeabi_dmul>
 801d22c:	4652      	mov	r2, sl
 801d22e:	465b      	mov	r3, fp
 801d230:	f7e3 f9e2 	bl	80005f8 <__aeabi_dmul>
 801d234:	4602      	mov	r2, r0
 801d236:	460b      	mov	r3, r1
 801d238:	4606      	mov	r6, r0
 801d23a:	460f      	mov	r7, r1
 801d23c:	4640      	mov	r0, r8
 801d23e:	4649      	mov	r1, r9
 801d240:	f7e3 f824 	bl	800028c <__adddf3>
 801d244:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d248:	f7e3 f9d6 	bl	80005f8 <__aeabi_dmul>
 801d24c:	4680      	mov	r8, r0
 801d24e:	4689      	mov	r9, r1
 801d250:	b964      	cbnz	r4, 801d26c <__ieee754_log+0x274>
 801d252:	4602      	mov	r2, r0
 801d254:	460b      	mov	r3, r1
 801d256:	4630      	mov	r0, r6
 801d258:	4639      	mov	r1, r7
 801d25a:	f7e3 f815 	bl	8000288 <__aeabi_dsub>
 801d25e:	4602      	mov	r2, r0
 801d260:	460b      	mov	r3, r1
 801d262:	4650      	mov	r0, sl
 801d264:	4659      	mov	r1, fp
 801d266:	f7e3 f80f 	bl	8000288 <__aeabi_dsub>
 801d26a:	e6da      	b.n	801d022 <__ieee754_log+0x2a>
 801d26c:	a322      	add	r3, pc, #136	; (adr r3, 801d2f8 <__ieee754_log+0x300>)
 801d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d276:	f7e3 f9bf 	bl	80005f8 <__aeabi_dmul>
 801d27a:	a321      	add	r3, pc, #132	; (adr r3, 801d300 <__ieee754_log+0x308>)
 801d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d280:	4604      	mov	r4, r0
 801d282:	460d      	mov	r5, r1
 801d284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d288:	f7e3 f9b6 	bl	80005f8 <__aeabi_dmul>
 801d28c:	4642      	mov	r2, r8
 801d28e:	464b      	mov	r3, r9
 801d290:	f7e2 fffc 	bl	800028c <__adddf3>
 801d294:	4602      	mov	r2, r0
 801d296:	460b      	mov	r3, r1
 801d298:	4630      	mov	r0, r6
 801d29a:	4639      	mov	r1, r7
 801d29c:	f7e2 fff4 	bl	8000288 <__aeabi_dsub>
 801d2a0:	4652      	mov	r2, sl
 801d2a2:	465b      	mov	r3, fp
 801d2a4:	f7e2 fff0 	bl	8000288 <__aeabi_dsub>
 801d2a8:	4602      	mov	r2, r0
 801d2aa:	460b      	mov	r3, r1
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	4629      	mov	r1, r5
 801d2b0:	e7d9      	b.n	801d266 <__ieee754_log+0x26e>
 801d2b2:	4602      	mov	r2, r0
 801d2b4:	460b      	mov	r3, r1
 801d2b6:	4650      	mov	r0, sl
 801d2b8:	4659      	mov	r1, fp
 801d2ba:	f7e2 ffe5 	bl	8000288 <__aeabi_dsub>
 801d2be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d2c2:	f7e3 f999 	bl	80005f8 <__aeabi_dmul>
 801d2c6:	4606      	mov	r6, r0
 801d2c8:	460f      	mov	r7, r1
 801d2ca:	2c00      	cmp	r4, #0
 801d2cc:	f43f af25 	beq.w	801d11a <__ieee754_log+0x122>
 801d2d0:	a309      	add	r3, pc, #36	; (adr r3, 801d2f8 <__ieee754_log+0x300>)
 801d2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2da:	f7e3 f98d 	bl	80005f8 <__aeabi_dmul>
 801d2de:	a308      	add	r3, pc, #32	; (adr r3, 801d300 <__ieee754_log+0x308>)
 801d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e4:	4604      	mov	r4, r0
 801d2e6:	460d      	mov	r5, r1
 801d2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d2ec:	e729      	b.n	801d142 <__ieee754_log+0x14a>
 801d2ee:	2000      	movs	r0, #0
 801d2f0:	2100      	movs	r1, #0
 801d2f2:	e696      	b.n	801d022 <__ieee754_log+0x2a>
 801d2f4:	f3af 8000 	nop.w
 801d2f8:	fee00000 	.word	0xfee00000
 801d2fc:	3fe62e42 	.word	0x3fe62e42
 801d300:	35793c76 	.word	0x35793c76
 801d304:	3dea39ef 	.word	0x3dea39ef
 801d308:	55555555 	.word	0x55555555
 801d30c:	3fd55555 	.word	0x3fd55555
 801d310:	df3e5244 	.word	0xdf3e5244
 801d314:	3fc2f112 	.word	0x3fc2f112
 801d318:	96cb03de 	.word	0x96cb03de
 801d31c:	3fc74664 	.word	0x3fc74664
 801d320:	94229359 	.word	0x94229359
 801d324:	3fd24924 	.word	0x3fd24924
 801d328:	55555593 	.word	0x55555593
 801d32c:	3fe55555 	.word	0x3fe55555
 801d330:	d078c69f 	.word	0xd078c69f
 801d334:	3fc39a09 	.word	0x3fc39a09
 801d338:	1d8e78af 	.word	0x1d8e78af
 801d33c:	3fcc71c5 	.word	0x3fcc71c5
 801d340:	9997fa04 	.word	0x9997fa04
 801d344:	3fd99999 	.word	0x3fd99999
 801d348:	c3500000 	.word	0xc3500000
 801d34c:	43500000 	.word	0x43500000
 801d350:	7fefffff 	.word	0x7fefffff
 801d354:	3ff00000 	.word	0x3ff00000
 801d358:	3fe00000 	.word	0x3fe00000
 801d35c:	00000000 	.word	0x00000000

0801d360 <__ieee754_rem_pio2>:
 801d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d364:	ec57 6b10 	vmov	r6, r7, d0
 801d368:	4bc3      	ldr	r3, [pc, #780]	; (801d678 <__ieee754_rem_pio2+0x318>)
 801d36a:	b08d      	sub	sp, #52	; 0x34
 801d36c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801d370:	4598      	cmp	r8, r3
 801d372:	4604      	mov	r4, r0
 801d374:	9704      	str	r7, [sp, #16]
 801d376:	dc07      	bgt.n	801d388 <__ieee754_rem_pio2+0x28>
 801d378:	2200      	movs	r2, #0
 801d37a:	2300      	movs	r3, #0
 801d37c:	ed84 0b00 	vstr	d0, [r4]
 801d380:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d384:	2500      	movs	r5, #0
 801d386:	e027      	b.n	801d3d8 <__ieee754_rem_pio2+0x78>
 801d388:	4bbc      	ldr	r3, [pc, #752]	; (801d67c <__ieee754_rem_pio2+0x31c>)
 801d38a:	4598      	cmp	r8, r3
 801d38c:	dc75      	bgt.n	801d47a <__ieee754_rem_pio2+0x11a>
 801d38e:	9b04      	ldr	r3, [sp, #16]
 801d390:	4dbb      	ldr	r5, [pc, #748]	; (801d680 <__ieee754_rem_pio2+0x320>)
 801d392:	2b00      	cmp	r3, #0
 801d394:	ee10 0a10 	vmov	r0, s0
 801d398:	a3a9      	add	r3, pc, #676	; (adr r3, 801d640 <__ieee754_rem_pio2+0x2e0>)
 801d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d39e:	4639      	mov	r1, r7
 801d3a0:	dd36      	ble.n	801d410 <__ieee754_rem_pio2+0xb0>
 801d3a2:	f7e2 ff71 	bl	8000288 <__aeabi_dsub>
 801d3a6:	45a8      	cmp	r8, r5
 801d3a8:	4606      	mov	r6, r0
 801d3aa:	460f      	mov	r7, r1
 801d3ac:	d018      	beq.n	801d3e0 <__ieee754_rem_pio2+0x80>
 801d3ae:	a3a6      	add	r3, pc, #664	; (adr r3, 801d648 <__ieee754_rem_pio2+0x2e8>)
 801d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3b4:	f7e2 ff68 	bl	8000288 <__aeabi_dsub>
 801d3b8:	4602      	mov	r2, r0
 801d3ba:	460b      	mov	r3, r1
 801d3bc:	e9c4 2300 	strd	r2, r3, [r4]
 801d3c0:	4630      	mov	r0, r6
 801d3c2:	4639      	mov	r1, r7
 801d3c4:	f7e2 ff60 	bl	8000288 <__aeabi_dsub>
 801d3c8:	a39f      	add	r3, pc, #636	; (adr r3, 801d648 <__ieee754_rem_pio2+0x2e8>)
 801d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3ce:	f7e2 ff5b 	bl	8000288 <__aeabi_dsub>
 801d3d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d3d6:	2501      	movs	r5, #1
 801d3d8:	4628      	mov	r0, r5
 801d3da:	b00d      	add	sp, #52	; 0x34
 801d3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3e0:	a39b      	add	r3, pc, #620	; (adr r3, 801d650 <__ieee754_rem_pio2+0x2f0>)
 801d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3e6:	f7e2 ff4f 	bl	8000288 <__aeabi_dsub>
 801d3ea:	a39b      	add	r3, pc, #620	; (adr r3, 801d658 <__ieee754_rem_pio2+0x2f8>)
 801d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d3f0:	4606      	mov	r6, r0
 801d3f2:	460f      	mov	r7, r1
 801d3f4:	f7e2 ff48 	bl	8000288 <__aeabi_dsub>
 801d3f8:	4602      	mov	r2, r0
 801d3fa:	460b      	mov	r3, r1
 801d3fc:	e9c4 2300 	strd	r2, r3, [r4]
 801d400:	4630      	mov	r0, r6
 801d402:	4639      	mov	r1, r7
 801d404:	f7e2 ff40 	bl	8000288 <__aeabi_dsub>
 801d408:	a393      	add	r3, pc, #588	; (adr r3, 801d658 <__ieee754_rem_pio2+0x2f8>)
 801d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d40e:	e7de      	b.n	801d3ce <__ieee754_rem_pio2+0x6e>
 801d410:	f7e2 ff3c 	bl	800028c <__adddf3>
 801d414:	45a8      	cmp	r8, r5
 801d416:	4606      	mov	r6, r0
 801d418:	460f      	mov	r7, r1
 801d41a:	d016      	beq.n	801d44a <__ieee754_rem_pio2+0xea>
 801d41c:	a38a      	add	r3, pc, #552	; (adr r3, 801d648 <__ieee754_rem_pio2+0x2e8>)
 801d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d422:	f7e2 ff33 	bl	800028c <__adddf3>
 801d426:	4602      	mov	r2, r0
 801d428:	460b      	mov	r3, r1
 801d42a:	e9c4 2300 	strd	r2, r3, [r4]
 801d42e:	4630      	mov	r0, r6
 801d430:	4639      	mov	r1, r7
 801d432:	f7e2 ff29 	bl	8000288 <__aeabi_dsub>
 801d436:	a384      	add	r3, pc, #528	; (adr r3, 801d648 <__ieee754_rem_pio2+0x2e8>)
 801d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d43c:	f7e2 ff26 	bl	800028c <__adddf3>
 801d440:	f04f 35ff 	mov.w	r5, #4294967295
 801d444:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d448:	e7c6      	b.n	801d3d8 <__ieee754_rem_pio2+0x78>
 801d44a:	a381      	add	r3, pc, #516	; (adr r3, 801d650 <__ieee754_rem_pio2+0x2f0>)
 801d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d450:	f7e2 ff1c 	bl	800028c <__adddf3>
 801d454:	a380      	add	r3, pc, #512	; (adr r3, 801d658 <__ieee754_rem_pio2+0x2f8>)
 801d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45a:	4606      	mov	r6, r0
 801d45c:	460f      	mov	r7, r1
 801d45e:	f7e2 ff15 	bl	800028c <__adddf3>
 801d462:	4602      	mov	r2, r0
 801d464:	460b      	mov	r3, r1
 801d466:	e9c4 2300 	strd	r2, r3, [r4]
 801d46a:	4630      	mov	r0, r6
 801d46c:	4639      	mov	r1, r7
 801d46e:	f7e2 ff0b 	bl	8000288 <__aeabi_dsub>
 801d472:	a379      	add	r3, pc, #484	; (adr r3, 801d658 <__ieee754_rem_pio2+0x2f8>)
 801d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d478:	e7e0      	b.n	801d43c <__ieee754_rem_pio2+0xdc>
 801d47a:	4b82      	ldr	r3, [pc, #520]	; (801d684 <__ieee754_rem_pio2+0x324>)
 801d47c:	4598      	cmp	r8, r3
 801d47e:	f300 80d0 	bgt.w	801d622 <__ieee754_rem_pio2+0x2c2>
 801d482:	f7fe ff51 	bl	801c328 <fabs>
 801d486:	ec57 6b10 	vmov	r6, r7, d0
 801d48a:	ee10 0a10 	vmov	r0, s0
 801d48e:	a374      	add	r3, pc, #464	; (adr r3, 801d660 <__ieee754_rem_pio2+0x300>)
 801d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d494:	4639      	mov	r1, r7
 801d496:	f7e3 f8af 	bl	80005f8 <__aeabi_dmul>
 801d49a:	2200      	movs	r2, #0
 801d49c:	4b7a      	ldr	r3, [pc, #488]	; (801d688 <__ieee754_rem_pio2+0x328>)
 801d49e:	f7e2 fef5 	bl	800028c <__adddf3>
 801d4a2:	f7e3 fb59 	bl	8000b58 <__aeabi_d2iz>
 801d4a6:	4605      	mov	r5, r0
 801d4a8:	f7e3 f83c 	bl	8000524 <__aeabi_i2d>
 801d4ac:	a364      	add	r3, pc, #400	; (adr r3, 801d640 <__ieee754_rem_pio2+0x2e0>)
 801d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d4b6:	f7e3 f89f 	bl	80005f8 <__aeabi_dmul>
 801d4ba:	4602      	mov	r2, r0
 801d4bc:	460b      	mov	r3, r1
 801d4be:	4630      	mov	r0, r6
 801d4c0:	4639      	mov	r1, r7
 801d4c2:	f7e2 fee1 	bl	8000288 <__aeabi_dsub>
 801d4c6:	a360      	add	r3, pc, #384	; (adr r3, 801d648 <__ieee754_rem_pio2+0x2e8>)
 801d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4cc:	4682      	mov	sl, r0
 801d4ce:	468b      	mov	fp, r1
 801d4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d4d4:	f7e3 f890 	bl	80005f8 <__aeabi_dmul>
 801d4d8:	2d1f      	cmp	r5, #31
 801d4da:	4606      	mov	r6, r0
 801d4dc:	460f      	mov	r7, r1
 801d4de:	dc0c      	bgt.n	801d4fa <__ieee754_rem_pio2+0x19a>
 801d4e0:	1e6a      	subs	r2, r5, #1
 801d4e2:	4b6a      	ldr	r3, [pc, #424]	; (801d68c <__ieee754_rem_pio2+0x32c>)
 801d4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4e8:	4543      	cmp	r3, r8
 801d4ea:	d006      	beq.n	801d4fa <__ieee754_rem_pio2+0x19a>
 801d4ec:	4632      	mov	r2, r6
 801d4ee:	463b      	mov	r3, r7
 801d4f0:	4650      	mov	r0, sl
 801d4f2:	4659      	mov	r1, fp
 801d4f4:	f7e2 fec8 	bl	8000288 <__aeabi_dsub>
 801d4f8:	e00e      	b.n	801d518 <__ieee754_rem_pio2+0x1b8>
 801d4fa:	4632      	mov	r2, r6
 801d4fc:	463b      	mov	r3, r7
 801d4fe:	4650      	mov	r0, sl
 801d500:	4659      	mov	r1, fp
 801d502:	f7e2 fec1 	bl	8000288 <__aeabi_dsub>
 801d506:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d50a:	9305      	str	r3, [sp, #20]
 801d50c:	9a05      	ldr	r2, [sp, #20]
 801d50e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d512:	1ad3      	subs	r3, r2, r3
 801d514:	2b10      	cmp	r3, #16
 801d516:	dc02      	bgt.n	801d51e <__ieee754_rem_pio2+0x1be>
 801d518:	e9c4 0100 	strd	r0, r1, [r4]
 801d51c:	e039      	b.n	801d592 <__ieee754_rem_pio2+0x232>
 801d51e:	a34c      	add	r3, pc, #304	; (adr r3, 801d650 <__ieee754_rem_pio2+0x2f0>)
 801d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d528:	f7e3 f866 	bl	80005f8 <__aeabi_dmul>
 801d52c:	4606      	mov	r6, r0
 801d52e:	460f      	mov	r7, r1
 801d530:	4602      	mov	r2, r0
 801d532:	460b      	mov	r3, r1
 801d534:	4650      	mov	r0, sl
 801d536:	4659      	mov	r1, fp
 801d538:	f7e2 fea6 	bl	8000288 <__aeabi_dsub>
 801d53c:	4602      	mov	r2, r0
 801d53e:	460b      	mov	r3, r1
 801d540:	4680      	mov	r8, r0
 801d542:	4689      	mov	r9, r1
 801d544:	4650      	mov	r0, sl
 801d546:	4659      	mov	r1, fp
 801d548:	f7e2 fe9e 	bl	8000288 <__aeabi_dsub>
 801d54c:	4632      	mov	r2, r6
 801d54e:	463b      	mov	r3, r7
 801d550:	f7e2 fe9a 	bl	8000288 <__aeabi_dsub>
 801d554:	a340      	add	r3, pc, #256	; (adr r3, 801d658 <__ieee754_rem_pio2+0x2f8>)
 801d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d55a:	4606      	mov	r6, r0
 801d55c:	460f      	mov	r7, r1
 801d55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d562:	f7e3 f849 	bl	80005f8 <__aeabi_dmul>
 801d566:	4632      	mov	r2, r6
 801d568:	463b      	mov	r3, r7
 801d56a:	f7e2 fe8d 	bl	8000288 <__aeabi_dsub>
 801d56e:	4602      	mov	r2, r0
 801d570:	460b      	mov	r3, r1
 801d572:	4606      	mov	r6, r0
 801d574:	460f      	mov	r7, r1
 801d576:	4640      	mov	r0, r8
 801d578:	4649      	mov	r1, r9
 801d57a:	f7e2 fe85 	bl	8000288 <__aeabi_dsub>
 801d57e:	9a05      	ldr	r2, [sp, #20]
 801d580:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d584:	1ad3      	subs	r3, r2, r3
 801d586:	2b31      	cmp	r3, #49	; 0x31
 801d588:	dc20      	bgt.n	801d5cc <__ieee754_rem_pio2+0x26c>
 801d58a:	e9c4 0100 	strd	r0, r1, [r4]
 801d58e:	46c2      	mov	sl, r8
 801d590:	46cb      	mov	fp, r9
 801d592:	e9d4 8900 	ldrd	r8, r9, [r4]
 801d596:	4650      	mov	r0, sl
 801d598:	4642      	mov	r2, r8
 801d59a:	464b      	mov	r3, r9
 801d59c:	4659      	mov	r1, fp
 801d59e:	f7e2 fe73 	bl	8000288 <__aeabi_dsub>
 801d5a2:	463b      	mov	r3, r7
 801d5a4:	4632      	mov	r2, r6
 801d5a6:	f7e2 fe6f 	bl	8000288 <__aeabi_dsub>
 801d5aa:	9b04      	ldr	r3, [sp, #16]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d5b2:	f6bf af11 	bge.w	801d3d8 <__ieee754_rem_pio2+0x78>
 801d5b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d5ba:	6063      	str	r3, [r4, #4]
 801d5bc:	f8c4 8000 	str.w	r8, [r4]
 801d5c0:	60a0      	str	r0, [r4, #8]
 801d5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d5c6:	60e3      	str	r3, [r4, #12]
 801d5c8:	426d      	negs	r5, r5
 801d5ca:	e705      	b.n	801d3d8 <__ieee754_rem_pio2+0x78>
 801d5cc:	a326      	add	r3, pc, #152	; (adr r3, 801d668 <__ieee754_rem_pio2+0x308>)
 801d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d5d6:	f7e3 f80f 	bl	80005f8 <__aeabi_dmul>
 801d5da:	4606      	mov	r6, r0
 801d5dc:	460f      	mov	r7, r1
 801d5de:	4602      	mov	r2, r0
 801d5e0:	460b      	mov	r3, r1
 801d5e2:	4640      	mov	r0, r8
 801d5e4:	4649      	mov	r1, r9
 801d5e6:	f7e2 fe4f 	bl	8000288 <__aeabi_dsub>
 801d5ea:	4602      	mov	r2, r0
 801d5ec:	460b      	mov	r3, r1
 801d5ee:	4682      	mov	sl, r0
 801d5f0:	468b      	mov	fp, r1
 801d5f2:	4640      	mov	r0, r8
 801d5f4:	4649      	mov	r1, r9
 801d5f6:	f7e2 fe47 	bl	8000288 <__aeabi_dsub>
 801d5fa:	4632      	mov	r2, r6
 801d5fc:	463b      	mov	r3, r7
 801d5fe:	f7e2 fe43 	bl	8000288 <__aeabi_dsub>
 801d602:	a31b      	add	r3, pc, #108	; (adr r3, 801d670 <__ieee754_rem_pio2+0x310>)
 801d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d608:	4606      	mov	r6, r0
 801d60a:	460f      	mov	r7, r1
 801d60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d610:	f7e2 fff2 	bl	80005f8 <__aeabi_dmul>
 801d614:	4632      	mov	r2, r6
 801d616:	463b      	mov	r3, r7
 801d618:	f7e2 fe36 	bl	8000288 <__aeabi_dsub>
 801d61c:	4606      	mov	r6, r0
 801d61e:	460f      	mov	r7, r1
 801d620:	e764      	b.n	801d4ec <__ieee754_rem_pio2+0x18c>
 801d622:	4b1b      	ldr	r3, [pc, #108]	; (801d690 <__ieee754_rem_pio2+0x330>)
 801d624:	4598      	cmp	r8, r3
 801d626:	dd35      	ble.n	801d694 <__ieee754_rem_pio2+0x334>
 801d628:	ee10 2a10 	vmov	r2, s0
 801d62c:	463b      	mov	r3, r7
 801d62e:	4630      	mov	r0, r6
 801d630:	4639      	mov	r1, r7
 801d632:	f7e2 fe29 	bl	8000288 <__aeabi_dsub>
 801d636:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801d63a:	e9c4 0100 	strd	r0, r1, [r4]
 801d63e:	e6a1      	b.n	801d384 <__ieee754_rem_pio2+0x24>
 801d640:	54400000 	.word	0x54400000
 801d644:	3ff921fb 	.word	0x3ff921fb
 801d648:	1a626331 	.word	0x1a626331
 801d64c:	3dd0b461 	.word	0x3dd0b461
 801d650:	1a600000 	.word	0x1a600000
 801d654:	3dd0b461 	.word	0x3dd0b461
 801d658:	2e037073 	.word	0x2e037073
 801d65c:	3ba3198a 	.word	0x3ba3198a
 801d660:	6dc9c883 	.word	0x6dc9c883
 801d664:	3fe45f30 	.word	0x3fe45f30
 801d668:	2e000000 	.word	0x2e000000
 801d66c:	3ba3198a 	.word	0x3ba3198a
 801d670:	252049c1 	.word	0x252049c1
 801d674:	397b839a 	.word	0x397b839a
 801d678:	3fe921fb 	.word	0x3fe921fb
 801d67c:	4002d97b 	.word	0x4002d97b
 801d680:	3ff921fb 	.word	0x3ff921fb
 801d684:	413921fb 	.word	0x413921fb
 801d688:	3fe00000 	.word	0x3fe00000
 801d68c:	0801f29c 	.word	0x0801f29c
 801d690:	7fefffff 	.word	0x7fefffff
 801d694:	ea4f 5528 	mov.w	r5, r8, asr #20
 801d698:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801d69c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801d6a0:	4630      	mov	r0, r6
 801d6a2:	460f      	mov	r7, r1
 801d6a4:	f7e3 fa58 	bl	8000b58 <__aeabi_d2iz>
 801d6a8:	f7e2 ff3c 	bl	8000524 <__aeabi_i2d>
 801d6ac:	4602      	mov	r2, r0
 801d6ae:	460b      	mov	r3, r1
 801d6b0:	4630      	mov	r0, r6
 801d6b2:	4639      	mov	r1, r7
 801d6b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d6b8:	f7e2 fde6 	bl	8000288 <__aeabi_dsub>
 801d6bc:	2200      	movs	r2, #0
 801d6be:	4b1f      	ldr	r3, [pc, #124]	; (801d73c <__ieee754_rem_pio2+0x3dc>)
 801d6c0:	f7e2 ff9a 	bl	80005f8 <__aeabi_dmul>
 801d6c4:	460f      	mov	r7, r1
 801d6c6:	4606      	mov	r6, r0
 801d6c8:	f7e3 fa46 	bl	8000b58 <__aeabi_d2iz>
 801d6cc:	f7e2 ff2a 	bl	8000524 <__aeabi_i2d>
 801d6d0:	4602      	mov	r2, r0
 801d6d2:	460b      	mov	r3, r1
 801d6d4:	4630      	mov	r0, r6
 801d6d6:	4639      	mov	r1, r7
 801d6d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d6dc:	f7e2 fdd4 	bl	8000288 <__aeabi_dsub>
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	4b16      	ldr	r3, [pc, #88]	; (801d73c <__ieee754_rem_pio2+0x3dc>)
 801d6e4:	f7e2 ff88 	bl	80005f8 <__aeabi_dmul>
 801d6e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801d6ec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801d6f0:	f04f 0803 	mov.w	r8, #3
 801d6f4:	2600      	movs	r6, #0
 801d6f6:	2700      	movs	r7, #0
 801d6f8:	4632      	mov	r2, r6
 801d6fa:	463b      	mov	r3, r7
 801d6fc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801d700:	f108 3aff 	add.w	sl, r8, #4294967295
 801d704:	f7e3 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 801d708:	b9b0      	cbnz	r0, 801d738 <__ieee754_rem_pio2+0x3d8>
 801d70a:	4b0d      	ldr	r3, [pc, #52]	; (801d740 <__ieee754_rem_pio2+0x3e0>)
 801d70c:	9301      	str	r3, [sp, #4]
 801d70e:	2302      	movs	r3, #2
 801d710:	9300      	str	r3, [sp, #0]
 801d712:	462a      	mov	r2, r5
 801d714:	4643      	mov	r3, r8
 801d716:	4621      	mov	r1, r4
 801d718:	a806      	add	r0, sp, #24
 801d71a:	f000 f98d 	bl	801da38 <__kernel_rem_pio2>
 801d71e:	9b04      	ldr	r3, [sp, #16]
 801d720:	2b00      	cmp	r3, #0
 801d722:	4605      	mov	r5, r0
 801d724:	f6bf ae58 	bge.w	801d3d8 <__ieee754_rem_pio2+0x78>
 801d728:	6863      	ldr	r3, [r4, #4]
 801d72a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d72e:	6063      	str	r3, [r4, #4]
 801d730:	68e3      	ldr	r3, [r4, #12]
 801d732:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d736:	e746      	b.n	801d5c6 <__ieee754_rem_pio2+0x266>
 801d738:	46d0      	mov	r8, sl
 801d73a:	e7dd      	b.n	801d6f8 <__ieee754_rem_pio2+0x398>
 801d73c:	41700000 	.word	0x41700000
 801d740:	0801f31c 	.word	0x0801f31c

0801d744 <__ieee754_sqrt>:
 801d744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d748:	4955      	ldr	r1, [pc, #340]	; (801d8a0 <__ieee754_sqrt+0x15c>)
 801d74a:	ec55 4b10 	vmov	r4, r5, d0
 801d74e:	43a9      	bics	r1, r5
 801d750:	462b      	mov	r3, r5
 801d752:	462a      	mov	r2, r5
 801d754:	d112      	bne.n	801d77c <__ieee754_sqrt+0x38>
 801d756:	ee10 2a10 	vmov	r2, s0
 801d75a:	ee10 0a10 	vmov	r0, s0
 801d75e:	4629      	mov	r1, r5
 801d760:	f7e2 ff4a 	bl	80005f8 <__aeabi_dmul>
 801d764:	4602      	mov	r2, r0
 801d766:	460b      	mov	r3, r1
 801d768:	4620      	mov	r0, r4
 801d76a:	4629      	mov	r1, r5
 801d76c:	f7e2 fd8e 	bl	800028c <__adddf3>
 801d770:	4604      	mov	r4, r0
 801d772:	460d      	mov	r5, r1
 801d774:	ec45 4b10 	vmov	d0, r4, r5
 801d778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d77c:	2d00      	cmp	r5, #0
 801d77e:	ee10 0a10 	vmov	r0, s0
 801d782:	4621      	mov	r1, r4
 801d784:	dc0f      	bgt.n	801d7a6 <__ieee754_sqrt+0x62>
 801d786:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d78a:	4330      	orrs	r0, r6
 801d78c:	d0f2      	beq.n	801d774 <__ieee754_sqrt+0x30>
 801d78e:	b155      	cbz	r5, 801d7a6 <__ieee754_sqrt+0x62>
 801d790:	ee10 2a10 	vmov	r2, s0
 801d794:	4620      	mov	r0, r4
 801d796:	4629      	mov	r1, r5
 801d798:	f7e2 fd76 	bl	8000288 <__aeabi_dsub>
 801d79c:	4602      	mov	r2, r0
 801d79e:	460b      	mov	r3, r1
 801d7a0:	f7e3 f854 	bl	800084c <__aeabi_ddiv>
 801d7a4:	e7e4      	b.n	801d770 <__ieee754_sqrt+0x2c>
 801d7a6:	151b      	asrs	r3, r3, #20
 801d7a8:	d073      	beq.n	801d892 <__ieee754_sqrt+0x14e>
 801d7aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d7ae:	07dd      	lsls	r5, r3, #31
 801d7b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d7b4:	bf48      	it	mi
 801d7b6:	0fc8      	lsrmi	r0, r1, #31
 801d7b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d7bc:	bf44      	itt	mi
 801d7be:	0049      	lslmi	r1, r1, #1
 801d7c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801d7c4:	2500      	movs	r5, #0
 801d7c6:	1058      	asrs	r0, r3, #1
 801d7c8:	0fcb      	lsrs	r3, r1, #31
 801d7ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801d7ce:	0049      	lsls	r1, r1, #1
 801d7d0:	2316      	movs	r3, #22
 801d7d2:	462c      	mov	r4, r5
 801d7d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801d7d8:	19a7      	adds	r7, r4, r6
 801d7da:	4297      	cmp	r7, r2
 801d7dc:	bfde      	ittt	le
 801d7de:	19bc      	addle	r4, r7, r6
 801d7e0:	1bd2      	suble	r2, r2, r7
 801d7e2:	19ad      	addle	r5, r5, r6
 801d7e4:	0fcf      	lsrs	r7, r1, #31
 801d7e6:	3b01      	subs	r3, #1
 801d7e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801d7ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d7f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d7f4:	d1f0      	bne.n	801d7d8 <__ieee754_sqrt+0x94>
 801d7f6:	f04f 0c20 	mov.w	ip, #32
 801d7fa:	469e      	mov	lr, r3
 801d7fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d800:	42a2      	cmp	r2, r4
 801d802:	eb06 070e 	add.w	r7, r6, lr
 801d806:	dc02      	bgt.n	801d80e <__ieee754_sqrt+0xca>
 801d808:	d112      	bne.n	801d830 <__ieee754_sqrt+0xec>
 801d80a:	428f      	cmp	r7, r1
 801d80c:	d810      	bhi.n	801d830 <__ieee754_sqrt+0xec>
 801d80e:	2f00      	cmp	r7, #0
 801d810:	eb07 0e06 	add.w	lr, r7, r6
 801d814:	da42      	bge.n	801d89c <__ieee754_sqrt+0x158>
 801d816:	f1be 0f00 	cmp.w	lr, #0
 801d81a:	db3f      	blt.n	801d89c <__ieee754_sqrt+0x158>
 801d81c:	f104 0801 	add.w	r8, r4, #1
 801d820:	1b12      	subs	r2, r2, r4
 801d822:	428f      	cmp	r7, r1
 801d824:	bf88      	it	hi
 801d826:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d82a:	1bc9      	subs	r1, r1, r7
 801d82c:	4433      	add	r3, r6
 801d82e:	4644      	mov	r4, r8
 801d830:	0052      	lsls	r2, r2, #1
 801d832:	f1bc 0c01 	subs.w	ip, ip, #1
 801d836:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801d83a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d83e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801d842:	d1dd      	bne.n	801d800 <__ieee754_sqrt+0xbc>
 801d844:	430a      	orrs	r2, r1
 801d846:	d006      	beq.n	801d856 <__ieee754_sqrt+0x112>
 801d848:	1c5c      	adds	r4, r3, #1
 801d84a:	bf13      	iteet	ne
 801d84c:	3301      	addne	r3, #1
 801d84e:	3501      	addeq	r5, #1
 801d850:	4663      	moveq	r3, ip
 801d852:	f023 0301 	bicne.w	r3, r3, #1
 801d856:	106a      	asrs	r2, r5, #1
 801d858:	085b      	lsrs	r3, r3, #1
 801d85a:	07e9      	lsls	r1, r5, #31
 801d85c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d860:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d864:	bf48      	it	mi
 801d866:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d86a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801d86e:	461c      	mov	r4, r3
 801d870:	e780      	b.n	801d774 <__ieee754_sqrt+0x30>
 801d872:	0aca      	lsrs	r2, r1, #11
 801d874:	3815      	subs	r0, #21
 801d876:	0549      	lsls	r1, r1, #21
 801d878:	2a00      	cmp	r2, #0
 801d87a:	d0fa      	beq.n	801d872 <__ieee754_sqrt+0x12e>
 801d87c:	02d6      	lsls	r6, r2, #11
 801d87e:	d50a      	bpl.n	801d896 <__ieee754_sqrt+0x152>
 801d880:	f1c3 0420 	rsb	r4, r3, #32
 801d884:	fa21 f404 	lsr.w	r4, r1, r4
 801d888:	1e5d      	subs	r5, r3, #1
 801d88a:	4099      	lsls	r1, r3
 801d88c:	4322      	orrs	r2, r4
 801d88e:	1b43      	subs	r3, r0, r5
 801d890:	e78b      	b.n	801d7aa <__ieee754_sqrt+0x66>
 801d892:	4618      	mov	r0, r3
 801d894:	e7f0      	b.n	801d878 <__ieee754_sqrt+0x134>
 801d896:	0052      	lsls	r2, r2, #1
 801d898:	3301      	adds	r3, #1
 801d89a:	e7ef      	b.n	801d87c <__ieee754_sqrt+0x138>
 801d89c:	46a0      	mov	r8, r4
 801d89e:	e7bf      	b.n	801d820 <__ieee754_sqrt+0xdc>
 801d8a0:	7ff00000 	.word	0x7ff00000
 801d8a4:	00000000 	.word	0x00000000

0801d8a8 <__kernel_cos>:
 801d8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8ac:	ec59 8b10 	vmov	r8, r9, d0
 801d8b0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801d8b4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801d8b8:	ed2d 8b02 	vpush	{d8}
 801d8bc:	eeb0 8a41 	vmov.f32	s16, s2
 801d8c0:	eef0 8a61 	vmov.f32	s17, s3
 801d8c4:	da07      	bge.n	801d8d6 <__kernel_cos+0x2e>
 801d8c6:	ee10 0a10 	vmov	r0, s0
 801d8ca:	4649      	mov	r1, r9
 801d8cc:	f7e3 f944 	bl	8000b58 <__aeabi_d2iz>
 801d8d0:	2800      	cmp	r0, #0
 801d8d2:	f000 8089 	beq.w	801d9e8 <__kernel_cos+0x140>
 801d8d6:	4642      	mov	r2, r8
 801d8d8:	464b      	mov	r3, r9
 801d8da:	4640      	mov	r0, r8
 801d8dc:	4649      	mov	r1, r9
 801d8de:	f7e2 fe8b 	bl	80005f8 <__aeabi_dmul>
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	4b4e      	ldr	r3, [pc, #312]	; (801da20 <__kernel_cos+0x178>)
 801d8e6:	4604      	mov	r4, r0
 801d8e8:	460d      	mov	r5, r1
 801d8ea:	f7e2 fe85 	bl	80005f8 <__aeabi_dmul>
 801d8ee:	a340      	add	r3, pc, #256	; (adr r3, 801d9f0 <__kernel_cos+0x148>)
 801d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8f4:	4682      	mov	sl, r0
 801d8f6:	468b      	mov	fp, r1
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	4629      	mov	r1, r5
 801d8fc:	f7e2 fe7c 	bl	80005f8 <__aeabi_dmul>
 801d900:	a33d      	add	r3, pc, #244	; (adr r3, 801d9f8 <__kernel_cos+0x150>)
 801d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d906:	f7e2 fcc1 	bl	800028c <__adddf3>
 801d90a:	4622      	mov	r2, r4
 801d90c:	462b      	mov	r3, r5
 801d90e:	f7e2 fe73 	bl	80005f8 <__aeabi_dmul>
 801d912:	a33b      	add	r3, pc, #236	; (adr r3, 801da00 <__kernel_cos+0x158>)
 801d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d918:	f7e2 fcb6 	bl	8000288 <__aeabi_dsub>
 801d91c:	4622      	mov	r2, r4
 801d91e:	462b      	mov	r3, r5
 801d920:	f7e2 fe6a 	bl	80005f8 <__aeabi_dmul>
 801d924:	a338      	add	r3, pc, #224	; (adr r3, 801da08 <__kernel_cos+0x160>)
 801d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d92a:	f7e2 fcaf 	bl	800028c <__adddf3>
 801d92e:	4622      	mov	r2, r4
 801d930:	462b      	mov	r3, r5
 801d932:	f7e2 fe61 	bl	80005f8 <__aeabi_dmul>
 801d936:	a336      	add	r3, pc, #216	; (adr r3, 801da10 <__kernel_cos+0x168>)
 801d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d93c:	f7e2 fca4 	bl	8000288 <__aeabi_dsub>
 801d940:	4622      	mov	r2, r4
 801d942:	462b      	mov	r3, r5
 801d944:	f7e2 fe58 	bl	80005f8 <__aeabi_dmul>
 801d948:	a333      	add	r3, pc, #204	; (adr r3, 801da18 <__kernel_cos+0x170>)
 801d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d94e:	f7e2 fc9d 	bl	800028c <__adddf3>
 801d952:	4622      	mov	r2, r4
 801d954:	462b      	mov	r3, r5
 801d956:	f7e2 fe4f 	bl	80005f8 <__aeabi_dmul>
 801d95a:	4622      	mov	r2, r4
 801d95c:	462b      	mov	r3, r5
 801d95e:	f7e2 fe4b 	bl	80005f8 <__aeabi_dmul>
 801d962:	ec53 2b18 	vmov	r2, r3, d8
 801d966:	4604      	mov	r4, r0
 801d968:	460d      	mov	r5, r1
 801d96a:	4640      	mov	r0, r8
 801d96c:	4649      	mov	r1, r9
 801d96e:	f7e2 fe43 	bl	80005f8 <__aeabi_dmul>
 801d972:	460b      	mov	r3, r1
 801d974:	4602      	mov	r2, r0
 801d976:	4629      	mov	r1, r5
 801d978:	4620      	mov	r0, r4
 801d97a:	f7e2 fc85 	bl	8000288 <__aeabi_dsub>
 801d97e:	4b29      	ldr	r3, [pc, #164]	; (801da24 <__kernel_cos+0x17c>)
 801d980:	429e      	cmp	r6, r3
 801d982:	4680      	mov	r8, r0
 801d984:	4689      	mov	r9, r1
 801d986:	dc11      	bgt.n	801d9ac <__kernel_cos+0x104>
 801d988:	4602      	mov	r2, r0
 801d98a:	460b      	mov	r3, r1
 801d98c:	4650      	mov	r0, sl
 801d98e:	4659      	mov	r1, fp
 801d990:	f7e2 fc7a 	bl	8000288 <__aeabi_dsub>
 801d994:	460b      	mov	r3, r1
 801d996:	4924      	ldr	r1, [pc, #144]	; (801da28 <__kernel_cos+0x180>)
 801d998:	4602      	mov	r2, r0
 801d99a:	2000      	movs	r0, #0
 801d99c:	f7e2 fc74 	bl	8000288 <__aeabi_dsub>
 801d9a0:	ecbd 8b02 	vpop	{d8}
 801d9a4:	ec41 0b10 	vmov	d0, r0, r1
 801d9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ac:	4b1f      	ldr	r3, [pc, #124]	; (801da2c <__kernel_cos+0x184>)
 801d9ae:	491e      	ldr	r1, [pc, #120]	; (801da28 <__kernel_cos+0x180>)
 801d9b0:	429e      	cmp	r6, r3
 801d9b2:	bfcc      	ite	gt
 801d9b4:	4d1e      	ldrgt	r5, [pc, #120]	; (801da30 <__kernel_cos+0x188>)
 801d9b6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801d9ba:	2400      	movs	r4, #0
 801d9bc:	4622      	mov	r2, r4
 801d9be:	462b      	mov	r3, r5
 801d9c0:	2000      	movs	r0, #0
 801d9c2:	f7e2 fc61 	bl	8000288 <__aeabi_dsub>
 801d9c6:	4622      	mov	r2, r4
 801d9c8:	4606      	mov	r6, r0
 801d9ca:	460f      	mov	r7, r1
 801d9cc:	462b      	mov	r3, r5
 801d9ce:	4650      	mov	r0, sl
 801d9d0:	4659      	mov	r1, fp
 801d9d2:	f7e2 fc59 	bl	8000288 <__aeabi_dsub>
 801d9d6:	4642      	mov	r2, r8
 801d9d8:	464b      	mov	r3, r9
 801d9da:	f7e2 fc55 	bl	8000288 <__aeabi_dsub>
 801d9de:	4602      	mov	r2, r0
 801d9e0:	460b      	mov	r3, r1
 801d9e2:	4630      	mov	r0, r6
 801d9e4:	4639      	mov	r1, r7
 801d9e6:	e7d9      	b.n	801d99c <__kernel_cos+0xf4>
 801d9e8:	2000      	movs	r0, #0
 801d9ea:	490f      	ldr	r1, [pc, #60]	; (801da28 <__kernel_cos+0x180>)
 801d9ec:	e7d8      	b.n	801d9a0 <__kernel_cos+0xf8>
 801d9ee:	bf00      	nop
 801d9f0:	be8838d4 	.word	0xbe8838d4
 801d9f4:	bda8fae9 	.word	0xbda8fae9
 801d9f8:	bdb4b1c4 	.word	0xbdb4b1c4
 801d9fc:	3e21ee9e 	.word	0x3e21ee9e
 801da00:	809c52ad 	.word	0x809c52ad
 801da04:	3e927e4f 	.word	0x3e927e4f
 801da08:	19cb1590 	.word	0x19cb1590
 801da0c:	3efa01a0 	.word	0x3efa01a0
 801da10:	16c15177 	.word	0x16c15177
 801da14:	3f56c16c 	.word	0x3f56c16c
 801da18:	5555554c 	.word	0x5555554c
 801da1c:	3fa55555 	.word	0x3fa55555
 801da20:	3fe00000 	.word	0x3fe00000
 801da24:	3fd33332 	.word	0x3fd33332
 801da28:	3ff00000 	.word	0x3ff00000
 801da2c:	3fe90000 	.word	0x3fe90000
 801da30:	3fd20000 	.word	0x3fd20000
 801da34:	00000000 	.word	0x00000000

0801da38 <__kernel_rem_pio2>:
 801da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da3c:	ed2d 8b02 	vpush	{d8}
 801da40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801da44:	1ed4      	subs	r4, r2, #3
 801da46:	9308      	str	r3, [sp, #32]
 801da48:	9101      	str	r1, [sp, #4]
 801da4a:	4bc5      	ldr	r3, [pc, #788]	; (801dd60 <__kernel_rem_pio2+0x328>)
 801da4c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801da4e:	9009      	str	r0, [sp, #36]	; 0x24
 801da50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801da54:	9304      	str	r3, [sp, #16]
 801da56:	9b08      	ldr	r3, [sp, #32]
 801da58:	3b01      	subs	r3, #1
 801da5a:	9307      	str	r3, [sp, #28]
 801da5c:	2318      	movs	r3, #24
 801da5e:	fb94 f4f3 	sdiv	r4, r4, r3
 801da62:	f06f 0317 	mvn.w	r3, #23
 801da66:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801da6a:	fb04 3303 	mla	r3, r4, r3, r3
 801da6e:	eb03 0a02 	add.w	sl, r3, r2
 801da72:	9b04      	ldr	r3, [sp, #16]
 801da74:	9a07      	ldr	r2, [sp, #28]
 801da76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801dd50 <__kernel_rem_pio2+0x318>
 801da7a:	eb03 0802 	add.w	r8, r3, r2
 801da7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801da80:	1aa7      	subs	r7, r4, r2
 801da82:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801da86:	ae22      	add	r6, sp, #136	; 0x88
 801da88:	2500      	movs	r5, #0
 801da8a:	4545      	cmp	r5, r8
 801da8c:	dd13      	ble.n	801dab6 <__kernel_rem_pio2+0x7e>
 801da8e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801dd50 <__kernel_rem_pio2+0x318>
 801da92:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801da96:	2600      	movs	r6, #0
 801da98:	9b04      	ldr	r3, [sp, #16]
 801da9a:	429e      	cmp	r6, r3
 801da9c:	dc32      	bgt.n	801db04 <__kernel_rem_pio2+0xcc>
 801da9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daa0:	9302      	str	r3, [sp, #8]
 801daa2:	9b08      	ldr	r3, [sp, #32]
 801daa4:	199d      	adds	r5, r3, r6
 801daa6:	ab22      	add	r3, sp, #136	; 0x88
 801daa8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801daac:	9306      	str	r3, [sp, #24]
 801daae:	ec59 8b18 	vmov	r8, r9, d8
 801dab2:	2700      	movs	r7, #0
 801dab4:	e01f      	b.n	801daf6 <__kernel_rem_pio2+0xbe>
 801dab6:	42ef      	cmn	r7, r5
 801dab8:	d407      	bmi.n	801daca <__kernel_rem_pio2+0x92>
 801daba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801dabe:	f7e2 fd31 	bl	8000524 <__aeabi_i2d>
 801dac2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801dac6:	3501      	adds	r5, #1
 801dac8:	e7df      	b.n	801da8a <__kernel_rem_pio2+0x52>
 801daca:	ec51 0b18 	vmov	r0, r1, d8
 801dace:	e7f8      	b.n	801dac2 <__kernel_rem_pio2+0x8a>
 801dad0:	9906      	ldr	r1, [sp, #24]
 801dad2:	9d02      	ldr	r5, [sp, #8]
 801dad4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801dad8:	9106      	str	r1, [sp, #24]
 801dada:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801dade:	9502      	str	r5, [sp, #8]
 801dae0:	f7e2 fd8a 	bl	80005f8 <__aeabi_dmul>
 801dae4:	4602      	mov	r2, r0
 801dae6:	460b      	mov	r3, r1
 801dae8:	4640      	mov	r0, r8
 801daea:	4649      	mov	r1, r9
 801daec:	f7e2 fbce 	bl	800028c <__adddf3>
 801daf0:	3701      	adds	r7, #1
 801daf2:	4680      	mov	r8, r0
 801daf4:	4689      	mov	r9, r1
 801daf6:	9b07      	ldr	r3, [sp, #28]
 801daf8:	429f      	cmp	r7, r3
 801dafa:	dde9      	ble.n	801dad0 <__kernel_rem_pio2+0x98>
 801dafc:	e8eb 8902 	strd	r8, r9, [fp], #8
 801db00:	3601      	adds	r6, #1
 801db02:	e7c9      	b.n	801da98 <__kernel_rem_pio2+0x60>
 801db04:	9b04      	ldr	r3, [sp, #16]
 801db06:	aa0e      	add	r2, sp, #56	; 0x38
 801db08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db0c:	930c      	str	r3, [sp, #48]	; 0x30
 801db0e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801db10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801db14:	9c04      	ldr	r4, [sp, #16]
 801db16:	930b      	str	r3, [sp, #44]	; 0x2c
 801db18:	ab9a      	add	r3, sp, #616	; 0x268
 801db1a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801db1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801db22:	f10b 3bff 	add.w	fp, fp, #4294967295
 801db26:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801db2a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801db2e:	ab9a      	add	r3, sp, #616	; 0x268
 801db30:	445b      	add	r3, fp
 801db32:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801db36:	2500      	movs	r5, #0
 801db38:	1b63      	subs	r3, r4, r5
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	dc78      	bgt.n	801dc30 <__kernel_rem_pio2+0x1f8>
 801db3e:	4650      	mov	r0, sl
 801db40:	ec49 8b10 	vmov	d0, r8, r9
 801db44:	f000 fdd0 	bl	801e6e8 <scalbn>
 801db48:	ec57 6b10 	vmov	r6, r7, d0
 801db4c:	2200      	movs	r2, #0
 801db4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801db52:	ee10 0a10 	vmov	r0, s0
 801db56:	4639      	mov	r1, r7
 801db58:	f7e2 fd4e 	bl	80005f8 <__aeabi_dmul>
 801db5c:	ec41 0b10 	vmov	d0, r0, r1
 801db60:	f000 fd32 	bl	801e5c8 <floor>
 801db64:	2200      	movs	r2, #0
 801db66:	ec51 0b10 	vmov	r0, r1, d0
 801db6a:	4b7e      	ldr	r3, [pc, #504]	; (801dd64 <__kernel_rem_pio2+0x32c>)
 801db6c:	f7e2 fd44 	bl	80005f8 <__aeabi_dmul>
 801db70:	4602      	mov	r2, r0
 801db72:	460b      	mov	r3, r1
 801db74:	4630      	mov	r0, r6
 801db76:	4639      	mov	r1, r7
 801db78:	f7e2 fb86 	bl	8000288 <__aeabi_dsub>
 801db7c:	460f      	mov	r7, r1
 801db7e:	4606      	mov	r6, r0
 801db80:	f7e2 ffea 	bl	8000b58 <__aeabi_d2iz>
 801db84:	9006      	str	r0, [sp, #24]
 801db86:	f7e2 fccd 	bl	8000524 <__aeabi_i2d>
 801db8a:	4602      	mov	r2, r0
 801db8c:	460b      	mov	r3, r1
 801db8e:	4630      	mov	r0, r6
 801db90:	4639      	mov	r1, r7
 801db92:	f7e2 fb79 	bl	8000288 <__aeabi_dsub>
 801db96:	f1ba 0f00 	cmp.w	sl, #0
 801db9a:	4606      	mov	r6, r0
 801db9c:	460f      	mov	r7, r1
 801db9e:	dd6c      	ble.n	801dc7a <__kernel_rem_pio2+0x242>
 801dba0:	1e62      	subs	r2, r4, #1
 801dba2:	ab0e      	add	r3, sp, #56	; 0x38
 801dba4:	f1ca 0118 	rsb	r1, sl, #24
 801dba8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dbac:	9d06      	ldr	r5, [sp, #24]
 801dbae:	fa40 f301 	asr.w	r3, r0, r1
 801dbb2:	441d      	add	r5, r3
 801dbb4:	408b      	lsls	r3, r1
 801dbb6:	1ac0      	subs	r0, r0, r3
 801dbb8:	ab0e      	add	r3, sp, #56	; 0x38
 801dbba:	9506      	str	r5, [sp, #24]
 801dbbc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801dbc0:	f1ca 0317 	rsb	r3, sl, #23
 801dbc4:	fa40 f303 	asr.w	r3, r0, r3
 801dbc8:	9302      	str	r3, [sp, #8]
 801dbca:	9b02      	ldr	r3, [sp, #8]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	dd62      	ble.n	801dc96 <__kernel_rem_pio2+0x25e>
 801dbd0:	9b06      	ldr	r3, [sp, #24]
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	3301      	adds	r3, #1
 801dbd6:	9306      	str	r3, [sp, #24]
 801dbd8:	4615      	mov	r5, r2
 801dbda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801dbde:	4294      	cmp	r4, r2
 801dbe0:	f300 8095 	bgt.w	801dd0e <__kernel_rem_pio2+0x2d6>
 801dbe4:	f1ba 0f00 	cmp.w	sl, #0
 801dbe8:	dd07      	ble.n	801dbfa <__kernel_rem_pio2+0x1c2>
 801dbea:	f1ba 0f01 	cmp.w	sl, #1
 801dbee:	f000 80a2 	beq.w	801dd36 <__kernel_rem_pio2+0x2fe>
 801dbf2:	f1ba 0f02 	cmp.w	sl, #2
 801dbf6:	f000 80c1 	beq.w	801dd7c <__kernel_rem_pio2+0x344>
 801dbfa:	9b02      	ldr	r3, [sp, #8]
 801dbfc:	2b02      	cmp	r3, #2
 801dbfe:	d14a      	bne.n	801dc96 <__kernel_rem_pio2+0x25e>
 801dc00:	4632      	mov	r2, r6
 801dc02:	463b      	mov	r3, r7
 801dc04:	2000      	movs	r0, #0
 801dc06:	4958      	ldr	r1, [pc, #352]	; (801dd68 <__kernel_rem_pio2+0x330>)
 801dc08:	f7e2 fb3e 	bl	8000288 <__aeabi_dsub>
 801dc0c:	4606      	mov	r6, r0
 801dc0e:	460f      	mov	r7, r1
 801dc10:	2d00      	cmp	r5, #0
 801dc12:	d040      	beq.n	801dc96 <__kernel_rem_pio2+0x25e>
 801dc14:	4650      	mov	r0, sl
 801dc16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801dd58 <__kernel_rem_pio2+0x320>
 801dc1a:	f000 fd65 	bl	801e6e8 <scalbn>
 801dc1e:	4630      	mov	r0, r6
 801dc20:	4639      	mov	r1, r7
 801dc22:	ec53 2b10 	vmov	r2, r3, d0
 801dc26:	f7e2 fb2f 	bl	8000288 <__aeabi_dsub>
 801dc2a:	4606      	mov	r6, r0
 801dc2c:	460f      	mov	r7, r1
 801dc2e:	e032      	b.n	801dc96 <__kernel_rem_pio2+0x25e>
 801dc30:	2200      	movs	r2, #0
 801dc32:	4b4e      	ldr	r3, [pc, #312]	; (801dd6c <__kernel_rem_pio2+0x334>)
 801dc34:	4640      	mov	r0, r8
 801dc36:	4649      	mov	r1, r9
 801dc38:	f7e2 fcde 	bl	80005f8 <__aeabi_dmul>
 801dc3c:	f7e2 ff8c 	bl	8000b58 <__aeabi_d2iz>
 801dc40:	f7e2 fc70 	bl	8000524 <__aeabi_i2d>
 801dc44:	2200      	movs	r2, #0
 801dc46:	4b4a      	ldr	r3, [pc, #296]	; (801dd70 <__kernel_rem_pio2+0x338>)
 801dc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc4c:	f7e2 fcd4 	bl	80005f8 <__aeabi_dmul>
 801dc50:	4602      	mov	r2, r0
 801dc52:	460b      	mov	r3, r1
 801dc54:	4640      	mov	r0, r8
 801dc56:	4649      	mov	r1, r9
 801dc58:	f7e2 fb16 	bl	8000288 <__aeabi_dsub>
 801dc5c:	f7e2 ff7c 	bl	8000b58 <__aeabi_d2iz>
 801dc60:	ab0e      	add	r3, sp, #56	; 0x38
 801dc62:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801dc66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801dc6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc6e:	f7e2 fb0d 	bl	800028c <__adddf3>
 801dc72:	3501      	adds	r5, #1
 801dc74:	4680      	mov	r8, r0
 801dc76:	4689      	mov	r9, r1
 801dc78:	e75e      	b.n	801db38 <__kernel_rem_pio2+0x100>
 801dc7a:	d105      	bne.n	801dc88 <__kernel_rem_pio2+0x250>
 801dc7c:	1e63      	subs	r3, r4, #1
 801dc7e:	aa0e      	add	r2, sp, #56	; 0x38
 801dc80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dc84:	15c3      	asrs	r3, r0, #23
 801dc86:	e79f      	b.n	801dbc8 <__kernel_rem_pio2+0x190>
 801dc88:	2200      	movs	r2, #0
 801dc8a:	4b3a      	ldr	r3, [pc, #232]	; (801dd74 <__kernel_rem_pio2+0x33c>)
 801dc8c:	f7e2 ff3a 	bl	8000b04 <__aeabi_dcmpge>
 801dc90:	2800      	cmp	r0, #0
 801dc92:	d139      	bne.n	801dd08 <__kernel_rem_pio2+0x2d0>
 801dc94:	9002      	str	r0, [sp, #8]
 801dc96:	2200      	movs	r2, #0
 801dc98:	2300      	movs	r3, #0
 801dc9a:	4630      	mov	r0, r6
 801dc9c:	4639      	mov	r1, r7
 801dc9e:	f7e2 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 801dca2:	2800      	cmp	r0, #0
 801dca4:	f000 80c7 	beq.w	801de36 <__kernel_rem_pio2+0x3fe>
 801dca8:	1e65      	subs	r5, r4, #1
 801dcaa:	462b      	mov	r3, r5
 801dcac:	2200      	movs	r2, #0
 801dcae:	9904      	ldr	r1, [sp, #16]
 801dcb0:	428b      	cmp	r3, r1
 801dcb2:	da6a      	bge.n	801dd8a <__kernel_rem_pio2+0x352>
 801dcb4:	2a00      	cmp	r2, #0
 801dcb6:	f000 8088 	beq.w	801ddca <__kernel_rem_pio2+0x392>
 801dcba:	ab0e      	add	r3, sp, #56	; 0x38
 801dcbc:	f1aa 0a18 	sub.w	sl, sl, #24
 801dcc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	f000 80b4 	beq.w	801de32 <__kernel_rem_pio2+0x3fa>
 801dcca:	4650      	mov	r0, sl
 801dccc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801dd58 <__kernel_rem_pio2+0x320>
 801dcd0:	f000 fd0a 	bl	801e6e8 <scalbn>
 801dcd4:	00ec      	lsls	r4, r5, #3
 801dcd6:	ab72      	add	r3, sp, #456	; 0x1c8
 801dcd8:	191e      	adds	r6, r3, r4
 801dcda:	ec59 8b10 	vmov	r8, r9, d0
 801dcde:	f106 0a08 	add.w	sl, r6, #8
 801dce2:	462f      	mov	r7, r5
 801dce4:	2f00      	cmp	r7, #0
 801dce6:	f280 80df 	bge.w	801dea8 <__kernel_rem_pio2+0x470>
 801dcea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801dd50 <__kernel_rem_pio2+0x318>
 801dcee:	f04f 0a00 	mov.w	sl, #0
 801dcf2:	eba5 030a 	sub.w	r3, r5, sl
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	f2c0 810a 	blt.w	801df10 <__kernel_rem_pio2+0x4d8>
 801dcfc:	f8df b078 	ldr.w	fp, [pc, #120]	; 801dd78 <__kernel_rem_pio2+0x340>
 801dd00:	ec59 8b18 	vmov	r8, r9, d8
 801dd04:	2700      	movs	r7, #0
 801dd06:	e0f5      	b.n	801def4 <__kernel_rem_pio2+0x4bc>
 801dd08:	2302      	movs	r3, #2
 801dd0a:	9302      	str	r3, [sp, #8]
 801dd0c:	e760      	b.n	801dbd0 <__kernel_rem_pio2+0x198>
 801dd0e:	ab0e      	add	r3, sp, #56	; 0x38
 801dd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd14:	b94d      	cbnz	r5, 801dd2a <__kernel_rem_pio2+0x2f2>
 801dd16:	b12b      	cbz	r3, 801dd24 <__kernel_rem_pio2+0x2ec>
 801dd18:	a80e      	add	r0, sp, #56	; 0x38
 801dd1a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801dd1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801dd22:	2301      	movs	r3, #1
 801dd24:	3201      	adds	r2, #1
 801dd26:	461d      	mov	r5, r3
 801dd28:	e759      	b.n	801dbde <__kernel_rem_pio2+0x1a6>
 801dd2a:	a80e      	add	r0, sp, #56	; 0x38
 801dd2c:	1acb      	subs	r3, r1, r3
 801dd2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801dd32:	462b      	mov	r3, r5
 801dd34:	e7f6      	b.n	801dd24 <__kernel_rem_pio2+0x2ec>
 801dd36:	1e62      	subs	r2, r4, #1
 801dd38:	ab0e      	add	r3, sp, #56	; 0x38
 801dd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dd42:	a90e      	add	r1, sp, #56	; 0x38
 801dd44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801dd48:	e757      	b.n	801dbfa <__kernel_rem_pio2+0x1c2>
 801dd4a:	bf00      	nop
 801dd4c:	f3af 8000 	nop.w
	...
 801dd5c:	3ff00000 	.word	0x3ff00000
 801dd60:	0801f468 	.word	0x0801f468
 801dd64:	40200000 	.word	0x40200000
 801dd68:	3ff00000 	.word	0x3ff00000
 801dd6c:	3e700000 	.word	0x3e700000
 801dd70:	41700000 	.word	0x41700000
 801dd74:	3fe00000 	.word	0x3fe00000
 801dd78:	0801f428 	.word	0x0801f428
 801dd7c:	1e62      	subs	r2, r4, #1
 801dd7e:	ab0e      	add	r3, sp, #56	; 0x38
 801dd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dd84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801dd88:	e7db      	b.n	801dd42 <__kernel_rem_pio2+0x30a>
 801dd8a:	a90e      	add	r1, sp, #56	; 0x38
 801dd8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801dd90:	3b01      	subs	r3, #1
 801dd92:	430a      	orrs	r2, r1
 801dd94:	e78b      	b.n	801dcae <__kernel_rem_pio2+0x276>
 801dd96:	3301      	adds	r3, #1
 801dd98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801dd9c:	2900      	cmp	r1, #0
 801dd9e:	d0fa      	beq.n	801dd96 <__kernel_rem_pio2+0x35e>
 801dda0:	9a08      	ldr	r2, [sp, #32]
 801dda2:	4422      	add	r2, r4
 801dda4:	00d2      	lsls	r2, r2, #3
 801dda6:	a922      	add	r1, sp, #136	; 0x88
 801dda8:	18e3      	adds	r3, r4, r3
 801ddaa:	9206      	str	r2, [sp, #24]
 801ddac:	440a      	add	r2, r1
 801ddae:	9302      	str	r3, [sp, #8]
 801ddb0:	f10b 0108 	add.w	r1, fp, #8
 801ddb4:	f102 0308 	add.w	r3, r2, #8
 801ddb8:	1c66      	adds	r6, r4, #1
 801ddba:	910a      	str	r1, [sp, #40]	; 0x28
 801ddbc:	2500      	movs	r5, #0
 801ddbe:	930d      	str	r3, [sp, #52]	; 0x34
 801ddc0:	9b02      	ldr	r3, [sp, #8]
 801ddc2:	42b3      	cmp	r3, r6
 801ddc4:	da04      	bge.n	801ddd0 <__kernel_rem_pio2+0x398>
 801ddc6:	461c      	mov	r4, r3
 801ddc8:	e6a6      	b.n	801db18 <__kernel_rem_pio2+0xe0>
 801ddca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ddcc:	2301      	movs	r3, #1
 801ddce:	e7e3      	b.n	801dd98 <__kernel_rem_pio2+0x360>
 801ddd0:	9b06      	ldr	r3, [sp, #24]
 801ddd2:	18ef      	adds	r7, r5, r3
 801ddd4:	ab22      	add	r3, sp, #136	; 0x88
 801ddd6:	441f      	add	r7, r3
 801ddd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ddda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ddde:	f7e2 fba1 	bl	8000524 <__aeabi_i2d>
 801dde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dde4:	461c      	mov	r4, r3
 801dde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dde8:	e9c7 0100 	strd	r0, r1, [r7]
 801ddec:	eb03 0b05 	add.w	fp, r3, r5
 801ddf0:	2700      	movs	r7, #0
 801ddf2:	f04f 0800 	mov.w	r8, #0
 801ddf6:	f04f 0900 	mov.w	r9, #0
 801ddfa:	9b07      	ldr	r3, [sp, #28]
 801ddfc:	429f      	cmp	r7, r3
 801ddfe:	dd08      	ble.n	801de12 <__kernel_rem_pio2+0x3da>
 801de00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de02:	aa72      	add	r2, sp, #456	; 0x1c8
 801de04:	18eb      	adds	r3, r5, r3
 801de06:	4413      	add	r3, r2
 801de08:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801de0c:	3601      	adds	r6, #1
 801de0e:	3508      	adds	r5, #8
 801de10:	e7d6      	b.n	801ddc0 <__kernel_rem_pio2+0x388>
 801de12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801de16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801de1a:	f7e2 fbed 	bl	80005f8 <__aeabi_dmul>
 801de1e:	4602      	mov	r2, r0
 801de20:	460b      	mov	r3, r1
 801de22:	4640      	mov	r0, r8
 801de24:	4649      	mov	r1, r9
 801de26:	f7e2 fa31 	bl	800028c <__adddf3>
 801de2a:	3701      	adds	r7, #1
 801de2c:	4680      	mov	r8, r0
 801de2e:	4689      	mov	r9, r1
 801de30:	e7e3      	b.n	801ddfa <__kernel_rem_pio2+0x3c2>
 801de32:	3d01      	subs	r5, #1
 801de34:	e741      	b.n	801dcba <__kernel_rem_pio2+0x282>
 801de36:	f1ca 0000 	rsb	r0, sl, #0
 801de3a:	ec47 6b10 	vmov	d0, r6, r7
 801de3e:	f000 fc53 	bl	801e6e8 <scalbn>
 801de42:	ec57 6b10 	vmov	r6, r7, d0
 801de46:	2200      	movs	r2, #0
 801de48:	4b99      	ldr	r3, [pc, #612]	; (801e0b0 <__kernel_rem_pio2+0x678>)
 801de4a:	ee10 0a10 	vmov	r0, s0
 801de4e:	4639      	mov	r1, r7
 801de50:	f7e2 fe58 	bl	8000b04 <__aeabi_dcmpge>
 801de54:	b1f8      	cbz	r0, 801de96 <__kernel_rem_pio2+0x45e>
 801de56:	2200      	movs	r2, #0
 801de58:	4b96      	ldr	r3, [pc, #600]	; (801e0b4 <__kernel_rem_pio2+0x67c>)
 801de5a:	4630      	mov	r0, r6
 801de5c:	4639      	mov	r1, r7
 801de5e:	f7e2 fbcb 	bl	80005f8 <__aeabi_dmul>
 801de62:	f7e2 fe79 	bl	8000b58 <__aeabi_d2iz>
 801de66:	4680      	mov	r8, r0
 801de68:	f7e2 fb5c 	bl	8000524 <__aeabi_i2d>
 801de6c:	2200      	movs	r2, #0
 801de6e:	4b90      	ldr	r3, [pc, #576]	; (801e0b0 <__kernel_rem_pio2+0x678>)
 801de70:	f7e2 fbc2 	bl	80005f8 <__aeabi_dmul>
 801de74:	460b      	mov	r3, r1
 801de76:	4602      	mov	r2, r0
 801de78:	4639      	mov	r1, r7
 801de7a:	4630      	mov	r0, r6
 801de7c:	f7e2 fa04 	bl	8000288 <__aeabi_dsub>
 801de80:	f7e2 fe6a 	bl	8000b58 <__aeabi_d2iz>
 801de84:	1c65      	adds	r5, r4, #1
 801de86:	ab0e      	add	r3, sp, #56	; 0x38
 801de88:	f10a 0a18 	add.w	sl, sl, #24
 801de8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801de90:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801de94:	e719      	b.n	801dcca <__kernel_rem_pio2+0x292>
 801de96:	4630      	mov	r0, r6
 801de98:	4639      	mov	r1, r7
 801de9a:	f7e2 fe5d 	bl	8000b58 <__aeabi_d2iz>
 801de9e:	ab0e      	add	r3, sp, #56	; 0x38
 801dea0:	4625      	mov	r5, r4
 801dea2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801dea6:	e710      	b.n	801dcca <__kernel_rem_pio2+0x292>
 801dea8:	ab0e      	add	r3, sp, #56	; 0x38
 801deaa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801deae:	f7e2 fb39 	bl	8000524 <__aeabi_i2d>
 801deb2:	4642      	mov	r2, r8
 801deb4:	464b      	mov	r3, r9
 801deb6:	f7e2 fb9f 	bl	80005f8 <__aeabi_dmul>
 801deba:	2200      	movs	r2, #0
 801debc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801dec0:	4b7c      	ldr	r3, [pc, #496]	; (801e0b4 <__kernel_rem_pio2+0x67c>)
 801dec2:	4640      	mov	r0, r8
 801dec4:	4649      	mov	r1, r9
 801dec6:	f7e2 fb97 	bl	80005f8 <__aeabi_dmul>
 801deca:	3f01      	subs	r7, #1
 801decc:	4680      	mov	r8, r0
 801dece:	4689      	mov	r9, r1
 801ded0:	e708      	b.n	801dce4 <__kernel_rem_pio2+0x2ac>
 801ded2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deda:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801dede:	f7e2 fb8b 	bl	80005f8 <__aeabi_dmul>
 801dee2:	4602      	mov	r2, r0
 801dee4:	460b      	mov	r3, r1
 801dee6:	4640      	mov	r0, r8
 801dee8:	4649      	mov	r1, r9
 801deea:	f7e2 f9cf 	bl	800028c <__adddf3>
 801deee:	3701      	adds	r7, #1
 801def0:	4680      	mov	r8, r0
 801def2:	4689      	mov	r9, r1
 801def4:	9b04      	ldr	r3, [sp, #16]
 801def6:	429f      	cmp	r7, r3
 801def8:	dc01      	bgt.n	801defe <__kernel_rem_pio2+0x4c6>
 801defa:	45ba      	cmp	sl, r7
 801defc:	dae9      	bge.n	801ded2 <__kernel_rem_pio2+0x49a>
 801defe:	ab4a      	add	r3, sp, #296	; 0x128
 801df00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801df04:	e9c3 8900 	strd	r8, r9, [r3]
 801df08:	f10a 0a01 	add.w	sl, sl, #1
 801df0c:	3e08      	subs	r6, #8
 801df0e:	e6f0      	b.n	801dcf2 <__kernel_rem_pio2+0x2ba>
 801df10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801df12:	2b03      	cmp	r3, #3
 801df14:	d85b      	bhi.n	801dfce <__kernel_rem_pio2+0x596>
 801df16:	e8df f003 	tbb	[pc, r3]
 801df1a:	264a      	.short	0x264a
 801df1c:	0226      	.short	0x0226
 801df1e:	ab9a      	add	r3, sp, #616	; 0x268
 801df20:	441c      	add	r4, r3
 801df22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801df26:	46a2      	mov	sl, r4
 801df28:	46ab      	mov	fp, r5
 801df2a:	f1bb 0f00 	cmp.w	fp, #0
 801df2e:	dc6c      	bgt.n	801e00a <__kernel_rem_pio2+0x5d2>
 801df30:	46a2      	mov	sl, r4
 801df32:	46ab      	mov	fp, r5
 801df34:	f1bb 0f01 	cmp.w	fp, #1
 801df38:	f300 8086 	bgt.w	801e048 <__kernel_rem_pio2+0x610>
 801df3c:	2000      	movs	r0, #0
 801df3e:	2100      	movs	r1, #0
 801df40:	2d01      	cmp	r5, #1
 801df42:	f300 80a0 	bgt.w	801e086 <__kernel_rem_pio2+0x64e>
 801df46:	9b02      	ldr	r3, [sp, #8]
 801df48:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801df4c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801df50:	2b00      	cmp	r3, #0
 801df52:	f040 809e 	bne.w	801e092 <__kernel_rem_pio2+0x65a>
 801df56:	9b01      	ldr	r3, [sp, #4]
 801df58:	e9c3 7800 	strd	r7, r8, [r3]
 801df5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801df60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801df64:	e033      	b.n	801dfce <__kernel_rem_pio2+0x596>
 801df66:	3408      	adds	r4, #8
 801df68:	ab4a      	add	r3, sp, #296	; 0x128
 801df6a:	441c      	add	r4, r3
 801df6c:	462e      	mov	r6, r5
 801df6e:	2000      	movs	r0, #0
 801df70:	2100      	movs	r1, #0
 801df72:	2e00      	cmp	r6, #0
 801df74:	da3a      	bge.n	801dfec <__kernel_rem_pio2+0x5b4>
 801df76:	9b02      	ldr	r3, [sp, #8]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d03d      	beq.n	801dff8 <__kernel_rem_pio2+0x5c0>
 801df7c:	4602      	mov	r2, r0
 801df7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801df82:	9c01      	ldr	r4, [sp, #4]
 801df84:	e9c4 2300 	strd	r2, r3, [r4]
 801df88:	4602      	mov	r2, r0
 801df8a:	460b      	mov	r3, r1
 801df8c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801df90:	f7e2 f97a 	bl	8000288 <__aeabi_dsub>
 801df94:	ae4c      	add	r6, sp, #304	; 0x130
 801df96:	2401      	movs	r4, #1
 801df98:	42a5      	cmp	r5, r4
 801df9a:	da30      	bge.n	801dffe <__kernel_rem_pio2+0x5c6>
 801df9c:	9b02      	ldr	r3, [sp, #8]
 801df9e:	b113      	cbz	r3, 801dfa6 <__kernel_rem_pio2+0x56e>
 801dfa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dfa4:	4619      	mov	r1, r3
 801dfa6:	9b01      	ldr	r3, [sp, #4]
 801dfa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801dfac:	e00f      	b.n	801dfce <__kernel_rem_pio2+0x596>
 801dfae:	ab9a      	add	r3, sp, #616	; 0x268
 801dfb0:	441c      	add	r4, r3
 801dfb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	2100      	movs	r1, #0
 801dfba:	2d00      	cmp	r5, #0
 801dfbc:	da10      	bge.n	801dfe0 <__kernel_rem_pio2+0x5a8>
 801dfbe:	9b02      	ldr	r3, [sp, #8]
 801dfc0:	b113      	cbz	r3, 801dfc8 <__kernel_rem_pio2+0x590>
 801dfc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801dfc6:	4619      	mov	r1, r3
 801dfc8:	9b01      	ldr	r3, [sp, #4]
 801dfca:	e9c3 0100 	strd	r0, r1, [r3]
 801dfce:	9b06      	ldr	r3, [sp, #24]
 801dfd0:	f003 0007 	and.w	r0, r3, #7
 801dfd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801dfd8:	ecbd 8b02 	vpop	{d8}
 801dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfe0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801dfe4:	f7e2 f952 	bl	800028c <__adddf3>
 801dfe8:	3d01      	subs	r5, #1
 801dfea:	e7e6      	b.n	801dfba <__kernel_rem_pio2+0x582>
 801dfec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801dff0:	f7e2 f94c 	bl	800028c <__adddf3>
 801dff4:	3e01      	subs	r6, #1
 801dff6:	e7bc      	b.n	801df72 <__kernel_rem_pio2+0x53a>
 801dff8:	4602      	mov	r2, r0
 801dffa:	460b      	mov	r3, r1
 801dffc:	e7c1      	b.n	801df82 <__kernel_rem_pio2+0x54a>
 801dffe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801e002:	f7e2 f943 	bl	800028c <__adddf3>
 801e006:	3401      	adds	r4, #1
 801e008:	e7c6      	b.n	801df98 <__kernel_rem_pio2+0x560>
 801e00a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801e00e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801e012:	4640      	mov	r0, r8
 801e014:	ec53 2b17 	vmov	r2, r3, d7
 801e018:	4649      	mov	r1, r9
 801e01a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e01e:	f7e2 f935 	bl	800028c <__adddf3>
 801e022:	4602      	mov	r2, r0
 801e024:	460b      	mov	r3, r1
 801e026:	4606      	mov	r6, r0
 801e028:	460f      	mov	r7, r1
 801e02a:	4640      	mov	r0, r8
 801e02c:	4649      	mov	r1, r9
 801e02e:	f7e2 f92b 	bl	8000288 <__aeabi_dsub>
 801e032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e036:	f7e2 f929 	bl	800028c <__adddf3>
 801e03a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e03e:	e9ca 0100 	strd	r0, r1, [sl]
 801e042:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801e046:	e770      	b.n	801df2a <__kernel_rem_pio2+0x4f2>
 801e048:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801e04c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801e050:	4630      	mov	r0, r6
 801e052:	ec53 2b17 	vmov	r2, r3, d7
 801e056:	4639      	mov	r1, r7
 801e058:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e05c:	f7e2 f916 	bl	800028c <__adddf3>
 801e060:	4602      	mov	r2, r0
 801e062:	460b      	mov	r3, r1
 801e064:	4680      	mov	r8, r0
 801e066:	4689      	mov	r9, r1
 801e068:	4630      	mov	r0, r6
 801e06a:	4639      	mov	r1, r7
 801e06c:	f7e2 f90c 	bl	8000288 <__aeabi_dsub>
 801e070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e074:	f7e2 f90a 	bl	800028c <__adddf3>
 801e078:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e07c:	e9ca 0100 	strd	r0, r1, [sl]
 801e080:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801e084:	e756      	b.n	801df34 <__kernel_rem_pio2+0x4fc>
 801e086:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801e08a:	f7e2 f8ff 	bl	800028c <__adddf3>
 801e08e:	3d01      	subs	r5, #1
 801e090:	e756      	b.n	801df40 <__kernel_rem_pio2+0x508>
 801e092:	9b01      	ldr	r3, [sp, #4]
 801e094:	9a01      	ldr	r2, [sp, #4]
 801e096:	601f      	str	r7, [r3, #0]
 801e098:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801e09c:	605c      	str	r4, [r3, #4]
 801e09e:	609d      	str	r5, [r3, #8]
 801e0a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801e0a4:	60d3      	str	r3, [r2, #12]
 801e0a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e0aa:	6110      	str	r0, [r2, #16]
 801e0ac:	6153      	str	r3, [r2, #20]
 801e0ae:	e78e      	b.n	801dfce <__kernel_rem_pio2+0x596>
 801e0b0:	41700000 	.word	0x41700000
 801e0b4:	3e700000 	.word	0x3e700000

0801e0b8 <__kernel_sin>:
 801e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0bc:	ec55 4b10 	vmov	r4, r5, d0
 801e0c0:	b085      	sub	sp, #20
 801e0c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e0c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801e0ca:	ed8d 1b00 	vstr	d1, [sp]
 801e0ce:	9002      	str	r0, [sp, #8]
 801e0d0:	da06      	bge.n	801e0e0 <__kernel_sin+0x28>
 801e0d2:	ee10 0a10 	vmov	r0, s0
 801e0d6:	4629      	mov	r1, r5
 801e0d8:	f7e2 fd3e 	bl	8000b58 <__aeabi_d2iz>
 801e0dc:	2800      	cmp	r0, #0
 801e0de:	d051      	beq.n	801e184 <__kernel_sin+0xcc>
 801e0e0:	4622      	mov	r2, r4
 801e0e2:	462b      	mov	r3, r5
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	4629      	mov	r1, r5
 801e0e8:	f7e2 fa86 	bl	80005f8 <__aeabi_dmul>
 801e0ec:	4682      	mov	sl, r0
 801e0ee:	468b      	mov	fp, r1
 801e0f0:	4602      	mov	r2, r0
 801e0f2:	460b      	mov	r3, r1
 801e0f4:	4620      	mov	r0, r4
 801e0f6:	4629      	mov	r1, r5
 801e0f8:	f7e2 fa7e 	bl	80005f8 <__aeabi_dmul>
 801e0fc:	a341      	add	r3, pc, #260	; (adr r3, 801e204 <__kernel_sin+0x14c>)
 801e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e102:	4680      	mov	r8, r0
 801e104:	4689      	mov	r9, r1
 801e106:	4650      	mov	r0, sl
 801e108:	4659      	mov	r1, fp
 801e10a:	f7e2 fa75 	bl	80005f8 <__aeabi_dmul>
 801e10e:	a33f      	add	r3, pc, #252	; (adr r3, 801e20c <__kernel_sin+0x154>)
 801e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e114:	f7e2 f8b8 	bl	8000288 <__aeabi_dsub>
 801e118:	4652      	mov	r2, sl
 801e11a:	465b      	mov	r3, fp
 801e11c:	f7e2 fa6c 	bl	80005f8 <__aeabi_dmul>
 801e120:	a33c      	add	r3, pc, #240	; (adr r3, 801e214 <__kernel_sin+0x15c>)
 801e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e126:	f7e2 f8b1 	bl	800028c <__adddf3>
 801e12a:	4652      	mov	r2, sl
 801e12c:	465b      	mov	r3, fp
 801e12e:	f7e2 fa63 	bl	80005f8 <__aeabi_dmul>
 801e132:	a33a      	add	r3, pc, #232	; (adr r3, 801e21c <__kernel_sin+0x164>)
 801e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e138:	f7e2 f8a6 	bl	8000288 <__aeabi_dsub>
 801e13c:	4652      	mov	r2, sl
 801e13e:	465b      	mov	r3, fp
 801e140:	f7e2 fa5a 	bl	80005f8 <__aeabi_dmul>
 801e144:	a337      	add	r3, pc, #220	; (adr r3, 801e224 <__kernel_sin+0x16c>)
 801e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e14a:	f7e2 f89f 	bl	800028c <__adddf3>
 801e14e:	9b02      	ldr	r3, [sp, #8]
 801e150:	4606      	mov	r6, r0
 801e152:	460f      	mov	r7, r1
 801e154:	b9db      	cbnz	r3, 801e18e <__kernel_sin+0xd6>
 801e156:	4602      	mov	r2, r0
 801e158:	460b      	mov	r3, r1
 801e15a:	4650      	mov	r0, sl
 801e15c:	4659      	mov	r1, fp
 801e15e:	f7e2 fa4b 	bl	80005f8 <__aeabi_dmul>
 801e162:	a325      	add	r3, pc, #148	; (adr r3, 801e1f8 <__kernel_sin+0x140>)
 801e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e168:	f7e2 f88e 	bl	8000288 <__aeabi_dsub>
 801e16c:	4642      	mov	r2, r8
 801e16e:	464b      	mov	r3, r9
 801e170:	f7e2 fa42 	bl	80005f8 <__aeabi_dmul>
 801e174:	4602      	mov	r2, r0
 801e176:	460b      	mov	r3, r1
 801e178:	4620      	mov	r0, r4
 801e17a:	4629      	mov	r1, r5
 801e17c:	f7e2 f886 	bl	800028c <__adddf3>
 801e180:	4604      	mov	r4, r0
 801e182:	460d      	mov	r5, r1
 801e184:	ec45 4b10 	vmov	d0, r4, r5
 801e188:	b005      	add	sp, #20
 801e18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e18e:	2200      	movs	r2, #0
 801e190:	4b1b      	ldr	r3, [pc, #108]	; (801e200 <__kernel_sin+0x148>)
 801e192:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e196:	f7e2 fa2f 	bl	80005f8 <__aeabi_dmul>
 801e19a:	4632      	mov	r2, r6
 801e19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e1a0:	463b      	mov	r3, r7
 801e1a2:	4640      	mov	r0, r8
 801e1a4:	4649      	mov	r1, r9
 801e1a6:	f7e2 fa27 	bl	80005f8 <__aeabi_dmul>
 801e1aa:	4602      	mov	r2, r0
 801e1ac:	460b      	mov	r3, r1
 801e1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e1b2:	f7e2 f869 	bl	8000288 <__aeabi_dsub>
 801e1b6:	4652      	mov	r2, sl
 801e1b8:	465b      	mov	r3, fp
 801e1ba:	f7e2 fa1d 	bl	80005f8 <__aeabi_dmul>
 801e1be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e1c2:	f7e2 f861 	bl	8000288 <__aeabi_dsub>
 801e1c6:	a30c      	add	r3, pc, #48	; (adr r3, 801e1f8 <__kernel_sin+0x140>)
 801e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1cc:	4606      	mov	r6, r0
 801e1ce:	460f      	mov	r7, r1
 801e1d0:	4640      	mov	r0, r8
 801e1d2:	4649      	mov	r1, r9
 801e1d4:	f7e2 fa10 	bl	80005f8 <__aeabi_dmul>
 801e1d8:	4602      	mov	r2, r0
 801e1da:	460b      	mov	r3, r1
 801e1dc:	4630      	mov	r0, r6
 801e1de:	4639      	mov	r1, r7
 801e1e0:	f7e2 f854 	bl	800028c <__adddf3>
 801e1e4:	4602      	mov	r2, r0
 801e1e6:	460b      	mov	r3, r1
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	4629      	mov	r1, r5
 801e1ec:	f7e2 f84c 	bl	8000288 <__aeabi_dsub>
 801e1f0:	e7c6      	b.n	801e180 <__kernel_sin+0xc8>
 801e1f2:	bf00      	nop
 801e1f4:	f3af 8000 	nop.w
 801e1f8:	55555549 	.word	0x55555549
 801e1fc:	3fc55555 	.word	0x3fc55555
 801e200:	3fe00000 	.word	0x3fe00000
 801e204:	5acfd57c 	.word	0x5acfd57c
 801e208:	3de5d93a 	.word	0x3de5d93a
 801e20c:	8a2b9ceb 	.word	0x8a2b9ceb
 801e210:	3e5ae5e6 	.word	0x3e5ae5e6
 801e214:	57b1fe7d 	.word	0x57b1fe7d
 801e218:	3ec71de3 	.word	0x3ec71de3
 801e21c:	19c161d5 	.word	0x19c161d5
 801e220:	3f2a01a0 	.word	0x3f2a01a0
 801e224:	1110f8a6 	.word	0x1110f8a6
 801e228:	3f811111 	.word	0x3f811111
 801e22c:	00000000 	.word	0x00000000

0801e230 <__kernel_tan>:
 801e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e234:	ec5b ab10 	vmov	sl, fp, d0
 801e238:	4bbf      	ldr	r3, [pc, #764]	; (801e538 <__kernel_tan+0x308>)
 801e23a:	b089      	sub	sp, #36	; 0x24
 801e23c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801e240:	429f      	cmp	r7, r3
 801e242:	ec59 8b11 	vmov	r8, r9, d1
 801e246:	4606      	mov	r6, r0
 801e248:	f8cd b008 	str.w	fp, [sp, #8]
 801e24c:	dc22      	bgt.n	801e294 <__kernel_tan+0x64>
 801e24e:	ee10 0a10 	vmov	r0, s0
 801e252:	4659      	mov	r1, fp
 801e254:	f7e2 fc80 	bl	8000b58 <__aeabi_d2iz>
 801e258:	2800      	cmp	r0, #0
 801e25a:	d145      	bne.n	801e2e8 <__kernel_tan+0xb8>
 801e25c:	1c73      	adds	r3, r6, #1
 801e25e:	4652      	mov	r2, sl
 801e260:	4313      	orrs	r3, r2
 801e262:	433b      	orrs	r3, r7
 801e264:	d110      	bne.n	801e288 <__kernel_tan+0x58>
 801e266:	ec4b ab10 	vmov	d0, sl, fp
 801e26a:	f7fe f85d 	bl	801c328 <fabs>
 801e26e:	49b3      	ldr	r1, [pc, #716]	; (801e53c <__kernel_tan+0x30c>)
 801e270:	ec53 2b10 	vmov	r2, r3, d0
 801e274:	2000      	movs	r0, #0
 801e276:	f7e2 fae9 	bl	800084c <__aeabi_ddiv>
 801e27a:	4682      	mov	sl, r0
 801e27c:	468b      	mov	fp, r1
 801e27e:	ec4b ab10 	vmov	d0, sl, fp
 801e282:	b009      	add	sp, #36	; 0x24
 801e284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e288:	2e01      	cmp	r6, #1
 801e28a:	d0f8      	beq.n	801e27e <__kernel_tan+0x4e>
 801e28c:	465b      	mov	r3, fp
 801e28e:	2000      	movs	r0, #0
 801e290:	49ab      	ldr	r1, [pc, #684]	; (801e540 <__kernel_tan+0x310>)
 801e292:	e7f0      	b.n	801e276 <__kernel_tan+0x46>
 801e294:	4bab      	ldr	r3, [pc, #684]	; (801e544 <__kernel_tan+0x314>)
 801e296:	429f      	cmp	r7, r3
 801e298:	dd26      	ble.n	801e2e8 <__kernel_tan+0xb8>
 801e29a:	9b02      	ldr	r3, [sp, #8]
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	da09      	bge.n	801e2b4 <__kernel_tan+0x84>
 801e2a0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e2a4:	469b      	mov	fp, r3
 801e2a6:	ee10 aa10 	vmov	sl, s0
 801e2aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e2ae:	ee11 8a10 	vmov	r8, s2
 801e2b2:	4699      	mov	r9, r3
 801e2b4:	4652      	mov	r2, sl
 801e2b6:	465b      	mov	r3, fp
 801e2b8:	a181      	add	r1, pc, #516	; (adr r1, 801e4c0 <__kernel_tan+0x290>)
 801e2ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2be:	f7e1 ffe3 	bl	8000288 <__aeabi_dsub>
 801e2c2:	4642      	mov	r2, r8
 801e2c4:	464b      	mov	r3, r9
 801e2c6:	4604      	mov	r4, r0
 801e2c8:	460d      	mov	r5, r1
 801e2ca:	a17f      	add	r1, pc, #508	; (adr r1, 801e4c8 <__kernel_tan+0x298>)
 801e2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e2d0:	f7e1 ffda 	bl	8000288 <__aeabi_dsub>
 801e2d4:	4622      	mov	r2, r4
 801e2d6:	462b      	mov	r3, r5
 801e2d8:	f7e1 ffd8 	bl	800028c <__adddf3>
 801e2dc:	f04f 0800 	mov.w	r8, #0
 801e2e0:	4682      	mov	sl, r0
 801e2e2:	468b      	mov	fp, r1
 801e2e4:	f04f 0900 	mov.w	r9, #0
 801e2e8:	4652      	mov	r2, sl
 801e2ea:	465b      	mov	r3, fp
 801e2ec:	4650      	mov	r0, sl
 801e2ee:	4659      	mov	r1, fp
 801e2f0:	f7e2 f982 	bl	80005f8 <__aeabi_dmul>
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	460b      	mov	r3, r1
 801e2f8:	e9cd 0100 	strd	r0, r1, [sp]
 801e2fc:	f7e2 f97c 	bl	80005f8 <__aeabi_dmul>
 801e300:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e304:	4604      	mov	r4, r0
 801e306:	460d      	mov	r5, r1
 801e308:	4650      	mov	r0, sl
 801e30a:	4659      	mov	r1, fp
 801e30c:	f7e2 f974 	bl	80005f8 <__aeabi_dmul>
 801e310:	a36f      	add	r3, pc, #444	; (adr r3, 801e4d0 <__kernel_tan+0x2a0>)
 801e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e31a:	4620      	mov	r0, r4
 801e31c:	4629      	mov	r1, r5
 801e31e:	f7e2 f96b 	bl	80005f8 <__aeabi_dmul>
 801e322:	a36d      	add	r3, pc, #436	; (adr r3, 801e4d8 <__kernel_tan+0x2a8>)
 801e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e328:	f7e1 ffb0 	bl	800028c <__adddf3>
 801e32c:	4622      	mov	r2, r4
 801e32e:	462b      	mov	r3, r5
 801e330:	f7e2 f962 	bl	80005f8 <__aeabi_dmul>
 801e334:	a36a      	add	r3, pc, #424	; (adr r3, 801e4e0 <__kernel_tan+0x2b0>)
 801e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e33a:	f7e1 ffa7 	bl	800028c <__adddf3>
 801e33e:	4622      	mov	r2, r4
 801e340:	462b      	mov	r3, r5
 801e342:	f7e2 f959 	bl	80005f8 <__aeabi_dmul>
 801e346:	a368      	add	r3, pc, #416	; (adr r3, 801e4e8 <__kernel_tan+0x2b8>)
 801e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e34c:	f7e1 ff9e 	bl	800028c <__adddf3>
 801e350:	4622      	mov	r2, r4
 801e352:	462b      	mov	r3, r5
 801e354:	f7e2 f950 	bl	80005f8 <__aeabi_dmul>
 801e358:	a365      	add	r3, pc, #404	; (adr r3, 801e4f0 <__kernel_tan+0x2c0>)
 801e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e35e:	f7e1 ff95 	bl	800028c <__adddf3>
 801e362:	4622      	mov	r2, r4
 801e364:	462b      	mov	r3, r5
 801e366:	f7e2 f947 	bl	80005f8 <__aeabi_dmul>
 801e36a:	a363      	add	r3, pc, #396	; (adr r3, 801e4f8 <__kernel_tan+0x2c8>)
 801e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e370:	f7e1 ff8c 	bl	800028c <__adddf3>
 801e374:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e378:	f7e2 f93e 	bl	80005f8 <__aeabi_dmul>
 801e37c:	a360      	add	r3, pc, #384	; (adr r3, 801e500 <__kernel_tan+0x2d0>)
 801e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e382:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e386:	4620      	mov	r0, r4
 801e388:	4629      	mov	r1, r5
 801e38a:	f7e2 f935 	bl	80005f8 <__aeabi_dmul>
 801e38e:	a35e      	add	r3, pc, #376	; (adr r3, 801e508 <__kernel_tan+0x2d8>)
 801e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e394:	f7e1 ff7a 	bl	800028c <__adddf3>
 801e398:	4622      	mov	r2, r4
 801e39a:	462b      	mov	r3, r5
 801e39c:	f7e2 f92c 	bl	80005f8 <__aeabi_dmul>
 801e3a0:	a35b      	add	r3, pc, #364	; (adr r3, 801e510 <__kernel_tan+0x2e0>)
 801e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3a6:	f7e1 ff71 	bl	800028c <__adddf3>
 801e3aa:	4622      	mov	r2, r4
 801e3ac:	462b      	mov	r3, r5
 801e3ae:	f7e2 f923 	bl	80005f8 <__aeabi_dmul>
 801e3b2:	a359      	add	r3, pc, #356	; (adr r3, 801e518 <__kernel_tan+0x2e8>)
 801e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3b8:	f7e1 ff68 	bl	800028c <__adddf3>
 801e3bc:	4622      	mov	r2, r4
 801e3be:	462b      	mov	r3, r5
 801e3c0:	f7e2 f91a 	bl	80005f8 <__aeabi_dmul>
 801e3c4:	a356      	add	r3, pc, #344	; (adr r3, 801e520 <__kernel_tan+0x2f0>)
 801e3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3ca:	f7e1 ff5f 	bl	800028c <__adddf3>
 801e3ce:	4622      	mov	r2, r4
 801e3d0:	462b      	mov	r3, r5
 801e3d2:	f7e2 f911 	bl	80005f8 <__aeabi_dmul>
 801e3d6:	a354      	add	r3, pc, #336	; (adr r3, 801e528 <__kernel_tan+0x2f8>)
 801e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3dc:	f7e1 ff56 	bl	800028c <__adddf3>
 801e3e0:	4602      	mov	r2, r0
 801e3e2:	460b      	mov	r3, r1
 801e3e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e3e8:	f7e1 ff50 	bl	800028c <__adddf3>
 801e3ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e3f0:	f7e2 f902 	bl	80005f8 <__aeabi_dmul>
 801e3f4:	4642      	mov	r2, r8
 801e3f6:	464b      	mov	r3, r9
 801e3f8:	f7e1 ff48 	bl	800028c <__adddf3>
 801e3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e400:	f7e2 f8fa 	bl	80005f8 <__aeabi_dmul>
 801e404:	4642      	mov	r2, r8
 801e406:	464b      	mov	r3, r9
 801e408:	f7e1 ff40 	bl	800028c <__adddf3>
 801e40c:	a348      	add	r3, pc, #288	; (adr r3, 801e530 <__kernel_tan+0x300>)
 801e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e412:	4604      	mov	r4, r0
 801e414:	460d      	mov	r5, r1
 801e416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e41a:	f7e2 f8ed 	bl	80005f8 <__aeabi_dmul>
 801e41e:	4622      	mov	r2, r4
 801e420:	462b      	mov	r3, r5
 801e422:	f7e1 ff33 	bl	800028c <__adddf3>
 801e426:	e9cd 0100 	strd	r0, r1, [sp]
 801e42a:	460b      	mov	r3, r1
 801e42c:	4602      	mov	r2, r0
 801e42e:	4659      	mov	r1, fp
 801e430:	4650      	mov	r0, sl
 801e432:	f7e1 ff2b 	bl	800028c <__adddf3>
 801e436:	4b43      	ldr	r3, [pc, #268]	; (801e544 <__kernel_tan+0x314>)
 801e438:	429f      	cmp	r7, r3
 801e43a:	4604      	mov	r4, r0
 801e43c:	460d      	mov	r5, r1
 801e43e:	f340 8083 	ble.w	801e548 <__kernel_tan+0x318>
 801e442:	4630      	mov	r0, r6
 801e444:	f7e2 f86e 	bl	8000524 <__aeabi_i2d>
 801e448:	4622      	mov	r2, r4
 801e44a:	4680      	mov	r8, r0
 801e44c:	4689      	mov	r9, r1
 801e44e:	462b      	mov	r3, r5
 801e450:	4620      	mov	r0, r4
 801e452:	4629      	mov	r1, r5
 801e454:	f7e2 f8d0 	bl	80005f8 <__aeabi_dmul>
 801e458:	4642      	mov	r2, r8
 801e45a:	4606      	mov	r6, r0
 801e45c:	460f      	mov	r7, r1
 801e45e:	464b      	mov	r3, r9
 801e460:	4620      	mov	r0, r4
 801e462:	4629      	mov	r1, r5
 801e464:	f7e1 ff12 	bl	800028c <__adddf3>
 801e468:	4602      	mov	r2, r0
 801e46a:	460b      	mov	r3, r1
 801e46c:	4630      	mov	r0, r6
 801e46e:	4639      	mov	r1, r7
 801e470:	f7e2 f9ec 	bl	800084c <__aeabi_ddiv>
 801e474:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e478:	f7e1 ff06 	bl	8000288 <__aeabi_dsub>
 801e47c:	4602      	mov	r2, r0
 801e47e:	460b      	mov	r3, r1
 801e480:	4650      	mov	r0, sl
 801e482:	4659      	mov	r1, fp
 801e484:	f7e1 ff00 	bl	8000288 <__aeabi_dsub>
 801e488:	4602      	mov	r2, r0
 801e48a:	460b      	mov	r3, r1
 801e48c:	f7e1 fefe 	bl	800028c <__adddf3>
 801e490:	4602      	mov	r2, r0
 801e492:	460b      	mov	r3, r1
 801e494:	4640      	mov	r0, r8
 801e496:	4649      	mov	r1, r9
 801e498:	f7e1 fef6 	bl	8000288 <__aeabi_dsub>
 801e49c:	9b02      	ldr	r3, [sp, #8]
 801e49e:	4604      	mov	r4, r0
 801e4a0:	1798      	asrs	r0, r3, #30
 801e4a2:	f000 0002 	and.w	r0, r0, #2
 801e4a6:	f1c0 0001 	rsb	r0, r0, #1
 801e4aa:	460d      	mov	r5, r1
 801e4ac:	f7e2 f83a 	bl	8000524 <__aeabi_i2d>
 801e4b0:	4602      	mov	r2, r0
 801e4b2:	460b      	mov	r3, r1
 801e4b4:	4620      	mov	r0, r4
 801e4b6:	4629      	mov	r1, r5
 801e4b8:	f7e2 f89e 	bl	80005f8 <__aeabi_dmul>
 801e4bc:	e6dd      	b.n	801e27a <__kernel_tan+0x4a>
 801e4be:	bf00      	nop
 801e4c0:	54442d18 	.word	0x54442d18
 801e4c4:	3fe921fb 	.word	0x3fe921fb
 801e4c8:	33145c07 	.word	0x33145c07
 801e4cc:	3c81a626 	.word	0x3c81a626
 801e4d0:	74bf7ad4 	.word	0x74bf7ad4
 801e4d4:	3efb2a70 	.word	0x3efb2a70
 801e4d8:	32f0a7e9 	.word	0x32f0a7e9
 801e4dc:	3f12b80f 	.word	0x3f12b80f
 801e4e0:	1a8d1068 	.word	0x1a8d1068
 801e4e4:	3f3026f7 	.word	0x3f3026f7
 801e4e8:	fee08315 	.word	0xfee08315
 801e4ec:	3f57dbc8 	.word	0x3f57dbc8
 801e4f0:	e96e8493 	.word	0xe96e8493
 801e4f4:	3f8226e3 	.word	0x3f8226e3
 801e4f8:	1bb341fe 	.word	0x1bb341fe
 801e4fc:	3faba1ba 	.word	0x3faba1ba
 801e500:	db605373 	.word	0xdb605373
 801e504:	bef375cb 	.word	0xbef375cb
 801e508:	a03792a6 	.word	0xa03792a6
 801e50c:	3f147e88 	.word	0x3f147e88
 801e510:	f2f26501 	.word	0xf2f26501
 801e514:	3f4344d8 	.word	0x3f4344d8
 801e518:	c9560328 	.word	0xc9560328
 801e51c:	3f6d6d22 	.word	0x3f6d6d22
 801e520:	8406d637 	.word	0x8406d637
 801e524:	3f9664f4 	.word	0x3f9664f4
 801e528:	1110fe7a 	.word	0x1110fe7a
 801e52c:	3fc11111 	.word	0x3fc11111
 801e530:	55555563 	.word	0x55555563
 801e534:	3fd55555 	.word	0x3fd55555
 801e538:	3e2fffff 	.word	0x3e2fffff
 801e53c:	3ff00000 	.word	0x3ff00000
 801e540:	bff00000 	.word	0xbff00000
 801e544:	3fe59427 	.word	0x3fe59427
 801e548:	2e01      	cmp	r6, #1
 801e54a:	d036      	beq.n	801e5ba <__kernel_tan+0x38a>
 801e54c:	460f      	mov	r7, r1
 801e54e:	4602      	mov	r2, r0
 801e550:	460b      	mov	r3, r1
 801e552:	2000      	movs	r0, #0
 801e554:	491a      	ldr	r1, [pc, #104]	; (801e5c0 <__kernel_tan+0x390>)
 801e556:	f7e2 f979 	bl	800084c <__aeabi_ddiv>
 801e55a:	2600      	movs	r6, #0
 801e55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e560:	4652      	mov	r2, sl
 801e562:	465b      	mov	r3, fp
 801e564:	4630      	mov	r0, r6
 801e566:	4639      	mov	r1, r7
 801e568:	f7e1 fe8e 	bl	8000288 <__aeabi_dsub>
 801e56c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e570:	4602      	mov	r2, r0
 801e572:	460b      	mov	r3, r1
 801e574:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e578:	f7e1 fe86 	bl	8000288 <__aeabi_dsub>
 801e57c:	4632      	mov	r2, r6
 801e57e:	462b      	mov	r3, r5
 801e580:	f7e2 f83a 	bl	80005f8 <__aeabi_dmul>
 801e584:	4632      	mov	r2, r6
 801e586:	4682      	mov	sl, r0
 801e588:	468b      	mov	fp, r1
 801e58a:	462b      	mov	r3, r5
 801e58c:	4630      	mov	r0, r6
 801e58e:	4639      	mov	r1, r7
 801e590:	f7e2 f832 	bl	80005f8 <__aeabi_dmul>
 801e594:	2200      	movs	r2, #0
 801e596:	4b0b      	ldr	r3, [pc, #44]	; (801e5c4 <__kernel_tan+0x394>)
 801e598:	f7e1 fe78 	bl	800028c <__adddf3>
 801e59c:	4602      	mov	r2, r0
 801e59e:	460b      	mov	r3, r1
 801e5a0:	4650      	mov	r0, sl
 801e5a2:	4659      	mov	r1, fp
 801e5a4:	f7e1 fe72 	bl	800028c <__adddf3>
 801e5a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5ac:	f7e2 f824 	bl	80005f8 <__aeabi_dmul>
 801e5b0:	4632      	mov	r2, r6
 801e5b2:	462b      	mov	r3, r5
 801e5b4:	f7e1 fe6a 	bl	800028c <__adddf3>
 801e5b8:	e65f      	b.n	801e27a <__kernel_tan+0x4a>
 801e5ba:	4682      	mov	sl, r0
 801e5bc:	468b      	mov	fp, r1
 801e5be:	e65e      	b.n	801e27e <__kernel_tan+0x4e>
 801e5c0:	bff00000 	.word	0xbff00000
 801e5c4:	3ff00000 	.word	0x3ff00000

0801e5c8 <floor>:
 801e5c8:	ec51 0b10 	vmov	r0, r1, d0
 801e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e5d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e5d8:	2e13      	cmp	r6, #19
 801e5da:	460c      	mov	r4, r1
 801e5dc:	ee10 5a10 	vmov	r5, s0
 801e5e0:	4680      	mov	r8, r0
 801e5e2:	dc34      	bgt.n	801e64e <floor+0x86>
 801e5e4:	2e00      	cmp	r6, #0
 801e5e6:	da16      	bge.n	801e616 <floor+0x4e>
 801e5e8:	a335      	add	r3, pc, #212	; (adr r3, 801e6c0 <floor+0xf8>)
 801e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5ee:	f7e1 fe4d 	bl	800028c <__adddf3>
 801e5f2:	2200      	movs	r2, #0
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	f7e2 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 801e5fa:	b148      	cbz	r0, 801e610 <floor+0x48>
 801e5fc:	2c00      	cmp	r4, #0
 801e5fe:	da59      	bge.n	801e6b4 <floor+0xec>
 801e600:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e604:	4a30      	ldr	r2, [pc, #192]	; (801e6c8 <floor+0x100>)
 801e606:	432b      	orrs	r3, r5
 801e608:	2500      	movs	r5, #0
 801e60a:	42ab      	cmp	r3, r5
 801e60c:	bf18      	it	ne
 801e60e:	4614      	movne	r4, r2
 801e610:	4621      	mov	r1, r4
 801e612:	4628      	mov	r0, r5
 801e614:	e025      	b.n	801e662 <floor+0x9a>
 801e616:	4f2d      	ldr	r7, [pc, #180]	; (801e6cc <floor+0x104>)
 801e618:	4137      	asrs	r7, r6
 801e61a:	ea01 0307 	and.w	r3, r1, r7
 801e61e:	4303      	orrs	r3, r0
 801e620:	d01f      	beq.n	801e662 <floor+0x9a>
 801e622:	a327      	add	r3, pc, #156	; (adr r3, 801e6c0 <floor+0xf8>)
 801e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e628:	f7e1 fe30 	bl	800028c <__adddf3>
 801e62c:	2200      	movs	r2, #0
 801e62e:	2300      	movs	r3, #0
 801e630:	f7e2 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 801e634:	2800      	cmp	r0, #0
 801e636:	d0eb      	beq.n	801e610 <floor+0x48>
 801e638:	2c00      	cmp	r4, #0
 801e63a:	bfbe      	ittt	lt
 801e63c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e640:	fa43 f606 	asrlt.w	r6, r3, r6
 801e644:	19a4      	addlt	r4, r4, r6
 801e646:	ea24 0407 	bic.w	r4, r4, r7
 801e64a:	2500      	movs	r5, #0
 801e64c:	e7e0      	b.n	801e610 <floor+0x48>
 801e64e:	2e33      	cmp	r6, #51	; 0x33
 801e650:	dd0b      	ble.n	801e66a <floor+0xa2>
 801e652:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e656:	d104      	bne.n	801e662 <floor+0x9a>
 801e658:	ee10 2a10 	vmov	r2, s0
 801e65c:	460b      	mov	r3, r1
 801e65e:	f7e1 fe15 	bl	800028c <__adddf3>
 801e662:	ec41 0b10 	vmov	d0, r0, r1
 801e666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e66a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e66e:	f04f 33ff 	mov.w	r3, #4294967295
 801e672:	fa23 f707 	lsr.w	r7, r3, r7
 801e676:	4207      	tst	r7, r0
 801e678:	d0f3      	beq.n	801e662 <floor+0x9a>
 801e67a:	a311      	add	r3, pc, #68	; (adr r3, 801e6c0 <floor+0xf8>)
 801e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e680:	f7e1 fe04 	bl	800028c <__adddf3>
 801e684:	2200      	movs	r2, #0
 801e686:	2300      	movs	r3, #0
 801e688:	f7e2 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 801e68c:	2800      	cmp	r0, #0
 801e68e:	d0bf      	beq.n	801e610 <floor+0x48>
 801e690:	2c00      	cmp	r4, #0
 801e692:	da02      	bge.n	801e69a <floor+0xd2>
 801e694:	2e14      	cmp	r6, #20
 801e696:	d103      	bne.n	801e6a0 <floor+0xd8>
 801e698:	3401      	adds	r4, #1
 801e69a:	ea25 0507 	bic.w	r5, r5, r7
 801e69e:	e7b7      	b.n	801e610 <floor+0x48>
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e6a6:	fa03 f606 	lsl.w	r6, r3, r6
 801e6aa:	4435      	add	r5, r6
 801e6ac:	4545      	cmp	r5, r8
 801e6ae:	bf38      	it	cc
 801e6b0:	18e4      	addcc	r4, r4, r3
 801e6b2:	e7f2      	b.n	801e69a <floor+0xd2>
 801e6b4:	2500      	movs	r5, #0
 801e6b6:	462c      	mov	r4, r5
 801e6b8:	e7aa      	b.n	801e610 <floor+0x48>
 801e6ba:	bf00      	nop
 801e6bc:	f3af 8000 	nop.w
 801e6c0:	8800759c 	.word	0x8800759c
 801e6c4:	7e37e43c 	.word	0x7e37e43c
 801e6c8:	bff00000 	.word	0xbff00000
 801e6cc:	000fffff 	.word	0x000fffff

0801e6d0 <matherr>:
 801e6d0:	2000      	movs	r0, #0
 801e6d2:	4770      	bx	lr
 801e6d4:	0000      	movs	r0, r0
	...

0801e6d8 <nan>:
 801e6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e6e0 <nan+0x8>
 801e6dc:	4770      	bx	lr
 801e6de:	bf00      	nop
 801e6e0:	00000000 	.word	0x00000000
 801e6e4:	7ff80000 	.word	0x7ff80000

0801e6e8 <scalbn>:
 801e6e8:	b570      	push	{r4, r5, r6, lr}
 801e6ea:	ec55 4b10 	vmov	r4, r5, d0
 801e6ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801e6f2:	4606      	mov	r6, r0
 801e6f4:	462b      	mov	r3, r5
 801e6f6:	b9aa      	cbnz	r2, 801e724 <scalbn+0x3c>
 801e6f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e6fc:	4323      	orrs	r3, r4
 801e6fe:	d03b      	beq.n	801e778 <scalbn+0x90>
 801e700:	4b31      	ldr	r3, [pc, #196]	; (801e7c8 <scalbn+0xe0>)
 801e702:	4629      	mov	r1, r5
 801e704:	2200      	movs	r2, #0
 801e706:	ee10 0a10 	vmov	r0, s0
 801e70a:	f7e1 ff75 	bl	80005f8 <__aeabi_dmul>
 801e70e:	4b2f      	ldr	r3, [pc, #188]	; (801e7cc <scalbn+0xe4>)
 801e710:	429e      	cmp	r6, r3
 801e712:	4604      	mov	r4, r0
 801e714:	460d      	mov	r5, r1
 801e716:	da12      	bge.n	801e73e <scalbn+0x56>
 801e718:	a327      	add	r3, pc, #156	; (adr r3, 801e7b8 <scalbn+0xd0>)
 801e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e71e:	f7e1 ff6b 	bl	80005f8 <__aeabi_dmul>
 801e722:	e009      	b.n	801e738 <scalbn+0x50>
 801e724:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801e728:	428a      	cmp	r2, r1
 801e72a:	d10c      	bne.n	801e746 <scalbn+0x5e>
 801e72c:	ee10 2a10 	vmov	r2, s0
 801e730:	4620      	mov	r0, r4
 801e732:	4629      	mov	r1, r5
 801e734:	f7e1 fdaa 	bl	800028c <__adddf3>
 801e738:	4604      	mov	r4, r0
 801e73a:	460d      	mov	r5, r1
 801e73c:	e01c      	b.n	801e778 <scalbn+0x90>
 801e73e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e742:	460b      	mov	r3, r1
 801e744:	3a36      	subs	r2, #54	; 0x36
 801e746:	4432      	add	r2, r6
 801e748:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801e74c:	428a      	cmp	r2, r1
 801e74e:	dd0b      	ble.n	801e768 <scalbn+0x80>
 801e750:	ec45 4b11 	vmov	d1, r4, r5
 801e754:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801e7c0 <scalbn+0xd8>
 801e758:	f000 f83c 	bl	801e7d4 <copysign>
 801e75c:	a318      	add	r3, pc, #96	; (adr r3, 801e7c0 <scalbn+0xd8>)
 801e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e762:	ec51 0b10 	vmov	r0, r1, d0
 801e766:	e7da      	b.n	801e71e <scalbn+0x36>
 801e768:	2a00      	cmp	r2, #0
 801e76a:	dd08      	ble.n	801e77e <scalbn+0x96>
 801e76c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e770:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e774:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e778:	ec45 4b10 	vmov	d0, r4, r5
 801e77c:	bd70      	pop	{r4, r5, r6, pc}
 801e77e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801e782:	da0d      	bge.n	801e7a0 <scalbn+0xb8>
 801e784:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e788:	429e      	cmp	r6, r3
 801e78a:	ec45 4b11 	vmov	d1, r4, r5
 801e78e:	dce1      	bgt.n	801e754 <scalbn+0x6c>
 801e790:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801e7b8 <scalbn+0xd0>
 801e794:	f000 f81e 	bl	801e7d4 <copysign>
 801e798:	a307      	add	r3, pc, #28	; (adr r3, 801e7b8 <scalbn+0xd0>)
 801e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e79e:	e7e0      	b.n	801e762 <scalbn+0x7a>
 801e7a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e7a4:	3236      	adds	r2, #54	; 0x36
 801e7a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e7aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	4629      	mov	r1, r5
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	4b06      	ldr	r3, [pc, #24]	; (801e7d0 <scalbn+0xe8>)
 801e7b6:	e7b2      	b.n	801e71e <scalbn+0x36>
 801e7b8:	c2f8f359 	.word	0xc2f8f359
 801e7bc:	01a56e1f 	.word	0x01a56e1f
 801e7c0:	8800759c 	.word	0x8800759c
 801e7c4:	7e37e43c 	.word	0x7e37e43c
 801e7c8:	43500000 	.word	0x43500000
 801e7cc:	ffff3cb0 	.word	0xffff3cb0
 801e7d0:	3c900000 	.word	0x3c900000

0801e7d4 <copysign>:
 801e7d4:	ec51 0b10 	vmov	r0, r1, d0
 801e7d8:	ee11 0a90 	vmov	r0, s3
 801e7dc:	ee10 2a10 	vmov	r2, s0
 801e7e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801e7e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801e7e8:	ea41 0300 	orr.w	r3, r1, r0
 801e7ec:	ec43 2b10 	vmov	d0, r2, r3
 801e7f0:	4770      	bx	lr
	...

0801e7f4 <_init>:
 801e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7f6:	bf00      	nop
 801e7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e7fa:	bc08      	pop	{r3}
 801e7fc:	469e      	mov	lr, r3
 801e7fe:	4770      	bx	lr

0801e800 <_fini>:
 801e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e802:	bf00      	nop
 801e804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e806:	bc08      	pop	{r3}
 801e808:	469e      	mov	lr, r3
 801e80a:	4770      	bx	lr
